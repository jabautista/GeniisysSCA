DROP PROCEDURE CPI.GICLS032_GENERATE_ADVISE_PROC;

CREATE OR REPLACE PROCEDURE CPI.gicls032_generate_advise_proc (
   p_claim_id                  gicl_claims.claim_id%TYPE,
   p_net_amt                   gicl_advice.net_amt%TYPE,
   p_paid_amt                  gicl_advice.paid_amt%TYPE,
   p_advise_amt                gicl_advice.advise_amt%TYPE,
   p_net_fcurr_amt             gicl_advice.net_fcurr_amt%TYPE,
   p_paid_fcurr_amt            gicl_advice.paid_fcurr_amt%TYPE,
   p_adv_fcurr_amt             gicl_advice.adv_fcurr_amt%TYPE,
   p_currency_cd               gicl_advice.currency_cd%TYPE,
   p_convert_rate              gicl_advice.convert_rate%TYPE,
   p_orig_curr_cd              gicl_advice.orig_curr_cd%TYPE,
   p_orig_curr_rate            gicl_advice.orig_curr_rate%TYPE,
   p_remarks                   gicl_advice.remarks%TYPE,
   p_payee_remarks             gicl_advice.payee_remarks%TYPE,
   p_selected_clm_loss         VARCHAR2,
   p_message             OUT   VARCHAR2
)
IS
/**
  * Created by: Andrew Robes
  * Date created: 03.28.2012
  * Referenced by : (GICLS032 - Generate Advice)
  * Description : Converted procedure from gicls032 - generate_advise_proc
  */

   -- 09/29/1998, Generate Advise Process
   v_advice_id           gicl_advice.advice_id%TYPE;
   v_line_cd             giis_line.line_cd%TYPE;
   v_ctr                 NUMBER;
   v_clm_loss_id         VARCHAR2 (5);
   v_selected_clm_loss   VARCHAR2 (1000);
   v_in_hou_adj          gicl_claims.in_hou_adj%TYPE;
   v_variables           gicl_advice_pkg.gicls032_variables;
BEGIN
   SELECT line_cd
     INTO v_line_cd
     FROM gicl_claims
    WHERE claim_id = p_claim_id;

   gicls032_initialize (p_claim_id, v_variables);
   v_selected_clm_loss := p_selected_clm_loss;
   gicls032_process_advise_hdr (p_claim_id,
                                v_advice_id,
                                p_net_amt,
                                p_paid_amt,
                                p_advise_amt,
                                p_net_fcurr_amt,
                                p_paid_fcurr_amt,
                                p_adv_fcurr_amt,
                                p_currency_cd,
                                p_convert_rate,
                                p_orig_curr_cd,
                                p_orig_curr_rate,
                                p_remarks,
                                p_payee_remarks
                               );

   FOR i IN (SELECT clm_loss_id
               FROM gicl_clm_loss_exp
              WHERE claim_id = p_claim_id AND advice_id IS NULL)
   LOOP
      v_clm_loss_id := '#' || i.clm_loss_id || '#';

      IF INSTR (v_selected_clm_loss, v_clm_loss_id) != 0
      THEN
         gicl_clm_loss_exp_pkg.update_clm_loss_exp_advice_id (v_advice_id, p_claim_id, REPLACE (v_clm_loss_id, '#'));

         SELECT LTRIM (RTRIM (REPLACE (v_selected_clm_loss, v_clm_loss_id), ','), ',')
           INTO v_selected_clm_loss
           FROM DUAL;
      END IF;
   END LOOP;

-- hardy 03/26/03
-- populate table gicl_advice_overide everytime an advice
-- had been generated by a user <> claim's in-hou-adjuster
   SELECT in_hou_adj
     INTO v_in_hou_adj
     FROM gicl_claims
    WHERE claim_id = p_claim_id;

   IF NVL (giis_users_pkg.app_user, USER) != v_in_hou_adj
   THEN
      INSERT INTO gicl_advice_override
                  (claim_id, advice_id, override_user, user_id, last_update
                  )
           VALUES (p_claim_id, v_advice_id, v_in_hou_adj, NVL (giis_users_pkg.app_user, USER), SYSDATE
                  );
   END IF;

-- generate temporary accounting entries
   FOR a IN (SELECT DISTINCT payee_cd, payee_class_cd
                        FROM gicl_clm_loss_exp
                       WHERE claim_id = p_claim_id AND advice_id = v_advice_id)
   LOOP
      gicls032_aeg_parameters (p_claim_id, v_advice_id, v_line_cd, a.payee_class_cd, a.payee_cd, v_variables);
      gicls032_generate_batch (p_claim_id, v_advice_id, v_line_cd, v_variables);
   END LOOP;

-- update the sl code of accounting entries pertaining to taxes
   gicls032_update_sl_cd (p_claim_id, v_advice_id);
-- check existence of treaty or facultative distribution
   v_selected_clm_loss := p_selected_clm_loss;

   FOR i IN (SELECT clm_loss_id
               FROM gicl_loss_exp_ds
              WHERE claim_id = p_claim_id AND share_type IN (2, 3))
   LOOP
      v_clm_loss_id := '#' || i.clm_loss_id || '#';

      IF INSTR (v_selected_clm_loss, v_clm_loss_id) != 0
      THEN
         v_ctr := v_ctr + 1;

         SELECT LTRIM (RTRIM (REPLACE (v_selected_clm_loss, v_clm_loss_id), ','), ',')
           INTO v_selected_clm_loss
           FROM DUAL;
      END IF;
   END LOOP;

   IF v_ctr >= 1
   THEN
      p_message := 'Advice has now been generated. Please generate and print Final Loss Advice.';
   ELSE
      p_message := 'Advice has now been generated.';
   END IF;
END;
/


