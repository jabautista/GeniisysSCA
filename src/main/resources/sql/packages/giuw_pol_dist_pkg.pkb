CREATE OR REPLACE PACKAGE BODY CPI.giuw_pol_dist_pkg
AS
   /*
   **  Created by  : Mark JM
   **  Date Created  : 02.18.2010
   **  Reference By  : (GIPIS010 - Item Information)
   **  Description  : Contains the Insert / Update / Delete procedure of the table
   */
   PROCEDURE del_giuw_pol_dist (p_dist_no giuw_pol_dist.dist_no%TYPE)
   IS
   BEGIN
     /*added by steven 2.1.2013; Deletion of Distribution tables */
        DELETE giuw_perilds_dtl
              WHERE dist_no = p_dist_no;
        DELETE giuw_perilds
              WHERE dist_no = p_dist_no;
        DELETE giuw_itemperilds_dtl
              WHERE dist_no = p_dist_no;
        DELETE giuw_itemperilds
              WHERE dist_no = p_dist_no;
        DELETE giuw_itemds_dtl
              WHERE dist_no = p_dist_no;
        DELETE giuw_itemds
              WHERE dist_no = p_dist_no;
        DELETE giuw_policyds_dtl
              WHERE dist_no = p_dist_no;
        DELETE giuw_policyds
              WHERE dist_no = p_dist_no;
         DELETE giuw_pol_dist
              WHERE dist_no = p_dist_no;
   END del_giuw_pol_dist;

   -- Determine the tsi, annual tsi, and the premium of the items for that par
   PROCEDURE get_tsi (p_par_id NUMBER)
   IS
      p_detect        VARCHAR2 (1)                  := 'N';
      p_dist_no       giuw_pol_dist.dist_no%TYPE;
      v_tsi_amt       gipi_witem.tsi_amt%TYPE;
      v_prem_amt      gipi_witem.prem_amt%TYPE;
      v_ann_tsi_amt   gipi_witem.ann_tsi_amt%TYPE;

      CURSOR b
      IS
         SELECT pol_dist_dist_no_s.NEXTVAL
           FROM SYS.DUAL;
   BEGIN
      FOR a IN (SELECT SUM (tsi_amt * NVL (currency_rt, 1)) tsi,
                       SUM (prem_amt * NVL (currency_rt, 1)) prem,
                       SUM (ann_tsi_amt * NVL (currency_rt, 1)) ann_tsi
                  FROM gipi_witem
                 WHERE par_id = p_par_id)
      LOOP
         v_tsi_amt := a.tsi;
         v_prem_amt := a.prem;
         v_ann_tsi_amt := a.ann_tsi;
         EXIT;
      END LOOP;

      IF (   (v_tsi_amt IS NULL)
          OR (v_ann_tsi_amt IS NULL)
          OR (v_prem_amt IS NULL)
         )
      THEN
         raise_application_error
                             (-20001,
                              'The tsi, premium, or annual tsi has no value.'
                             );
      END IF;

      FOR a IN (SELECT dist_no
                  FROM giuw_pol_dist
                 WHERE par_id = p_par_id)
      LOOP
         FOR b IN (SELECT        dist_no, dist_seq_no
                            FROM giuw_policyds
                           WHERE dist_no = a.dist_no
                   FOR UPDATE OF dist_no, dist_seq_no)
         LOOP
            --RAISE_APPLICATION_ERROR(-20001,'Posted distribution record exists,
            --cannot proceed.');
            FOR c IN (SELECT frps_yy, frps_seq_no
                        FROM giri_distfrps
                       WHERE dist_no = b.dist_no
                         AND dist_seq_no = b.dist_seq_no)
            LOOP
               DELETE      giri_frps_peril_grp
                     WHERE frps_yy = c.frps_yy
                           AND frps_seq_no = c.frps_seq_no;
            END LOOP;

            DELETE      giri_distfrps
                  WHERE dist_no = b.dist_no AND dist_seq_no = b.dist_seq_no;

            DELETE      giuw_itemperilds_dtl
                  WHERE dist_no = a.dist_no;

            DELETE      giuw_perilds_dtl
                  WHERE dist_no = a.dist_no;

            DELETE      giuw_itemds_dtl
                  WHERE dist_no = a.dist_no;

            DELETE      giuw_policyds_dtl
                  WHERE dist_no = a.dist_no;

            DELETE      giuw_perilds
                  WHERE dist_no = a.dist_no;

            DELETE      giuw_itemperilds
                  WHERE dist_no = a.dist_no;

            DELETE      giuw_itemds
                  WHERE dist_no = a.dist_no;

            DELETE      giuw_policyds
                  WHERE dist_no = a.dist_no;
         END LOOP;

         delete_dist (a.dist_no, p_par_id);
         p_detect := 'Y';
         EXIT;
      END LOOP;

      IF p_detect = 'N'
      THEN
         FOR a IN (SELECT eff_date, expiry_date, endt_type
                     FROM gipi_wpolbas
                    WHERE par_id = p_par_id)
         LOOP
            IF ((a.eff_date IS NULL) OR (a.expiry_date IS NULL))
            THEN
               raise_application_error
                               (-20003,
                                'Effectivity or expiry has not been updated.'
                               );
            END IF;

            OPEN b;

            FETCH b
             INTO p_dist_no;

            IF b%NOTFOUND
            THEN
               raise_application_error (-20004, 'No row in table DUAL.');
            END IF;

            CLOSE b;

            INSERT INTO giuw_pol_dist
                        (dist_no, par_id, policy_id, endt_type,
                         tsi_amt, prem_amt,
                         ann_tsi_amt, dist_flag, redist_flag, eff_date,
                         expiry_date, create_date, user_id, last_upd_date
                        )
                 VALUES (p_dist_no, p_par_id, NULL, a.endt_type,
                         NVL (v_tsi_amt, 0), NVL (v_prem_amt, 0),
                         NVL (v_ann_tsi_amt, 0), 1, 1, a.eff_date,
                         a.expiry_date, SYSDATE, USER, SYSDATE
                        );
         END LOOP;
      END IF;
   END;

   -- Delete the distribution records with the same distribution number
   PROCEDURE delete_dist (p_dist_no NUMBER, p_par_id NUMBER)
   IS
      v_ann_tsi_amt   gipi_witem.ann_tsi_amt%TYPE;
      v_prem_amt      gipi_witem.prem_amt%TYPE;
      v_tsi_amt       gipi_witem.tsi_amt%TYPE;
   BEGIN
      DELETE      giuw_wperilds_dtl
            WHERE dist_no = p_dist_no;

      DELETE      giuw_witemds_dtl
            WHERE dist_no = p_dist_no;

      DELETE      giuw_wpolicyds_dtl
            WHERE dist_no = p_dist_no;

      DELETE      giuw_wperilds
            WHERE dist_no = p_dist_no;

      DELETE      giuw_witemperilds_dtl
            WHERE dist_no = p_dist_no;

      DELETE      giuw_witemperilds
            WHERE dist_no = p_dist_no;

      DELETE      giuw_witemds
            WHERE dist_no = p_dist_no;

      DELETE      giri_wdistfrps
            WHERE dist_no = p_dist_no;

      DELETE      giuw_wpolicyds
            WHERE dist_no = p_dist_no;

      UPDATE giuw_pol_dist
         SET tsi_amt = NVL (v_tsi_amt, 0),
             prem_amt = NVL (v_prem_amt, 0),
             ann_tsi_amt = NVL (v_ann_tsi_amt, 0),
             last_upd_date = SYSDATE,
             user_id = USER
       WHERE par_id = p_par_id AND dist_no = p_dist_no;
   END;

   FUNCTION get_dist_no (p_par_id giuw_pol_dist.par_id%TYPE)
      RETURN NUMBER
   IS
      v_dist_no   giuw_pol_dist.dist_no%TYPE   := 0;
   BEGIN
      FOR a1 IN (SELECT dist_no
                   FROM giuw_pol_dist
                  WHERE par_id = p_par_id)
      LOOP
         v_dist_no := a1.dist_no;
         EXIT;
      END LOOP;

      RETURN v_dist_no;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         RETURN 0;
   END get_dist_no;

   /*
   **  Created by   :  Jerome Orio
   **  Date Created :  03.10.2011
   **  Reference By : (GIUWS004 - Preliminary One-Risk Distribution)
   **  Description  : Gets giuw_pol_dist details of specified par id
   */
   FUNCTION get_giuw_pol_dist (p_par_id giuw_pol_dist.par_id%TYPE)
      RETURN giuw_pol_dist_tab PIPELINED
   IS
      v_list   giuw_pol_dist_type;
   BEGIN
      FOR i IN (SELECT   a.dist_no, a.par_id, a.dist_flag, a.redist_flag,
                         a.eff_date, a.expiry_date, a.create_date,
                         a.post_flag, a.policy_id, a.endt_type, a.tsi_amt,
                         a.prem_amt, a.ann_tsi_amt, a.dist_type,
                         a.item_posted_sw, a.ex_loss_sw, a.negate_date,
                         a.acct_ent_date, a.acct_neg_date, a.batch_id,
                         a.user_id, a.last_upd_date, a.cpi_rec_no,
                         a.cpi_branch_cd, a.auto_dist, a.old_dist_no,
                         a.post_date, a.iss_cd, a.prem_seq_no,
                         a.takeup_seq_no, a.item_grp, a.arc_ext_data,
                         b.multi_booking_yy, b.multi_booking_mm
                    FROM giuw_pol_dist a, gipi_winvoice b
                   WHERE a.par_id = p_par_id
                     AND a.par_id = b.par_id(+)
                     AND a.item_grp = b.item_grp(+)
                     AND a.takeup_seq_no = b.takeup_seq_no(+)
                ORDER BY dist_no)
      LOOP
         v_list.dist_no := i.dist_no;
         v_list.par_id := i.par_id;
         v_list.dist_flag := i.dist_flag;
         v_list.redist_flag := i.redist_flag;
         v_list.eff_date := i.eff_date;
         v_list.expiry_date := i.expiry_date;
         v_list.create_date := i.create_date;
         v_list.post_flag := i.post_flag;
         v_list.policy_id := i.policy_id;
         v_list.endt_type := i.endt_type;
         v_list.tsi_amt := i.tsi_amt;
         v_list.prem_amt := i.prem_amt;
         v_list.ann_tsi_amt := i.ann_tsi_amt;
         v_list.dist_type := i.dist_type;
         v_list.item_posted_sw := i.item_posted_sw;
         v_list.ex_loss_sw := i.ex_loss_sw;
         v_list.negate_date := i.negate_date;
         v_list.acct_ent_date := i.acct_ent_date;
         v_list.acct_neg_date := i.acct_neg_date;
         v_list.batch_id := i.batch_id;
         v_list.user_id := i.user_id;
         v_list.last_upd_date := i.last_upd_date;
         v_list.cpi_rec_no := i.cpi_rec_no;
         v_list.cpi_branch_cd := i.cpi_branch_cd;
         v_list.auto_dist := i.auto_dist;
         v_list.old_dist_no := i.old_dist_no;
         v_list.post_date := i.post_date;
         v_list.iss_cd := i.iss_cd;
         v_list.prem_seq_no := i.prem_seq_no;
         v_list.takeup_seq_no := i.takeup_seq_no;
         v_list.item_grp := i.item_grp;
         v_list.arc_ext_data := i.arc_ext_data;
         v_list.multi_booking_mm := i.multi_booking_mm;
         v_list.multi_booking_yy := i.multi_booking_yy;
         cg_ref_codes_pkg.cgdv$chk_char_ref_codes (i.dist_flag,
                                                   v_list.mean_dist_flag,
                                                   'GIUW_POL_DIST.DIST_FLAG'
                                                  );
         v_list.var_share := 'N';

         FOR v IN (SELECT share_type
                     FROM giis_dist_share
                    WHERE share_type = 3
                      AND (share_cd, line_cd) IN (SELECT share_cd, line_cd
                                                    FROM giuw_wpolicyds_dtl
                                                   WHERE dist_no = i.dist_no))
         LOOP
            IF v.share_type = '3'
            THEN
               v_list.var_share := 'Y';
               EXIT;
            END IF;
         END LOOP;

         v_list.dist_post_flag := '';

         FOR c1 IN (SELECT c.post_flag
                      FROM giuw_wpolicyds_dtl a,
                           giuw_wpolicyds b,
                           giuw_pol_dist c
                     WHERE a.dist_seq_no = b.dist_seq_no
                       AND a.dist_no = b.dist_no
                       AND b.dist_no = c.dist_no
                       AND (a.dist_prem != 0 OR a.dist_tsi != 0)
                       AND a.share_cd = '999'
                       AND b.dist_flag = '2'
                       AND c.dist_no = i.dist_no)
         LOOP
            v_list.dist_post_flag := c1.post_flag;
            EXIT;
         END LOOP;

         SELECT giuw_wpolicyds_dtl_pkg.get_giuw_wpolicyds_dtl_exist (i.dist_no)
           INTO v_list.giuw_wpolicyds_dtl_exist
           FROM DUAL;

         SELECT giuw_wpolicyds_pkg.get_giuw_wpolicyds_exist (i.dist_no)
           INTO v_list.giuw_wpolicyds_exist
           FROM DUAL;

         v_list.reverse_date     := ''; 
         v_list.reverse_sw       := ''; 
         FOR c2 IN (SELECT A.reverse_date, b.reverse_sw
                      FROM giri_binder a, giri_frps_ri b, giri_distfrps c
                     WHERE a.policy_id = p_par_id 
                       AND c.dist_no = v_list.dist_no
                       AND a.fnl_binder_id = b.fnl_binder_id
                       AND b.line_cd = c.line_cd 
                       AND b.frps_yy = c.frps_yy 
                       AND b.frps_seq_no = c.frps_seq_no)
         LOOP
           v_list.reverse_date     := c2.reverse_date; 
           v_list.reverse_sw       := c2.reverse_sw; 
           EXIT;
         END LOOP;  

         PIPE ROW (v_list);
      END LOOP;

      RETURN;
   END;

   /*
   **  Created by   :  Jerome Orio
   **  Date Created :  03.10.2011
   **  Reference By : (GIUWS004 - Preliminary One-Risk Distribution)
   **  Description  : Gets giuw_pol_dist details of specified par id  number
   */
   FUNCTION get_giuw_pol_dist (
      p_par_id    giuw_pol_dist.par_id%TYPE,
      p_dist_no   giuw_pol_dist.dist_no%TYPE
   )
      RETURN giuw_pol_dist_tab PIPELINED
   IS
      v_list   giuw_pol_dist_type;
   BEGIN
      FOR i IN (SELECT   a.dist_no, a.par_id, a.dist_flag, a.redist_flag,
                         a.eff_date, a.expiry_date, a.create_date,
                         a.post_flag, a.policy_id, a.endt_type, a.tsi_amt,
                         a.prem_amt, a.ann_tsi_amt, a.dist_type,
                         a.item_posted_sw, a.ex_loss_sw, a.negate_date,
                         a.acct_ent_date, a.acct_neg_date, a.batch_id,
                         a.user_id, a.last_upd_date, a.cpi_rec_no,
                         a.cpi_branch_cd, a.auto_dist, a.old_dist_no,
                         a.post_date, a.iss_cd, a.prem_seq_no,
                         a.takeup_seq_no, a.item_grp, a.arc_ext_data,
                         b.multi_booking_yy, b.multi_booking_mm
                    FROM giuw_pol_dist a, gipi_winvoice b
                   WHERE a.par_id = p_par_id
                     AND a.dist_no = p_dist_no
                     AND a.par_id = b.par_id(+)
                     AND a.item_grp = b.item_grp(+)
                     AND a.takeup_seq_no = b.takeup_seq_no(+)
                ORDER BY dist_no)
      LOOP
         v_list.dist_no := i.dist_no;
         v_list.par_id := i.par_id;
         v_list.dist_flag := i.dist_flag;
         v_list.redist_flag := i.redist_flag;
         v_list.eff_date := i.eff_date;
         v_list.expiry_date := i.expiry_date;
         v_list.create_date := i.create_date;
         v_list.post_flag := i.post_flag;
         v_list.policy_id := i.policy_id;
         v_list.endt_type := i.endt_type;
         v_list.tsi_amt := i.tsi_amt;
         v_list.prem_amt := i.prem_amt;
         v_list.ann_tsi_amt := i.ann_tsi_amt;
         v_list.dist_type := i.dist_type;
         v_list.item_posted_sw := i.item_posted_sw;
         v_list.ex_loss_sw := i.ex_loss_sw;
         v_list.negate_date := i.negate_date;
         v_list.acct_ent_date := i.acct_ent_date;
         v_list.acct_neg_date := i.acct_neg_date;
         v_list.batch_id := i.batch_id;
         v_list.user_id := i.user_id;
         v_list.last_upd_date := i.last_upd_date;
         v_list.cpi_rec_no := i.cpi_rec_no;
         v_list.cpi_branch_cd := i.cpi_branch_cd;
         v_list.auto_dist := i.auto_dist;
         v_list.old_dist_no := i.old_dist_no;
         v_list.post_date := i.post_date;
         v_list.iss_cd := i.iss_cd;
         v_list.prem_seq_no := i.prem_seq_no;
         v_list.takeup_seq_no := i.takeup_seq_no;
         v_list.item_grp := i.item_grp;
         v_list.arc_ext_data := i.arc_ext_data;
         v_list.multi_booking_mm := i.multi_booking_mm;
         v_list.multi_booking_yy := i.multi_booking_yy;
         cg_ref_codes_pkg.cgdv$chk_char_ref_codes (i.dist_flag,
                                                   v_list.mean_dist_flag,
                                                   'GIUW_POL_DIST.DIST_FLAG'
                                                  );
         v_list.var_share := 'N';

         FOR v IN (SELECT share_type
                     FROM giis_dist_share
                    WHERE share_type = 3
                      AND (share_cd, line_cd) IN (SELECT share_cd, line_cd
                                                    FROM giuw_wpolicyds_dtl
                                                   WHERE dist_no = i.dist_no))
         LOOP
            IF v.share_type = '3'
            THEN
               v_list.var_share := 'Y';
               EXIT;
            END IF;
         END LOOP;

         v_list.dist_post_flag := '';

         FOR c1 IN (SELECT c.post_flag
                      FROM giuw_wpolicyds_dtl a,
                           giuw_wpolicyds b,
                           giuw_pol_dist c
                     WHERE a.dist_seq_no = b.dist_seq_no
                       AND a.dist_no = b.dist_no
                       AND b.dist_no = c.dist_no
                       AND (a.dist_prem != 0 OR a.dist_tsi != 0)
                       AND a.share_cd = '999'
                       AND b.dist_flag = '2'
                       AND c.dist_no = i.dist_no)
         LOOP
            v_list.dist_post_flag := c1.post_flag;
            EXIT;
         END LOOP;

         SELECT giuw_wpolicyds_dtl_pkg.get_giuw_wpolicyds_dtl_exist (i.dist_no)
           INTO v_list.giuw_wpolicyds_dtl_exist
           FROM DUAL;

         v_list.reverse_date     := ''; 
         v_list.reverse_sw       := ''; 
         FOR c2 IN (SELECT A.reverse_date, b.reverse_sw
                      FROM giri_binder a, giri_frps_ri b, giri_distfrps c
                     WHERE a.policy_id = p_par_id 
                       AND c.dist_no = v_list.dist_no
                       AND a.fnl_binder_id = b.fnl_binder_id
                       AND b.line_cd = c.line_cd 
                       AND b.frps_yy = c.frps_yy 
                       AND b.frps_seq_no = c.frps_seq_no)
         LOOP
           v_list.reverse_date     := c2.reverse_date; 
           v_list.reverse_sw       := c2.reverse_sw; 
           EXIT;
         END LOOP; 

         PIPE ROW (v_list);
      END LOOP;

      RETURN;
   END;

   /*
   **  Created by        : Mark JM
   **  Date Created     : 03.25.2011
   **  Reference By     : (GIPIS095 - Package Policy Items)
   **  Description     : Delete the distribution records with the same distribution number
   **                    : and update certain amounts in giuw_pol_dist
   */
   PROCEDURE delete_dist1 (
      p_par_id        IN   giuw_pol_dist.par_id%TYPE,
      p_dist_no       IN   giuw_pol_dist.dist_no%TYPE,
      p_tsi_amt       IN   giuw_pol_dist.tsi_amt%TYPE,
      p_prem_amt      IN   giuw_pol_dist.prem_amt%TYPE,
      p_ann_tsi_amt   IN   giuw_pol_dist.ann_tsi_amt%TYPE
   )
   IS
   BEGIN
      giuw_wperilds_dtl_pkg.del_giuw_wperilds_dtl (p_dist_no);
      giuw_witemds_dtl_pkg.del_giuw_witemds_dtl (p_dist_no);
      giuw_wpolicyds_dtl_pkg.del_giuw_wpolicyds_dtl (p_dist_no);
      giuw_wperilds_pkg.del_giuw_wperilds (p_dist_no);
      giuw_witemds_pkg.del_giuw_witemds (p_dist_no);
      giuw_wpolicyds_pkg.del_giuw_wpolicyds (p_dist_no);

      UPDATE giuw_pol_dist
         SET tsi_amt = NVL (p_tsi_amt, 0),
             prem_amt = NVL (p_prem_amt, 0),
             ann_tsi_amt = NVL (p_ann_tsi_amt, 0),
             last_upd_date = SYSDATE,
             user_id = NVL (giis_users_pkg.app_user, USER)
       WHERE par_id = p_par_id AND dist_no = p_dist_no;
   END delete_dist1;

   /*
   **  Created by   :  Jerome Orio
   **  Date Created :  03.28.2011
   **  Reference By : (GIUWS004 - Preliminary One-Risk Distribution)
   **  Description  : COMPARE_GIPI_ITEM_ITMPERIL program unit
   **                 Compares the tsi, premium and annualized amounts
   **                 from the gipi_witem tables against the corresponding
   **                 amounts from the gipi_witmperl table
   */
   PROCEDURE compare_gipi_item_itmperil (
      p_par_id              IN       gipi_wpolbas.par_id%TYPE,
      p_nbt_pack_pol_flag   IN       gipi_wpolbas.pack_pol_flag%TYPE,
      p_line_cd             IN       gipi_wpolbas.line_cd%TYPE,
      p_msg_alert           OUT      VARCHAR2
   )
   IS
      v_tsi_amt        NUMBER (16, 2);
      v_prem_amt       NUMBER (12, 2);
      v_ann_tsi_amt    NUMBER (16, 2);
      v2_tsi_amt       NUMBER (16, 2);
      v2_prem_amt      NUMBER (12, 2);
      v2_ann_tsi_amt   NUMBER (16, 2);
      v3_tsi_amt       NUMBER (16, 2);
      v3_prem_amt      NUMBER (12, 2);
      v3_ann_tsi_amt   NUMBER (16, 2);
      v4_tsi_amt       NUMBER (16, 2);
      v4_prem_amt      NUMBER (12, 2);
      v4_ann_tsi_amt   NUMBER (16, 2);
      v_exist          VARCHAR2 (1)   := 'N';
   BEGIN
      --MESSAGE('Comparing amounts in witem and witemperl tables.', NO_ACKNOWLEDGE);
      IF p_nbt_pack_pol_flag = 'N'
      THEN
         BEGIN
            SELECT SUM (tsi_amt), SUM (prem_amt), SUM (ann_tsi_amt)
              INTO v_tsi_amt, v_prem_amt, v_ann_tsi_amt
              FROM gipi_witem
             WHERE par_id = p_par_id;

            SELECT SUM (prem_amt)
              INTO v2_prem_amt
              FROM gipi_witmperl
             WHERE par_id = p_par_id;

            SELECT SUM (a.tsi_amt), SUM (a.ann_tsi_amt)
              INTO v2_tsi_amt, v2_ann_tsi_amt
              FROM gipi_witmperl a
             WHERE EXISTS (
                      SELECT 1
                        FROM giis_peril b
                       WHERE b.peril_type = 'B'
                         AND b.peril_cd = a.peril_cd
                         AND b.line_cd = p_line_cd)
               AND par_id = p_par_id;

            IF v_tsi_amt <> v2_tsi_amt
            THEN
               p_msg_alert :=
                  'The total sum insured in gipi_item and gipi_itmperil does not tally. Please call your database administrator.';
               RETURN;
            ELSIF v_prem_amt <> v2_prem_amt
            THEN
               p_msg_alert :=
                  'The premium amounts in gipi_item and gipi_itmperil does not tally. Please call your database administrator.';
               RETURN;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               p_msg_alert :=
                     'There are no records retrieved from gipi_item and gipi_itmperil for policy_id '
                  || TO_CHAR (p_par_id)
                  || '. Please call your database administrator.';
               RETURN;
            WHEN OTHERS
            THEN
               p_msg_alert := 'Other exceptions';
               RETURN;
         --CGTE$OTHER_EXCEPTIONS;
         --CLEAR_MESSAGE;
         END;
      ELSE
         BEGIN
            v_exist := 'N';

            FOR c1 IN (SELECT   SUM (tsi_amt) tsi_amt,
                                SUM (prem_amt) prem_amt,
                                SUM (ann_tsi_amt) ann_tsi_amt, pack_line_cd
                           FROM gipi_witem
                          WHERE par_id = p_par_id
                       GROUP BY pack_line_cd)
            LOOP
               v_tsi_amt := c1.tsi_amt;
               v_prem_amt := c1.prem_amt;
               v_ann_tsi_amt := c1.ann_tsi_amt;

               FOR c2 IN (SELECT SUM (a.tsi_amt) tsi_amt,
                                 SUM (a.ann_tsi_amt) ann_tsi_amt
                            FROM gipi_witmperl a, gipi_witem b
                           WHERE EXISTS (
                                    SELECT 1
                                      FROM giis_peril c
                                     WHERE c.peril_type = 'B'
                                       AND c.peril_cd = a.peril_cd
                                       AND c.line_cd = c1.pack_line_cd)
                             AND a.item_no = b.item_no
                             AND a.par_id = b.par_id
                             AND b.pack_line_cd = c1.pack_line_cd
                             AND a.par_id = p_par_id)
               LOOP
                  v_exist := 'Y';
                  v2_tsi_amt := c2.tsi_amt;
                  v2_ann_tsi_amt := c2.ann_tsi_amt;
                  EXIT;
               END LOOP;

               IF v_exist = 'N'
               THEN
                  EXIT;
               END IF;

               v3_tsi_amt := NVL (v3_tsi_amt, 0) + NVL (v_tsi_amt, 0);
               v3_prem_amt := NVL (v3_prem_amt, 0) + NVL (v_prem_amt, 0);
               v3_ann_tsi_amt := NVL (v3_ann_tsi_amt, 0) + v_ann_tsi_amt;
               v4_tsi_amt := NVL (v4_tsi_amt, 0) + v2_tsi_amt;
               v4_ann_tsi_amt := NVL (v4_ann_tsi_amt, 0) + v2_ann_tsi_amt;
            END LOOP;

            IF v_exist = 'N'
            THEN
               RAISE NO_DATA_FOUND;
            END IF;

            v_exist := 'N';

            FOR c1 IN (SELECT SUM (prem_amt) prem_amt
                         FROM gipi_witmperl
                        WHERE par_id = p_par_id)
            LOOP
               v_exist := 'Y';
               v4_prem_amt := c1.prem_amt;
               EXIT;
            END LOOP;

            IF v_exist = 'N'
            THEN
               RAISE NO_DATA_FOUND;
            END IF;

            IF v3_tsi_amt <> v4_tsi_amt
            THEN
               p_msg_alert :=
                  'The total sum insured in gipi_item and gipi_itmperil does not tally. Please call your database administrator.';
               RETURN;
            ELSIF v3_prem_amt <> v4_prem_amt
            THEN
               p_msg_alert :=
                  'The premium amounts in gipi_item and gipi_itmperil does not tally. Please call your database administrator.';
               RETURN;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               p_msg_alert :=
                     'There are no records retrieved from gipi_item and gipi_itmperil for policy_id '
                  || TO_CHAR (p_par_id)
                  || '. Please call your database administrator.';
               RETURN;
            WHEN OTHERS
            THEN
               p_msg_alert := 'Other exceptions';
               RETURN;
         --CGTE$OTHER_EXCEPTIONS;
         END;
      END IF;
   END;

   /*
   **  Created by   :  Jerome Orio
   **  Date Created :  04.25.2011
   **  Reference By : (GIUWS001 - Set - Up Groups for Distribution (Preliminary))
   **  Description  : COMPARE_GIPI_ITEM_ITMPERIL program unit
   **                 Compares the tsi, premium and annualized amounts
   **                 from the gipi_witem tables against the corresponding
   **                 amounts from the gipi_witmperl table
   */
   PROCEDURE compare_gipi_item_itmperil2 (
      p_par_id          IN       gipi_wpolbas.par_id%TYPE,
      p_pack_pol_flag   IN       gipi_wpolbas.pack_pol_flag%TYPE,
      p_line_cd         IN       gipi_wpolbas.line_cd%TYPE,
      p_msg_alert       OUT      VARCHAR2
   )
   IS
      v_tsi_amt        NUMBER (16, 2);
      v_prem_amt       NUMBER (12, 2);
      v_ann_tsi_amt    NUMBER (16, 2);
      v2_tsi_amt       NUMBER (16, 2);
      v2_prem_amt      NUMBER (12, 2);
      v2_ann_tsi_amt   NUMBER (16, 2);
      v3_tsi_amt       NUMBER (16, 2);
      v3_prem_amt      NUMBER (12, 2);
      v3_ann_tsi_amt   NUMBER (16, 2);
      v4_tsi_amt       NUMBER (16, 2);
      v4_prem_amt      NUMBER (12, 2);
      v4_ann_tsi_amt   NUMBER (16, 2);
      v_exist          VARCHAR2 (1)   := 'N';
   BEGIN
      --MESSAGE('Comparing amounts in witem and witemperl tables.', NO_ACKNOWLEDGE);
      DECLARE
         v_tsi   NUMBER;

         CURSOR c1
         IS
            SELECT tsi_amt
              FROM gipi_witem
             WHERE par_id = p_par_id AND rec_flag = 'A';
      BEGIN
         OPEN c1;

         LOOP
            FETCH c1
             INTO v_tsi;

            EXIT WHEN c1%NOTFOUND;

            IF v_tsi IS NULL
            THEN
               p_msg_alert :=
                  'You have an invalid record in GIPI_WITEM.  No tsi_amt was fetched in this table.';
               RETURN;
            END IF;
         END LOOP;

         CLOSE c1;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            p_msg_alert :=
                  'There are no records retrieved from gipi_item '
               || 'and gipi_itmperil for policy_id '
               || TO_CHAR (p_par_id)
               || '. Please call your database administrator.';
            RETURN;
      END;

      IF p_pack_pol_flag = 'N'
      THEN
         BEGIN
            SELECT SUM (tsi_amt), SUM (prem_amt), SUM (ann_tsi_amt)
              INTO v_tsi_amt, v_prem_amt, v_ann_tsi_amt
              FROM gipi_witem
             WHERE par_id = p_par_id;

            SELECT SUM (prem_amt)
              INTO v2_prem_amt
              FROM gipi_witmperl
             WHERE par_id = p_par_id;

            SELECT SUM (a.tsi_amt), SUM (a.ann_tsi_amt)
              INTO v2_tsi_amt, v2_ann_tsi_amt
              FROM gipi_witmperl a
             WHERE EXISTS (
                      SELECT 1
                        FROM giis_peril b
                       WHERE b.peril_type = 'B'
                         AND b.peril_cd = a.peril_cd
                         AND b.line_cd = p_line_cd)
               AND par_id = p_par_id;

            IF v_tsi_amt <> v2_tsi_amt
            THEN
               p_msg_alert :=
                  'The total sum insured in gipi_item and gipi_itmperil does not tally. Please call your database administrator.';
               RETURN;
            ELSIF v_prem_amt <> v2_prem_amt
            THEN
               p_msg_alert :=
                  'The premium amounts in gipi_item and gipi_itmperil does not tally. Please call your database administrator.';
               RETURN;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               p_msg_alert :=
                     'There are no records retrieved from gipi_item '
                  || 'and gipi_itmperil for policy_id '
                  || TO_CHAR (p_par_id)
                  || '. Please call your database administrator.';
               RETURN;
            WHEN OTHERS
            THEN
               p_msg_alert := 'Other exceptions';
               RETURN;
         --MESSAGE('Other exceptions', NO_ACKNOWLEDGE);
         --CGTE$OTHER_EXCEPTIONS;
         --CLEAR_MESSAGE;
         END;
      ELSE
         BEGIN
            v_exist := 'N';

            FOR c1 IN (SELECT   SUM (tsi_amt) tsi_amt,
                                SUM (prem_amt) prem_amt,
                                SUM (ann_tsi_amt) ann_tsi_amt, pack_line_cd
                           FROM gipi_witem
                          WHERE par_id = p_par_id
                       GROUP BY pack_line_cd)
            LOOP
               v_tsi_amt := c1.tsi_amt;
               v_prem_amt := c1.prem_amt;
               v_ann_tsi_amt := c1.ann_tsi_amt;

               FOR c2 IN (SELECT SUM (a.tsi_amt) tsi_amt,
                                 SUM (a.ann_tsi_amt) ann_tsi_amt
                            FROM gipi_witmperl a, gipi_witem b
                           WHERE EXISTS (
                                    SELECT 1
                                      FROM giis_peril c
                                     WHERE c.peril_type = 'B'
                                       AND c.peril_cd = a.peril_cd
                                       AND c.line_cd = c1.pack_line_cd)
                             AND a.item_no = b.item_no
                             AND a.par_id = b.par_id
                             AND b.pack_line_cd = c1.pack_line_cd
                             AND a.par_id = p_par_id)
               LOOP
                  v_exist := 'Y';
                  v2_tsi_amt := c2.tsi_amt;
                  v2_ann_tsi_amt := c2.ann_tsi_amt;
                  EXIT;
               END LOOP;

               IF v_exist = 'N'
               THEN
                  EXIT;
               END IF;

               v3_tsi_amt := NVL (v3_tsi_amt, 0) + NVL (v_tsi_amt, 0);
               v3_prem_amt := NVL (v3_prem_amt, 0) + NVL (v_prem_amt, 0);
               v3_ann_tsi_amt := NVL (v3_ann_tsi_amt, 0) + v_ann_tsi_amt;
               v4_tsi_amt := NVL (v4_tsi_amt, 0) + v2_tsi_amt;
               v4_ann_tsi_amt := NVL (v4_ann_tsi_amt, 0) + v2_ann_tsi_amt;
            END LOOP;

            IF v_exist = 'N'
            THEN
               RAISE NO_DATA_FOUND;
            END IF;

            v_exist := 'N';

            FOR c1 IN (SELECT SUM (prem_amt) prem_amt
                         FROM gipi_witmperl
                        WHERE par_id = p_par_id)
            LOOP
               v_exist := 'Y';
               v4_prem_amt := c1.prem_amt;
               EXIT;
            END LOOP;

            IF v_exist = 'N'
            THEN
               RAISE NO_DATA_FOUND;
            END IF;

            IF v3_tsi_amt <> v4_tsi_amt
            THEN
               p_msg_alert :=
                     'The total sum insured in gipi_item and gipi_itmperil does not tally.'
                  || ' Please call your database administrator.';
               RETURN;
            ELSIF v3_prem_amt <> v4_prem_amt
            THEN
               p_msg_alert :=
                     'The premium amounts in gipi_item and gipi_itmperil does not tally.'
                  || ' Please call your database administrator.';
               RETURN;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               p_msg_alert :=
                     'There are no records retrieved from gipi_item '
                  || 'and gipi_itmperil for policy_id '
                  || TO_CHAR (p_par_id)
                  || '. Please call your database administrator.';
               RETURN;
            WHEN OTHERS
            THEN
               p_msg_alert := 'Other exceptions';
               RETURN;
         --MESSAGE('Other exceptions', NO_ACKNOWLEDGE);
         --CGTE$OTHER_EXCEPTIONS;
         END;
      END IF;
   END;

   PROCEDURE adjust_amts (p_dist_no IN giuw_pol_dist.dist_no%TYPE)
   IS
   /* rollie 12sep2005
   ** to equalize values of tsi_amt, prem_amt, and ann_tsi_amt
   ** of master table and detail table
   */
   BEGIN
      FOR a IN (SELECT   dist_no, dist_seq_no, SUM (tsi_amt) tsi_amt,
                         SUM (prem_amt) prem_amt,
                         SUM (ann_tsi_amt) ann_tsi_amt
                    FROM giuw_wperilds
                   WHERE dist_no = p_dist_no
                GROUP BY dist_no, dist_seq_no)
      LOOP
         FOR b IN (SELECT   dist_no, dist_seq_no, SUM (dist_tsi) tsi_amt,
                            SUM (dist_prem) prem_amt,
                            SUM (ann_dist_tsi) ann_tsi_amt
                       FROM giuw_wperilds_dtl
                      WHERE dist_no = p_dist_no
                        AND dist_seq_no = a.dist_seq_no
                   GROUP BY dist_no, dist_seq_no)
         LOOP
            IF    a.tsi_amt <> b.tsi_amt
               OR a.prem_amt <> b.prem_amt
               OR a.ann_tsi_amt <> b.ann_tsi_amt
            THEN
               --msg_alert('peril','I',FALSE);
               UPDATE giuw_wperilds_dtl c
                  SET c.dist_tsi =
                           c.dist_tsi
                         + (  (b.tsi_amt - a.tsi_amt)
                            * SIGN (a.tsi_amt - b.tsi_amt)
                           ),
                      c.dist_prem =
                           c.dist_prem
                         + (  (b.prem_amt - a.prem_amt)
                            * SIGN (a.prem_amt - b.prem_amt)
                           ),
                      c.ann_dist_tsi =
                           c.ann_dist_tsi
                         + (  (b.ann_tsi_amt - a.ann_tsi_amt)
                            * SIGN (a.ann_tsi_amt - b.ann_tsi_amt)
                           )
                WHERE c.dist_seq_no = a.dist_seq_no
                  AND (c.peril_cd, c.share_cd) =
                         (SELECT MAX (peril_cd), MAX (share_cd)
                            FROM giuw_wperilds_dtl d
                           WHERE d.dist_no = p_dist_no
                             AND d.dist_seq_no = b.dist_seq_no)
                  AND c.dist_no = p_dist_no;
            END IF;
         END LOOP;
      END LOOP;

      FOR a IN (SELECT   dist_no, dist_seq_no, SUM (tsi_amt) tsi_amt,
                         SUM (prem_amt) prem_amt,
                         SUM (ann_tsi_amt) ann_tsi_amt
                    FROM giuw_witemds
                   WHERE dist_no = p_dist_no
                GROUP BY dist_no, dist_seq_no)
      LOOP
         FOR b IN (SELECT   dist_no, dist_seq_no, SUM (dist_tsi) tsi_amt,
                            SUM (dist_prem) prem_amt,
                            SUM (ann_dist_tsi) ann_tsi_amt
                       FROM giuw_witemds_dtl
                      WHERE dist_no = p_dist_no
                        AND dist_seq_no = a.dist_seq_no
                   GROUP BY dist_no, dist_seq_no)
         LOOP
            IF    a.tsi_amt <> b.tsi_amt
               OR a.prem_amt <> b.prem_amt
               OR a.ann_tsi_amt <> b.ann_tsi_amt
            THEN
               --msg_alert('item','I',FALSE);
               UPDATE giuw_witemds_dtl c
                  SET c.dist_tsi =
                           c.dist_tsi
                         + (  (b.tsi_amt - a.tsi_amt)
                            * SIGN (a.tsi_amt - b.tsi_amt)
                           ),
                      c.dist_prem =
                           c.dist_prem
                         + (  (b.prem_amt - a.prem_amt)
                            * SIGN (a.prem_amt - b.prem_amt)
                           ),
                      c.ann_dist_tsi =
                           c.ann_dist_tsi
                         + (  (b.ann_tsi_amt - a.ann_tsi_amt)
                            * SIGN (a.ann_tsi_amt - b.ann_tsi_amt)
                           )
                WHERE c.dist_seq_no = a.dist_seq_no
                  AND (c.item_no, c.share_cd) =
                         (SELECT MAX (item_no), MAX (share_cd)
                            FROM giuw_witemds_dtl d
                           WHERE d.dist_no = p_dist_no
                             AND d.dist_seq_no = b.dist_seq_no)
                  AND c.dist_no = p_dist_no;
            END IF;
         END LOOP;
      END LOOP;

      FOR a IN (SELECT   dist_no, dist_seq_no, SUM (tsi_amt) tsi_amt,
                         SUM (prem_amt) prem_amt,
                         SUM (ann_tsi_amt) ann_tsi_amt
                    FROM giuw_witemperilds
                   WHERE dist_no = p_dist_no
                GROUP BY dist_no, dist_seq_no)
      LOOP
         FOR b IN (SELECT   dist_no, dist_seq_no, SUM (dist_tsi) tsi_amt,
                            SUM (dist_prem) prem_amt,
                            SUM (ann_dist_tsi) ann_tsi_amt
                       FROM giuw_witemperilds_dtl
                      WHERE dist_no = p_dist_no
                        AND dist_seq_no = a.dist_seq_no
                   GROUP BY dist_no, dist_seq_no)
         LOOP
            IF    a.tsi_amt <> b.tsi_amt
               OR a.prem_amt <> b.prem_amt
               OR a.ann_tsi_amt <> b.ann_tsi_amt
            THEN
               --msg_alert('itemperil','I',FALSE);
               UPDATE giuw_witemperilds_dtl c
                  SET c.dist_tsi =
                           c.dist_tsi
                         + (  (b.tsi_amt - a.tsi_amt)
                            * SIGN (a.tsi_amt - b.tsi_amt)
                           ),
                      c.dist_prem =
                           c.dist_prem
                         + (  (b.prem_amt - a.prem_amt)
                            * SIGN (a.prem_amt - b.prem_amt)
                           ),
                      c.ann_dist_tsi =
                           c.ann_dist_tsi
                         + (  (b.ann_tsi_amt - a.ann_tsi_amt)
                            * SIGN (a.ann_tsi_amt - b.ann_tsi_amt)
                           )
                WHERE c.dist_seq_no = a.dist_seq_no
                  AND (c.item_no, c.peril_cd, c.share_cd) =
                         (SELECT MAX (item_no), MAX (peril_cd),
                                 MAX (share_cd)
                            FROM giuw_witemperilds_dtl d
                           WHERE d.dist_no = p_dist_no
                             AND d.dist_seq_no = b.dist_seq_no)
                  AND c.dist_no = p_dist_no;
            END IF;
         END LOOP;
      END LOOP;

      FOR a IN (SELECT   dist_no, dist_seq_no, SUM (tsi_amt) tsi_amt,
                         SUM (prem_amt) prem_amt,
                         SUM (ann_tsi_amt) ann_tsi_amt
                    FROM giuw_wpolicyds
                   WHERE dist_no = p_dist_no
                GROUP BY dist_no, dist_seq_no)
      LOOP
         FOR b IN (SELECT   dist_no, dist_seq_no, SUM (dist_tsi) tsi_amt,
                            SUM (dist_prem) prem_amt,
                            SUM (ann_dist_tsi) ann_tsi_amt
                       FROM giuw_wpolicyds_dtl
                      WHERE dist_no = p_dist_no
                        AND dist_seq_no = a.dist_seq_no
                   GROUP BY dist_no, dist_seq_no)
         LOOP
            IF    a.tsi_amt <> b.tsi_amt
               OR a.prem_amt <> b.prem_amt
               OR a.ann_tsi_amt <> b.ann_tsi_amt
            THEN
               --msg_alert('policy','I',FALSE);
               UPDATE giuw_wpolicyds_dtl c
                  SET c.dist_tsi =
                           c.dist_tsi
                         + (  (b.tsi_amt - a.tsi_amt)
                            * SIGN (a.tsi_amt - b.tsi_amt)
                           ),
                      c.dist_prem =
                           c.dist_prem
                         + (  (b.prem_amt - a.prem_amt)
                            * SIGN (a.prem_amt - b.prem_amt)
                           ),
                      c.ann_dist_tsi =
                           c.ann_dist_tsi
                         + (  (b.ann_tsi_amt - a.ann_tsi_amt)
                            * SIGN (a.ann_tsi_amt - b.ann_tsi_amt)
                           )
                WHERE c.dist_seq_no = a.dist_seq_no
                  AND (c.share_cd) =
                         (SELECT MAX (share_cd)
                            FROM giuw_wpolicyds_dtl d
                           WHERE d.dist_no = p_dist_no
                             AND d.dist_seq_no = b.dist_seq_no)
                  AND c.dist_no = p_dist_no;
            END IF;
         END LOOP;
      END LOOP;
   END;

   PROCEDURE update_wpolicyds (
      p_dist_no       giuw_witemperilds_dtl.dist_no%TYPE,
      p_dist_seq_no   giuw_witemperilds_dtl.dist_seq_no%TYPE
   )
   IS
   BEGIN
      --A.R.C. 05.22.2007
      -- to equalize values of tsi_amt, prem_amt, and ann_tsi_amt
      -- of giuw_witemds_dtl and giuw_wpolicyds_dtl
      FOR a IN (SELECT   'giuw_witemds_dtl', SUM (dist_tsi) tsi_amt,
                         SUM (dist_prem) prem_amt,
                         SUM (ann_dist_tsi) ann_tsi_amt, share_cd
                    FROM giuw_witemds_dtl b
                   WHERE dist_no = p_dist_no
                GROUP BY share_cd)
      LOOP
         FOR b IN (SELECT   'giuw_wpolicyds_dtl', SUM (dist_tsi) tsi_amt,
                            SUM (dist_prem) prem_amt,
                            SUM (ann_dist_tsi) ann_tsi_amt, share_cd
                       FROM giuw_wpolicyds_dtl
                      WHERE dist_no = p_dist_no AND share_cd = a.share_cd
                   GROUP BY share_cd)
         LOOP
            IF    a.tsi_amt <> b.tsi_amt
               OR a.prem_amt <> b.prem_amt
               OR a.ann_tsi_amt <> b.ann_tsi_amt
            THEN
               UPDATE giuw_wpolicyds_dtl
                  SET dist_tsi = a.tsi_amt,
                      dist_prem = a.prem_amt,
                      ann_dist_tsi = a.ann_tsi_amt
                WHERE share_cd = a.share_cd
                  AND dist_seq_no = p_dist_seq_no
                  AND dist_no = p_dist_no;
            END IF;
         END LOOP;
      END LOOP;
   END;

   /*ASI 082099  this procedure equalize amounts per share_cd
   **            in all distribution tables
   */
   PROCEDURE adjust_final (p_dist_no IN giuw_pol_dist.dist_no%TYPE)
   IS
   BEGIN
      /* equalize amount of GIUW_ITEMDS_DTL as to the amount stored in GIUW_POLICYDS_DTL */
      FOR a1 IN (SELECT   dist_seq_no, share_cd, SUM (dist_prem) prem
                     FROM giuw_wpolicyds_dtl
                    WHERE dist_no = p_dist_no
                 GROUP BY dist_seq_no, share_cd)
      LOOP
         FOR a2 IN (SELECT SUM (dist_prem) prem
                      FROM giuw_witemds_dtl
                     WHERE dist_no = p_dist_no
                       AND dist_seq_no = a1.dist_seq_no
                       AND share_cd = a1.share_cd)
         LOOP
            IF a1.prem != a2.prem
            THEN
               FOR a3 IN (SELECT MIN (item_no) item
                            FROM giuw_witemds_dtl
                           WHERE dist_no = p_dist_no
                             AND dist_seq_no = a1.dist_seq_no
                             AND share_cd = a1.share_cd)
               LOOP
                  UPDATE giuw_witemds_dtl
                     SET dist_prem = dist_prem + (a1.prem - a2.prem)
                   WHERE dist_no = p_dist_no
                     AND dist_seq_no = a1.dist_seq_no
                     AND share_cd = a1.share_cd
                     AND item_no = a3.item;

                  EXIT;
               END LOOP;
            END IF;
         END LOOP;
      END LOOP;

      /* equalize amount of GIUW_ITEMPERILDS_DTL as to the amount stored in GIUW_ITEMDS_DTL */
      FOR a1 IN (SELECT   item_no, dist_seq_no, share_cd, SUM (dist_prem)
                                                                         prem
                     FROM giuw_witemds_dtl
                    WHERE dist_no = p_dist_no
                 GROUP BY item_no, dist_seq_no, share_cd)
      LOOP
         FOR a2 IN (SELECT SUM (dist_prem) prem
                      FROM giuw_witemperilds_dtl
                     WHERE dist_no = p_dist_no
                       AND dist_seq_no = a1.dist_seq_no
                       AND share_cd = a1.share_cd
                       AND item_no = a1.item_no)
         LOOP
            IF a1.prem != a2.prem
            THEN
               FOR a3 IN (SELECT MIN (peril_cd) peril
                            FROM giuw_witemperilds_dtl
                           WHERE dist_no = p_dist_no
                             AND dist_seq_no = a1.dist_seq_no
                             AND share_cd = a1.share_cd
                             AND item_no = a1.item_no
                             AND dist_prem <> 0            --A.R.C. 09.21.2006
                                               )
               LOOP
                  UPDATE giuw_witemperilds_dtl
                     SET dist_prem = dist_prem + (a1.prem - a2.prem)
                   WHERE dist_no = p_dist_no
                     AND dist_seq_no = a1.dist_seq_no
                     AND share_cd = a1.share_cd
                     AND item_no = a1.item_no
                     AND peril_cd = a3.peril;

                  EXIT;
               END LOOP;
            END IF;
         END LOOP;
      END LOOP;

      /* equalize amount of GIUW_PERILDS_DTL as to the amount stored in GIUW_ITEMPERILDS_DTL */
      FOR a1 IN (SELECT   peril_cd, dist_seq_no, share_cd,
                          SUM (dist_prem) prem
                     FROM giuw_witemperilds_dtl
                    WHERE dist_no = p_dist_no
                 GROUP BY peril_cd, dist_seq_no, share_cd)
      LOOP
         FOR a2 IN (SELECT SUM (dist_prem) prem
                      FROM giuw_wperilds_dtl
                     WHERE dist_no = p_dist_no
                       AND dist_seq_no = a1.dist_seq_no
                       AND share_cd = a1.share_cd
                       AND peril_cd = a1.peril_cd)
         LOOP
            IF a1.prem != a2.prem
            THEN
               UPDATE giuw_wperilds_dtl
                  SET dist_prem = dist_prem + (a1.prem - a2.prem)
                WHERE dist_no = p_dist_no
                  AND dist_seq_no = a1.dist_seq_no
                  AND share_cd = a1.share_cd
                  AND peril_cd = a1.peril_cd;
            END IF;
         END LOOP;
      END LOOP;
   END;

   /*
   **  Created by  : Emman
   **  Date Created  : 06.02.2010
   **  Reference By  : (GIUWS003 - Preliminary Peril Distribution)
   **  Description  : This procedure equalize amounts per share_cd
      **                in all distribution tables
   */
   PROCEDURE adjust_final_giuws003 (p_dist_no IN giuw_pol_dist.dist_no%TYPE)
   IS
   BEGIN
      /* equalize amount of GIUW_ITEMDS_DTL as to the amount stored in GIUW_POLICYDS_DTL */
      FOR a1 IN (SELECT   dist_seq_no, share_cd, SUM (dist_prem) prem
                     FROM giuw_wpolicyds_dtl
                    WHERE dist_no = p_dist_no
                 GROUP BY dist_seq_no, share_cd)
      LOOP
         FOR a2 IN (SELECT SUM (dist_prem) prem
                      FROM giuw_witemds_dtl
                     WHERE dist_no = p_dist_no
                       AND dist_seq_no = a1.dist_seq_no
                       AND share_cd = a1.share_cd)
         LOOP
            IF a1.prem != a2.prem
            THEN
               FOR a3 IN (SELECT MIN (item_no) item
                            FROM giuw_witemds_dtl
                           WHERE dist_no = p_dist_no
                             AND dist_seq_no = a1.dist_seq_no
                             AND share_cd = a1.share_cd)
               LOOP
                  UPDATE giuw_witemds_dtl
                     SET dist_prem = dist_prem + (a1.prem - a2.prem)
                   WHERE dist_no = p_dist_no
                     AND dist_seq_no = a1.dist_seq_no
                     AND share_cd = a1.share_cd
                     AND item_no = a3.item;

                  EXIT;
               END LOOP;
            END IF;
         END LOOP;
      END LOOP;

      /* equalize amount of GIUW_ITEMPERILDS_DTL as to the amount stored in GIUW_ITEMDS_DTL */
      FOR a1 IN (SELECT   item_no, dist_seq_no, share_cd, SUM (dist_prem)
                                                                         prem
                     FROM giuw_witemds_dtl
                    WHERE dist_no = p_dist_no
                 GROUP BY item_no, dist_seq_no, share_cd)
      LOOP
         FOR a2 IN (SELECT SUM (dist_prem) prem
                      FROM giuw_witemperilds_dtl
                     WHERE dist_no = p_dist_no
                       AND dist_seq_no = a1.dist_seq_no
                       AND share_cd = a1.share_cd
                       AND item_no = a1.item_no)
         LOOP
            IF a1.prem != a2.prem
            THEN
               FOR a3 IN (SELECT MIN (peril_cd) peril
                            FROM giuw_witemperilds_dtl
                           WHERE dist_no = p_dist_no
                             AND dist_seq_no = a1.dist_seq_no
                             AND share_cd = a1.share_cd
                             AND item_no = a1.item_no)
               LOOP
                  UPDATE giuw_witemperilds_dtl
                     SET dist_prem = dist_prem + (a1.prem - a2.prem)
                   WHERE dist_no = p_dist_no
                     AND dist_seq_no = a1.dist_seq_no
                     AND share_cd = a1.share_cd
                     AND item_no = a1.item_no
                     AND peril_cd = a3.peril;

                  EXIT;
               END LOOP;
            END IF;
         END LOOP;
      END LOOP;

      /* equalize amount of GIUW_PERILDS_DTL as to the amount stored in GIUW_ITEMPERILDS_DTL */
      FOR a1 IN (SELECT   peril_cd, dist_seq_no, share_cd,
                          SUM (dist_prem) prem
                     FROM giuw_witemperilds_dtl
                    WHERE dist_no = p_dist_no
                 GROUP BY peril_cd, dist_seq_no, share_cd)
      LOOP
         FOR a2 IN (SELECT SUM (dist_prem) prem
                      FROM giuw_wperilds_dtl
                     WHERE dist_no = p_dist_no
                       AND dist_seq_no = a1.dist_seq_no
                       AND share_cd = a1.share_cd
                       AND peril_cd = a1.peril_cd)
         LOOP
            IF a1.prem != a2.prem
            THEN
               UPDATE giuw_wperilds_dtl
                  SET dist_prem = dist_prem + (a1.prem - a2.prem)
                WHERE dist_no = p_dist_no
                  AND dist_seq_no = a1.dist_seq_no
                  AND share_cd = a1.share_cd
                  AND peril_cd = a1.peril_cd;
            END IF;
         END LOOP;
      END LOOP;
   END adjust_final_giuws003;

   PROCEDURE adjust_net_ret_imperfection (
      p_dist_no   IN   giuw_pol_dist.dist_no%TYPE
   )
   IS
   BEGIN
      /* Equalize the amounts of tables GIUW_WITEMDS
      ** and GIUW_WITEMDS_DTL. */
      --adjust_item_level_amts (p_dist_no);--commented out to be replace by new adjust package edgar 05/08/2014
      /* Equalize the amounts of tables GIUW_WITEMPERILDS
      ** and GIUW_WITEMPERILDS_DTL. */
      --adjust_item_peril_level_amts (p_dist_no);--commented out to be replace by new adjust package edgar 05/08/2014
      /* Equalize the amounts of tables GIUW_WPERILDS
      ** and GIUW_WPERILDS_DTL. */
      --adjust_peril_level_amts (p_dist_no);--commented out to be replace by new adjust package edgar 05/08/2014
      /*ASI 082099 equalize the amounts of tables GIUW_WITEMDS, GIUW_WITEMPERILDS
      **           GIUW_POLICYDS_DTL, GIUW_WPERILDS
      */
     -- giuw_pol_dist_pkg.adjust_final (p_dist_no);--commented out to be replace by new adjust package edgar 05/08/2014
      NULL; --edgar 05/08/2014
   END;

   /*
   **  Created by  : Emman
   **  Date Created  : 06.02.2010
   **  Reference By  : (GIPIS010 - Item Information)
   **  Description  : Adjust computational floats to equalize the amounts
   **        attained by the master tables with that of its detail
   **        tables.
   */
   PROCEDURE adjust_net_ret_imperfection2 (
      p_dist_no   IN   giuw_pol_dist.dist_no%TYPE
   )
   IS
   BEGIN
      /* Equalize the amounts of tables GIUW_WPOLICYDS
      ** and GIUW_WPOLICYDS_DTL. */
      --giuw_pol_dist_pkg.adjust_policy_level_amts (p_dist_no);--commented out to be replace by new adjust package edgar 05/08/2014
      /* Equalize the amounts of tables GIUW_WITEMDS
      ** and GIUW_WITEMDS_DTL. */
      --giuw_pol_dist_pkg.adjust_item_level_amts (p_dist_no);--commented out to be replace by new adjust package edgar 05/08/2014
      /* Equalize the amounts of tables GIUW_WITEMPERILDS
      ** and GIUW_WITEMPERILDS_DTL. */
      --giuw_pol_dist_pkg.adjust_item_peril_level_amts (p_dist_no);--commented out to be replace by new adjust package edgar 05/08/2014
      /* ASI 082099 */
      --giuw_pol_dist_pkg.adjust_final_giuws003 (p_dist_no);--commented out to be replace by new adjust package edgar 05/08/2014
      NULL;--edgar 05/08/2014
   END adjust_net_ret_imperfection2;

   /*
   **  Created by        : Jerome Orio
   **  Date Created     : 06.09.2011
   **  Reference By     : (GIUWS006- Preliminary  Peril Distribution by TSI/Prem)
   */
   PROCEDURE adjust_net_ret_imperfection3 (
      p_dist_no   IN   giuw_pol_dist.dist_no%TYPE
   )
   IS
   BEGIN
      /* Equalize the amounts of tables GIUW_WPOLICYDS
      ** and GIUW_WPOLICYDS_DTL. */
      --giuw_pol_dist_pkg.adjust_policy_level_amts (p_dist_no);--commented out to be replace by new adjust package edgar 05/08/2014
      /* Equalize the amounts of tables GIUW_WITEMDS
      ** and GIUW_WITEMDS_DTL. */
      --giuw_pol_dist_pkg.adjust_item_level_amts (p_dist_no);--commented out to be replace by new adjust package edgar 05/08/2014
      /* Equalize the amounts of tables GIUW_WITEMPERILDS
      ** and GIUW_WITEMPERILDS_DTL. */
      --giuw_pol_dist_pkg.adjust_item_peril_level_amts (p_dist_no);--commented out to be replace by new adjust package edgar 05/08/2014
       NULL;--edgar 05/08/2014
   /* ASI 082099 */
   --ADJUST_FINAL(p_dist_no);  aaron
   END;

   /* NOTE:  default_type 1 - Use AMOUNTS to create the default distribution records
   **                     2 - Use PERCENTAGE to create the default distribution records. */
   PROCEDURE create_grp_dflt_wpolicyds (
      p_dist_no        IN       giuw_wpolicyds_dtl.dist_no%TYPE,
      p_dist_seq_no    IN       giuw_wpolicyds_dtl.dist_seq_no%TYPE,
      p_line_cd        IN       giuw_wpolicyds_dtl.line_cd%TYPE,
      p_dist_tsi       IN       giuw_wpolicyds_dtl.dist_tsi%TYPE,
      p_dist_prem      IN       giuw_wpolicyds_dtl.dist_prem%TYPE,
      p_ann_dist_tsi   IN       giuw_wpolicyds_dtl.ann_dist_tsi%TYPE,
      p_rg_count       IN OUT   NUMBER,
      p_default_type   IN       giis_default_dist.default_type%TYPE,
      p_currency_rt    IN       gipi_witem.currency_rt%TYPE,
      p_par_id         IN       gipi_parlist.par_id%TYPE,
      p_item_grp       IN       gipi_witem.item_grp%TYPE,
      p_pol_flag       IN       gipi_wpolbas.pol_flag%TYPE,
      p_par_type       IN       gipi_parlist.par_type%TYPE
      ,p_default_no      IN      giis_default_dist.default_no%TYPE --edgar 09/17/2014
   )
   IS
      --rg_id        RECORDGROUP;
      rg_name              VARCHAR2 (20)                := 'DFLT_DIST_VALUES';
      rg_col1              VARCHAR2 (40)             := rg_name || '.line_cd';
      rg_col2              VARCHAR2 (40)            := rg_name || '.share_cd';
      rg_col3              VARCHAR2 (40)           := rg_name || '.share_pct';
      rg_col4              VARCHAR2 (40)          := rg_name || '.share_amt1';
      rg_col5              VARCHAR2 (40)            := rg_name || '.peril_cd';
      rg_col6              VARCHAR2 (40)          := rg_name || '.share_amt2';
      rg_col7              VARCHAR2 (40)            := rg_name || '.true_pct';
      v_remaining_tsi      NUMBER               := p_dist_tsi * p_currency_rt;
      v_share_amt          giis_default_dist_group.share_amt1%TYPE;
      v_peril_cd           giis_default_dist_group.peril_cd%TYPE;
      v_prev_peril_cd      giis_default_dist_group.peril_cd%TYPE;
      v_dist_spct          giuw_wpolicyds_dtl.dist_spct%TYPE;
      v_dist_tsi           giuw_wpolicyds_dtl.dist_tsi%TYPE;
      v_dist_prem          giuw_wpolicyds_dtl.dist_prem%TYPE;
      v_ann_dist_tsi       giuw_wpolicyds_dtl.ann_dist_tsi%TYPE;
      v_sum_dist_tsi       giuw_wpolicyds_dtl.dist_tsi%TYPE          := 0;
      v_sum_dist_spct      giuw_wpolicyds_dtl.dist_spct%TYPE         := 0;
      v_sum_dist_prem      giuw_wpolicyds_dtl.dist_prem%TYPE         := 0;
      v_sum_ann_dist_tsi   giuw_wpolicyds_dtl.ann_dist_tsi%TYPE      := 0;
      v_share_cd           giis_dist_share.share_cd%TYPE;
      v_use_share_amt2     VARCHAR2 (1)                              := 'N';
      v_dist_spct_limit    NUMBER;
      v_exist               VARCHAR2(1) := 'N'; -- added by Gzelle 06192014

      PROCEDURE insert_to_wpolicyds_dtl
      IS
      BEGIN
         INSERT INTO giuw_wpolicyds_dtl
                     (dist_no, dist_seq_no, line_cd, share_cd,
                      dist_spct, dist_tsi, dist_prem, ann_dist_spct,
                      ann_dist_tsi, dist_grp
                     )
              VALUES (p_dist_no, p_dist_seq_no, p_line_cd, v_share_cd,
                      v_dist_spct, v_dist_tsi, v_dist_prem, v_dist_spct,
                      v_ann_dist_tsi, 1
                     );
      END;
/*added edgar 09/17/2014*/
      PROCEDURE insert_dflt_values
      IS
      BEGIN  
           /* Use AMOUNTS to create the default distribution records. */
             IF p_default_type = 1 THEN
                FOR c IN (SELECT rownum, a.line_cd    , a.share_cd , a.share_pct  , 
                                 a.share_amt1 , a.peril_cd , a.share_amt2 ,
                                 1 true_pct 
                            FROM GIIS_DEFAULT_DIST_GROUP a  
                           WHERE a.default_no = TO_CHAR(NVL(p_default_no, 0))
                             AND a.line_cd    = p_line_cd
                             AND a.share_cd   <> 999
                           ORDER BY a.sequence ASC)
                LOOP
                    v_peril_cd := c.peril_cd;
                  IF v_peril_cd IS NOT NULL THEN
                     IF NVL(v_prev_peril_cd, 0) = v_peril_cd THEN
                        NULL;
                     ELSE
                        v_use_share_amt2 := 'N';
                        FOR c1 IN (SELECT 'a'
                             FROM gipi_witmperl B490, gipi_witem B480
                            WHERE B490.peril_cd = v_peril_cd
                              AND B490.line_cd  = p_line_cd
                              AND B490.item_no  = B480.item_no
                              AND B490.par_id   = B480.par_id
                              AND B480.item_grp = p_item_grp
                              AND B480.par_id   = p_par_id)
                        LOOP
                          v_use_share_amt2 := 'Y';
                          EXIT;
                        END LOOP;
                        v_prev_peril_cd := v_peril_cd;
                     END IF;
                  END IF;
                  IF v_use_share_amt2 = 'N' THEN
                       v_share_amt  := c.share_amt1;
                  ELSE
                       v_share_amt  := c.share_amt2;
                  END IF;
                  IF v_remaining_tsi >= v_share_amt THEN
                     v_dist_tsi      := v_share_amt / p_currency_rt;
                     v_remaining_tsi := v_remaining_tsi - v_share_amt;
                  ELSE
                     v_remaining_tsi := 0;
                  END IF;
                  IF v_remaining_tsi != 0 THEN
                     v_dist_spct        := ROUND(v_dist_tsi / p_dist_tsi * 100, 9);
                     v_dist_tsi         := ROUND(p_dist_tsi     * v_dist_spct / 100, 2);
                     v_dist_prem        := ROUND(p_dist_prem    * v_dist_spct / 100, 2);
                     v_ann_dist_tsi     := ROUND(p_ann_dist_tsi * v_dist_spct / 100, 2);
                     v_sum_dist_spct    := v_sum_dist_spct    + v_dist_spct;
                     v_sum_dist_tsi     := v_sum_dist_tsi     + v_dist_tsi;
                     v_sum_dist_prem    := v_sum_dist_prem    + v_dist_prem;
                     v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
                  ELSIF v_remaining_tsi = 0 THEN
                     v_dist_spct    := 100            - v_sum_dist_spct;
                     v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
                     v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                     v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
                  END IF;
                  v_share_cd := c.share_cd;   
                  
                  INSERT_TO_WPOLICYDS_DTL;
                  
                  IF v_remaining_tsi = 0 THEN
                     EXIT;
                  END IF;
                END LOOP;
                
                IF v_remaining_tsi != 0  THEN
                   v_dist_spct    := 100            - v_sum_dist_spct;
                   v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
                   v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                   v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
                   v_share_cd     := '999';
                   p_rg_count     := p_rg_count + 1;
 
                   INSERT_TO_WPOLICYDS_DTL;
                END IF;
           
             /* Use PERCENTAGES to create the default distribution records. */
             ELSIF p_default_type = 2 THEN
                FOR c IN (SELECT rownum, a.line_cd    , a.share_cd , a.share_pct  , 
                                 a.share_amt1 , a.peril_cd , a.share_amt2 ,
                                 1 true_pct 
                            FROM GIIS_DEFAULT_DIST_GROUP a  
                           WHERE a.default_no = TO_CHAR(NVL(p_default_no, 0))
                             AND a.line_cd    = p_line_cd
                             AND a.share_cd   <> 999
                           ORDER BY a.sequence ASC)
                LOOP
                    v_dist_spct     := c.share_pct;
                    v_share_amt     := c.share_amt1;
                  IF v_share_amt IS NOT NULL THEN
                     v_dist_tsi        := v_share_amt / p_currency_rt;
                     v_dist_spct_limit := ROUND(v_dist_tsi / p_dist_tsi * 100, 9);
                     IF v_dist_spct > v_dist_spct_limit THEN 
                        v_dist_spct := v_dist_spct_limit;
                     END IF;
                  END IF;
                  v_sum_dist_spct := v_sum_dist_spct + v_dist_spct;
                  IF v_sum_dist_spct != 100 THEN
                     v_dist_tsi         := ROUND(p_dist_tsi     * v_dist_spct / 100, 2);
                     v_dist_prem        := ROUND(p_dist_prem    * v_dist_spct / 100, 2);
                     v_ann_dist_tsi     := ROUND(p_ann_dist_tsi * v_dist_spct / 100, 2);
                     v_sum_dist_tsi     := v_sum_dist_tsi     + v_dist_tsi;
                     v_sum_dist_prem    := v_sum_dist_prem    + v_dist_prem;
                     v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
                  ELSE
                     v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
                     v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
                     v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                  END IF;
                   v_share_cd      := c.share_cd;                 
                   
                  INSERT_TO_WPOLICYDS_DTL;
                END LOOP;
                
                IF v_sum_dist_spct != 100 THEN
                   v_dist_spct    := 100            - v_sum_dist_spct;
                   v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
                   v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
                   v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                   v_share_cd     := '999';
                   p_rg_count     := p_rg_count + 1;
                                   
                   
                   INSERT_TO_WPOLICYDS_DTL;
                END IF;
             ELSE
                /* Create the default distribution records based on the 100%
                ** NET RETENTION and 0% FACULTATIVE hard code defaults. */
                v_share_cd := 1;
                v_dist_spct := 100;
                v_dist_tsi := p_dist_tsi;
                v_dist_prem := p_dist_prem;
                v_ann_dist_tsi := p_ann_dist_tsi;
                insert_to_wpolicyds_dtl;
                
                FOR c IN 1 .. 1
                LOOP
                   v_share_cd := 999;
                   v_dist_spct := 0;
                   v_dist_tsi := 0;
                   v_dist_prem := 0;
                   v_ann_dist_tsi := 0;
                   insert_to_wpolicyds_dtl;
                END LOOP;
             END IF;
      END;
/*ended edgar 09/17/2014*/      
   BEGIN
      --msg_alert('policy','I',FALSE);
     -- IF p_rg_count = 0 --edgar 09/17/2014
     -- THEN --edgar 09/17/2014
         -- rollie 27may2005 vincent's birthday
         -- see procedure create_items for other info
         IF p_pol_flag = '2'
         THEN                                                      -- renewal
            --message('pol flag 2');pause;
            FOR c IN (SELECT share_cd, dist_spct
                        FROM giuw_policyds_dtl a
                       WHERE a.dist_seq_no = p_dist_seq_no
                         AND dist_no =
                                (SELECT MAX (dist_no)
                                   FROM giuw_pol_dist
                                  WHERE policy_id = (SELECT MAX(old_policy_id) 
                                                       FROM gipi_wpolnrep a /*modified query to exclude spoiled PAR edgar 09/17/2014*/
                                                           ,gipi_parlist b
                                                      WHERE a.par_id = p_par_id
                                                        AND a.ren_rep_sw = '1'
                                                        AND b.par_id = a.par_id
                                                        AND b.par_status NOT IN (98, 99))))
            LOOP
               v_exist := 'Y';     -- added by Gzelle 06192014
               v_share_cd := c.share_cd;
               v_dist_spct := c.dist_spct;
               v_dist_tsi := ROUND (((p_dist_tsi * c.dist_spct) / 100), 2);
               v_dist_prem := ROUND (((p_dist_prem * c.dist_spct) / 100), 2);
               v_ann_dist_tsi :=
                           ROUND (((p_ann_dist_tsi * c.dist_spct) / 100), 2);
               v_sum_dist_tsi := NVL (v_sum_dist_tsi, 0)
                                 + NVL (v_dist_tsi, 0);
               v_sum_dist_prem :=
                               NVL (v_sum_dist_prem, 0)
                               + NVL (v_dist_prem, 0);
               v_sum_ann_dist_tsi :=
                         NVL (v_sum_ann_dist_tsi, 0)
                         + NVL (v_ann_dist_tsi, 0);
               insert_to_wpolicyds_dtl;
            END LOOP;
            
            IF v_exist = 'N' THEN   --added by Gzelle 06192014
                /* Create the default distribution records based on the 100%
                ** NET RETENTION and 0% FACULTATIVE hard code defaults. */
/*--                v_share_cd := 1;
--                v_dist_spct := 100;
--                v_dist_tsi := p_dist_tsi;
--                v_dist_prem := p_dist_prem;
--                v_ann_dist_tsi := p_ann_dist_tsi;
--                insert_to_wpolicyds_dtl;
--                
--                FOR c IN 1 .. 1
--                LOOP
--                   v_share_cd := 999;
--                   v_dist_spct := 0;
--                   v_dist_tsi := 0;
--                   v_dist_prem := 0;
--                   v_ann_dist_tsi := 0;
--                   insert_to_wpolicyds_dtl;
--                END LOOP;*/ --comented out edgar 09/17/2014
                insert_dflt_values; --edgar 09/17/2014
            END IF;
            
         ELSIF p_par_type = 'E'
         THEN
            --message ('insert');pause;
            FOR c IN (SELECT share_cd, dist_spct
                        FROM giuw_policyds_dtl a
                       WHERE a.dist_seq_no = p_dist_seq_no
                         AND dist_no =
                                (SELECT MAX (dist_no)
                                   FROM giuw_pol_dist
                                  WHERE par_id =
                                           (SELECT par_id
                                              FROM gipi_polbasic
                                             WHERE endt_seq_no = 0
                                               AND (line_cd,
                                                    subline_cd,
                                                    iss_cd,
                                                    issue_yy,
                                                    pol_seq_no,
                                                    renew_no
                                                   ) =
                                                      (SELECT line_cd,
                                                              subline_cd,
                                                              iss_cd,
                                                              issue_yy,
                                                              pol_seq_no,
                                                              renew_no
                                                         FROM gipi_wpolbas
                                                        WHERE par_id =
                                                                      p_par_id))))
            LOOP
               v_exist := 'Y';      --added by Gzelle 06192014
               v_share_cd := c.share_cd;
               v_dist_spct := c.dist_spct;
               v_dist_tsi := ROUND (((p_dist_tsi * c.dist_spct) / 100), 2);
               v_dist_prem := ROUND (((p_dist_prem * c.dist_spct) / 100), 2);
               v_ann_dist_tsi :=
                           ROUND (((p_ann_dist_tsi * c.dist_spct) / 100), 2);
               v_sum_dist_tsi := NVL (v_sum_dist_tsi, 0)
                                 + NVL (v_dist_tsi, 0);
               v_sum_dist_prem :=
                               NVL (v_sum_dist_prem, 0)
                               + NVL (v_dist_prem, 0);
               v_sum_ann_dist_tsi :=
                         NVL (v_sum_ann_dist_tsi, 0)
                         + NVL (v_ann_dist_tsi, 0);
               insert_to_wpolicyds_dtl;
            END LOOP;
            
            IF v_exist = 'N' THEN   --added by Gzelle 06192014
                /* Create the default distribution records based on the 100%
                ** NET RETENTION and 0% FACULTATIVE hard code defaults. */
/*--                v_share_cd := 1;
--                v_dist_spct := 100;
--                v_dist_tsi := p_dist_tsi;
--                v_dist_prem := p_dist_prem;
--                v_ann_dist_tsi := p_ann_dist_tsi;
--                insert_to_wpolicyds_dtl;
--                
--                FOR c IN 1 .. 1
--                LOOP
--                   v_share_cd := 999;
--                   v_dist_spct := 0;
--                   v_dist_tsi := 0;
--                   v_dist_prem := 0;
--                   v_ann_dist_tsi := 0;
--                   insert_to_wpolicyds_dtl;
--                END LOOP;*/ --comented out edgar 09/17/2014
                insert_dflt_values; --edgar 09/17/2014
            END IF;
         ELSE
               /* Create the default distribution records based on the 100%
            ** NET RETENTION and 0% FACULTATIVE hard code defaults. */
/*--            v_share_cd := 1;
--            v_dist_spct := 100;
--            v_dist_tsi := p_dist_tsi;
--            v_dist_prem := p_dist_prem;
--            v_ann_dist_tsi := p_ann_dist_tsi;

--            FOR c IN 1 .. 2
--            LOOP
--               insert_to_wpolicyds_dtl;
--               v_share_cd := 999;
--               v_dist_spct := 0;
--               v_dist_tsi := 0;
--               v_dist_prem := 0;
--               v_ann_dist_tsi := 0;
--            END LOOP;*/ --comented out edgar 09/17/2014
            insert_dflt_values; --edgar 09/17/2014
         END IF;
      --ELSE --comented out edgar 09/17/2014
      --   NULL; --comented out edgar 09/17/2014
      /* comment ko muna kasi si p_rg_count ay laging 0
      ** so never sya papasok sa else condition
      ** Niknok 03-29-2011
      */

      /*rg_id := FIND_GROUP(rg_name);
      RESET_GROUP_SELECTION(rg_id);
      IF GET_GROUP_NUMBER_CELL(rg_col2, p_rg_count) = 999 THEN
         DELETE_GROUP_ROW(rg_id, p_rg_count);
         p_rg_count := p_rg_count - 1;
      END IF;

      -- Use AMOUNTS to create the default distribution records. --
      IF p_default_type = 1 THEN
         FOR c IN 1..p_rg_count
         LOOP
           v_peril_cd    := GET_GROUP_NUMBER_CELL(rg_col5, c);
           IF v_peril_cd IS NOT NULL THEN
              IF NVL(v_prev_peril_cd, 0) = v_peril_cd THEN
                 NULL;
              ELSE
                 v_use_share_amt2 := 'N';
                 FOR c1 IN (SELECT 'a'
                              FROM gipi_witmperl B490, gipi_witem B480
                             WHERE B490.peril_cd = v_peril_cd
                               AND B490.line_cd  = p_line_cd
                               AND B490.item_no  = B480.item_no
                               AND B490.par_id   = B480.par_id
                               AND B480.item_grp = p_item_grp
                               AND B480.par_id   = p_par_id)
                 LOOP
                   v_use_share_amt2 := 'Y';
                   EXIT;
                 END LOOP;
                 v_prev_peril_cd := v_peril_cd;
              END IF;
           END IF;
           IF v_use_share_amt2 = 'N' THEN
              v_share_amt  := GET_GROUP_NUMBER_CELL(rg_col4, c);
           ELSE
              v_share_amt  := GET_GROUP_NUMBER_CELL(rg_col6, c);
           END IF;
           IF v_remaining_tsi >= v_share_amt THEN
              v_dist_tsi      := v_share_amt / p_currency_rt;
              v_remaining_tsi := v_remaining_tsi - v_share_amt;
           ELSE
              v_remaining_tsi := 0;
           END IF;
           IF v_remaining_tsi != 0 THEN
              v_dist_spct        := ROUND(v_dist_tsi / p_dist_tsi * 100, 14);
              v_dist_tsi         := ROUND(p_dist_tsi     * v_dist_spct / 100, 2);
              v_dist_prem        := ROUND(p_dist_prem    * v_dist_spct / 100, 2);
              v_ann_dist_tsi     := ROUND(p_ann_dist_tsi * v_dist_spct / 100, 2);
              v_sum_dist_spct    := v_sum_dist_spct    + v_dist_spct;
              v_sum_dist_tsi     := v_sum_dist_tsi     + v_dist_tsi;
              v_sum_dist_prem    := v_sum_dist_prem    + v_dist_prem;
              v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
           ELSIF v_remaining_tsi = 0 THEN
              v_dist_spct    := 100            - v_sum_dist_spct;
              v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
              v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
              v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
           END IF;
           v_share_cd := GET_GROUP_NUMBER_CELL(rg_col2, c);
           SET_GROUP_NUMBER_CELL(rg_col7, c, v_dist_spct);
           SET_GROUP_SELECTION(rg_id, c);
           INSERT_TO_WPOLICYDS_DTL;
           IF v_remaining_tsi = 0 THEN
              EXIT;
           END IF;
         END LOOP;
         IF v_remaining_tsi != 0  THEN
            v_dist_spct    := 100            - v_sum_dist_spct;
            v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
            v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
            v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
            v_share_cd     := '999';
            p_rg_count     := p_rg_count + 1;
            ADD_GROUP_ROW(rg_id, END_OF_GROUP);
            SET_GROUP_NUMBER_CELL(rg_col2, p_rg_count, 999);
            SET_GROUP_NUMBER_CELL(rg_col7, p_rg_count, v_dist_spct);
            SET_GROUP_SELECTION(rg_id, p_rg_count);

            INSERT_TO_WPOLICYDS_DTL;
          END IF;

      -- Use PERCENTAGES to create the default distribution records. --
      ELSIF p_default_type = 2 THEN
         FOR c IN 1..p_rg_count
         LOOP
           v_dist_spct     := GET_GROUP_NUMBER_CELL(rg_col3, c);
           v_share_amt     := GET_GROUP_NUMBER_CELL(rg_col4, c);
           IF v_share_amt IS NOT NULL THEN
              v_dist_tsi        := v_share_amt / p_currency_rt;
              v_dist_spct_limit := ROUND(v_dist_tsi / p_dist_tsi * 100, 14);
              IF v_dist_spct > v_dist_spct_limit THEN
                 v_dist_spct := v_dist_spct_limit;
              END IF;
           END IF;
           v_sum_dist_spct := v_sum_dist_spct + v_dist_spct;
           IF v_sum_dist_spct != 100 THEN
              v_dist_tsi         := ROUND(p_dist_tsi     * v_dist_spct / 100, 2);
              v_dist_prem        := ROUND(p_dist_prem    * v_dist_spct / 100, 2);
              v_ann_dist_tsi     := ROUND(p_ann_dist_tsi * v_dist_spct / 100, 2);
              v_sum_dist_tsi     := v_sum_dist_tsi     + v_dist_tsi;
              v_sum_dist_prem    := v_sum_dist_prem    + v_dist_prem;
              v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
           ELSE
              v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
              v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
              v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
           END IF;
           v_share_cd      := GET_GROUP_NUMBER_CELL(rg_col2, c);
           SET_GROUP_NUMBER_CELL(rg_col7, c, v_dist_spct);
           SET_GROUP_SELECTION(rg_id, c);
           INSERT_TO_WPOLICYDS_DTL;
         END LOOP;
         IF v_sum_dist_spct != 100 THEN
            v_dist_spct    := 100            - v_sum_dist_spct;
            v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
            v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
            v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
            v_share_cd     := '999';
            p_rg_count     := p_rg_count + 1;
            ADD_GROUP_ROW(rg_id, END_OF_GROUP);
            SET_GROUP_NUMBER_CELL(rg_col2, p_rg_count, 999);
            SET_GROUP_NUMBER_CELL(rg_col7, p_rg_count, v_dist_spct);
            SET_GROUP_SELECTION(rg_id, p_rg_count);
            INSERT_TO_WPOLICYDS_DTL;
         END IF;
      END IF;*/
      --END IF; --comented out edgar 09/17/2014
   END;

   PROCEDURE create_grp_dflt_wpolicyds2 (
      p_dist_no        IN       giuw_wpolicyds_dtl.dist_no%TYPE,
      p_dist_seq_no    IN       giuw_wpolicyds_dtl.dist_seq_no%TYPE,
      p_line_cd        IN       giuw_wpolicyds_dtl.line_cd%TYPE,
      p_dist_tsi       IN       giuw_wpolicyds_dtl.dist_tsi%TYPE,
      p_dist_prem      IN       giuw_wpolicyds_dtl.dist_prem%TYPE,
      p_ann_dist_tsi   IN       giuw_wpolicyds_dtl.ann_dist_tsi%TYPE,
      p_rg_count       IN OUT   NUMBER,
      p_default_type   IN       giis_default_dist.default_type%TYPE,
      p_currency_rt    IN       gipi_witem.currency_rt%TYPE,
      p_par_id         IN       gipi_parlist.par_id%TYPE,
      p_item_grp       IN       gipi_witem.item_grp%TYPE,
      p_pol_flag       IN       gipi_wpolbas.pol_flag%TYPE,
      p_par_type       IN       gipi_parlist.par_type%TYPE,
     p_default_no      IN      giis_default_dist.default_no%TYPE
   )
   IS
      --rg_id        RECORDGROUP;
      rg_name              VARCHAR2 (20)                := 'DFLT_DIST_VALUES';
      rg_col1              VARCHAR2 (40)             := rg_name || '.line_cd';
      rg_col2              VARCHAR2 (40)            := rg_name || '.share_cd';
      rg_col3              VARCHAR2 (40)           := rg_name || '.share_pct';
      rg_col4              VARCHAR2 (40)          := rg_name || '.share_amt1';
      rg_col5              VARCHAR2 (40)            := rg_name || '.peril_cd';
      rg_col6              VARCHAR2 (40)          := rg_name || '.share_amt2';
      rg_col7              VARCHAR2 (40)            := rg_name || '.true_pct';
      v_remaining_tsi      NUMBER               := p_dist_tsi * p_currency_rt;
      v_share_amt          giis_default_dist_group.share_amt1%TYPE;
      v_peril_cd           giis_default_dist_group.peril_cd%TYPE;
      v_prev_peril_cd      giis_default_dist_group.peril_cd%TYPE;
      v_dist_spct          giuw_wpolicyds_dtl.dist_spct%TYPE;
      v_dist_tsi           giuw_wpolicyds_dtl.dist_tsi%TYPE;
      v_dist_prem          giuw_wpolicyds_dtl.dist_prem%TYPE;
      v_ann_dist_tsi       giuw_wpolicyds_dtl.ann_dist_tsi%TYPE;
      v_sum_dist_tsi       giuw_wpolicyds_dtl.dist_tsi%TYPE          := 0;
      v_sum_dist_spct      giuw_wpolicyds_dtl.dist_spct%TYPE         := 0;
      v_sum_dist_prem      giuw_wpolicyds_dtl.dist_prem%TYPE         := 0;
      v_sum_ann_dist_tsi   giuw_wpolicyds_dtl.ann_dist_tsi%TYPE      := 0;
      v_share_cd           giis_dist_share.share_cd%TYPE;
      v_use_share_amt2     VARCHAR2 (1)                              := 'N';
      v_dist_spct_limit    NUMBER;
      v_dflt_policy_exists BOOLEAN := FALSE;       -- shan 07.22.2014
      v_dist_spct1         giuw_wpolicyds_dtl.DIST_SPCT1%type;     -- shan 07.22.2014
      v_with_dist_spct1    BOOLEAN := FALSE;

      PROCEDURE insert_to_wpolicyds_dtl
      IS
      BEGIN
         INSERT INTO giuw_wpolicyds_dtl
                     (dist_no, dist_seq_no, line_cd, share_cd,
                      dist_spct, dist_tsi, dist_prem, ann_dist_spct,
                      ann_dist_tsi, dist_grp
                      , dist_spct1  -- shan 07.22.2014
                     )
              VALUES (p_dist_no, p_dist_seq_no, p_line_cd, v_share_cd,
                      v_dist_spct, v_dist_tsi, v_dist_prem, v_dist_spct,
                      v_ann_dist_tsi, 1
                      , v_dist_spct1    -- shan 07.22.2014
                     );
      END;
      
      --added by shan 07.22.2014      
      PROCEDURE insert_dflt_values
      IS
      BEGIN 
            /* Create the default distribution records based on the 100%
            ** NET RETENTION and 0% FACULTATIVE hard code defaults. */
            v_share_cd := 1;
            v_dist_spct := 100;
            v_dist_tsi := p_dist_tsi;
            v_dist_prem := p_dist_prem;
            v_ann_dist_tsi := p_ann_dist_tsi;

            FOR c IN 1 .. 2
            LOOP
               insert_to_wpolicyds_dtl;
               v_share_cd := 999;
               v_dist_spct := 0;
               v_dist_tsi := 0;
               v_dist_prem := 0;
               v_ann_dist_tsi := 0;
            END LOOP;
      END;
   BEGIN
      IF p_rg_count = 0
      THEN
         IF p_pol_flag = '2' -- renewal
         THEN             
            v_dflt_policy_exists   := FALSE;                                         
            
            FOR c IN (SELECT share_cd, dist_spct
                             , dist_spct1 -- shan 07.22.2014
                        FROM giuw_policyds_dtl a
                       WHERE a.dist_seq_no = p_dist_seq_no
                                                          --A.R.C. 12.28.2006
                         AND dist_no =
                                (SELECT MAX(dist_no)
                                   FROM giuw_pol_dist
                                  WHERE dist_flag <> 4
                                    --add by jess 02192019 - to handle ora-01427
                                    AND policy_id = (SELECT MAX(a.old_policy_id)
                                                       FROM gipi_wpolnrep a
                                                           ,gipi_parlist b
                                                      WHERE a.par_id = p_par_id
                                                        AND a.ren_rep_sw = '1'
                                                        AND b.par_id = a.par_id
                                                        AND b.par_status NOT IN (98, 99))))
            LOOP
               v_share_cd := c.share_cd;
               v_dist_spct := c.dist_spct;
               v_dist_spct1 := c.dist_spct1;    -- shan 07.22.2014
               v_dist_tsi := ROUND (((p_dist_tsi * c.dist_spct) / 100), 2);
               v_dist_prem := ROUND (((p_dist_prem * NVL(c.dist_spct1, c.dist_spct)) / 100), 2); --ROUND (((p_dist_prem * c.dist_spct) / 100), 2);
               v_ann_dist_tsi :=
                           ROUND (((p_ann_dist_tsi * c.dist_spct) / 100), 2);
               v_sum_dist_tsi := NVL (v_sum_dist_tsi, 0)
                                 + NVL (v_dist_tsi, 0);
               v_sum_dist_prem :=
                               NVL (v_sum_dist_prem, 0)
                               + NVL (v_dist_prem, 0);
               v_sum_ann_dist_tsi :=
                         NVL (v_sum_ann_dist_tsi, 0)
                         + NVL (v_ann_dist_tsi, 0);
               --sg_alert('CREATE_GRP_DFLT_WPOLICYDS '||p_dist_seq_no||' - '||:b240.par_id||' - '||c.share_cd||' - '||c.dist_spct,'I',FALSE);
               insert_to_wpolicyds_dtl;
               v_dflt_policy_exists := TRUE;    --shan 07.22.2014
            END LOOP;
            
            --added by shan 07.22.2014
            IF v_dflt_policy_exists = FALSE THEN
                insert_dflt_values;
            END IF;
            --end 07.22.2014
         ELSIF p_par_type = 'E'
         THEN
            /*FOR c IN (SELECT share_cd, dist_spct  -- commented out retrieving of default share from original policy for now : shan 08.06.2014
                            , dist_spct1 -- shan 07.22.2014
                        --FROM GIUW_ITEMDS_DTL a  --A.R.C. 12.28.2006
                      FROM   giuw_policyds_dtl a          --A.R.C. 12.28.2006
                       WHERE a.dist_seq_no = p_dist_seq_no
                         --A.R.C. 12.28.2006
                         AND dist_no =
                                (SELECT dist_no
                                   FROM giuw_pol_dist
                                  WHERE dist_flag <> 4
                                    AND par_id =
                                           (SELECT par_id
                                              FROM gipi_polbasic
                                             WHERE endt_seq_no = 0
                                               AND (line_cd,
                                                    subline_cd,
                                                    iss_cd,
                                                    issue_yy,
                                                    pol_seq_no,
                                                    renew_no
                                                   ) =
                                                      (SELECT line_cd,
                                                              subline_cd,
                                                              iss_cd,
                                                              issue_yy,
                                                              pol_seq_no,
                                                              renew_no
                                                         FROM gipi_wpolbas
                                                        WHERE par_id =
                                                                      p_par_id))))
            LOOP
               v_share_cd := c.share_cd;
               v_dist_spct := c.dist_spct;
               v_dist_spct1 := c.dist_spct1;    -- shan 07.22.2014
               v_dist_tsi := ROUND (((p_dist_tsi * c.dist_spct) / 100), 2);
               v_dist_prem := ROUND (((p_dist_prem * NVL(c.dist_spct1, c.dist_spct)) / 100), 2); --ROUND (((p_dist_prem * c.dist_spct1) / 100), 2);
               v_ann_dist_tsi :=
                           ROUND (((p_ann_dist_tsi * c.dist_spct) / 100), 2);
               v_sum_dist_tsi := NVL (v_sum_dist_tsi, 0)
                                 + NVL (v_dist_tsi, 0);
               v_sum_dist_prem :=
                               NVL (v_sum_dist_prem, 0)
                               + NVL (v_dist_prem, 0);
               v_sum_ann_dist_tsi :=
                         NVL (v_sum_ann_dist_tsi, 0)
                         + NVL (v_ann_dist_tsi, 0);
               insert_to_wpolicyds_dtl; 
               v_dflt_policy_exists := TRUE;    --shan 07.22.2014
            END LOOP;*/
            
            --added by shan 07.22.2014
            IF v_dflt_policy_exists = FALSE THEN
                insert_dflt_values;
            END IF;
            --end 07.22.2014
         ELSE
            /* Create the default distribution records based on the 100%
            ** NET RETENTION and 0% FACULTATIVE hard code defaults. */
            v_share_cd := 1;
            v_dist_spct := 100;
            v_dist_tsi := p_dist_tsi;
            v_dist_prem := p_dist_prem;
            v_ann_dist_tsi := p_ann_dist_tsi;

            FOR c IN 1 .. 2
            LOOP
               insert_to_wpolicyds_dtl;
               v_share_cd := 999;
               v_dist_spct := 0;
               v_dist_tsi := 0;
               v_dist_prem := 0;
               v_ann_dist_tsi := 0;
            END LOOP;
         END IF;
      ELSE
         v_dflt_policy_exists := FALSE;
           
         IF p_pol_flag = '2' -- renewal
         THEN                                                                            
            FOR c IN (SELECT share_cd, dist_spct
                             , dist_spct1 -- shan 07.22.2014
                        FROM giuw_policyds_dtl a
                       WHERE a.dist_seq_no = p_dist_seq_no
                         AND dist_no =
                                (SELECT MAX(dist_no)
                                   FROM giuw_pol_dist
                                  WHERE dist_flag <> 4
                                    AND policy_id = (SELECT MAX(a.old_policy_id)
                                                       FROM gipi_wpolnrep a
                                                           ,gipi_parlist b
                                                      WHERE a.par_id = p_par_id
                                                        AND a.ren_rep_sw = '1'
                                                        AND b.par_id = a.par_id
                                                        AND b.par_status NOT IN (98, 99))))
            LOOP
               v_share_cd := c.share_cd;
               v_dist_spct := c.dist_spct;
               v_dist_spct1 := c.dist_spct1;    -- shan 07.22.2014
               v_dist_tsi := ROUND (((p_dist_tsi * c.dist_spct) / 100), 2);
               v_dist_prem := ROUND (((p_dist_prem * NVL(c.dist_spct1, c.dist_spct)) / 100), 2); --ROUND (((p_dist_prem * c.dist_spct) / 100), 2);
               v_ann_dist_tsi := ROUND (((p_ann_dist_tsi * c.dist_spct) / 100), 2);
               v_sum_dist_tsi := NVL (v_sum_dist_tsi, 0) + NVL (v_dist_tsi, 0);
               v_sum_dist_prem := NVL (v_sum_dist_prem, 0) + NVL (v_dist_prem, 0);
               v_sum_ann_dist_tsi := NVL (v_sum_ann_dist_tsi, 0) + NVL (v_ann_dist_tsi, 0);
               insert_to_wpolicyds_dtl;
               v_dflt_policy_exists := TRUE;
               
               IF NVL(v_dist_spct1, 0) <> 0 
               THEN
                 v_with_dist_spct1 := TRUE;
               END IF; 
            END LOOP;
         END IF;
         
         IF v_dflt_policy_exists = FALSE THEN
           /* Use AMOUNTS to create the default distribution records. */
             IF p_default_type = 1 THEN
                FOR c IN (SELECT rownum, a.line_cd    , a.share_cd , a.share_pct  , 
                                 a.share_amt1 , a.peril_cd , a.share_amt2 ,
                                 1 true_pct 
                            FROM GIIS_DEFAULT_DIST_GROUP a  
                           WHERE a.default_no = TO_CHAR(NVL(p_default_no, 0))
                             AND a.line_cd    = p_line_cd
                             AND a.share_cd   <> 999
                           ORDER BY a.sequence ASC)
                LOOP
                    v_peril_cd := c.peril_cd;
                  IF v_peril_cd IS NOT NULL THEN
                     IF NVL(v_prev_peril_cd, 0) = v_peril_cd THEN
                        NULL;
                     ELSE
                        v_use_share_amt2 := 'N';
                        FOR c1 IN (SELECT 'a'
                             FROM gipi_witmperl B490, gipi_witem B480
                            WHERE B490.peril_cd = v_peril_cd
                              AND B490.line_cd  = p_line_cd
                              AND B490.item_no  = B480.item_no
                              AND B490.par_id   = B480.par_id
                              AND B480.item_grp = p_item_grp
                              AND B480.par_id   = p_par_id)
                        LOOP
                          v_use_share_amt2 := 'Y';
                          EXIT;
                        END LOOP;
                        v_prev_peril_cd := v_peril_cd;
                     END IF;
                  END IF;
                  IF v_use_share_amt2 = 'N' THEN
                       v_share_amt  := c.share_amt1;
                  ELSE
                       v_share_amt  := c.share_amt2;
                  END IF;
                  IF v_remaining_tsi >= v_share_amt THEN
                     v_dist_tsi      := v_share_amt / p_currency_rt;
                     v_remaining_tsi := v_remaining_tsi - v_share_amt;
                  ELSE
                     v_remaining_tsi := 0;
                  END IF;
                  IF v_remaining_tsi != 0 THEN
                     v_dist_spct        := ROUND(v_dist_tsi / p_dist_tsi * 100, 9);
                     v_dist_tsi         := ROUND(p_dist_tsi     * v_dist_spct / 100, 2);
                     v_dist_prem        := ROUND(p_dist_prem    * v_dist_spct / 100, 2);
                     v_ann_dist_tsi     := ROUND(p_ann_dist_tsi * v_dist_spct / 100, 2);
                     v_sum_dist_spct    := v_sum_dist_spct    + v_dist_spct;
                     v_sum_dist_tsi     := v_sum_dist_tsi     + v_dist_tsi;
                     v_sum_dist_prem    := v_sum_dist_prem    + v_dist_prem;
                     v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
                  ELSIF v_remaining_tsi = 0 THEN
                     v_dist_spct    := 100            - v_sum_dist_spct;
                     v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
                     v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                     v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
                  END IF;
                  v_share_cd := c.share_cd;   
                  GIUW_POL_DIST_PKG.v_share_pct_updated :=  TRUE;     -- shan 07.22.2014
                  
                  IF v_with_dist_spct1 = TRUE
                  THEN   
                    v_dist_spct1 := v_dist_spct;
                  END IF;
                  
                  INSERT_TO_WPOLICYDS_DTL;
                  
                  IF v_remaining_tsi = 0 THEN
                     EXIT;
                  END IF;
                END LOOP;
                
                IF v_remaining_tsi != 0  THEN
                   v_dist_spct    := 100            - v_sum_dist_spct;
                   v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
                   v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                   v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
                   v_share_cd     := '999';
                   p_rg_count     := p_rg_count + 1;
                   GIUW_POL_DIST_PKG.v_share_pct_updated :=  TRUE;     -- shan 07.22.2014  
                   
                   IF v_with_dist_spct1 = TRUE
                   THEN   
                     v_dist_spct1 := v_dist_spct;
                   END IF;
                   
                   INSERT_TO_WPOLICYDS_DTL;
                END IF;
           -- end here Nica
           
             /* Use PERCENTAGES to create the default distribution records. */
             ELSIF p_default_type = 2 THEN
                FOR c IN (SELECT rownum, a.line_cd    , a.share_cd , a.share_pct  , 
                                 a.share_amt1 , a.peril_cd , a.share_amt2 ,
                                 1 true_pct 
                            FROM GIIS_DEFAULT_DIST_GROUP a  
                           WHERE a.default_no = TO_CHAR(NVL(p_default_no, 0))
                             AND a.line_cd    = p_line_cd
                             AND a.share_cd   <> 999
                           ORDER BY a.sequence ASC)
                LOOP
                    v_dist_spct     := c.share_pct;
                    v_share_amt     := c.share_amt1;
                  IF v_share_amt IS NOT NULL THEN
                     v_dist_tsi        := v_share_amt / p_currency_rt;
                     v_dist_spct_limit := ROUND(v_dist_tsi / p_dist_tsi * 100, 9);
                     IF v_dist_spct > v_dist_spct_limit THEN 
                        v_dist_spct := v_dist_spct_limit;
                     END IF;
                  END IF;
                  v_sum_dist_spct := v_sum_dist_spct + v_dist_spct;
                  IF v_sum_dist_spct != 100 THEN
                     v_dist_tsi         := ROUND(p_dist_tsi     * v_dist_spct / 100, 2);
                     v_dist_prem        := ROUND(p_dist_prem    * v_dist_spct / 100, 2);
                     v_ann_dist_tsi     := ROUND(p_ann_dist_tsi * v_dist_spct / 100, 2);
                     v_sum_dist_tsi     := v_sum_dist_tsi     + v_dist_tsi;
                     v_sum_dist_prem    := v_sum_dist_prem    + v_dist_prem;
                     v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
                  ELSE
                     v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
                     v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
                     v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                  END IF;
                   v_share_cd      := c.share_cd;
                   
                  IF v_with_dist_spct1 = TRUE
                  THEN   
                    v_dist_spct1 := v_dist_spct;
                  END IF;                   
                   
                  INSERT_TO_WPOLICYDS_DTL;
                END LOOP;
                
                IF v_sum_dist_spct != 100 THEN
                   v_dist_spct    := 100            - v_sum_dist_spct;
                   v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
                   v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
                   v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                   v_share_cd     := '999';
                   p_rg_count     := p_rg_count + 1;
                   
                   IF v_with_dist_spct1 = TRUE
                   THEN   
                     v_dist_spct1 := v_dist_spct;
                   END IF;                   
                   
                   INSERT_TO_WPOLICYDS_DTL;
                END IF;
             END IF;
         END IF;
   
       
      /* comment ko muna kasi si p_rg_count ay laging 0
      ** so never sya papasok sa else condition
      ** Niknok 03-29-2011
      */

      /*
      rg_id := FIND_GROUP(rg_name);
      RESET_GROUP_SELECTION(rg_id);
      IF GET_GROUP_NUMBER_CELL(rg_col2, p_rg_count) = 999 THEN
         DELETE_GROUP_ROW(rg_id, p_rg_count);
         p_rg_count := p_rg_count - 1;
      END IF;

      --Use AMOUNTS to create the default distribution records.
      IF p_default_type = 1 THEN
         FOR c IN 1..p_rg_count
         LOOP
           v_peril_cd    := GET_GROUP_NUMBER_CELL(rg_col5, c);
           IF v_peril_cd IS NOT NULL THEN
              IF NVL(v_prev_peril_cd, 0) = v_peril_cd THEN
                 NULL;
              ELSE
                 v_use_share_amt2 := 'N';
                 FOR c1 IN (SELECT 'a'
                              FROM gipi_witmperl B490, gipi_witem B480
                             WHERE B490.peril_cd = v_peril_cd
                               AND B490.line_cd  = p_line_cd
                               AND B490.item_no  = B480.item_no
                               AND B490.par_id   = B480.par_id
                               AND B480.item_grp = p_item_grp
                               AND B480.par_id   = p_par_id)
                 LOOP
                   v_use_share_amt2 := 'Y';
                   EXIT;
                 END LOOP;
                 v_prev_peril_cd := v_peril_cd;
              END IF;
           END IF;
           IF v_use_share_amt2 = 'N' THEN
              v_share_amt  := GET_GROUP_NUMBER_CELL(rg_col4, c);
           ELSE
              v_share_amt  := GET_GROUP_NUMBER_CELL(rg_col6, c);
           END IF;
           IF v_remaining_tsi >= v_share_amt THEN
              v_dist_tsi      := v_share_amt / p_currency_rt;
              v_remaining_tsi := v_remaining_tsi - v_share_amt;
           ELSE
              v_remaining_tsi := 0;
           END IF;
           IF v_remaining_tsi != 0 THEN
              v_dist_spct        := ROUND(v_dist_tsi / p_dist_tsi * 100, 9);
              v_dist_tsi         := ROUND(p_dist_tsi     * v_dist_spct / 100, 2);
              v_dist_prem        := ROUND(p_dist_prem    * v_dist_spct / 100, 2);
              v_ann_dist_tsi     := ROUND(p_ann_dist_tsi * v_dist_spct / 100, 2);
              v_sum_dist_spct    := v_sum_dist_spct    + v_dist_spct;
              v_sum_dist_tsi     := v_sum_dist_tsi     + v_dist_tsi;
              v_sum_dist_prem    := v_sum_dist_prem    + v_dist_prem;
              v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
           ELSIF v_remaining_tsi = 0 THEN
              v_dist_spct    := 100            - v_sum_dist_spct;
              v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
              v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
              v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
           END IF;
           v_share_cd := GET_GROUP_NUMBER_CELL(rg_col2, c);
           SET_GROUP_NUMBER_CELL(rg_col7, c, v_dist_spct);
           SET_GROUP_SELECTION(rg_id, c);
           INSERT_TO_WPOLICYDS_DTL;
           IF v_remaining_tsi = 0 THEN
              EXIT;
           END IF;
         END LOOP;
         IF v_remaining_tsi != 0  THEN
            v_dist_spct    := 100            - v_sum_dist_spct;
            v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
            v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
            v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
            v_share_cd     := '999';
            p_rg_count     := p_rg_count + 1;
            ADD_GROUP_ROW(rg_id, END_OF_GROUP);
            SET_GROUP_NUMBER_CELL(rg_col2, p_rg_count, 999);
            SET_GROUP_NUMBER_CELL(rg_col7, p_rg_count, v_dist_spct);
            SET_GROUP_SELECTION(rg_id, p_rg_count);
            INSERT_TO_WPOLICYDS_DTL;
         END IF;

      -- Use PERCENTAGES to create the default distribution records.
      ELSIF p_default_type = 2 THEN
         FOR c IN 1..p_rg_count
         LOOP
           v_dist_spct     := GET_GROUP_NUMBER_CELL(rg_col3, c);
           v_share_amt     := GET_GROUP_NUMBER_CELL(rg_col4, c);
           IF v_share_amt IS NOT NULL THEN
              v_dist_tsi        := v_share_amt / p_currency_rt;
              v_dist_spct_limit := ROUND(v_dist_tsi / p_dist_tsi * 100, 9);
              IF v_dist_spct > v_dist_spct_limit THEN
                 v_dist_spct := v_dist_spct_limit;
              END IF;
           END IF;
           v_sum_dist_spct := v_sum_dist_spct + v_dist_spct;
           IF v_sum_dist_spct != 100 THEN
              v_dist_tsi         := ROUND(p_dist_tsi     * v_dist_spct / 100, 2);
              v_dist_prem        := ROUND(p_dist_prem    * v_dist_spct / 100, 2);
              v_ann_dist_tsi     := ROUND(p_ann_dist_tsi * v_dist_spct / 100, 2);
              v_sum_dist_tsi     := v_sum_dist_tsi     + v_dist_tsi;
              v_sum_dist_prem    := v_sum_dist_prem    + v_dist_prem;
              v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
           ELSE
              v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
              v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
              v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
           END IF;
           v_share_cd      := GET_GROUP_NUMBER_CELL(rg_col2, c);
           SET_GROUP_NUMBER_CELL(rg_col7, c, v_dist_spct);
           SET_GROUP_SELECTION(rg_id, c);
           INSERT_TO_WPOLICYDS_DTL;
         END LOOP;
         IF v_sum_dist_spct != 100 THEN
            v_dist_spct    := 100            - v_sum_dist_spct;
            v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
            v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
            v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
            v_share_cd     := '999';
            p_rg_count     := p_rg_count + 1;
            ADD_GROUP_ROW(rg_id, END_OF_GROUP);
            SET_GROUP_NUMBER_CELL(rg_col2, p_rg_count, 999);
            SET_GROUP_NUMBER_CELL(rg_col7, p_rg_count, v_dist_spct);
            SET_GROUP_SELECTION(rg_id, p_rg_count);
            INSERT_TO_WPOLICYDS_DTL;
         END IF;
      END IF;*/
      END IF;
   END;

   PROCEDURE update_witemds (
      p_dist_no       giuw_witemperilds_dtl.dist_no%TYPE,
      p_dist_seq_no   giuw_witemperilds_dtl.dist_seq_no%TYPE
   )
   IS
   BEGIN
      FOR a IN (SELECT   'giuw_witemperilds_dtl',
                         SUM (DECODE (a.peril_type,
                                      'B', dist_tsi,
                                      0
                                     )) tsi_amt,
                         SUM (dist_prem) prem_amt,
                         SUM (DECODE (a.peril_type, 'B', ann_dist_tsi, 0)
                             ) ann_tsi_amt,
                         share_cd, item_no
                    FROM giuw_witemperilds_dtl b, giis_peril a
                   WHERE dist_no = p_dist_no
                     AND a.line_cd = b.line_cd
                     AND a.peril_cd = b.peril_cd
                GROUP BY share_cd, item_no)
      LOOP
         FOR b IN (SELECT   'giuw_witemds_dtl', SUM (dist_tsi) tsi_amt,
                            SUM (dist_prem) prem_amt,
                            SUM (ann_dist_tsi) ann_tsi_amt, share_cd,
                            item_no
                       FROM giuw_witemds_dtl
                      WHERE dist_no = p_dist_no
                        AND item_no = a.item_no
                        AND share_cd = a.share_cd
                   GROUP BY share_cd, item_no)
         LOOP
            IF    a.tsi_amt <> b.tsi_amt
               OR a.prem_amt <> b.prem_amt
               OR a.ann_tsi_amt <> b.ann_tsi_amt
            THEN
               UPDATE giuw_witemds_dtl
                  SET dist_tsi = a.tsi_amt,
                      dist_prem = a.prem_amt,
                      ann_dist_tsi = a.ann_tsi_amt
                WHERE item_no = a.item_no
                  AND share_cd = a.share_cd
                  AND dist_seq_no = p_dist_seq_no
                  AND dist_no = p_dist_no;
            END IF;
         END LOOP;
      END LOOP;
   END;

   PROCEDURE update_dtls_no_share_cd (
      p_dist_no       IN   giuw_pol_dist.dist_no%TYPE,
      p_dist_seq_no   IN   giuw_wpolicyds.dist_seq_no%TYPE,
      p_type          IN   VARCHAR2,
      p_line_cd       IN   gipi_wpolbas.line_cd%TYPE
   )
   IS
      v_share_cd      giuw_witemds_dtl.share_cd%TYPE;
      v_dist_spct     giuw_witemds_dtl.dist_spct%TYPE;
      v_dist_tsi      giuw_witemds_dtl.dist_tsi%TYPE;
      --giuw_witemds_dtl.dist_prem%TYPE;    --vj 080409
      v_dist_prem     giuw_witemds_dtl.dist_prem%TYPE;
      v_ann_tsi_amt   giuw_witemds_dtl.ann_dist_tsi%TYPE;
   BEGIN
      /* rollie 25aug2005
      ** populating peril, item, itemperil data to default values
      ** if perils or items are newly created
      */
      IF p_type = 'ITEM'
      THEN
         /*  giuw_witemds_dtl b */
         FOR a1 IN (SELECT a.item_no, a.tsi_amt, a.prem_amt, a.ann_tsi_amt
                      FROM giuw_witemds a
                     WHERE a.dist_no = p_dist_no
                       AND a.dist_seq_no = p_dist_seq_no
                       AND a.item_no NOT IN (
                              SELECT b.item_no
                                FROM giuw_witemds_dtl b
                               WHERE b.dist_no = a.dist_no
                                 AND b.dist_seq_no = a.dist_seq_no))
         LOOP
            --msg_alert('giuw_witemds_dtl excess','I',FALSE);
            v_share_cd := 1;
            v_dist_spct := 100;
            v_dist_tsi := a1.tsi_amt;
            v_dist_prem := a1.prem_amt;
            v_ann_tsi_amt := a1.ann_tsi_amt;

            INSERT INTO giuw_witemds_dtl
                        (dist_no, dist_seq_no, item_no, line_cd,
                         share_cd, dist_spct, dist_tsi, dist_prem,
                         ann_dist_spct, ann_dist_tsi, dist_grp, dist_spct1
                        )
                 VALUES (p_dist_no, p_dist_seq_no, a1.item_no, p_line_cd,
                         v_share_cd, v_dist_spct, a1.tsi_amt, a1.prem_amt,
                         v_dist_spct, a1.ann_tsi_amt, 1, v_dist_spct
                        );
         END LOOP;

         v_dist_spct := 0;
         v_dist_tsi := 0;
         v_dist_prem := 0;
         v_ann_tsi_amt := 0;
      ELSIF p_type = 'ITEMPERIL'
      THEN
         /*  giuw_witemperilds_dtl b */
         FOR a1 IN (SELECT a.item_no, a.tsi_amt, a.prem_amt, a.ann_tsi_amt,
                           a.peril_cd
                      FROM giuw_witemperilds a
                     WHERE a.dist_no = p_dist_no
                       AND a.dist_seq_no = p_dist_seq_no
                       AND (a.item_no, a.peril_cd) NOT IN (
                              SELECT b.item_no, b.peril_cd
                                FROM giuw_witemperilds_dtl b
                               WHERE b.dist_no = a.dist_no
                                 AND b.dist_seq_no = a.dist_seq_no))
         LOOP
            --msg_alert('giuw_witemperilds_dtl excess','I',FALSE);
            v_share_cd := 1;
            v_dist_spct := 100;
            v_dist_tsi := a1.tsi_amt;
            v_dist_prem := a1.prem_amt;
            v_ann_tsi_amt := a1.ann_tsi_amt;

            INSERT INTO giuw_witemperilds_dtl
                        (dist_no, dist_seq_no, item_no, line_cd,
                         peril_cd, share_cd, dist_spct, dist_tsi,
                         dist_prem, ann_dist_spct, ann_dist_tsi, dist_grp,
                         dist_spct1
                        )
                 VALUES (p_dist_no, p_dist_seq_no, a1.item_no, p_line_cd,
                         a1.peril_cd, v_share_cd, v_dist_spct, v_dist_tsi,
                         v_dist_prem, v_dist_spct, v_ann_tsi_amt, 1,
                         v_dist_spct
                        );
         END LOOP;

         v_dist_spct := 0;
         v_dist_tsi := 0;
         v_dist_prem := 0;
         v_ann_tsi_amt := 0;
      ELSIF p_type = 'PERIL'
      THEN
         /*  giuw_wperilds_dtl b */
         FOR a1 IN (SELECT a.tsi_amt, a.prem_amt, a.ann_tsi_amt, a.peril_cd
                      FROM giuw_wperilds a
                     WHERE a.dist_no = p_dist_no
                       AND a.dist_seq_no = p_dist_seq_no
                       AND a.peril_cd NOT IN (
                              SELECT b.peril_cd
                                FROM giuw_wperilds_dtl b
                               WHERE b.dist_no = a.dist_no
                                 AND b.dist_seq_no = a.dist_seq_no))
         LOOP
            --msg_alert('giuw_wperilds_dtl excess'||a1.tsi_amt||'-'||a1.prem_amt,'I',FALSE);
            v_share_cd := 1;
            v_dist_spct := 100;
            v_dist_tsi := a1.tsi_amt;
            v_dist_prem := a1.prem_amt;
            v_ann_tsi_amt := a1.ann_tsi_amt;

            INSERT INTO giuw_wperilds_dtl
                        (dist_no, dist_seq_no, line_cd, share_cd,
                         dist_spct, dist_tsi, dist_prem, ann_dist_spct,
                         ann_dist_tsi, dist_grp, peril_cd, dist_spct1
                        )
                 VALUES (p_dist_no, p_dist_seq_no, p_line_cd, v_share_cd,
                         v_dist_spct, v_dist_tsi, v_dist_prem, v_dist_spct,
                         v_ann_tsi_amt, 1, a1.peril_cd, v_dist_spct
                        );
         END LOOP;
      ELSIF p_type = 'POLICY'
      THEN
         /*  giuw_wperilds_dtl b */
         FOR a1 IN (SELECT a.tsi_amt, a.prem_amt, a.ann_tsi_amt
                      FROM giuw_wpolicyds a
                     WHERE a.dist_no = p_dist_no
                       AND a.dist_seq_no = p_dist_seq_no
                       AND (a.dist_no, a.dist_seq_no) NOT IN (
                              SELECT b.dist_no, b.dist_seq_no
                                FROM giuw_wpolicyds_dtl b
                               WHERE b.dist_no = a.dist_no
                                 AND b.dist_seq_no = a.dist_seq_no))
         LOOP
            --msg_alert('giuw_wperilds_dtl excess'||a1.tsi_amt||'-'||a1.prem_amt,'I',FALSE);
            v_share_cd := 1;
            v_dist_spct := 100;
            v_dist_tsi := a1.tsi_amt;
            v_dist_prem := a1.prem_amt;
            v_ann_tsi_amt := a1.ann_tsi_amt;

            INSERT INTO giuw_wpolicyds_dtl
                        (dist_no, dist_seq_no, line_cd, share_cd,
                         dist_spct, dist_tsi, dist_prem, ann_dist_spct,
                         ann_dist_tsi, dist_grp, dist_spct1
                        )
                 VALUES (p_dist_no, p_dist_seq_no, p_line_cd, v_share_cd,
                         v_dist_spct, v_dist_tsi, v_dist_prem, v_dist_spct,
                         v_ann_tsi_amt, 1, v_dist_spct
                        );
         END LOOP;
      END IF;
   END;

   PROCEDURE update_dtls_no_share_cd2 (
      p_dist_no       IN   giuw_pol_dist.dist_no%TYPE,
      p_dist_seq_no   IN   giuw_wpolicyds.dist_seq_no%TYPE,
      p_line_cd       IN   gipi_wpolbas.line_cd%TYPE
   )
   IS
      v_share_cd      giuw_witemds_dtl.share_cd%TYPE;
      v_dist_spct     giuw_witemds_dtl.dist_spct%TYPE;
      --v_dist_tsi      giuw_witemds_dtl.dist_prem%TYPE; replaced by: Nica 12.19.2012
     v_dist_tsi      giuw_witemds_dtl.dist_tsi%TYPE;
      v_dist_prem     giuw_witemds_dtl.dist_prem%TYPE;
      v_ann_tsi_amt   giuw_witemds_dtl.ann_dist_tsi%TYPE;
   BEGIN
      /*  giuw_witemds_dtl b */
      FOR a1 IN (SELECT a.item_no, a.tsi_amt, a.prem_amt, a.ann_tsi_amt
                   FROM giuw_witemds a
                  WHERE a.dist_no = p_dist_no
                    AND a.dist_seq_no = p_dist_seq_no
                    AND a.item_no NOT IN (
                           SELECT b.item_no
                             FROM giuw_witemds_dtl b
                            WHERE b.dist_no = a.dist_no
                              AND b.dist_seq_no = a.dist_seq_no))
      LOOP
         --msg_alert('giuw_witemds_dtl excess','I',FALSE);
         v_share_cd := 1;
         v_dist_spct := 100;
         v_dist_tsi := a1.tsi_amt;
         v_dist_prem := a1.prem_amt;
         v_ann_tsi_amt := a1.ann_tsi_amt;

         INSERT INTO giuw_witemds_dtl
                     (dist_no, dist_seq_no, item_no, line_cd,
                      share_cd, dist_spct, dist_tsi, dist_prem,
                      ann_dist_spct, ann_dist_tsi, dist_grp
                     )
              VALUES (p_dist_no, p_dist_seq_no, a1.item_no, p_line_cd,
                      v_share_cd, v_dist_spct, a1.tsi_amt, a1.prem_amt,
                      v_dist_spct, a1.ann_tsi_amt, 1
                     );
      END LOOP;

      v_dist_spct := 0;
      v_dist_tsi := 0;
      v_dist_prem := 0;
      v_ann_tsi_amt := 0;

      /*  giuw_witemperilds_dtl b */
      FOR a1 IN (SELECT a.item_no, a.tsi_amt, a.prem_amt, a.ann_tsi_amt,
                        a.peril_cd
                   FROM giuw_witemperilds a
                  WHERE a.dist_no = p_dist_no
                    AND a.dist_seq_no = p_dist_seq_no
                    AND (a.item_no, a.peril_cd) NOT IN (
                           SELECT b.item_no, b.peril_cd
                             FROM giuw_witemperilds_dtl b
                            WHERE b.dist_no = a.dist_no
                              AND b.dist_seq_no = a.dist_seq_no))
      LOOP
         --msg_alert('giuw_witemperilds_dtl excess','I',FALSE);
         v_share_cd := 1;
         v_dist_spct := 100;
         v_dist_tsi := a1.tsi_amt;
         v_dist_prem := a1.prem_amt;
         v_ann_tsi_amt := a1.ann_tsi_amt;

         INSERT INTO giuw_witemperilds_dtl
                     (dist_no, dist_seq_no, item_no, line_cd,
                      peril_cd, share_cd, dist_spct, dist_tsi,
                      dist_prem, ann_dist_spct, ann_dist_tsi, dist_grp
                     )
              VALUES (p_dist_no, p_dist_seq_no, a1.item_no, p_line_cd,
                      a1.peril_cd, v_share_cd, v_dist_spct, v_dist_tsi,
                      v_dist_prem, v_dist_spct, v_ann_tsi_amt, 1
                     );
      END LOOP;

      v_dist_spct := 0;
      v_dist_tsi := 0;
      v_dist_prem := 0;
      v_ann_tsi_amt := 0;

      /*  giuw_wperilds_dtl b */
      FOR a1 IN (SELECT a.tsi_amt, a.prem_amt, a.ann_tsi_amt, a.peril_cd
                   FROM giuw_wperilds a
                  WHERE a.dist_no = p_dist_no
                    AND a.dist_seq_no = p_dist_seq_no
                    AND a.peril_cd NOT IN (
                           SELECT b.peril_cd
                             FROM giuw_wperilds_dtl b
                            WHERE b.dist_no = a.dist_no
                              AND b.dist_seq_no = a.dist_seq_no))
      LOOP
         --msg_alert('giuw_wperilds_dtl excess'||a1.tsi_amt||'-'||a1.prem_amt,'I',FALSE);
         v_share_cd := 1;
         v_dist_spct := 100;
         v_dist_tsi := a1.tsi_amt;
         v_dist_prem := a1.prem_amt;
         v_ann_tsi_amt := a1.ann_tsi_amt;

         INSERT INTO giuw_wperilds_dtl
                     (dist_no, dist_seq_no, line_cd, share_cd,
                      dist_spct, dist_tsi, dist_prem, ann_dist_spct,
                      ann_dist_tsi, dist_grp, peril_cd
                     )
              VALUES (p_dist_no, p_dist_seq_no, p_line_cd, v_share_cd,
                      v_dist_spct, v_dist_tsi, v_dist_prem, v_dist_spct,
                      v_ann_tsi_amt, 1, a1.peril_cd
                     );
      END LOOP;

      /*  giuw_wpolicyds_dtl b */
      FOR a1 IN (SELECT a.tsi_amt, a.prem_amt, a.ann_tsi_amt
                   FROM giuw_wpolicyds a
                  WHERE a.dist_no = p_dist_no
                    AND a.dist_seq_no = p_dist_seq_no
                    AND a.dist_seq_no NOT IN (SELECT b.dist_seq_no
                                                FROM giuw_wpolicyds_dtl b
                                               WHERE b.dist_no = a.dist_no))
      LOOP
         --msg_alert('giuw_wperilds_dtl excess'||a1.tsi_amt||'-'||a1.prem_amt,'I',FALSE);
         v_share_cd := 1;
         v_dist_spct := 100;
         v_dist_tsi := a1.tsi_amt;
         v_dist_prem := a1.prem_amt;
         v_ann_tsi_amt := a1.ann_tsi_amt;

         INSERT INTO giuw_wpolicyds_dtl
                     (dist_no, dist_seq_no, line_cd, share_cd,
                      dist_spct, dist_tsi, dist_prem, ann_dist_spct,
                      ann_dist_tsi, dist_grp
                     )
              VALUES (p_dist_no, p_dist_seq_no, p_line_cd, v_share_cd,
                      v_dist_spct, v_dist_tsi, v_dist_prem, v_dist_spct,
                      v_ann_tsi_amt, 1
                     );
      END LOOP;
   END;

   PROCEDURE create_grp_dflt_witemds (
      p_dist_no        IN   giuw_witemds_dtl.dist_no%TYPE,
      p_dist_seq_no    IN   giuw_witemds_dtl.dist_seq_no%TYPE,
      p_item_no        IN   giuw_witemds_dtl.item_no%TYPE,
      p_line_cd        IN   giuw_witemds_dtl.line_cd%TYPE,
      p_dist_tsi       IN   giuw_witemds_dtl.dist_tsi%TYPE,
      p_dist_prem      IN   giuw_witemds_dtl.dist_prem%TYPE,
      p_ann_dist_tsi   IN   giuw_witemds_dtl.ann_dist_tsi%TYPE,
      p_rg_count       IN   NUMBER,
      p_pol_flag       IN   gipi_wpolbas.pol_flag%TYPE,
      p_par_id         IN   gipi_wpolbas.par_id%TYPE,
      p_par_type       IN   gipi_parlist.par_type%TYPE
   )
   IS
      --rg_id            RECORDGROUP;
      rg_name              VARCHAR2 (20)                := 'DFLT_DIST_VALUES';
      rg_col2              VARCHAR2 (40)            := rg_name || '.share_cd';
      rg_col7              VARCHAR2 (40)            := rg_name || '.true_pct';
      v_selection_count    NUMBER;
      v_row                NUMBER;
      v_dist_spct          giuw_witemds_dtl.dist_spct%TYPE;
      v_dist_tsi           giuw_witemds_dtl.dist_tsi%TYPE;
      v_dist_prem          giuw_witemds_dtl.dist_prem%TYPE;
      v_ann_dist_tsi       giuw_witemds_dtl.ann_dist_tsi%TYPE;
      v_share_cd           giis_dist_share.share_cd%TYPE;
      v_sum_dist_tsi       giuw_witemds_dtl.dist_tsi%TYPE       := 0;
      v_sum_dist_spct      giuw_witemds_dtl.dist_spct%TYPE      := 0;
      v_sum_dist_prem      giuw_witemds_dtl.dist_prem%TYPE      := 0;
      v_sum_ann_dist_tsi   giuw_witemds_dtl.ann_dist_tsi%TYPE   := 0;

      PROCEDURE insert_to_witemds_dtl
      IS
      BEGIN
         -- message('insert_to');pause;
         -- msg_alert(p_dist_no||'-'||p_dist_seq_no||'-'||p_line_cd||'-'||v_share_cd||'-'||p_item_no,'I',FALSE);
         INSERT INTO giuw_witemds_dtl
                     (dist_no, dist_seq_no, line_cd, share_cd,
                      dist_spct, dist_tsi, dist_prem, ann_dist_spct,
                      ann_dist_tsi, dist_grp, item_no
                     )
              VALUES (p_dist_no, p_dist_seq_no, p_line_cd, v_share_cd,
                      v_dist_spct, v_dist_tsi, v_dist_prem, v_dist_spct,
                      v_ann_dist_tsi, 1, p_item_no
                     );
      END;
   BEGIN
      --msg_alert('item no '||p_item_no,'I',FALSE);
      IF p_rg_count = 0
      THEN
         --msg_alert('item default 2','I',FALSE);
         -- rollie 27may2005 vincent's birthday
         -- see procedure create_items for other info
         IF p_pol_flag = '2'
         THEN                                                      -- renewal
            --message('pol flag 2');pause;
            FOR c IN (SELECT share_cd, dist_spct
                        FROM giuw_policyds_dtl a
                       WHERE a.dist_seq_no = p_dist_seq_no
                         AND dist_no =
                                (SELECT MAX (dist_no)
                                   FROM giuw_pol_dist
                                  WHERE policy_id = (SELECT MAX(a.old_policy_id)
                                                       FROM gipi_wpolnrep a
                                                           ,gipi_parlist b
                                                      WHERE a.par_id = p_par_id
                                                        AND a.ren_rep_sw = '1'
                                                        AND b.par_id = a.par_id
                                                        AND b.par_status NOT IN(98, 99))))
            LOOP
               v_share_cd := c.share_cd;
               v_dist_spct := c.dist_spct;
               v_dist_tsi := ROUND (((p_dist_tsi * c.dist_spct) / 100), 2);
               v_dist_prem := ROUND (((p_dist_prem * c.dist_spct) / 100), 2);
               v_ann_dist_tsi :=
                           ROUND (((p_ann_dist_tsi * c.dist_spct) / 100), 2);
               v_sum_dist_tsi := NVL (v_sum_dist_tsi, 0)
                                 + NVL (v_dist_tsi, 0);
               v_sum_dist_prem :=
                               NVL (v_sum_dist_prem, 0)
                               + NVL (v_dist_prem, 0);
               v_sum_ann_dist_tsi :=
                         NVL (v_sum_ann_dist_tsi, 0)
                         + NVL (v_ann_dist_tsi, 0);
               insert_to_witemds_dtl;
            END LOOP;
         ELSIF p_par_type = 'E'
         THEN
            --message ('insert');pause;
            FOR c IN (SELECT share_cd, dist_spct
                        FROM giuw_policyds_dtl a
                       WHERE a.dist_seq_no = p_dist_seq_no
                         AND dist_no =
                                (SELECT MAX (dist_no)
                                   FROM giuw_pol_dist
                                  WHERE par_id =
                                           (SELECT par_id
                                              FROM gipi_polbasic
                                             WHERE endt_seq_no = 0
                                               AND (line_cd,
                                                    subline_cd,
                                                    iss_cd,
                                                    issue_yy,
                                                    pol_seq_no,
                                                    renew_no
                                                   ) =
                                                      (SELECT line_cd,
                                                              subline_cd,
                                                              iss_cd,
                                                              issue_yy,
                                                              pol_seq_no,
                                                              renew_no
                                                         FROM gipi_wpolbas
                                                        WHERE par_id =
                                                                      p_par_id))))
            LOOP
               v_share_cd := c.share_cd;
               v_dist_spct := c.dist_spct;
               v_dist_tsi := ROUND (((p_dist_tsi * c.dist_spct) / 100), 2);
               v_dist_prem := ROUND (((p_dist_prem * c.dist_spct) / 100), 2);
               v_ann_dist_tsi :=
                           ROUND (((p_ann_dist_tsi * c.dist_spct) / 100), 2);
               v_sum_dist_tsi := NVL (v_sum_dist_tsi, 0)
                                 + NVL (v_dist_tsi, 0);
               v_sum_dist_prem :=
                               NVL (v_sum_dist_prem, 0)
                               + NVL (v_dist_prem, 0);
               v_sum_ann_dist_tsi :=
                         NVL (v_sum_ann_dist_tsi, 0)
                         + NVL (v_ann_dist_tsi, 0);
               insert_to_witemds_dtl;
            END LOOP;
         ELSE
               /* Create the default distribution records based on the 100%
            ** NET RETENTION and 0% FACULTATIVE hard code defaults. */
            v_share_cd := 1;
            v_dist_spct := 100;
            v_dist_tsi := p_dist_tsi;
            v_dist_prem := p_dist_prem;
            v_ann_dist_tsi := p_ann_dist_tsi;

            FOR c IN 1 .. 2
            LOOP
               insert_to_witemds_dtl;
               v_share_cd := 999;
               v_dist_spct := 0;
               v_dist_tsi := 0;
               v_dist_prem := 0;
               v_ann_dist_tsi := 0;
            END LOOP;
         END IF;
      ELSE
         NULL;
      /* comment ko muna kasi si p_rg_count ay laging 0
      ** so never sya papasok sa else condition
      ** Niknok 03-29-2011
      */

      /*rg_id             := FIND_GROUP(rg_name);
      IF NOT id_null(rg_id) THEN
         v_selection_count := GET_GROUP_SELECTION_COUNT(rg_id);
      END IF;

      FOR c IN 1..v_selection_count
      LOOP
        v_row           := GET_GROUP_SELECTION(rg_id, c);
        v_dist_spct     := GET_GROUP_NUMBER_CELL(rg_col7, v_row);
        v_sum_dist_spct := v_sum_dist_spct + v_dist_spct;
        IF v_sum_dist_spct != 100 THEN
           v_dist_tsi         := ROUND(((p_dist_tsi     * v_dist_spct)/ 100), 2);
           v_dist_prem        := ROUND(((p_dist_prem    * v_dist_spct)/ 100), 2);
           v_ann_dist_tsi     := ROUND(((p_ann_dist_tsi * v_dist_spct)/ 100), 2);
           v_sum_dist_tsi     := v_sum_dist_tsi     + v_dist_tsi;
           v_sum_dist_prem    := v_sum_dist_prem    + v_dist_prem;
           v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
        ELSE
           v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
           v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
           v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
        END IF;
        v_share_cd     := GET_GROUP_NUMBER_CELL(rg_col2, v_row);
        INSERT_TO_WITEMDS_DTL;
      END LOOP;*/
      END IF;
   END;

   PROCEDURE create_grp_dflt_witemds2 (
      p_dist_no        IN   giuw_witemds_dtl.dist_no%TYPE,
      p_dist_seq_no    IN   giuw_witemds_dtl.dist_seq_no%TYPE,
      p_item_no        IN   giuw_witemds_dtl.item_no%TYPE,
      p_line_cd        IN   giuw_witemds_dtl.line_cd%TYPE,
      p_dist_tsi       IN   giuw_witemds_dtl.dist_tsi%TYPE,
      p_dist_prem      IN   giuw_witemds_dtl.dist_prem%TYPE,
      p_ann_dist_tsi   IN   giuw_witemds_dtl.ann_dist_tsi%TYPE,
      p_rg_count       IN   NUMBER,
      p_pol_flag       IN   gipi_wpolbas.pol_flag%TYPE,
      p_par_id         IN   gipi_wpolbas.par_id%TYPE,
      p_par_type       IN   gipi_parlist.par_type%TYPE,
     p_default_no      IN   giis_default_dist.default_no%TYPE
   )
   IS
      --rg_id         RECORDGROUP;
      rg_name              VARCHAR2 (20)                := 'DFLT_DIST_VALUES';
      rg_col2              VARCHAR2 (40)            := rg_name || '.share_cd';
      rg_col7              VARCHAR2 (40)            := rg_name || '.true_pct';
      v_selection_count    NUMBER;
      v_row                NUMBER;
      v_dist_spct          giuw_witemds_dtl.dist_spct%TYPE;
      v_dist_tsi           giuw_witemds_dtl.dist_tsi%TYPE;
      v_dist_prem          giuw_witemds_dtl.dist_prem%TYPE;
      v_ann_dist_tsi       giuw_witemds_dtl.ann_dist_tsi%TYPE;
      v_share_cd           giis_dist_share.share_cd%TYPE;
      v_sum_dist_tsi       giuw_witemds_dtl.dist_tsi%TYPE       := 0;
      v_sum_dist_spct      giuw_witemds_dtl.dist_spct%TYPE      := 0;
      v_sum_dist_prem      giuw_witemds_dtl.dist_prem%TYPE      := 0;
      v_sum_ann_dist_tsi   giuw_witemds_dtl.ann_dist_tsi%TYPE   := 0;
      v_dflt_policy_exists  BOOLEAN := FALSE;   --shan 07.22.2014
      v_with_dist_spct1    BOOLEAN := FALSE;
      v_dist_spct1          giuw_wpolicyds_dtl.DIST_SPCT1%type;     -- shan 07.22.2014

      PROCEDURE insert_to_witemds_dtl
      IS
      BEGIN
         INSERT INTO giuw_witemds_dtl
                     (dist_no, dist_seq_no, line_cd, share_cd,
                      dist_spct, dist_tsi, dist_prem, ann_dist_spct,
                      ann_dist_tsi, dist_grp, item_no
                      , dist_spct1  -- shan 07.22.2014
                     )
              VALUES (p_dist_no, p_dist_seq_no, p_line_cd, v_share_cd,
                      v_dist_spct, v_dist_tsi, v_dist_prem, v_dist_spct,
                      v_ann_dist_tsi, 1, p_item_no
                      , v_dist_spct1  -- shan 07.22.2014
                     );
      END;
      
      --added by shan 07.22.2014      
      PROCEDURE insert_dflt_values
      IS
      BEGIN 
            /* Create the default distribution records based on the 100%
            ** NET RETENTION and 0% FACULTATIVE hard code defaults. */
            v_share_cd := 1;
            v_dist_spct := 100;
            v_dist_tsi := p_dist_tsi;
            v_dist_prem := p_dist_prem;
            v_ann_dist_tsi := p_ann_dist_tsi;

            FOR c IN 1 .. 2
            LOOP
               insert_to_witemds_dtl;
               v_share_cd := 999;
               v_dist_spct := 0;
               v_dist_tsi := 0;
               v_dist_prem := 0;
               v_ann_dist_tsi := 0;
            END LOOP;
      END;
   BEGIN
      IF p_rg_count = 0
      THEN
         IF p_pol_flag = '2'
         THEN                                                      -- renewal
            v_dflt_policy_exists := FALSE;
            
            FOR c IN (SELECT share_cd, dist_spct
                             , dist_spct1 -- shan 07.22.2014
                        FROM giuw_itemds_dtl a
                       WHERE a.item_no = p_item_no
                         AND a.dist_seq_no = p_dist_seq_no
                         AND dist_no =
                                (SELECT MAX(dist_no)
                                   FROM giuw_pol_dist
                                  WHERE dist_flag <> 4
                                    --add by jess 02192019 - to handle ora-01427
                                    AND policy_id = (SELECT MAX(a.old_policy_id)
                                                       FROM gipi_wpolnrep a
                                                           ,gipi_parlist b
                                                      WHERE a.par_id = p_par_id
                                                        AND a.ren_rep_sw = '1'
                                                        AND b.par_id = a.par_id
                                                        AND b.par_status NOT IN(98, 99))))
            LOOP
               v_share_cd := c.share_cd;
               v_dist_spct := c.dist_spct;
               v_dist_spct1 := c.dist_spct1;    -- shan 07.22.2014
               v_dist_tsi := ROUND (((p_dist_tsi * c.dist_spct) / 100), 2);
               v_dist_prem := ROUND (((p_dist_prem * NVL(c.dist_spct1, c.dist_spct)) / 100), 2); --ROUND (((p_dist_prem * c.dist_spct) / 100), 2);
               v_ann_dist_tsi :=
                           ROUND (((p_ann_dist_tsi * c.dist_spct) / 100), 2);
               v_sum_dist_tsi := NVL (v_sum_dist_tsi, 0)
                                 + NVL (v_dist_tsi, 0);
               v_sum_dist_prem :=
                               NVL (v_sum_dist_prem, 0)
                               + NVL (v_dist_prem, 0);
               v_sum_ann_dist_tsi :=
                         NVL (v_sum_ann_dist_tsi, 0)
                         + NVL (v_ann_dist_tsi, 0);
               --sg_alert('CREATE_GRP_DFLT_WITEMDS '||p_dist_seq_no||' - '||:b240.par_id||' - '||p_item_no||' - '||c.share_cd||' - '||c.dist_spct,'I',FALSE);
               insert_to_witemds_dtl;
               v_dflt_policy_exists := TRUE;    --shan 07.22.2014
            END LOOP;
            
            --added by shan 07.22.2014
            IF v_dflt_policy_exists = FALSE THEN
                insert_dflt_values;
            END IF;
            --end 07.22.2014
         ELSIF p_par_type = 'E'
         THEN
            --message ('insert');pause;
            /*FOR c IN (SELECT share_cd, dist_spct  -- commented out retrieving of default share from original policy for now : shan 08.06.2014
                             , dist_spct1  -- shan 07.22.2014
                        FROM giuw_itemds_dtl a
                       WHERE a.item_no = p_item_no
                         AND a.dist_seq_no = p_dist_seq_no
                         AND dist_no =
                                (SELECT dist_no
                                   FROM giuw_pol_dist
                                  WHERE dist_flag <> 4     --A.R.C. 12.28.2006
                                    AND par_id =
                                           (SELECT par_id
                                              FROM gipi_polbasic
                                             WHERE endt_seq_no = 0
                                               AND (line_cd,
                                                    subline_cd,
                                                    iss_cd,
                                                    issue_yy,
                                                    pol_seq_no,
                                                    renew_no
                                                   ) =
                                                      (SELECT line_cd,
                                                              subline_cd,
                                                              iss_cd,
                                                              issue_yy,
                                                              pol_seq_no,
                                                              renew_no
                                                         FROM gipi_wpolbas
                                                        WHERE par_id =
                                                                      p_par_id))))
            LOOP
               v_share_cd := c.share_cd;
               v_dist_spct := c.dist_spct;
               v_dist_spct1 := c.dist_spct1;    -- shan 07.22.2014  
               v_dist_tsi := ROUND (((p_dist_tsi * c.dist_spct) / 100), 2);
               v_dist_prem := ROUND (((p_dist_prem * NVL(c.dist_spct1, c.dist_spct)) / 100), 2);  --ROUND (((p_dist_prem * c.dist_spct1) / 100), 2);
               v_ann_dist_tsi :=
                           ROUND (((p_ann_dist_tsi * c.dist_spct) / 100), 2);
               v_sum_dist_tsi := NVL (v_sum_dist_tsi, 0)
                                 + NVL (v_dist_tsi, 0);
               v_sum_dist_prem :=
                               NVL (v_sum_dist_prem, 0)
                               + NVL (v_dist_prem, 0);
               v_sum_ann_dist_tsi :=
                         NVL (v_sum_ann_dist_tsi, 0)
                         + NVL (v_ann_dist_tsi, 0);
               insert_to_witemds_dtl;
               v_dflt_policy_exists := TRUE;    --shan 07.22.2014
            END LOOP;*/
            
            --added by shan 07.22.2014
            IF v_dflt_policy_exists = FALSE THEN
                insert_dflt_values;
            END IF;
            --end 07.22.2014
         ELSE
            /* Create the default distribution records based on the 100%
            ** NET RETENTION and 0% FACULTATIVE hard code defaults. */
            v_share_cd := 1;
            v_dist_spct := 100;
            v_dist_tsi := p_dist_tsi;
            v_dist_prem := p_dist_prem;
            v_ann_dist_tsi := p_ann_dist_tsi;

            FOR c IN 1 .. 2
            LOOP
               insert_to_witemds_dtl;
               v_share_cd := 999;
               v_dist_spct := 0;
               v_dist_tsi := 0;
               v_dist_prem := 0;
               v_ann_dist_tsi := 0;
            END LOOP;
         END IF;
      ELSE
       -- NULL; Nica 07.12.2012
       
        IF p_pol_flag = '2'
         THEN                                                      -- renewal
            v_dflt_policy_exists := FALSE;
            
            FOR c IN (SELECT share_cd, dist_spct
                             , dist_spct1 -- shan 07.22.2014
                        FROM giuw_wpolicyds_dtl
                       WHERE dist_seq_no = p_dist_seq_no
                         AND dist_no = p_dist_no)
            LOOP
               v_share_cd := c.share_cd;
               v_dist_spct := c.dist_spct;
               v_dist_spct1 := c.dist_spct1;    -- shan 07.22.2014
               v_dist_tsi := ROUND (((p_dist_tsi * c.dist_spct) / 100), 2);
               v_dist_prem := ROUND (((p_dist_prem * NVL(c.dist_spct1, c.dist_spct)) / 100), 2); --ROUND (((p_dist_prem * c.dist_spct) / 100), 2);
               v_ann_dist_tsi :=
                           ROUND (((p_ann_dist_tsi * c.dist_spct) / 100), 2);
               v_sum_dist_tsi := NVL (v_sum_dist_tsi, 0)
                                 + NVL (v_dist_tsi, 0);
               v_sum_dist_prem :=
                               NVL (v_sum_dist_prem, 0)
                               + NVL (v_dist_prem, 0);
               v_sum_ann_dist_tsi :=
                         NVL (v_sum_ann_dist_tsi, 0)
                         + NVL (v_ann_dist_tsi, 0);
               --sg_alert('CREATE_GRP_DFLT_WITEMDS '||p_dist_seq_no||' - '||:b240.par_id||' - '||p_item_no||' - '||c.share_cd||' - '||c.dist_spct,'I',FALSE);
               insert_to_witemds_dtl;
               v_dflt_policy_exists := TRUE;    --shan 07.22.2014
               
               IF NVL(v_dist_spct1, 0) <> 0 
               THEN
                 v_with_dist_spct1 := TRUE;
               END IF;
            END LOOP;           
        END IF;
            --added by shan 07.22.2014
        IF v_dflt_policy_exists = FALSE THEN               
            FOR c IN (SELECT rownum, a.line_cd    , a.share_cd , a.share_pct  , 
                                  a.share_amt1 , a.peril_cd , a.share_amt2 ,
                             1 true_pct 
                       FROM giis_default_dist_group a  
                    WHERE a.default_no = TO_CHAR(NVL(p_default_no, 0))
                        AND a.line_cd    = p_line_cd
                         AND a.share_cd   <> 999
                    ORDER BY a.sequence ASC)
             LOOP                 
             v_row           := c.rownum;
             v_dist_spct     := c.share_pct; --c.true_pct; -- changed by shan 07.22.2014
                 
             -- start : shan 07.22.2014
             IF v_dist_spct IS NULL THEN         
                 FOR h IN (SELECT dist_spct
                             FROM giuw_wpolicyds_dtl
                            WHERE line_cd = c.line_cd
                              AND share_cd = c.share_cd
                              AND dist_no = p_dist_no)
                 LOOP
                    v_dist_spct := h.dist_spct;
                    EXIT;
                 END LOOP; 
             END IF;
             -- end : shan 07.22.2014
                 
             v_sum_dist_spct := v_sum_dist_spct + v_dist_spct;
                 
             IF v_sum_dist_spct != 100 THEN
               v_dist_tsi         := ROUND(p_dist_tsi     * v_dist_spct / 100, 2);
               v_dist_prem        := ROUND(p_dist_prem    * v_dist_spct / 100, 2);
               v_ann_dist_tsi     := ROUND(p_ann_dist_tsi * v_dist_spct / 100, 2);
               v_sum_dist_tsi     := v_sum_dist_tsi     + v_dist_tsi;
               v_sum_dist_prem    := v_sum_dist_prem    + v_dist_prem;
               v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
             ELSE
               v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
               v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
               v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
             END IF;
             v_share_cd     := c.share_cd;
                 
             IF v_with_dist_spct1 = TRUE
             THEN
               v_dist_spct1 := v_dist_spct;
             END IF;
                 
             INSERT_TO_WITEMDS_DTL;
           END LOOP;
               
         -- end here Nica 07.12.2012
                
          -- start : shan 07.22.2014
            IF v_sum_dist_spct != 100 THEN
               v_dist_spct    := 100            - v_sum_dist_spct;
               v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
               v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
               v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
               v_share_cd     := '999';
               --p_rg_count     := p_rg_count + 1;
                   
               IF v_with_dist_spct1 = TRUE
               THEN
                 v_dist_spct1 := v_dist_spct;
               END IF;
                   
               INSERT_TO_WITEMDS_DTL;
            END IF;
        END IF;
      -- end : shan 07.22.2014
      
      /* comment ko muna kasi si p_rg_count ay laging 0
      ** so never sya papasok sa else condition
      ** Niknok 03-29-2011
      */

      /*rg_id             := FIND_GROUP(rg_name);
      v_selection_count := GET_GROUP_SELECTION_COUNT(rg_id);

      FOR c IN 1..v_selection_count
      LOOP
        v_row           := GET_GROUP_SELECTION(rg_id, c);
        v_dist_spct     := GET_GROUP_NUMBER_CELL(rg_col7, v_row);
        v_sum_dist_spct := v_sum_dist_spct + v_dist_spct;
        IF v_sum_dist_spct != 100 THEN
           v_dist_tsi         := ROUND(p_dist_tsi     * v_dist_spct / 100, 2);
           v_dist_prem        := ROUND(p_dist_prem    * v_dist_spct / 100, 2);
           v_ann_dist_tsi     := ROUND(p_ann_dist_tsi * v_dist_spct / 100, 2);
           v_sum_dist_tsi     := v_sum_dist_tsi     + v_dist_tsi;
           v_sum_dist_prem    := v_sum_dist_prem    + v_dist_prem;
           v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
        ELSE
           v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
           v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
           v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
        END IF;
        v_share_cd     := GET_GROUP_NUMBER_CELL(rg_col2, v_row);
        INSERT_TO_WITEMDS_DTL;
      END LOOP;
      */
      END IF;
   END;

   PROCEDURE create_grp_dflt_witemperilds (
      p_dist_no        IN   giuw_witemperilds_dtl.dist_no%TYPE,
      p_dist_seq_no    IN   giuw_witemperilds_dtl.dist_seq_no%TYPE,
      p_item_no        IN   giuw_witemperilds_dtl.item_no%TYPE,
      p_line_cd        IN   giuw_witemperilds_dtl.line_cd%TYPE,
      p_peril_cd       IN   giuw_witemperilds_dtl.peril_cd%TYPE,
      p_dist_tsi       IN   giuw_witemperilds_dtl.dist_tsi%TYPE,
      p_dist_prem      IN   giuw_witemperilds_dtl.dist_prem%TYPE,
      p_ann_dist_tsi   IN   giuw_witemperilds_dtl.ann_dist_tsi%TYPE,
      p_rg_count       IN   NUMBER,
      p_pol_flag       IN   gipi_wpolbas.pol_flag%TYPE,
      p_par_id         IN   gipi_wpolbas.par_id%TYPE,
      p_par_type       IN   gipi_parlist.par_type%TYPE
   )
   IS
      --rg_id        RECORDGROUP;
      rg_name              VARCHAR2 (20)                := 'DFLT_DIST_VALUES';
      rg_col2              VARCHAR2 (40)            := rg_name || '.share_cd';
      rg_col7              VARCHAR2 (40)            := rg_name || '.true_pct';
      v_selection_count    NUMBER;
      v_row                NUMBER;
      v_dist_spct          giuw_witemperilds_dtl.dist_spct%TYPE;
      v_dist_tsi           giuw_witemperilds_dtl.dist_tsi%TYPE;
      v_dist_prem          giuw_witemperilds_dtl.dist_prem%TYPE;
      v_ann_dist_tsi       giuw_witemperilds_dtl.ann_dist_tsi%TYPE;
      v_share_cd           giis_dist_share.share_cd%TYPE;
      v_peril_type         giis_peril.peril_type%TYPE;
      v_sum_dist_tsi       giuw_witemperilds_dtl.dist_tsi%TYPE       := 0;
      v_sum_dist_spct      giuw_witemperilds_dtl.dist_spct%TYPE      := 0;
      v_sum_dist_prem      giuw_witemperilds_dtl.dist_prem%TYPE      := 0;
      v_sum_ann_dist_tsi   giuw_witemperilds_dtl.ann_dist_tsi%TYPE   := 0;

      PROCEDURE insert_to_witemperilds_dtl
      IS
      BEGIN
         INSERT INTO giuw_witemperilds_dtl
                     (dist_no, dist_seq_no, line_cd, share_cd,
                      dist_spct, dist_tsi, dist_prem, ann_dist_spct,
                      ann_dist_tsi, dist_grp, item_no, peril_cd
                     )
              VALUES (p_dist_no, p_dist_seq_no, p_line_cd, v_share_cd,
                      v_dist_spct, v_dist_tsi, v_dist_prem, v_dist_spct,
                      v_ann_dist_tsi, 1, p_item_no, p_peril_cd
                     );
      END;
   BEGIN
      --msg_alert('item no '||p_item_no||' peril cd '||p_peril_cd,'I',FALSE);
      IF p_rg_count = 0
      THEN
         -- rollie 27may2005 vincent's birthday
         -- see procedure create_items for other info
         IF p_pol_flag = '2'
         THEN                                                      -- renewal
            --message('pol flag 2');pause;
            FOR c IN (SELECT share_cd, dist_spct
                        FROM giuw_policyds_dtl a
                       WHERE a.dist_seq_no = p_dist_seq_no
                         AND dist_no =
                                (SELECT MAX (dist_no)
                                   FROM giuw_pol_dist
                                  WHERE policy_id = (SELECT MAX(a.old_policy_id)
                                                       FROM gipi_wpolnrep a
                                                           ,gipi_parlist b
                                                      WHERE a.par_id = p_par_id
                                                        AND a.ren_rep_sw = '1'
                                                        AND a.par_id = b.par_id
                                                        AND b.par_status NOT IN(98, 99))))
            LOOP
               v_share_cd := c.share_cd;
               v_dist_spct := c.dist_spct;
               v_dist_tsi := ROUND (((p_dist_tsi * c.dist_spct) / 100), 2);
               v_dist_prem := ROUND (((p_dist_prem * c.dist_spct) / 100), 2);
               v_ann_dist_tsi :=
                           ROUND (((p_ann_dist_tsi * c.dist_spct) / 100), 2);
               v_sum_dist_tsi := NVL (v_sum_dist_tsi, 0)
                                 + NVL (v_dist_tsi, 0);
               v_sum_dist_prem :=
                               NVL (v_sum_dist_prem, 0)
                               + NVL (v_dist_prem, 0);
               v_sum_ann_dist_tsi :=
                         NVL (v_sum_ann_dist_tsi, 0)
                         + NVL (v_ann_dist_tsi, 0);
               insert_to_witemperilds_dtl;
            END LOOP;
         ELSIF p_par_type = 'E'
         THEN
            --message ('insert');pause;
            FOR c IN (SELECT share_cd, dist_spct
                        FROM giuw_policyds_dtl a
                       WHERE a.dist_seq_no = p_dist_seq_no
                         AND dist_no =
                                (SELECT MAX (dist_no)
                                   FROM giuw_pol_dist
                                  WHERE par_id =
                                           (SELECT par_id
                                              FROM gipi_polbasic
                                             WHERE endt_seq_no = 0
                                               AND (line_cd,
                                                    subline_cd,
                                                    iss_cd,
                                                    issue_yy,
                                                    pol_seq_no,
                                                    renew_no
                                                   ) =
                                                      (SELECT line_cd,
                                                              subline_cd,
                                                              iss_cd,
                                                              issue_yy,
                                                              pol_seq_no,
                                                              renew_no
                                                         FROM gipi_wpolbas
                                                        WHERE par_id =
                                                                      p_par_id))))
            LOOP
               v_share_cd := c.share_cd;
               v_dist_spct := c.dist_spct;
               v_dist_tsi := ROUND (((p_dist_tsi * c.dist_spct) / 100), 2);
               v_ann_dist_tsi :=
                           ROUND (((p_ann_dist_tsi * c.dist_spct) / 100), 2);
               v_dist_prem := ROUND (((p_dist_prem * c.dist_spct) / 100), 2);
               v_sum_dist_tsi := NVL (v_sum_dist_tsi, 0)
                                 + NVL (v_dist_tsi, 0);
               v_sum_dist_prem :=
                               NVL (v_sum_dist_prem, 0)
                               + NVL (v_dist_prem, 0);
               v_sum_ann_dist_tsi :=
                         NVL (v_sum_ann_dist_tsi, 0)
                         + NVL (v_ann_dist_tsi, 0);
               insert_to_witemperilds_dtl;
            END LOOP;
         ELSE
               /* Create the default distribution records based on the 100%
            ** NET RETENTION and 0% FACULTATIVE hard code defaults. */
            v_share_cd := 1;
            v_dist_spct := 100;
            v_dist_tsi := p_dist_tsi;
            v_dist_prem := p_dist_prem;
            v_ann_dist_tsi := p_ann_dist_tsi;

            FOR c IN 1 .. 2
            LOOP
               insert_to_witemperilds_dtl;
               v_share_cd := 999;
               v_dist_spct := 0;
               v_dist_tsi := 0;
               v_dist_prem := 0;
               v_ann_dist_tsi := 0;
            END LOOP;
         END IF;
      ELSE
         NULL;
      /* comment ko muna kasi si p_rg_count ay laging 0
      ** so never sya papasok sa else condition
      ** Niknok 03-29-2011
      */

      /*rg_id             := FIND_GROUP(rg_name);
      IF NOT id_null(rg_id) THEN
         v_selection_count := GET_GROUP_SELECTION_COUNT(rg_id);
      END IF;

      FOR c IN 1..v_selection_count
      LOOP
        v_row           := GET_GROUP_SELECTION(rg_id, c);
        v_dist_spct     := GET_GROUP_NUMBER_CELL(rg_col7, v_row);
        v_sum_dist_spct := v_sum_dist_spct + v_dist_spct;
        IF v_sum_dist_spct != 100 THEN
           v_dist_tsi         := ROUND(p_dist_tsi         * v_dist_spct / 100, 2);
           v_dist_prem        := ROUND(p_dist_prem        * v_dist_spct / 100, 2);
           v_ann_dist_tsi     := ROUND(p_ann_dist_tsi     * v_dist_spct / 100, 2);
           v_sum_dist_tsi     := v_sum_dist_tsi     + v_dist_tsi;
           v_sum_dist_prem    := v_sum_dist_prem    + v_dist_prem;
           v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
        ELSE
           v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
           v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
           v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
        END IF;
        v_share_cd     := GET_GROUP_NUMBER_CELL(rg_col2, v_row);
        INSERT_TO_WITEMPERILDS_DTL;
      END LOOP;*/
      END IF;
   END;

   PROCEDURE create_grp_dflt_witemperilds2 (
      p_dist_no        IN   giuw_witemperilds_dtl.dist_no%TYPE,
      p_dist_seq_no    IN   giuw_witemperilds_dtl.dist_seq_no%TYPE,
      p_item_no        IN   giuw_witemperilds_dtl.item_no%TYPE,
      p_line_cd        IN   giuw_witemperilds_dtl.line_cd%TYPE,
      p_peril_cd       IN   giuw_witemperilds_dtl.peril_cd%TYPE,
      p_dist_tsi       IN   giuw_witemperilds_dtl.dist_tsi%TYPE,
      p_dist_prem      IN   giuw_witemperilds_dtl.dist_prem%TYPE,
      p_ann_dist_tsi   IN   giuw_witemperilds_dtl.ann_dist_tsi%TYPE,
      p_rg_count       IN   NUMBER,
      p_pol_flag       IN   gipi_wpolbas.pol_flag%TYPE,
      p_par_id         IN   gipi_wpolbas.par_id%TYPE,
      p_par_type       IN   gipi_parlist.par_type%TYPE,
     p_default_no     IN   giis_default_dist.default_no%TYPE
   )
   IS
      --rg_id        RECORDGROUP;
      rg_name              VARCHAR2 (20)                := 'DFLT_DIST_VALUES';
      rg_col2              VARCHAR2 (40)            := rg_name || '.share_cd';
      rg_col7              VARCHAR2 (40)            := rg_name || '.true_pct';
      v_selection_count    NUMBER;
      v_row                NUMBER;
      v_dist_spct          giuw_witemperilds_dtl.dist_spct%TYPE;
      v_dist_tsi           giuw_witemperilds_dtl.dist_tsi%TYPE;
      v_dist_prem          giuw_witemperilds_dtl.dist_prem%TYPE;
      v_ann_dist_tsi       giuw_witemperilds_dtl.ann_dist_tsi%TYPE;
      v_share_cd           giis_dist_share.share_cd%TYPE;
      v_sum_dist_tsi       giuw_witemperilds_dtl.dist_tsi%TYPE       := 0;
      v_sum_dist_spct      giuw_witemperilds_dtl.dist_spct%TYPE      := 0;
      v_sum_dist_prem      giuw_witemperilds_dtl.dist_prem%TYPE      := 0;
      v_sum_ann_dist_tsi   giuw_witemperilds_dtl.ann_dist_tsi%TYPE   := 0;
      v_dflt_policy_exists  BOOLEAN := FALSE;   --shan 07.22.2014
      v_with_dist_spct1    BOOLEAN := FALSE;
      v_dist_spct1          giuw_wpolicyds_dtl.DIST_SPCT1%type;     -- shan 07.22.2014

      PROCEDURE insert_to_witemperilds_dtl
      IS
      BEGIN
         INSERT INTO giuw_witemperilds_dtl
                     (dist_no, dist_seq_no, line_cd, share_cd,
                      dist_spct, dist_tsi, dist_prem, ann_dist_spct,
                      ann_dist_tsi, dist_grp, item_no, peril_cd
                      , dist_spct1  -- shan 07.22.2014
                     )
              VALUES (p_dist_no, p_dist_seq_no, p_line_cd, v_share_cd,
                      v_dist_spct, v_dist_tsi, v_dist_prem, v_dist_spct,
                      v_ann_dist_tsi, 1, p_item_no, p_peril_cd
                      , v_dist_spct1  -- shan 07.22.2014
                     );
      END;
      
      --added by shan 07.22.2014      
      PROCEDURE insert_dflt_values
      IS
      BEGIN 
            /* Create the default distribution records based on the 100%
            ** NET RETENTION and 0% FACULTATIVE hard code defaults. */
            v_share_cd := 1;
            v_dist_spct := 100;
            v_dist_tsi := p_dist_tsi;
            v_dist_prem := p_dist_prem;
            v_ann_dist_tsi := p_ann_dist_tsi;

            FOR c IN 1 .. 2
            LOOP
               insert_to_witemperilds_dtl;
               v_share_cd := 999;
               v_dist_spct := 0;
               v_dist_tsi := 0;
               v_dist_prem := 0;
               v_ann_dist_tsi := 0;
            END LOOP;
      END;

   BEGIN
      IF p_rg_count = 0
      THEN
           -- rollie 27may2005 vincent's birthday
         -- see procedure create_items for other info

         --msg_alert('CREATE_GRP_DFLT_WITEMPERILDS','I',FALSE);
         IF p_pol_flag = '2'
         THEN                                                      -- renewal
            --message('pol flag 2');pause;
            v_dflt_policy_exists := FALSE;
            
            FOR c IN (SELECT share_cd, dist_spct
                             , dist_spct1 -- shan 07.22.2014
                        FROM giuw_itemperilds_dtl a
                       WHERE a.item_no = p_item_no
                         AND a.peril_cd = p_peril_cd
                         AND a.dist_seq_no = p_dist_seq_no
                         AND dist_no =
                                (SELECT MAX(dist_no)
                                   FROM giuw_pol_dist
                                  WHERE dist_flag <> 4
                                    --add by jess 02192019 - to handle ora-01427
                                    AND policy_id = (SELECT MAX(a.old_policy_id)
                                                       FROM gipi_wpolnrep a
                                                           ,gipi_parlist b
                                                      WHERE a.par_id = p_par_id
                                                        AND a.ren_rep_sw = '1'
                                                        AND b.par_id = a.par_id
                                                        AND b.par_status NOT IN(98, 99))))
            LOOP
               v_share_cd := c.share_cd;
               v_dist_spct := c.dist_spct;
               v_dist_spct1 := c.dist_spct1;    -- shan 07.22.2014
               v_dist_tsi := ROUND (((p_dist_tsi * c.dist_spct) / 100), 2);
               v_dist_prem := ROUND (((p_dist_prem * NVL(c.dist_spct1, c.dist_spct)) / 100), 2); --ROUND (((p_dist_prem * c.dist_spct) / 100), 2);
               v_ann_dist_tsi :=
                           ROUND (((p_ann_dist_tsi * c.dist_spct) / 100), 2);
               v_sum_dist_tsi := NVL (v_sum_dist_tsi, 0)
                                 + NVL (v_dist_tsi, 0);
               v_sum_dist_prem :=
                               NVL (v_sum_dist_prem, 0)
                               + NVL (v_dist_prem, 0);
               v_sum_ann_dist_tsi :=
                         NVL (v_sum_ann_dist_tsi, 0)
                         + NVL (v_ann_dist_tsi, 0);
               --sg_alert('CREATE_GRP_DFLT_WITEMPERILDS '||p_dist_seq_no||' - '||:b240.par_id||' - '||p_item_no||' - '||p_peril_cd||' - '||c.share_cd||' - '||c.dist_spct,'I',FALSE);
               insert_to_witemperilds_dtl;
               v_dflt_policy_exists := TRUE;    --shan 07.22.2014
            END LOOP;
            
            --added by shan 07.22.2014
            IF v_dflt_policy_exists = FALSE THEN
                insert_dflt_values;
            END IF;
            --end 07.22.2014
         ELSIF p_par_type = 'E'
         THEN
            --message ('insert');pause;
            /*FOR c IN (SELECT share_cd, dist_spct  -- commented out retrieving of default share from original policy for now : shan 08.06.2014
                             , dist_spct1   -- shan 07.22.2014
                        FROM giuw_itemperilds_dtl a
                       WHERE a.item_no = p_item_no
                         AND a.peril_cd = p_peril_cd
                         AND a.dist_seq_no = p_dist_seq_no
                         AND dist_no =
                                (SELECT dist_no
                                   FROM giuw_pol_dist
                                  WHERE dist_flag <> 4     --A.R.C. 12.28.2006
                                    AND par_id =
                                           (SELECT par_id
                                              FROM gipi_polbasic
                                             WHERE endt_seq_no = 0
                                               AND (line_cd,
                                                    subline_cd,
                                                    iss_cd,
                                                    issue_yy,
                                                    pol_seq_no,
                                                    renew_no
                                                   ) =
                                                      (SELECT line_cd,
                                                              subline_cd,
                                                              iss_cd,
                                                              issue_yy,
                                                              pol_seq_no,
                                                              renew_no
                                                         FROM gipi_wpolbas
                                                        WHERE par_id =
                                                                      p_par_id))))
            LOOP
               v_share_cd := c.share_cd;
               v_dist_spct := c.dist_spct;
               v_dist_spct1 := c.dist_spct1;    -- shan 07.22.2014  
               v_dist_tsi := ROUND (((p_dist_tsi * c.dist_spct) / 100), 2);
               v_dist_prem := ROUND (((p_dist_prem * NVL(c.dist_spct1, c.dist_spct)) / 100), 2);  --ROUND (((p_dist_prem * c.dist_spct1) / 100), 2);
               v_ann_dist_tsi :=
                           ROUND (((p_ann_dist_tsi * c.dist_spct) / 100), 2);
               v_sum_dist_tsi := NVL (v_sum_dist_tsi, 0)
                                 + NVL (v_dist_tsi, 0);
               v_sum_dist_prem :=
                               NVL (v_sum_dist_prem, 0)
                               + NVL (v_dist_prem, 0);
               v_sum_ann_dist_tsi :=
                         NVL (v_sum_ann_dist_tsi, 0)
                         + NVL (v_ann_dist_tsi, 0);
               insert_to_witemperilds_dtl;
               v_dflt_policy_exists := TRUE;    --shan 07.22.2014
            END LOOP;*/
            
            --added by shan 07.22.2014
            IF v_dflt_policy_exists = FALSE THEN
                insert_dflt_values;
            END IF;
            --end 07.22.2014
         ELSE
            /* Create the default distribution records based on the 100%
            ** NET RETENTION and 0% FACULTATIVE hard code defaults. */
            v_share_cd := 1;
            v_dist_spct := 100;
            v_dist_tsi := p_dist_tsi;
            v_dist_prem := p_dist_prem;
            v_ann_dist_tsi := p_ann_dist_tsi;

            FOR c IN 1 .. 2
            LOOP
               insert_to_witemperilds_dtl;
               v_share_cd := 999;
               v_dist_spct := 0;
               v_dist_tsi := 0;
               v_dist_prem := 0;
               v_ann_dist_tsi := 0;
            END LOOP;
         END IF;
      ELSE
       --  NULL; Nica 07.12.2012
         v_dflt_policy_exists := FALSE;
         
         IF p_pol_flag = '2'
         THEN                                                      -- renewal
            FOR c IN (SELECT share_cd, dist_spct
                             , dist_spct1 -- shan 07.22.2014
                        FROM giuw_wpolicyds_dtl a
                       WHERE a.dist_seq_no = p_dist_seq_no
                         AND dist_no = p_dist_no) 
            LOOP
               v_share_cd := c.share_cd;
               v_dist_spct := c.dist_spct;
               v_dist_spct1 := c.dist_spct1;    -- shan 07.22.2014
               v_dist_tsi := ROUND (((p_dist_tsi * c.dist_spct) / 100), 2);
               v_dist_prem := ROUND (((p_dist_prem * NVL(c.dist_spct1, c.dist_spct)) / 100), 2); --ROUND (((p_dist_prem * c.dist_spct) / 100), 2);
               v_ann_dist_tsi :=
                           ROUND (((p_ann_dist_tsi * c.dist_spct) / 100), 2);
               v_sum_dist_tsi := NVL (v_sum_dist_tsi, 0)
                                 + NVL (v_dist_tsi, 0);
               v_sum_dist_prem :=
                               NVL (v_sum_dist_prem, 0)
                               + NVL (v_dist_prem, 0);
               v_sum_ann_dist_tsi :=
                         NVL (v_sum_ann_dist_tsi, 0)
                         + NVL (v_ann_dist_tsi, 0);
               --sg_alert('CREATE_GRP_DFLT_WITEMPERILDS '||p_dist_seq_no||' - '||:b240.par_id||' - '||p_item_no||' - '||p_peril_cd||' - '||c.share_cd||' - '||c.dist_spct,'I',FALSE);
               insert_to_witemperilds_dtl;
               v_dflt_policy_exists := TRUE;    --shan 07.22.2014
               
               IF NVL(v_dist_spct1, 0) <> 0 
               THEN
                 v_with_dist_spct1 := TRUE;
               END IF;
            END LOOP;
         END IF;
            
            --added by shan 07.22.2014
        IF v_dflt_policy_exists = FALSE THEN                  
            FOR c IN (SELECT rownum, a.line_cd    , a.share_cd , a.share_pct  , 
                                  a.share_amt1 , a.peril_cd , a.share_amt2 ,
                             1 true_pct 
                       FROM giis_default_dist_group a  
                    WHERE a.default_no = TO_CHAR(NVL(p_default_no, 0))
                        AND a.line_cd    = p_line_cd
                         AND a.share_cd   <> 999
                    ORDER BY a.sequence ASC)
           LOOP
             v_row           := c.rownum;
             v_dist_spct     := c.share_pct; --c.true_pct;
                 
             -- start : shan 07.22.2014
             IF v_dist_spct IS NULL THEN         
                 FOR h IN (SELECT dist_spct
                             FROM giuw_wpolicyds_dtl
                            WHERE line_cd = c.line_cd
                              AND share_cd = c.share_cd
                              AND dist_no = p_dist_no)
                 LOOP
                    v_dist_spct := h.dist_spct;
                    EXIT;
                 END LOOP; 
             END IF;
             -- end : shan 07.22.2014
                 
             v_sum_dist_spct := v_sum_dist_spct + v_dist_spct;
                 
             IF v_sum_dist_spct != 100 THEN
               v_dist_tsi         := ROUND(p_dist_tsi         * v_dist_spct / 100, 2);
               v_dist_prem        := ROUND(p_dist_prem        * v_dist_spct / 100, 2);
               v_ann_dist_tsi     := ROUND(p_ann_dist_tsi     * v_dist_spct / 100, 2);
               v_sum_dist_tsi     := v_sum_dist_tsi     + v_dist_tsi;
               v_sum_dist_prem    := v_sum_dist_prem    + v_dist_prem;
               v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
             ELSE
               v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
               v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
               v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
             END IF;
             --v_share_cd     := GET_GROUP_NUMBER_CELL(rg_col2, v_row);
             v_share_cd     := c.share_cd;
                 
             IF v_with_dist_spct1 = TRUE
             THEN
               v_dist_spct1 := v_dist_spct;
             END IF;
                 
             INSERT_TO_WITEMPERILDS_DTL;
           END LOOP;
              
          -- start : shan 07.22.2014
            IF v_sum_dist_spct != 100 THEN
               v_dist_spct    := 100            - v_sum_dist_spct;
               v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
               v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
               v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
               v_share_cd     := '999';
               --p_rg_count     := p_rg_count + 1;
                   
               IF v_with_dist_spct1 = TRUE
               THEN
                 v_dist_spct1 := v_dist_spct;
               END IF;                   
                   
               INSERT_TO_WITEMPERILDS_DTL;
            END IF;
         END IF;
      -- end : shan 07.22.2014
      
      /* comment ko muna kasi si p_rg_count ay laging 0
      ** so never sya papasok sa else condition
      ** Niknok 03-29-2011
      */

      /*rg_id             := FIND_GROUP(rg_name);
      v_selection_count := GET_GROUP_SELECTION_COUNT(rg_id);

      FOR c IN 1..v_selection_count
      LOOP
        v_row           := GET_GROUP_SELECTION(rg_id, c);
        v_dist_spct     := GET_GROUP_NUMBER_CELL(rg_col7, v_row);
        v_sum_dist_spct := v_sum_dist_spct + v_dist_spct;
        IF v_sum_dist_spct != 100 THEN
           v_dist_tsi         := ROUND(p_dist_tsi         * v_dist_spct / 100, 2);
           v_dist_prem        := ROUND(p_dist_prem        * v_dist_spct / 100, 2);
           v_ann_dist_tsi     := ROUND(p_ann_dist_tsi     * v_dist_spct / 100, 2);
           v_sum_dist_tsi     := v_sum_dist_tsi     + v_dist_tsi;
           v_sum_dist_prem    := v_sum_dist_prem    + v_dist_prem;
           v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
        ELSE
           v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
           v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
           v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
        END IF;
        v_share_cd     := GET_GROUP_NUMBER_CELL(rg_col2, v_row);
        INSERT_TO_WITEMPERILDS_DTL;
      END LOOP;*/
      END IF;
   END;

   PROCEDURE create_grp_dflt_wperilds (
      p_dist_no        IN   giuw_wperilds_dtl.dist_no%TYPE,
      p_dist_seq_no    IN   giuw_wperilds_dtl.dist_seq_no%TYPE,
      p_line_cd        IN   giuw_wperilds_dtl.line_cd%TYPE,
      p_peril_cd       IN   giuw_wperilds_dtl.peril_cd%TYPE,
      p_dist_tsi       IN   giuw_wperilds_dtl.dist_tsi%TYPE,
      p_dist_prem      IN   giuw_wperilds_dtl.dist_prem%TYPE,
      p_ann_dist_tsi   IN   giuw_wperilds_dtl.ann_dist_tsi%TYPE,
      p_rg_count       IN   NUMBER,
      p_pol_flag       IN   gipi_wpolbas.pol_flag%TYPE,
      p_par_id         IN   gipi_wpolbas.par_id%TYPE,
      p_par_type       IN   gipi_parlist.par_type%TYPE
   )
   IS
      --rg_id        RECORDGROUP;
      rg_name              VARCHAR2 (20)                := 'DFLT_DIST_VALUES';
      rg_col2              VARCHAR2 (40)            := rg_name || '.share_cd';
      rg_col7              VARCHAR2 (40)            := rg_name || '.true_pct';
      v_selection_count    NUMBER;
      v_row                NUMBER;
      v_dist_spct          giuw_wperilds_dtl.dist_spct%TYPE;
      v_dist_tsi           giuw_wperilds_dtl.dist_tsi%TYPE;
      v_dist_prem          giuw_wperilds_dtl.dist_prem%TYPE;
      v_ann_dist_tsi       giuw_wperilds_dtl.ann_dist_tsi%TYPE;
      v_share_cd           giis_dist_share.share_cd%TYPE;
      v_sum_dist_tsi       giuw_wperilds_dtl.dist_tsi%TYPE       := 0;
      v_sum_dist_spct      giuw_wperilds_dtl.dist_spct%TYPE      := 0;
      v_sum_dist_prem      giuw_wperilds_dtl.dist_prem%TYPE      := 0;
      v_sum_ann_dist_tsi   giuw_wperilds_dtl.ann_dist_tsi%TYPE   := 0;

      PROCEDURE insert_to_wperilds_dtl
      IS
      BEGIN
         INSERT INTO giuw_wperilds_dtl
                     (dist_no, dist_seq_no, line_cd, share_cd,
                      dist_spct, dist_tsi, dist_prem, ann_dist_spct,
                      ann_dist_tsi, dist_grp, peril_cd
                     )
              VALUES (p_dist_no, p_dist_seq_no, p_line_cd, v_share_cd,
                      v_dist_spct, v_dist_tsi, v_dist_prem, v_dist_spct,
                      v_ann_dist_tsi, 1, p_peril_cd
                     );
      END;
   BEGIN
      IF p_rg_count = 0
      THEN
                 -- rollie 27may2005 vincent's birthday
         -- see procedure create_items for other info
         IF p_pol_flag = '2'
         THEN                                                      -- renewal
            ---message('pol flag 2');pause;
            FOR c IN (SELECT share_cd, dist_spct
                        FROM giuw_policyds_dtl a
                       WHERE a.dist_seq_no = p_dist_seq_no
                         AND dist_no =
                                (SELECT MAX (dist_no)
                                   FROM giuw_pol_dist
                                  WHERE policy_id = (SELECT MAX(a.old_policy_id)
                                                       FROM gipi_wpolnrep a
                                                           ,gipi_parlist b
                                                      WHERE a.par_id = p_par_id
                                                        AND a.ren_rep_sw = '1'
                                                        AND a.par_id = b.par_id
                                                        AND b.par_status NOT IN(98, 99))))
            LOOP
               --message(v_share_cd||' - '||v_dist_spct||' - '||v_dist_tsi||' - '||v_dist_prem||' - '||p_peril_cd);pause;
               v_share_cd := c.share_cd;
               v_dist_spct := c.dist_spct;
               v_dist_tsi := ROUND (((p_dist_tsi * c.dist_spct) / 100), 2);
               v_dist_prem := ROUND (((p_dist_prem * c.dist_spct) / 100), 2);
               v_ann_dist_tsi :=
                           ROUND (((p_ann_dist_tsi * c.dist_spct) / 100), 2);
               v_sum_dist_tsi := NVL (v_sum_dist_tsi, 0)
                                 + NVL (v_dist_tsi, 0);
               v_sum_dist_prem :=
                               NVL (v_sum_dist_prem, 0)
                               + NVL (v_dist_prem, 0);
               v_sum_ann_dist_tsi :=
                         NVL (v_sum_ann_dist_tsi, 0)
                         + NVL (v_ann_dist_tsi, 0);
               --message(v_share_cd||' - '||v_dist_spct||' - '||v_dist_tsi||' - '||v_dist_prem||' - '||p_peril_cd);pause;
               insert_to_wperilds_dtl;
            END LOOP;
         ELSIF p_par_type = 'E'
         THEN
            --message ('insert');pause;
            FOR c IN (SELECT share_cd, dist_spct
                        FROM giuw_policyds_dtl a
                       WHERE a.dist_seq_no = p_dist_seq_no
                         AND dist_no =
                                (SELECT MAX (dist_no)
                                   FROM giuw_pol_dist
                                  WHERE par_id =
                                           (SELECT par_id
                                              FROM gipi_polbasic
                                             WHERE endt_seq_no = 0
                                               AND (line_cd,
                                                    subline_cd,
                                                    iss_cd,
                                                    issue_yy,
                                                    pol_seq_no,
                                                    renew_no
                                                   ) =
                                                      (SELECT line_cd,
                                                              subline_cd,
                                                              iss_cd,
                                                              issue_yy,
                                                              pol_seq_no,
                                                              renew_no
                                                         FROM gipi_wpolbas
                                                        WHERE par_id =
                                                                      p_par_id))))
            LOOP
               v_share_cd := c.share_cd;
               v_dist_spct := c.dist_spct;
               v_dist_tsi := ROUND (((p_dist_tsi * c.dist_spct) / 100), 2);
               v_dist_prem := ROUND (((p_dist_prem * c.dist_spct) / 100), 2);
               v_ann_dist_tsi :=
                           ROUND (((p_ann_dist_tsi * c.dist_spct) / 100), 2);
               v_sum_dist_tsi := NVL (v_sum_dist_tsi, 0)
                                 + NVL (v_dist_tsi, 0);
               v_sum_dist_prem :=
                               NVL (v_sum_dist_prem, 0)
                               + NVL (v_dist_prem, 0);
               v_sum_ann_dist_tsi :=
                         NVL (v_sum_ann_dist_tsi, 0)
                         + NVL (v_ann_dist_tsi, 0);
               insert_to_wperilds_dtl;
            END LOOP;
         ELSE
               /* Create the default distribution records based on the 100%
            ** NET RETENTION and 0% FACULTATIVE hard code defaults. */
            v_share_cd := 1;
            v_dist_spct := 100;
            v_dist_tsi := p_dist_tsi;
            v_dist_prem := p_dist_prem;
            v_ann_dist_tsi := p_ann_dist_tsi;

            FOR c IN 1 .. 2
            LOOP
               insert_to_wperilds_dtl;
               v_share_cd := 999;
               v_dist_spct := 0;
               v_dist_tsi := 0;
               v_dist_prem := 0;
               v_ann_dist_tsi := 0;
            END LOOP;
         END IF;
      ELSE
         NULL;
      /* comment ko muna kasi si p_rg_count ay laging 0
      ** so never sya papasok sa else condition
      ** Niknok 03-29-2011
      */

      /*rg_id             := FIND_GROUP(rg_name);
      IF NOT id_null(rg_id) THEN
         v_selection_count := GET_GROUP_SELECTION_COUNT(rg_id);
      END IF;

      FOR c IN 1..v_selection_count
      LOOP
        v_row           := GET_GROUP_SELECTION(rg_id, c);
        v_dist_spct     := GET_GROUP_NUMBER_CELL(rg_col7, v_row);
        v_sum_dist_spct := v_sum_dist_spct + v_dist_spct;

        IF v_sum_dist_spct != 100 THEN
           v_dist_tsi         := ROUND(p_dist_tsi         * v_dist_spct / 100, 2);
           v_dist_prem        := ROUND(p_dist_prem        * v_dist_spct / 100, 2);
           v_ann_dist_tsi     := ROUND(p_ann_dist_tsi     * v_dist_spct / 100, 2);
           v_sum_dist_tsi     := v_sum_dist_tsi     + v_dist_tsi;
           v_sum_dist_prem    := v_sum_dist_prem    + v_dist_prem;
           v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
        ELSE
           v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
           v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
           v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
        END IF;
        v_share_cd     := GET_GROUP_NUMBER_CELL(rg_col2, v_row);
        INSERT_TO_WPERILDS_DTL;
      END LOOP; */
      END IF;
   END;

   PROCEDURE create_grp_dflt_dist (
      p_dist_no          IN       giuw_wpolicyds.dist_no%TYPE,
      p_dist_seq_no      IN       giuw_wpolicyds.dist_seq_no%TYPE,
      p_dist_flag        IN       giuw_wpolicyds.dist_flag%TYPE,
      p_policy_tsi       IN       giuw_wpolicyds.tsi_amt%TYPE,
      p_policy_premium   IN       giuw_wpolicyds.prem_amt%TYPE,
      p_policy_ann_tsi   IN       giuw_wpolicyds.ann_tsi_amt%TYPE,
      p_item_grp         IN       giuw_wpolicyds.item_grp%TYPE,
      p_line_cd          IN       giis_line.line_cd%TYPE,
      p_rg_count         IN OUT   NUMBER,
      p_default_type     IN       giis_default_dist.default_type%TYPE,
      p_currency_rt      IN       gipi_witem.currency_rt%TYPE,
      p_par_id           IN       gipi_parlist.par_id%TYPE,
      p_pol_flag         IN       gipi_wpolbas.pol_flag%TYPE,
      p_par_type         IN       gipi_parlist.par_type%TYPE,
      p_dist_exists      IN       VARCHAR2
      ,p_default_no       IN       giis_default_dist.default_no%TYPE --added edgar 09/17/2014
   )
   IS
      v_peril_cd        giis_peril.peril_cd%TYPE;
      v_peril_tsi       giuw_wperilds.tsi_amt%TYPE       := 0;
      v_peril_premium   giuw_wperilds.prem_amt%TYPE      := 0;
      v_peril_ann_tsi   giuw_wperilds.ann_tsi_amt%TYPE   := 0;
      v_exist           VARCHAR2 (1)                     := 'N';
      v_insert_sw       VARCHAR2 (1)                     := 'N';
      dist_cnt          NUMBER                           := 0;
      dist_max          giuw_pol_dist.dist_no%TYPE;
      dist_item         giuw_pol_dist.item_grp%TYPE;
----------------------------
      v_prem_amt        gipi_witmperl.prem_amt%TYPE;
      v_tsi_amt         gipi_witmperl.tsi_amt%TYPE;
      --gipi_witmperl.prem_amt%type;--vj 080409
      v_ann_tsi_amt     gipi_witmperl.ann_tsi_amt%TYPE;
                               --gipi_witmperl.prem_amt%type;     --vj 080409
----------------------------
      v_item_grp        giuw_pol_dist.item_grp%TYPE;

      /* Updates the amounts of the previously processed PERIL_CD
      ** while looping inside cursor C3.  After which, the records
      ** for table GIUW_WPERILDS_DTL are also created.
      ** NOTE:  This is a LOCAL PROCEDURE BODY called below. */
      PROCEDURE upd_create_wperil_dtl_data
      IS
      BEGIN
         create_grp_dflt_wperilds (p_dist_no,
                                   p_dist_seq_no,
                                   p_line_cd,
                                   v_peril_cd,
                                   v_peril_tsi,
                                   v_peril_premium,
                                   v_peril_ann_tsi,
                                   p_rg_count,
                                   p_pol_flag,
                                   p_par_id,
                                   p_par_type
                                  );
      END;
   BEGIN
      FOR a IN (SELECT item_grp
                  FROM giuw_pol_dist
                 WHERE dist_no = p_dist_no)
      LOOP
         v_item_grp := a.item_grp;
         EXIT;
      END LOOP;

      SELECT COUNT (dist_no), MAX (dist_no)
        INTO dist_cnt, dist_max
        FROM giuw_pol_dist
       WHERE par_id = p_par_id AND item_grp = NVL (v_item_grp, item_grp);

      /*added by glyza 03.18.08 to handle error divisor equal to zero*/
      IF dist_cnt = 0 AND dist_max IS NULL
      THEN
         BEGIN
            SELECT COUNT (dist_no), MAX (dist_no)
              INTO dist_cnt, dist_max
              FROM giuw_pol_dist
             WHERE par_id = p_par_id AND item_grp IS NULL;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               NULL;
         END;
      END IF;

/************************************/
/* Create records in table GIUW_WPOLICYDS and GIUW_WPOLICYDS_DTL
** for the specified DIST_SEQ_NO. */
      IF NVL (p_dist_exists, 'N') = 'N'
      THEN
         IF p_dist_no = dist_max
         THEN
            /* added by glyza 04.15.08 */
            FOR x IN
               (SELECT SUM
                          (NVL
                              (DECODE (c.peril_type, 'B', a.tsi_amt, 0), 0)
/*beth- (ROUND((NVL(DECODE(c.peril_type,'B',a.tsi_amt,0),0)/dist_cnt),2) * (dist_cnt - 1))*/
                          ) tsi_amt,
                       SUM (  NVL (a.prem_amt, 0)
                            - (  ROUND ((NVL (a.prem_amt, 0) / dist_cnt), 2)
                               * (dist_cnt - 1)
                              )
                           ) prem_amt,
                       SUM
                          (NVL
                              (DECODE (c.peril_type, 'B', a.ann_tsi_amt, 0),
                               0)
/*beth- (ROUND((NVL(DECODE(c.peril_type,'B',a.ann_tsi_amt,0),0)/dist_cnt),2) * (dist_cnt - 1))*/
                          ) ann_tsi_amt
                  FROM gipi_witmperl a, gipi_witem b, giis_peril c
                 WHERE a.par_id = b.par_id
                   AND a.item_no = b.item_no
                   AND a.par_id = p_par_id
                   AND b.item_grp = NVL (v_item_grp, p_item_grp)
                   AND a.peril_cd = c.peril_cd                --glyza 06.04.08
                   AND c.line_cd = p_line_cd)                 --glyza 06.04.08
            LOOP
               v_tsi_amt := x.tsi_amt;
               v_prem_amt := x.prem_amt;
               v_ann_tsi_amt := x.ann_tsi_amt;
            END LOOP;

/***********************************/
            INSERT INTO giuw_wpolicyds
                        (dist_no, dist_seq_no, dist_flag, tsi_amt,
                         prem_amt, ann_tsi_amt, item_grp
                        )
                 VALUES (p_dist_no, p_dist_seq_no, p_dist_flag, v_tsi_amt,
--NVL(p_policy_tsi,0) - (ROUND((NVL(p_policy_tsi,0)/dist_cnt),2) * (dist_cnt - 1)),
                         v_prem_amt,
--NVL(p_policy_premium,0) - (ROUND((NVL(p_policy_premium,0)/dist_cnt),2) * (dist_cnt - 1)),
                                    v_ann_tsi_amt,
--NVL(p_policy_ann_tsi,0) - (ROUND((NVL(p_policy_ann_tsi,0)/dist_cnt),2) * (dist_cnt - 1)),
                                                  p_item_grp
                        );
         ELSE
            /* added by glyza 04.15.08 */
            FOR x IN
               (SELECT SUM
                          (ROUND
                               ((NVL (DECODE (c.peril_type,
                                              'B', a.tsi_amt,
                                              0
                                             ),
                                      0
                                     )                       /*beth/dist_cnt*/
                                ),
                                2
                               )
                          ) tsi_amt,
                       SUM (ROUND ((NVL (a.prem_amt, 0) / dist_cnt), 2)
                           ) prem_amt,
                       SUM
                          (ROUND
                              ((NVL (DECODE (c.peril_type,
                                             'B', a.ann_tsi_amt,
                                             0
                                            ),
                                     0
                                    )                        /*beth/dist_cnt*/
                               ),
                               2
                              )
                          ) ann_tsi_amt
                  FROM gipi_witmperl a, gipi_witem b, giis_peril c
                 WHERE a.par_id = b.par_id
                   AND a.item_no = b.item_no
                   AND a.par_id = p_par_id
                   AND b.item_grp = NVL (v_item_grp, p_item_grp)
                   AND a.peril_cd = c.peril_cd              --glyza 06.04.2008
                   AND c.line_cd = p_line_cd)
            LOOP
               v_tsi_amt := x.tsi_amt;
               v_prem_amt := x.prem_amt;
               v_ann_tsi_amt := x.ann_tsi_amt;
            END LOOP;

/****************************/
            INSERT INTO giuw_wpolicyds
                        (dist_no, dist_seq_no, dist_flag, tsi_amt,
                         prem_amt, ann_tsi_amt, item_grp
                        )
                 VALUES (p_dist_no, p_dist_seq_no, p_dist_flag,
                                                               --p_policy_tsi/dist_cnt, p_policy_premium/dist_cnt, p_policy_ann_tsi/dist_cnt,
                                                               v_tsi_amt,
                         v_prem_amt, v_ann_tsi_amt, p_item_grp
                        );
         END IF;
      ELSE
         IF p_dist_no = dist_max
         THEN
            /* added by glyza 04.18.08 */
            FOR x IN
               (SELECT SUM
                          (NVL
                              (DECODE (c.peril_type, 'B', b490.tsi_amt, 0), 0)
/*beth- (ROUND((NVL(DECODE(c.peril_type,'B',b490.tsi_amt,0),0)/dist_cnt),2) * (dist_cnt - 1))*/
                          ) tsi_amt,
                       SUM (  NVL (b490.prem_amt, 0)
                            - (  ROUND ((NVL (b490.prem_amt, 0) / dist_cnt),
                                        2)
                               * (dist_cnt - 1)
                              )
                           ) prem_amt,
                       SUM
                          (NVL
                              (DECODE (c.peril_type,
                                       'B', b490.ann_tsi_amt,
                                       0
                                      ),
                               0
                              )
/*beth- (ROUND((NVL(DECODE(c.peril_type,'B',b490.ann_tsi_amt,0),0)/dist_cnt),2) * (dist_cnt - 1))*/
                          ) ann_tsi_amt
                  FROM gipi_witmperl b490, gipi_witem b480, giis_peril c
                 WHERE b490.item_no = b480.item_no
                   AND b490.par_id = b480.par_id
                   AND b480.item_grp = p_item_grp
                   AND b480.par_id = p_par_id
                   AND b490.peril_cd = c.peril_cd                        --gly
                   AND c.line_cd = p_line_cd                             --gly
                   AND EXISTS (
                          SELECT 1
                            FROM giuw_wpolicyds c
                           WHERE 1 = 1
                             AND c.dist_no = p_dist_no
                             AND c.dist_seq_no = p_dist_seq_no
                             AND c.item_grp = p_item_grp
                             AND c.item_grp = b480.item_grp)
                   AND EXISTS (
                          SELECT 1
                            FROM giuw_witemds c
                           WHERE 1 = 1
                             AND c.dist_no = p_dist_no
                             AND c.dist_seq_no = p_dist_seq_no
                             AND c.item_no = b480.item_no))
            LOOP
               v_tsi_amt := x.tsi_amt;
               v_prem_amt := x.prem_amt;
               v_ann_tsi_amt := x.ann_tsi_amt;

/***************************/
               UPDATE giuw_wpolicyds
                  SET tsi_amt = v_tsi_amt,
--NVL(p_policy_tsi,0),--NVL(p_policy_tsi,0) - (ROUND((NVL(p_policy_tsi,0)/dist_cnt),2) * (dist_cnt - 1)),
                      prem_amt = v_prem_amt,
--NVL(p_policy_premium,0),--NVL(p_policy_premium,0) - (ROUND((NVL(p_policy_premium,0)/dist_cnt),2) * (dist_cnt - 1)),
                      ann_tsi_amt = v_ann_tsi_amt
--NVL(p_policy_ann_tsi,0)--NVL(p_policy_ann_tsi,0) - (ROUND((NVL(p_policy_ann_tsi,0)/dist_cnt),2) * (dist_cnt - 1))
               WHERE  dist_no = p_dist_no AND dist_seq_no = p_dist_seq_no;
            END LOOP;
         ELSE
            /* added by glyza 04.15.08 */
            FOR x IN
               (SELECT SUM
                          (ROUND
                               ((NVL (DECODE (c.peril_type,
                                              'B', b490.tsi_amt,
                                              0
                                             ),
                                      0
                                     )                       /*beth/dist_cnt*/
                                ),
                                2
                               )
                          ) tsi_amt,
                       SUM (ROUND ((NVL (b490.prem_amt, 0) / dist_cnt), 2)
                           ) prem_amt,
                       SUM
                          (ROUND
                              ((NVL
                                   (DECODE (c.peril_type,
                                            'B', b490.ann_tsi_amt,
                                            0
                                           ),
                                    0
                                   )                         /*beth/dist_cnt*/
                               ),
                               2
                              )
                          ) ann_tsi_amt
                  FROM gipi_witmperl b490, gipi_witem b480, giis_peril c
                 WHERE b490.item_no = b480.item_no
                   AND b490.par_id = b480.par_id
                   AND b480.item_grp = p_item_grp
                   AND b480.par_id = p_par_id
                   AND b490.peril_cd = c.peril_cd                      --glyza
                   AND c.line_cd = p_line_cd                           --glyza
                   AND EXISTS (
                          SELECT 1
                            FROM giuw_wpolicyds c
                           WHERE 1 = 1
                             AND c.dist_no = p_dist_no
                             AND c.dist_seq_no = p_dist_seq_no
                             AND c.item_grp = p_item_grp
                             AND c.item_grp = b480.item_grp)
                   AND EXISTS (
                          SELECT 1
                            FROM giuw_witemds c
                           WHERE 1 = 1
                             AND c.dist_no = p_dist_no
                             AND c.dist_seq_no = p_dist_seq_no
                             AND c.item_no = b480.item_no))
            LOOP
               v_tsi_amt := x.tsi_amt;
               v_prem_amt := x.prem_amt;
               v_ann_tsi_amt := x.ann_tsi_amt;

/****************************/
               UPDATE giuw_wpolicyds
                  SET tsi_amt = v_tsi_amt,
                      --variables.v_tsi_amt,--p_policy_tsi,--p_policy_tsi / dist_cnt,
                      prem_amt = v_prem_amt,
                      --p_policy_premium,--p_policy_premium / dist_cnt,
                      ann_tsi_amt = v_ann_tsi_amt
                --p_policy_ann_tsi--p_policy_ann_tsi / dist_cnt
               WHERE  dist_no = p_dist_no AND dist_seq_no = p_dist_seq_no;
            END LOOP;
         END IF;
      END IF;

      /*CREATE_GRP_DFLT_WPOLICYDS
                    (p_dist_no    , p_dist_seq_no    , p_line_cd        ,
                     p_policy_tsi , p_policy_premium , p_policy_ann_tsi ,
                     p_rg_count   , p_default_type   , p_currency_rt    ,
                     p_par_id     , p_item_grp);*/    ---GRACE

      /* Get the amounts for each item in table GIPI_WITEM in preparation
      ** for data insertion to its corresponding distribution tables. */
      --msg_alert('itemds','I',FALSE);
      IF NVL (p_dist_exists, 'N') = 'N'
      THEN
         FOR c2 IN (SELECT a.item_no, a.tsi_amt, a.prem_amt, a.ann_tsi_amt
                      FROM gipi_witem a
                     WHERE EXISTS (
                              SELECT 1
                                FROM gipi_witmperl b
                               WHERE b.par_id = a.par_id
                                 AND b.item_no = a.item_no)
                       AND a.item_grp = p_item_grp
                       AND a.par_id = p_par_id)
         LOOP
            /* Create records in table GIUW_WITEMDS and GIUW_WITEMDS_DTL
            ** for the specified DIST_SEQ_NO. */
            IF p_dist_no = dist_max
            THEN
               /* added by glyza 04.15.08 */
               FOR xyz IN
                  (SELECT SUM
                             (NVL
                                 (DECODE (c.peril_type, 'B', tsi_amt, 0), 0)
/*beth- (ROUND((NVL(DECODE(c.peril_type,'B',tsi_amt,0),0)/dist_cnt),2) * (dist_cnt - 1))*/
                             ) tsi_amt,
                          SUM (  NVL (prem_amt, 0)
                               - (  ROUND ((NVL (prem_amt, 0) / dist_cnt), 2)
                                  * (dist_cnt - 1)
                                 )
                              ) prem_amt,
                          SUM
                             (NVL
                                 (DECODE (c.peril_type, 'B', ann_tsi_amt, 0),
                                  0
                                 )
/*beth- (ROUND((NVL(DECODE(c.peril_type,'B',ann_tsi_amt,0),0)/dist_cnt),2) * (dist_cnt - 1))*/
                             ) ann_tsi_amt
                     FROM gipi_witmperl a, giis_peril c
                    WHERE par_id = p_par_id
                      AND item_no = c2.item_no
                      AND a.peril_cd = c.peril_cd
                      AND c.line_cd = p_line_cd)
               LOOP
                  v_tsi_amt := xyz.tsi_amt;
                  v_prem_amt := xyz.prem_amt;
                  v_ann_tsi_amt := xyz.ann_tsi_amt;
               END LOOP;

/***********************************/
               INSERT INTO giuw_witemds
                           (dist_no, dist_seq_no, item_no, tsi_amt,
                            prem_amt, ann_tsi_amt
                           )
                    VALUES (p_dist_no, p_dist_seq_no, c2.item_no, v_tsi_amt,
--NVL(c2.tsi_amt,0) - (ROUND((NVL(c2.tsi_amt,0)/dist_cnt),2) * (dist_cnt - 1)),
                            v_prem_amt,
--NVL(c2.prem_amt,0) - (ROUND((NVL(c2.prem_amt,0)/dist_cnt),2) * (dist_cnt - 1)),
                                       v_ann_tsi_amt
                           );

--NVL(c2.ann_tsi_amt,0) - (ROUND((NVL(c2.ann_tsi_amt,0)/dist_cnt),2) * (dist_cnt - 1)));

              -- jhing 12.12.2014 commented out. Itemds_dtl should be inserted after record in giuw_wpolicyds_dtl is inserted 
             /*  create_grp_dflt_witemds (p_dist_no,
                                        p_dist_seq_no,
                                        c2.item_no,
                                        p_line_cd,
                                        v_tsi_amt,
--NVL(c2.tsi_amt,0) - (ROUND((NVL(c2.tsi_amt,0)/dist_cnt),2) * (dist_cnt - 1)),
                                        v_prem_amt,
--NVL(c2.prem_amt,0) - (ROUND((NVL(c2.prem_amt,0)/dist_cnt),2) * (dist_cnt - 1)),
                                        v_ann_tsi_amt,
--NVL(c2.ann_tsi_amt,0) - (ROUND((NVL(c2.ann_tsi_amt,0)/dist_cnt),2) * (dist_cnt - 1)),
                                        p_rg_count,
                                        p_pol_flag,
                                        p_par_id,
                                        p_par_type
                                       ); */
            ELSE
               /* added by glyza 04.15.08 */
               FOR xyz IN
                  (SELECT SUM
                             (ROUND
                                 ((NVL
                                      (DECODE (c.peril_type, 'B', tsi_amt, 0),
                                       0
                                      )                      /*beth/dist_cnt*/
                                  ),
                                  2
                                 )
                             ) tsi_amt,
                          SUM (ROUND ((NVL (prem_amt, 0) / dist_cnt), 2)
                              ) prem_amt,
                          SUM
                             (ROUND
                                 ((NVL
                                      (DECODE (c.peril_type,
                                               'B', ann_tsi_amt,
                                               0
                                              ),
                                       0
                                      )                      /*beth/dist_cnt*/
                                  ),
                                  2
                                 )
                             ) ann_tsi_amt
                     FROM gipi_witmperl a, giis_peril c
                    WHERE par_id = p_par_id
                      AND item_no = c2.item_no
                      AND a.peril_cd = c.peril_cd
                      AND c.line_cd = p_line_cd)
               LOOP
                  v_tsi_amt := xyz.tsi_amt;
                  v_prem_amt := xyz.prem_amt;
                  v_ann_tsi_amt := xyz.ann_tsi_amt;
               END LOOP;

/****************************/
               INSERT INTO giuw_witemds
                           (dist_no, dist_seq_no, item_no, tsi_amt,
                            prem_amt, ann_tsi_amt
                           )
                    VALUES (p_dist_no, p_dist_seq_no, c2.item_no,
                                                                 --c2.tsi_amt / dist_cnt, c2.prem_amt / dist_cnt, c2.ann_tsi_amt / dist_cnt);
                                                                 v_tsi_amt,
                            v_prem_amt, v_ann_tsi_amt
                           );

              -- jhing 12.12.2014 commented out record in giuw_witemds_dtl should be inserted after record in giuw_wpolicyds_dtl has been created 
             /*  create_grp_dflt_witemds
                                   (p_dist_no,
                                    p_dist_seq_no,
                                    c2.item_no,
                                    p_line_cd,
                                    v_tsi_amt,
                                    v_prem_amt,
                                    --c2.tsi_amt / dist_cnt, c2.prem_amt / dist_cnt,
                                    v_ann_tsi_amt,
                                                  --c2.ann_tsi_amt / dist_cnt,
                                    p_rg_count,
                                    p_pol_flag,
                                    p_par_id,
                                    p_par_type
                                   );  */
            END IF;
         END LOOP;
      ELSE
         FOR c2 IN (SELECT a.item_no, b.tsi_amt, b.prem_amt, b.ann_tsi_amt
                      FROM giuw_witemds a, gipi_witem b
                     WHERE a.dist_no = p_dist_no
                       AND a.dist_seq_no = p_dist_seq_no
                       AND a.item_no = b.item_no
                       AND b.par_id = p_par_id
                       AND EXISTS (
                              SELECT 1
                                FROM gipi_witmperl c
                               WHERE b.par_id = c.par_id
                                 AND b.item_no = c.item_no))
         LOOP
            IF p_dist_no = dist_max
            THEN
               /* added by glyza 04.15.08 */
               FOR xyz IN
                  (SELECT SUM
                             (NVL
                                 (DECODE (c.peril_type, 'B', tsi_amt, 0), 0)
/*beth- (ROUND((NVL(DECODE(c.peril_type,'B',tsi_amt,0),0)/dist_cnt),2) * (dist_cnt - 1))*/
                             ) tsi_amt,
                          SUM (  NVL (prem_amt, 0)
                               - (  ROUND ((NVL (prem_amt, 0) / dist_cnt), 2)
                                  * (dist_cnt - 1)
                                 )
                              ) prem_amt,
                          SUM
                             (NVL
                                 (DECODE (c.peril_type, 'B', ann_tsi_amt, 0),
                                  0
                                 )
/*beth- (ROUND((NVL(DECODE(c.peril_type,'B',ann_tsi_amt,0),0)/dist_cnt),2) * (dist_cnt - 1))*/
                             ) ann_tsi_amt
                     FROM gipi_witmperl a, giis_peril c
                    WHERE par_id = p_par_id
                      AND item_no = c2.item_no
                      AND a.peril_cd = c.peril_cd
                      AND c.line_cd = p_line_cd)
               LOOP
                  v_tsi_amt := xyz.tsi_amt;
                  v_prem_amt := xyz.prem_amt;
                  v_ann_tsi_amt := xyz.ann_tsi_amt;
               END LOOP;

/***********************************/
               UPDATE giuw_witemds
                  SET tsi_amt = v_tsi_amt,
--NVL(c2.tsi_amt,0) - (ROUND((NVL(c2.tsi_amt,0)/dist_cnt),2) * (dist_cnt - 1)),
                      prem_amt = v_prem_amt,
--NVL(c2.prem_amt,0) - (ROUND((NVL(c2.prem_amt,0)/dist_cnt),2) * (dist_cnt - 1)),
                      ann_tsi_amt = v_ann_tsi_amt
--NVL(c2.ann_tsi_amt,0) - (ROUND((NVL(c2.ann_tsi_amt,0)/dist_cnt),2) * (dist_cnt - 1))
               WHERE  dist_no = p_dist_no
                  AND item_no = c2.item_no
                  AND dist_seq_no = p_dist_seq_no;

              -- jhing 12.12.2014 commented out.
              /* create_grp_dflt_witemds (p_dist_no,
                                        p_dist_seq_no,
                                        c2.item_no,
                                        p_line_cd,
                                        v_tsi_amt,
--NVL(c2.tsi_amt,0) - (ROUND((NVL(c2.tsi_amt,0)/dist_cnt),2) * (dist_cnt - 1)),
                                        v_prem_amt,
--NVL(c2.prem_amt,0) - (ROUND((NVL(c2.prem_amt,0)/dist_cnt),2) * (dist_cnt - 1)),
                                        v_ann_tsi_amt,
--NVL(c2.ann_tsi_amt,0) - (ROUND((NVL(c2.ann_tsi_amt,0)/dist_cnt),2) * (dist_cnt - 1)),
                                        p_rg_count,
                                        p_pol_flag,
                                        p_par_id,
                                        p_par_type
                                       );  */
            ELSE
               /* added by glyza 04.15.08 */
               FOR xyz IN
                  (SELECT SUM
                             (ROUND
                                 ((NVL
                                      (DECODE (c.peril_type, 'B', tsi_amt, 0),
                                       0
                                      )                      /*beth/dist_cnt*/
                                  ),
                                  2
                                 )
                             ) tsi_amt,
                          SUM (ROUND ((NVL (prem_amt, 0) / dist_cnt), 2)
                              ) prem_amt,
                          SUM
                             (ROUND
                                 ((NVL
                                      (DECODE (c.peril_type,
                                               'B', ann_tsi_amt,
                                               0
                                              ),
                                       0
                                      )                     /*beth/dist_cnt)*/
                                  ),
                                  2
                                 )
                             ) ann_tsi_amt
                     FROM gipi_witmperl a, giis_peril c
                    WHERE par_id = p_par_id
                      AND item_no = c2.item_no
                      AND a.peril_cd = c.peril_cd
                      AND c.line_cd = p_line_cd)
               LOOP
                  v_tsi_amt := xyz.tsi_amt;
                  v_prem_amt := xyz.prem_amt;
                  v_ann_tsi_amt := xyz.ann_tsi_amt;
               END LOOP;

/****************************/
               UPDATE giuw_witemds
                  SET tsi_amt = v_tsi_amt,            --c2.tsi_amt / dist_cnt,
                      prem_amt = v_prem_amt,         --c2.prem_amt / dist_cnt,
                      ann_tsi_amt = v_ann_tsi_amt  --c2.ann_tsi_amt / dist_cnt
                WHERE dist_no = p_dist_no
                  AND item_no = c2.item_no
                  AND dist_seq_no = p_dist_seq_no;

              -- jhing 12.12.2014 commented out 
              /* create_grp_dflt_witemds
                                   (p_dist_no,
                                    p_dist_seq_no,
                                    c2.item_no,
                                    p_line_cd,
                                    v_tsi_amt,
                                    v_prem_amt,
                                    --c2.tsi_amt / dist_cnt, c2.prem_amt / dist_cnt,
                                    v_ann_tsi_amt,
                                                  --c2.ann_tsi_amt / dist_cnt,
                                    p_rg_count,
                                    p_pol_flag,
                                    p_par_id,
                                    p_par_type
                                   ); */
            END IF;
         END LOOP;
      END IF;

      --update_dtls_no_share_cd (p_dist_no, p_dist_seq_no, 'ITEM', p_line_cd);  -- commented out jhing 12.12.2014
        /* Initialize the value of the variables
      ** in preparation for processing the new
      ** DIST_SEQ_NO. */
      v_peril_cd := NULL;
      v_peril_tsi := 0;
      v_peril_premium := 0;
      v_peril_ann_tsi := 0;
      v_exist := 'N';

      --msg_alert('itemperilds','I',FALSE);
      /* Get the amounts for each combination of the ITEM_NO and the PERIL_CD
      ** in table GIPI_WITMPERL in preparation for data insertion to
      ** distribution tables GIUW_WITEMPERILDS, GIUW_WITEMPERILDS_DTL,
      ** GIUW_WPERILDS and GIUW_WPERILDS_DTL. */
      IF NVL (p_dist_exists, 'N') = 'N'
      THEN
         FOR c3 IN (SELECT b490.tsi_amt itmperil_tsi,
                           b490.prem_amt itmperil_premium,
                           b490.ann_tsi_amt itmperil_ann_tsi,
                           b490.item_no item_no, b490.peril_cd peril_cd,
                           c.peril_type peril_type
                      FROM gipi_witmperl b490, gipi_witem b480, giis_peril c
                     WHERE b490.item_no = b480.item_no
                       AND b490.par_id = b480.par_id
                       AND b480.item_grp = p_item_grp
                       AND b480.par_id = p_par_id
                       AND b490.peril_cd = c.peril_cd
                       AND c.line_cd = p_line_cd)
         LOOP
            v_exist := 'Y';

            --msg_alert('START main item no '||c3.item_no||' peril cd '||c3.peril_cd,'I',FALSE);

            /* Create records in table GIUW_WITEMPERILDS and GIUW_WITEMPERILDS_DTL
            ** for the specified DIST_SEQ_NO. */
            IF p_dist_no = dist_max
            THEN
               c3.itmperil_tsi :=
                  NVL
                     (c3.itmperil_tsi, 0) /*beth- (ROUND((NVL(c3.itmperil_tsi,0)/dist_cnt),2) * (dist_cnt - 1))*/;
               c3.itmperil_premium :=
                    NVL (c3.itmperil_premium, 0)
                  - (  ROUND ((NVL (c3.itmperil_premium, 0) / dist_cnt), 2)
                     * (dist_cnt - 1)
                    );
               c3.itmperil_ann_tsi :=
                  NVL
                     (c3.itmperil_ann_tsi, 0) /*beth- (ROUND((NVL(c3.itmperil_ann_tsi,0)/dist_cnt),2) * (dist_cnt - 1))*/;
            ELSE
               c3.itmperil_tsi := c3.itmperil_tsi /*beth/ dist_cnt*/;
               c3.itmperil_premium := c3.itmperil_premium / dist_cnt;
               c3.itmperil_ann_tsi := c3.itmperil_ann_tsi /*beth/ dist_cnt*/;
            END IF;

            INSERT INTO giuw_witemperilds
                        (dist_no, dist_seq_no, item_no, peril_cd,
                         line_cd, tsi_amt, prem_amt,
                         ann_tsi_amt
                        )
                 VALUES (p_dist_no, p_dist_seq_no, c3.item_no, c3.peril_cd,
                         p_line_cd, c3.itmperil_tsi, c3.itmperil_premium,
                         c3.itmperil_ann_tsi
                        );

            --msg_alert('END main item no '||c3.item_no||' peril cd '||c3.peril_cd,'I',FALSE);
            --msg_alert(p_dist_no||'-'||p_dist_seq_no||'-'||c3.item_no||'-'||p_line_cd||'-'||c3.peril_cd,'I',FALSE);
            
            -- jhing 12.12.2014 commented out 
           /* giuw_pol_dist_pkg.create_grp_dflt_witemperilds
                                                         (p_dist_no,
                                                          p_dist_seq_no,
                                                          c3.item_no,
                                                          p_line_cd,
                                                          c3.peril_cd,
                                                          c3.itmperil_tsi,
                                                          c3.itmperil_premium,
                                                          c3.itmperil_ann_tsi,
                                                          p_rg_count,
                                                          p_pol_flag,
                                                          p_par_id,
                                                          p_par_type
                                                         );  */
         END LOOP;
      ELSE
         FOR c3 IN (SELECT b490.tsi_amt itmperil_tsi,
                           b490.prem_amt itmperil_premium,
                           b490.ann_tsi_amt itmperil_ann_tsi,
                           b490.item_no item_no, b490.peril_cd peril_cd,
                           c.peril_type peril_type
                      FROM gipi_witmperl b490, gipi_witem b480, giis_peril c
                     WHERE b490.item_no = b480.item_no
                       AND b490.par_id = b480.par_id
                       AND b480.item_grp = p_item_grp
                       AND b480.par_id = p_par_id
                       AND b490.peril_cd = c.peril_cd
                       AND c.line_cd = p_line_cd
                       AND EXISTS (
                              SELECT 1
                                FROM giuw_wpolicyds c
                               WHERE 1 = 1
                                 AND c.dist_no = p_dist_no
                                 AND c.dist_seq_no = p_dist_seq_no
                                 AND c.item_grp = p_item_grp
                                 AND c.item_grp = b480.item_grp)
                       AND EXISTS (
                              SELECT 1
                                FROM giuw_witemds c
                               WHERE 1 = 1
                                 AND c.dist_no = p_dist_no
                                 AND c.dist_seq_no = p_dist_seq_no
                                 AND c.item_no = b480.item_no))
         LOOP
            v_exist := 'Y';

            IF p_dist_no = dist_max
            THEN
               c3.itmperil_tsi :=
                  NVL
                     (c3.itmperil_tsi, 0) /*beth- (ROUND((NVL(c3.itmperil_tsi,0)/dist_cnt),2) * (dist_cnt - 1))*/;
               c3.itmperil_premium :=
                    NVL (c3.itmperil_premium, 0)
                  - (  ROUND ((NVL (c3.itmperil_premium, 0) / dist_cnt), 2)
                     * (dist_cnt - 1)
                    );
               c3.itmperil_ann_tsi :=
                  NVL
                     (c3.itmperil_ann_tsi, 0) /*beth- (ROUND((NVL(c3.itmperil_ann_tsi,0)/dist_cnt),2) * (dist_cnt - 1))*/;
            ELSE
               c3.itmperil_tsi := c3.itmperil_tsi /*beth/ dist_cnt*/;
               c3.itmperil_premium := c3.itmperil_premium / dist_cnt;
               c3.itmperil_ann_tsi := c3.itmperil_ann_tsi /*beth/ dist_cnt*/;
            END IF;

            --msg_alert('START main item no '||c3.item_no||' peril cd '||c3.peril_cd,'I',FALSE);
            /* Create records in table GIUW_WITEMPERILDS and GIUW_WITEMPERILDS_DTL
            ** for the specified DIST_SEQ_NO. */
            INSERT INTO giuw_witemperilds
                        (dist_no, dist_seq_no, item_no, peril_cd,
                         line_cd, tsi_amt, prem_amt,
                         ann_tsi_amt
                        )
                 VALUES (p_dist_no, p_dist_seq_no, c3.item_no, c3.peril_cd,
                         p_line_cd, c3.itmperil_tsi, c3.itmperil_premium,
                         c3.itmperil_ann_tsi
                        );

            --msg_alert('END main item no '||c3.item_no||' peril cd '||c3.peril_cd,'I',FALSE);
            --msg_alert(p_dist_no||'-'||p_dist_seq_no||'-'||c3.item_no||'-'||p_line_cd||'-'||c3.peril_cd,'I',FALSE);
            
            -- jhing 12.12.2014 commented out 
           /* giuw_pol_dist_pkg.create_grp_dflt_witemperilds
                                                         (p_dist_no,
                                                          p_dist_seq_no,
                                                          c3.item_no,
                                                          p_line_cd,
                                                          c3.peril_cd,
                                                          c3.itmperil_tsi,
                                                          c3.itmperil_premium,
                                                          c3.itmperil_ann_tsi,
                                                          p_rg_count,
                                                          p_pol_flag,
                                                          p_par_id,
                                                          p_par_type
                                                         ); */
         END LOOP;
      END IF;

     /* giuw_pol_dist_pkg.update_dtls_no_share_cd (p_dist_no,
                                                 p_dist_seq_no,
                                                 'ITEMPERIL',
                                                 p_line_cd
                                                );  */ -- jhing 12.12.2014 commented out 

      --msg_alert('perilds','I',FALSE);
      IF NVL (p_dist_exists, 'N') = 'N'
      THEN
         FOR c4 IN (SELECT   SUM (b490.tsi_amt) itmperil_tsi,
                             SUM (b490.prem_amt) itmperil_premium,
                             SUM (b490.ann_tsi_amt) itmperil_ann_tsi,
                             
                             --B490.item_no          item_no          ,
                             b490.peril_cd peril_cd, c.peril_type peril_type
                        FROM gipi_witmperl b490,
                             gipi_witem b480,
                             giis_peril c
                       WHERE b490.item_no = b480.item_no
                         AND b490.par_id = b480.par_id
                         AND b480.item_grp = p_item_grp
                         AND b480.par_id = p_par_id
                         AND b490.peril_cd = c.peril_cd
                         AND c.line_cd = p_line_cd
                    GROUP BY b490.peril_cd, c.peril_type)
         LOOP
            --msg_alert('giuw_wperilds','I',FALSE);
            IF p_dist_no = dist_max
            THEN
               c4.itmperil_tsi :=
                  NVL
                     (c4.itmperil_tsi, 0) /*beth- (ROUND((NVL(c4.itmperil_tsi,0)/dist_cnt),2) * (dist_cnt - 1))*/;
               c4.itmperil_premium :=
                    NVL (c4.itmperil_premium, 0)
                  - (  ROUND ((NVL (c4.itmperil_premium, 0) / dist_cnt), 2)
                     * (dist_cnt - 1)
                    );
               c4.itmperil_ann_tsi :=
                  NVL
                     (c4.itmperil_ann_tsi, 0) /*beth- (ROUND((NVL(c4.itmperil_ann_tsi,0)/dist_cnt),2) * (dist_cnt - 1))*/;
            ELSE
               c4.itmperil_tsi := c4.itmperil_tsi /*beth/ dist_cnt*/;
               c4.itmperil_premium := c4.itmperil_premium / dist_cnt;
               c4.itmperil_ann_tsi := c4.itmperil_ann_tsi /*beth/ dist_cnt*/;
            END IF;

            INSERT INTO giuw_wperilds
                        (dist_no, dist_seq_no, peril_cd, line_cd,
                         tsi_amt, prem_amt,
                         ann_tsi_amt
                        )
                 VALUES (p_dist_no, p_dist_seq_no, c4.peril_cd, p_line_cd,
                         c4.itmperil_tsi, c4.itmperil_premium,
                         c4.itmperil_ann_tsi
                        );

            v_peril_cd := c4.peril_cd;
            v_peril_tsi := c4.itmperil_tsi;
            v_peril_premium := c4.itmperil_premium;
            v_peril_ann_tsi := c4.itmperil_ann_tsi;
            /*msg_alert('giuw_witemperilds_dtl'||' - '||p_dist_no||' - '||p_dist_seq_no||' - '||p_line_cd||' - '||
              v_peril_cd||' - '||v_peril_tsi||' - '||v_peril_premium||' - '||v_peril_ann_tsi||' - '||p_currency_rt
              ||' - '||p_default_no||' - '||p_default_type||' - '||p_dflt_netret_pct,'I',FALSE);      */              
           -- upd_create_wperil_dtl_data;   -- jhing commented out 12.12.2014 
         END LOOP;
      ELSE
         FOR c4 IN (SELECT   SUM (b490.tsi_amt) itmperil_tsi,
                             SUM (b490.prem_amt) itmperil_premium,
                             SUM (b490.ann_tsi_amt) itmperil_ann_tsi,
                             
                             --B490.item_no          item_no          ,
                             b490.peril_cd peril_cd, c.peril_type peril_type
                        FROM gipi_witmperl b490,
                             gipi_witem b480,
                             giis_peril c
                       WHERE b490.item_no = b480.item_no
                         AND b490.par_id = b480.par_id
                         AND b480.item_grp = p_item_grp
                         AND b480.par_id = p_par_id
                         AND b490.peril_cd = c.peril_cd
                         AND c.line_cd = p_line_cd
                         AND EXISTS (
                                SELECT 1
                                  FROM giuw_witemds c
                                 WHERE 1 = 1
                                   AND c.dist_no = p_dist_no
                                   AND c.dist_seq_no = p_dist_seq_no
                                   AND c.item_no = b480.item_no)
                    GROUP BY b490.peril_cd, c.peril_type)
         LOOP
            --msg_alert('giuw_wperilds','I',FALSE);
            IF p_dist_no = dist_max
            THEN
               c4.itmperil_tsi :=
                  NVL
                     (c4.itmperil_tsi, 0) /*beth- (ROUND((NVL(c4.itmperil_tsi,0)/dist_cnt),2) * (dist_cnt - 1))*/;
               c4.itmperil_premium :=
                    NVL (c4.itmperil_premium, 0)
                  - (  ROUND ((NVL (c4.itmperil_premium, 0) / dist_cnt), 2)
                     * (dist_cnt - 1)
                    );
               c4.itmperil_ann_tsi :=
                  NVL
                     (c4.itmperil_ann_tsi, 0) /*beth- (ROUND((NVL(c4.itmperil_ann_tsi,0)/dist_cnt),2) * (dist_cnt - 1))*/;
            ELSE
               c4.itmperil_tsi := c4.itmperil_tsi /*beth/ dist_cnt*/;
               c4.itmperil_premium := c4.itmperil_premium / dist_cnt;
               c4.itmperil_ann_tsi := c4.itmperil_ann_tsi /*beth/ dist_cnt*/;
            END IF;

            INSERT INTO giuw_wperilds
                        (dist_no, dist_seq_no, peril_cd, line_cd,
                         tsi_amt, prem_amt,
                         ann_tsi_amt
                        )
                 VALUES (p_dist_no, p_dist_seq_no, c4.peril_cd, p_line_cd,
                         c4.itmperil_tsi, c4.itmperil_premium,
                         c4.itmperil_ann_tsi
                        );

            v_peril_cd := c4.peril_cd;
            v_peril_tsi := c4.itmperil_tsi;
            v_peril_premium := c4.itmperil_premium;
            v_peril_ann_tsi := c4.itmperil_ann_tsi;
            /*msg_alert('giuw_witemperilds_dtl'||' - '||p_dist_no||' - '||p_dist_seq_no||' - '||p_line_cd||' - '||
            v_peril_cd||' - '||v_peril_tsi||' - '||v_peril_premium||' - '||v_peril_ann_tsi||' - '||p_currency_rt
            ||' - '||p_default_no||' - '||p_default_type||' - '||p_dflt_netret_pct,'I',FALSE);      */            
           -- upd_create_wperil_dtl_data;   -- jhing commented out 12.12.2014 
         END LOOP;
      END IF;

     /* giuw_pol_dist_pkg.update_dtls_no_share_cd (p_dist_no,
                                                 p_dist_seq_no,
                                                 'PERIL',
                                                 p_line_cd
                                                );  */ -- jhing commented out 12.12.2014
      --A.R.C. 05.22.2007
      --giuw_pol_dist_pkg.update_witemds (p_dist_no, p_dist_seq_no);--commented out by edgar base on aldren's modification on GIUWS004

      --msg_alert('policyds','I',FALSE);
      IF NVL (p_dist_exists, 'N') = 'N'
      THEN
         IF p_dist_no = dist_max
         THEN
            /* added by glyza 04.15.08 */
            FOR x IN
               (SELECT SUM
                          (NVL
                              (DECODE (c.peril_type, 'B', a.tsi_amt, 0), 0)
/*beth- (ROUND((NVL(DECODE(c.peril_type,'B',a.tsi_amt,0),0)/dist_cnt),2) * (dist_cnt - 1))*/
                          ) tsi_amt,
                       SUM (  NVL (a.prem_amt, 0)
                            - (  ROUND ((NVL (a.prem_amt, 0) / dist_cnt), 2)
                               * (dist_cnt - 1)
                              )
                           ) prem_amt,
                       SUM
                          (NVL
                              (DECODE (c.peril_type, 'B', a.ann_tsi_amt, 0),
                               0)
/*beth- (ROUND((NVL(DECODE(c.peril_type,'B',a.ann_tsi_amt,0),0)/dist_cnt),2) * (dist_cnt - 1))*/
                          ) ann_tsi_amt
                  FROM gipi_witmperl a, gipi_witem b, giis_peril c
                 WHERE a.par_id = b.par_id
                   AND a.item_no = b.item_no
                   AND a.par_id = p_par_id
                   AND b.item_grp = NVL (v_item_grp, p_item_grp)
                   AND a.peril_cd = c.peril_cd
                   AND c.line_cd = p_line_cd)
            LOOP
               v_tsi_amt := x.tsi_amt;
               v_prem_amt := x.prem_amt;
               v_ann_tsi_amt := x.ann_tsi_amt;
            END LOOP;

/***********************************/
            giuw_pol_dist_pkg.create_grp_dflt_wpolicyds (p_dist_no,
                                                         p_dist_seq_no,
                                                         p_line_cd,
                                                         --p_policy_tsi/dist_cnt, p_policy_premium/dist_cnt, p_policy_ann_tsi/dist_cnt,
                                                         v_tsi_amt,
                                                         v_prem_amt,
                                                         v_ann_tsi_amt,
                                                         p_rg_count,
                                                         p_default_type,
                                                         p_currency_rt,
                                                         p_par_id,
                                                         p_item_grp,
                                                         p_pol_flag,
                                                         p_par_type
                                                         ,p_default_no --edgar 09/17/2014
                                                        );
         ELSE
            /* added by glyza 04.15.08 */
            FOR x IN
               (SELECT SUM
                          (ROUND
                               ((NVL (DECODE (c.peril_type,
                                              'B', a.tsi_amt,
                                              0
                                             ),
                                      0
                                     )                       /*beth/dist_cnt*/
                                ),
                                2
                               )
                          ) tsi_amt,
                       SUM (ROUND ((NVL (a.prem_amt, 0) / dist_cnt), 2)
                           ) prem_amt,
                       SUM
                          (ROUND
                              ((NVL (DECODE (c.peril_type,
                                             'B', a.ann_tsi_amt,
                                             0
                                            ),
                                     0
                                    )                        /*beth/dist_cnt*/
                               ),
                               2
                              )
                          ) ann_tsi_amt
                  FROM gipi_witmperl a, gipi_witem b, giis_peril c
                 WHERE a.par_id = b.par_id
                   AND a.item_no = b.item_no
                   AND a.par_id = p_par_id
                   AND b.item_grp = NVL (v_item_grp, p_item_grp)
                   AND a.peril_cd = c.peril_cd
                   AND c.line_cd = p_line_cd)
            LOOP
               v_tsi_amt := x.tsi_amt;
               v_prem_amt := x.prem_amt;
               v_ann_tsi_amt := x.ann_tsi_amt;
            END LOOP;

/****************************/
            giuw_pol_dist_pkg.create_grp_dflt_wpolicyds (p_dist_no,
                                                         p_dist_seq_no,
                                                         p_line_cd,
                                                         --p_policy_tsi/dist_cnt, p_policy_premium/dist_cnt, p_policy_ann_tsi/dist_cnt,
                                                         v_tsi_amt,
                                                         v_prem_amt,
                                                         v_ann_tsi_amt,
                                                         p_rg_count,
                                                         p_default_type,
                                                         p_currency_rt,
                                                         p_par_id,
                                                         p_item_grp,
                                                         p_pol_flag,
                                                         p_par_type
                                                         ,p_default_no --edgar 09/17/2014
                                                        );
         --END LOOP;
         END IF;
      ELSE
         IF p_dist_no = dist_max
         THEN
            /* added by glyza 04.18.08 */
            FOR x IN
               (SELECT SUM
                          (NVL
                              (DECODE (c.peril_type, 'B', b490.tsi_amt, 0), 0)
/*beth- (ROUND((NVL(DECODE(c.peril_type,'B',b490.tsi_amt,0),0)/dist_cnt),2) * (dist_cnt - 1))*/
                          ) tsi_amt,
                       SUM (  NVL (b490.prem_amt, 0)
                            - (  ROUND ((NVL (b490.prem_amt, 0) / dist_cnt),
                                        2)
                               * (dist_cnt - 1)
                              )
                           ) prem_amt,
                       SUM
                          (NVL
                              (DECODE (c.peril_type,
                                       'B', b490.ann_tsi_amt,
                                       0
                                      ),
                               0
                              )
/*beth- (ROUND((NVL(DECODE(c.peril_type,'B',b490.ann_tsi_amt,0),0)/dist_cnt),2) * (dist_cnt - 1))*/
                          ) ann_tsi_amt
                  FROM gipi_witmperl b490, gipi_witem b480, giis_peril c
                 WHERE b490.item_no = b480.item_no
                   AND b490.par_id = b480.par_id
                   AND b480.item_grp = p_item_grp
                   AND b480.par_id = p_par_id
                   AND b490.peril_cd = c.peril_cd
                   AND c.line_cd = p_line_cd
                   AND EXISTS (
                          SELECT 1
                            FROM giuw_wpolicyds c
                           WHERE 1 = 1
                             AND c.dist_no = p_dist_no
                             AND c.dist_seq_no = p_dist_seq_no
                             AND c.item_grp = p_item_grp
                             AND c.item_grp = b480.item_grp)
                   AND EXISTS (
                          SELECT 1
                            FROM giuw_witemds c
                           WHERE 1 = 1
                             AND c.dist_no = p_dist_no
                             AND c.dist_seq_no = p_dist_seq_no
                             AND c.item_no = b480.item_no))
            LOOP
               v_tsi_amt := x.tsi_amt;
               v_prem_amt := x.prem_amt;
               v_ann_tsi_amt := x.ann_tsi_amt;
/***************************/
               giuw_pol_dist_pkg.create_grp_dflt_wpolicyds (p_dist_no,
                                                            p_dist_seq_no,
                                                            p_line_cd,
                                                            --p_policy_tsi/dist_cnt, p_policy_premium/dist_cnt, p_policy_ann_tsi/dist_cnt,
                                                            v_tsi_amt,
                                                            v_prem_amt,
                                                            v_ann_tsi_amt,
                                                            p_rg_count,
                                                            p_default_type,
                                                            p_currency_rt,
                                                            p_par_id,
                                                            p_item_grp,
                                                            p_pol_flag,
                                                            p_par_type
                                                            ,p_default_no --edgar 09/17/2014
                                                           );
            END LOOP;
         ELSE
            /* added by glyza 04.15.08 */
            FOR x IN
               (SELECT SUM
                          (ROUND
                               ((NVL (DECODE (c.peril_type,
                                              'B', b490.tsi_amt,
                                              0
                                             ),
                                      0
                                     )                       /*beth/dist_cnt*/
                                ),
                                2
                               )
                          ) tsi_amt,
                       SUM (ROUND ((NVL (b490.prem_amt, 0) / dist_cnt), 2)
                           ) prem_amt,
                       SUM
                          (ROUND
                              ((NVL
                                   (DECODE (c.peril_type,
                                            'B', b490.ann_tsi_amt,
                                            0
                                           ),
                                    0
                                   )                         /*beth/dist_cnt*/
                               ),
                               2
                              )
                          ) ann_tsi_amt
                  FROM gipi_witmperl b490, gipi_witem b480, giis_peril c
                 WHERE b490.item_no = b480.item_no
                   AND b490.par_id = b480.par_id
                   AND b480.item_grp = p_item_grp
                   AND b480.par_id = p_par_id
                   AND b490.peril_cd = c.peril_cd
                   AND c.line_cd = p_line_cd
                   AND EXISTS (
                          SELECT 1
                            FROM giuw_wpolicyds c
                           WHERE 1 = 1
                             AND c.dist_no = p_dist_no
                             AND c.dist_seq_no = p_dist_seq_no
                             AND c.item_grp = p_item_grp
                             AND c.item_grp = b480.item_grp)
                   AND EXISTS (
                          SELECT 1
                            FROM giuw_witemds c
                           WHERE 1 = 1
                             AND c.dist_no = p_dist_no
                             AND c.dist_seq_no = p_dist_seq_no
                             AND c.item_no = b480.item_no))
            LOOP
               v_tsi_amt := x.tsi_amt;
               v_prem_amt := x.prem_amt;
               v_ann_tsi_amt := x.ann_tsi_amt;
/****************************/
               giuw_pol_dist_pkg.create_grp_dflt_wpolicyds (p_dist_no,
                                                            p_dist_seq_no,
                                                            p_line_cd,
                                                            --p_policy_tsi/dist_cnt, p_policy_premium/dist_cnt, p_policy_ann_tsi/dist_cnt,
                                                            v_tsi_amt,
                                                            v_prem_amt,
                                                            v_ann_tsi_amt,
                                                            p_rg_count,
                                                            p_default_type,
                                                            p_currency_rt,
                                                            p_par_id,
                                                            p_item_grp,
                                                            p_pol_flag,
                                                            p_par_type
                                                            ,p_default_no --edgar 09/17/2014
                                                           );
            END LOOP;
         END IF;
      END IF;

      giuw_pol_dist_pkg.update_dtls_no_share_cd (p_dist_no,
                                                 p_dist_seq_no,
                                                 'POLICY',
                                                 p_line_cd
                                                );
      --A.R.C. 05.22.2007
      --giuw_pol_dist_pkg.update_wpolicyds (p_dist_no, p_dist_seq_no);commented out by edgar base on aldren's modification on GIUWS004
   END;

   PROCEDURE create_par_distribution_recs (
      p_dist_no         IN   giuw_pol_dist.dist_no%TYPE,
      p_par_id          IN   gipi_parlist.par_id%TYPE,
      p_line_cd         IN   gipi_parlist.line_cd%TYPE,
      p_subline_cd      IN   gipi_wpolbas.subline_cd%TYPE,
      p_iss_cd          IN   gipi_wpolbas.iss_cd%TYPE,
      p_pack_pol_flag   IN   gipi_wpolbas.pack_pol_flag%TYPE,
      p_pol_flag        IN   gipi_wpolbas.pol_flag%TYPE,
      p_par_type        IN   gipi_parlist.par_type%TYPE
   )
   IS
      v_line_cd             gipi_parlist.line_cd%TYPE;
      v_subline_cd          gipi_wpolbas.subline_cd%TYPE;
      v_dist_seq_no         giuw_wpolicyds.dist_seq_no%TYPE          := 0;
      --rg_id                    RECORDGROUP;
      rg_name               VARCHAR2 (20)               := 'DFLT_DIST_VALUES';
      rg_count              NUMBER                                   := 0;
      v_exist               VARCHAR2 (1);
      v_errors              NUMBER;
      v_default_no          giis_default_dist.default_no%TYPE;
      v_default_type        giis_default_dist.default_type%TYPE;
      v_dflt_netret_pct     giis_default_dist.dflt_netret_pct%TYPE;
      v_dist_type           giis_default_dist.dist_type%TYPE;
      v_post_flag           VARCHAR2 (1)                             := 'O';
      v_package_policy_sw   VARCHAR2 (1)                             := 'Y';
      v_dist_exists         VARCHAR2 (1)                             := 'N';
      v_item_grp            giuw_wpolicyds.item_grp%TYPE;
   BEGIN
      FOR a IN (SELECT 1
                  FROM giuw_wpolicyds
                 WHERE dist_no = p_dist_no)
      LOOP
         v_dist_exists := 'Y';
         EXIT;
      END LOOP;

      FOR a IN (SELECT item_grp
                  FROM giuw_pol_dist
                 WHERE dist_no = p_dist_no)
      LOOP
         v_item_grp := a.item_grp;
         EXIT;
      END LOOP;

      /* Get the unique ITEM_GRP to produce a unique DIST_SEQ_NO for each. */
      IF NVL (v_dist_exists, 'N') = 'N'
      THEN
         FOR c1 IN (SELECT   NVL (item_grp, 1) item_grp,
                             pack_line_cd pack_line_cd,
                             pack_subline_cd pack_subline_cd,
                             currency_rt currency_rt,
                             SUM (NVL (tsi_amt, 0)) policy_tsi,
                             SUM (NVL (prem_amt, 0)) policy_premium,
                             SUM (NVL (ann_tsi_amt, 0)) policy_ann_tsi
                        FROM gipi_witem a
                       WHERE EXISTS (
                                SELECT 1
                                  FROM gipi_witmperl
                                 WHERE par_id = a.par_id
                                   AND item_no = a.item_no)
                         --(b.prem_amt != 0
                         --OR b.tsi_amt  != 0)
                         AND par_id = p_par_id
                         AND a.item_grp = NVL (v_item_grp, a.item_grp)
                    GROUP BY item_grp,
                             pack_line_cd,
                             pack_subline_cd,
                             currency_rt)
         LOOP
              /* If the PAR processed is a package policy
            ** then get the true LINE_CD and true SUBLINE_CD,
            ** that is, the PACK_LINE_CD and PACK_SUBLINE_CD
            ** from the GIPI_WITEM table.
            ** This will be used upon inserting to certain
            ** distribution tables requiring a value for
            ** the similar field. */
--            IF p_pack_pol_flag = 'N' --commented out edgar 09/17/2014
--            THEN --commented out edgar 09/17/2014
               v_line_cd := p_line_cd;
               v_subline_cd := p_subline_cd;
--            ELSE --commented out edgar 09/17/2014
--               v_line_cd := c1.pack_line_cd; --commented out edgar 09/17/2014
--               v_subline_cd := c1.pack_subline_cd; --commented out edgar 09/17/2014
--               v_package_policy_sw := 'Y'; --commented out edgar 09/17/2014
--            END IF; --commented out edgar 09/17/2014 --commented out edgar 09/17/2014

--            IF v_package_policy_sw = 'Y' --commented out edgar 09/17/2014
--            THEN --commented out edgar 09/17/2014
               FOR c2 IN (SELECT ax.default_no, ax.default_type, ax.dist_type,  
                                 ax.dflt_netret_pct 
                            FROM giis_default_dist ax
                           WHERE ax.iss_cd = p_iss_cd
                             AND ax.subline_cd = v_subline_cd
                             AND ax.line_cd = v_line_cd
                             AND ax.dist_type = '1' /* By Group */    -- Jhing 12.12.2014  added checking in dist_type and existence in GIIS_DEFAULT_DIST_GROUP
                             AND EXISTS (
                                        SELECT 1 FROM GIIS_DEFAULT_DIST_GROUP bx
                                        WHERE bx.default_no = ax.default_no
                                     ) )
               LOOP
                  v_default_no := c2.default_no;
                  v_default_type := c2.default_type;
                  v_dist_type := c2.dist_type;
                  v_dflt_netret_pct := c2.dflt_netret_pct;
                  EXIT;
               END LOOP;

               v_package_policy_sw := 'N';
--            END IF; --commented out edgar 09/17/2014

            /* Generate a new DIST_SEQ_NO for the new
            ** item group. */
            v_dist_seq_no := v_dist_seq_no + 1;
            v_post_flag := 'O';
            giuw_pol_dist_pkg.create_grp_dflt_dist (p_dist_no,
                                                    v_dist_seq_no,
                                                    '2',
                                                    c1.policy_tsi,
                                                    c1.policy_premium,
                                                    c1.policy_ann_tsi,
                                                    c1.item_grp,
                                                    v_line_cd,
                                                    rg_count,
                                                    v_default_type,
                                                    c1.currency_rt,
                                                    p_par_id,
                                                    p_pol_flag,
                                                    p_par_type,
                                                    v_dist_exists,
                                                    v_default_no --added edgar 09/17/2014
                                                   );
         END LOOP;
      ELSE
         /*added edgar 09/17/2014*/
               v_line_cd := p_line_cd;
               v_subline_cd := p_subline_cd;
               FOR c2 IN (SELECT ax.default_no, ax.default_type, ax.dist_type,
                                 ax.dflt_netret_pct 
                            FROM giis_default_dist ax
                           WHERE ax.iss_cd = p_iss_cd
                             AND ax.subline_cd = v_subline_cd
                             AND ax.line_cd = v_line_cd
                             -- jhing 12.12.2014 added conditions 
                             AND ax.dist_type = '1' /* By Group */ 
                             AND EXISTS (
                                        SELECT 1 FROM GIIS_DEFAULT_DIST_GROUP bx
                                        WHERE bx.default_no = ax.default_no
                                     ))
               LOOP
                  v_default_no := c2.default_no;
                  v_default_type := c2.default_type;
                  v_dist_type := c2.dist_type;
                  v_dflt_netret_pct := c2.dflt_netret_pct;
                  EXIT;
               END LOOP;         
         /*ended edgar 09/17/2014*/
         FOR a IN (SELECT dist_seq_no, tsi_amt, prem_amt, ann_tsi_amt,
                          item_grp
                     FROM giuw_wpolicyds
                    WHERE dist_no = p_dist_no
                      AND item_grp = NVL (v_item_grp, item_grp))
         LOOP
            v_post_flag := 'O';
            giuw_pol_dist_pkg.create_grp_dflt_dist (p_dist_no,
                                                    a.dist_seq_no,
                                                    '2',
                                                    a.tsi_amt,
                                                    a.prem_amt,
                                                    a.ann_tsi_amt,
                                                    a.item_grp,
                                                    p_line_cd,
                                                    rg_count,
                                                    v_default_type,
                                                    1,
                                                    p_par_id,
                                                    p_pol_flag,
                                                    p_par_type,
                                                    v_dist_exists,
                                                    v_default_no --added edgar 09/17/2014
                                                   );
         END LOOP;
      END IF;
        cmpare_del_rnsrt_wdist_tables.DEL_RNSRT_WDIST_TABLES(p_dist_no);--added edgar 09/17/2014
      /*IF NOT ID_NULL(rg_id) THEN
        DELETE_GROUP(rg_id);
      END IF;*/
      IF p_pol_flag != '2' AND p_par_type = 'P'
      THEN
         /* Equalize the amounts of tables GIUW_WPOLICYDS
         ** and GIUW_WPOLICYDS_DTL. */
         --adjust_policy_level_amts (p_dist_no);    commented out by Gzelle 06092014, as per aldren's modification 01202014
         /* Adjust computational floats to equalize the amounts
         ** attained by the master tables with that of its detail
         ** tables.
         ** Tables involved:  GIUW_WPERILDS     - GIUW_WPERILDS_DTL
         **                   GIUW_WITEMDS      - GIUW_WITEMDS_DTL
         **                   GIUW_WITEMPERILDS - GIUW_WITEMPERILDS_DTL */
         --adjust_net_ret_imperfection (p_dist_no);     commented out by Gzelle 06092014, as per aldren's modification 01202014
         null;  --added by Gzelle 06092014, referenced by GIUWS004 alredn's modification 01202014
      END IF;

      /* Create records in RI tables if a facultative
      ** share exists in any of the DIST_SEQ_NO in table
      ** GIUW_WPOLICYDS_DTL. */
      /*giuw_pol_dist_pkg.create_ri_records (p_dist_no,
                                           p_par_id,
                                           p_line_cd,
                                           p_subline_cd
                                          ); */  -- jhing 12.19.2014 commented out codes which inserts records in GIRI_WDISTFRPS. This table should only have value upon posting with facul

      /* Set the value of the DIST_FLAG back
      ** to Undistributed after recreation. */

      --:c080.dist_flag      := '1';
      --:c080.mean_dist_flag := 'Undistributed';
      UPDATE giuw_pol_dist
         SET dist_flag = '1',
             post_flag = v_post_flag
       WHERE par_id = p_par_id AND dist_no = p_dist_no;

      --adjust_amts (p_dist_no);    commented out by Gzelle 06092014, referenced by GIUWS004 alredn's modification 01202014
   END;

   PROCEDURE delete_dist_working_tables (p_dist_no giuw_pol_dist.dist_no%TYPE)
   IS
      v_dist_no   giuw_pol_dist.dist_no%TYPE;
   BEGIN
      v_dist_no := p_dist_no;

      DELETE      giuw_wperilds_dtl
            WHERE dist_no = v_dist_no;

      DELETE      giuw_wperilds
            WHERE dist_no = v_dist_no;

      DELETE      giuw_witemperilds_dtl
            WHERE dist_no = v_dist_no;

      DELETE      giuw_witemperilds
            WHERE dist_no = v_dist_no;

      DELETE      giuw_witemds_dtl
            WHERE dist_no = v_dist_no;
      /*added deletion on giuw_witemds edgar 06/06/2014*/
      /* commented out, deletion should be done after creating items : shan 06.13.2014
      DELETE giuw_witemds
            WHERE dist_no = v_dist_no;*/
          
      IF p_dist_no IS NULL
      THEN
         --DELETE giuw_witemds
          --WHERE dist_no = v_dist_no;
         NULL;
      END IF;

      DELETE      giuw_wpolicyds_dtl
            WHERE dist_no = v_dist_no;

      FOR c1 IN (SELECT frps_yy, frps_seq_no
                   FROM giri_wdistfrps
                  WHERE dist_no = v_dist_no)
      LOOP
         FOR c2 IN (SELECT pre_binder_id
                      FROM giri_wfrps_ri
                     WHERE frps_yy = c1.frps_yy
                       AND frps_seq_no = c1.frps_seq_no)
         LOOP
            DELETE      giri_wbinder_peril
                  WHERE pre_binder_id = c2.pre_binder_id;

            DELETE      giri_wbinder
                  WHERE pre_binder_id = c2.pre_binder_id;
         END LOOP;

         DELETE      giri_wfrperil
               WHERE frps_yy = c1.frps_yy AND frps_seq_no = c1.frps_seq_no;

         DELETE      giri_wfrps_ri
               WHERE frps_yy = c1.frps_yy AND frps_seq_no = c1.frps_seq_no;
         --added by edgar 05132014 base on GIUWS004 modifications by aldren--
         DELETE GIRI_WFRPS_PERIL_GRP
          WHERE frps_yy     = c1.frps_yy AND frps_seq_no = c1.frps_seq_no;
         --end by edgar 05132014--
      END LOOP;

      DELETE      giri_wdistfrps
            WHERE dist_no = v_dist_no;
   --DELETE giuw_wpolicyds
   -- WHERE dist_no = v_dist_no;
   /*revert back deletion of giuw_wpolicyds edgar 06/06/2014* /
   -- commented out again, deletion should be done after creating items : shan 06.13.2014  
      DELETE giuw_wpolicyds
            WHERE dist_no = v_dist_no;*/
   END;

   PROCEDURE delete_dist_master_tables (p_dist_no giuw_pol_dist.dist_no%TYPE)
   IS
      v_dist_no   giuw_pol_dist.dist_no%TYPE;
   BEGIN
      v_dist_no := p_dist_no;

      DELETE      giuw_perilds_dtl
            WHERE dist_no = v_dist_no;

      DELETE      giuw_perilds
            WHERE dist_no = v_dist_no;

      DELETE      giuw_itemperilds_dtl
            WHERE dist_no = v_dist_no;

      DELETE      giuw_itemperilds
            WHERE dist_no = v_dist_no;

      DELETE      giuw_itemds_dtl
            WHERE dist_no = v_dist_no;

      DELETE      giuw_itemds
            WHERE dist_no = v_dist_no;

      DELETE      giuw_policyds_dtl
            WHERE dist_no = v_dist_no;

      /*FOR c1 IN (SELECT frps_yy, frps_seq_no
                   FROM giri_distfrps
                  WHERE dist_no = v_dist_no)
      LOOP
         FOR c2 IN (SELECT fnl_binder_id
                      FROM giri_frps_ri
                     WHERE frps_yy = c1.frps_yy
                       AND frps_seq_no = c1.frps_seq_no)
         LOOP
            DELETE      giri_binder_peril
                  WHERE fnl_binder_id = c2.fnl_binder_id;

            DELETE      giri_binder
                  WHERE fnl_binder_id = c2.fnl_binder_id;
         END LOOP;

         /* giri_frps_peril_Grp -> added by adrel 11/12/2008 FPAC PRF2558
         (need to delete child records first before deleting giri_distfrps records).
          Tested by Jess@FPAC, ok. Also applied to latest version 7/17/2008
         */
         /*DELETE      giri_frps_peril_grp
               WHERE frps_yy = c1.frps_yy AND frps_seq_no = c1.frps_seq_no;

         /*end addition by adrel 11/12/2008*/
        /* DELETE      giri_frperil
               WHERE frps_yy = c1.frps_yy AND frps_seq_no = c1.frps_seq_no;

         DELETE      giri_frps_ri
               WHERE frps_yy = c1.frps_yy AND frps_seq_no = c1.frps_seq_no;
      END LOOP; 

      DELETE      giri_distfrps
            WHERE dist_no = v_dist_no;*/ --commented out deletion of master tables of binders edgar 05/08/2014

      DELETE      giuw_policyds
            WHERE dist_no = v_dist_no;
   END;

   PROCEDURE post_wperilds_dtl (p_dist_no giuw_pol_dist.dist_no%TYPE)
   IS
      v_count   NUMBER (1);
   BEGIN
      /* Get the value of the columns in table GIUW_WPERILDS
      ** in preparation for insertion or update to its corresponding
      ** master table GIUW_PERILDS. */
      FOR wds_cur IN (SELECT   dist_no, dist_seq_no, line_cd, peril_cd,
                               tsi_amt, prem_amt, ann_tsi_amt
                          FROM giuw_wperilds
                         WHERE dist_no = p_dist_no
                      ORDER BY dist_no, dist_seq_no, line_cd, peril_cd)
      LOOP
         v_count := NULL;

         /* If the record corresponding to the specified DIST_NO
         ** DIST_SEQ_NO, LINE_CD and PERIL_CD does not exist in table
         ** GIUW_PERILDS, then the record in table GIUW_WPERILDS must be
         ** inserted to the said table. */
         IF v_count IS NULL
         THEN
            INSERT INTO giuw_perilds
                        (dist_no, dist_seq_no,
                         line_cd, peril_cd, tsi_amt,
                         prem_amt, ann_tsi_amt
                        )
                 VALUES (wds_cur.dist_no, wds_cur.dist_seq_no,
                         wds_cur.line_cd, wds_cur.peril_cd, wds_cur.tsi_amt,
                         wds_cur.prem_amt, wds_cur.ann_tsi_amt
                        );
         END IF;
      END LOOP;

      /* Get the value of the columns in table GIUW_WPERILDS_DTL
      ** in preparation for insertion or update to its corresponding
      ** master table GIUW_PERILDS_DTL. */
      FOR wds_dtl_cur IN (SELECT   dist_no, dist_seq_no, peril_cd, line_cd,
                                   share_cd, dist_tsi, dist_prem, dist_spct,
                                   ann_dist_spct, ann_dist_tsi, dist_grp, 
                                   dist_spct1  --added by Halley 10.30.13
                              FROM giuw_wperilds_dtl
                             WHERE dist_no = p_dist_no
                          ORDER BY dist_no,
                                   dist_seq_no,
                                   line_cd,
                                   peril_cd,
                                   share_cd)
      LOOP
         v_count := NULL;

         /* If the record corresponding to the specified DIST_NO, DIST_SEQ_NO,
         ** LINE_CD, PERIL_CD and SHARE_CD does not exist in table GIUW_PERILDS_DTL,
         ** then the record in table GIUW_WPERILDS_DTL must be inserted to the
         ** said table. */
         IF v_count IS NULL
         THEN
            INSERT INTO giuw_perilds_dtl
                        (dist_no, dist_seq_no,
                         peril_cd, line_cd,
                         share_cd, dist_tsi,
                         dist_prem, dist_spct,
                         ann_dist_spct,
                         ann_dist_tsi, dist_grp, 
                         dist_spct1  --added by Halley 10.30.13
                        )
                 VALUES (wds_dtl_cur.dist_no, wds_dtl_cur.dist_seq_no,
                         wds_dtl_cur.peril_cd, wds_dtl_cur.line_cd,
                         wds_dtl_cur.share_cd, wds_dtl_cur.dist_tsi,
                         wds_dtl_cur.dist_prem, wds_dtl_cur.dist_spct,
                         wds_dtl_cur.ann_dist_spct,
                         wds_dtl_cur.ann_dist_tsi, wds_dtl_cur.dist_grp,
                         wds_dtl_cur.dist_spct1  --added by Halley 10.30.13
                        );
         END IF;
      END LOOP;
   --CLEAR_MESSAGE;
   END;

   PROCEDURE post_witemperilds_dtl (p_dist_no giuw_pol_dist.dist_no%TYPE)
   IS
      v_count   NUMBER (1);
   BEGIN
      /* Get the value of the columns in table GIUW_WITEMPERILDS
      ** in preparation for insertion or update to its corresponding
      ** master table GIUW_ITEMPERILDS. */
      FOR wds_cur IN (SELECT   dist_no, dist_seq_no, item_no, line_cd,
                               peril_cd, tsi_amt, prem_amt, ann_tsi_amt
                          FROM giuw_witemperilds
                         WHERE dist_no = p_dist_no
                      ORDER BY dist_no,
                               dist_seq_no,
                               item_no,
                               line_cd,
                               peril_cd)
      LOOP
         v_count := NULL;

         /* If the record corresponding to the specified DIST_NO, DIST_SEQ_NO,
         ** ITEM_NO, LINE_CD and PERIL_CD does not exist in table GIUW_ITEMPERILDS,
         ** then the record in table GIUW_WITEMPERILDS must be inserted to the said
         ** table. */
         IF v_count IS NULL
         THEN
            INSERT INTO giuw_itemperilds
                        (dist_no, dist_seq_no,
                         item_no, line_cd, peril_cd,
                         tsi_amt, prem_amt,
                         ann_tsi_amt
                        )
                 VALUES (wds_cur.dist_no, wds_cur.dist_seq_no,
                         wds_cur.item_no, wds_cur.line_cd, wds_cur.peril_cd,
                         wds_cur.tsi_amt, wds_cur.prem_amt,
                         wds_cur.ann_tsi_amt
                        );
         END IF;
      END LOOP;

      /* Get the value of the columns in table GIUW_WITEMPERILDS_DTL
      ** in preparation for insertion or update to its corresponding
      ** master table GIUW_ITEMPERILDS_DTL. */
      FOR wds_dtl_cur IN (SELECT   dist_no, dist_seq_no, item_no, peril_cd,
                                   line_cd, share_cd, dist_tsi, dist_prem,
                                   dist_spct, ann_dist_spct, ann_dist_tsi,
                                   dist_grp, dist_spct1 --added by Gzelle 06092014 referenced by aldren's modification 05072014 GIUWS004
                              FROM giuw_witemperilds_dtl
                             WHERE dist_no = p_dist_no
                          ORDER BY dist_no,
                                   dist_seq_no,
                                   item_no,
                                   line_cd,
                                   peril_cd,
                                   share_cd)
      LOOP
         v_count := NULL;

         /* If the record corresponding to the specified DIST_NO, DIST_SEQ_NO,
         ** ITEM_NO, LINE_CD, PERIL_CD and SHARE_CD does not exist in table
         ** GIUW_ITEMPERILDS_DTL, then the record in table GIUW_WITEMPERILDS_DTL
         ** must be inserted to the said table. */
         IF v_count IS NULL
         THEN
            INSERT INTO giuw_itemperilds_dtl
                        (dist_no, dist_seq_no,
                         item_no, peril_cd,
                         line_cd, share_cd,
                         dist_tsi, dist_prem,
                         dist_spct, ann_dist_spct,
                         ann_dist_tsi, dist_grp,
                         dist_spct1     --added by Gzelle 06092014 referenced by aldren's modification 05072014 GIUWS004
                        )
                 VALUES (wds_dtl_cur.dist_no, wds_dtl_cur.dist_seq_no,
                         wds_dtl_cur.item_no, wds_dtl_cur.peril_cd,
                         wds_dtl_cur.line_cd, wds_dtl_cur.share_cd,
                         wds_dtl_cur.dist_tsi, wds_dtl_cur.dist_prem,
                         wds_dtl_cur.dist_spct, wds_dtl_cur.ann_dist_spct,
                         wds_dtl_cur.ann_dist_tsi, wds_dtl_cur.dist_grp,
                         wds_dtl_cur.dist_spct1    --added by Gzelle 06092014 referenced by aldren's modification 05072014 GIUWS004
                        );
         END IF;
      END LOOP;
   --CLEAR_MESSAGE;
   END;

   PROCEDURE post_witemds_dtl (p_dist_no giuw_pol_dist.dist_no%TYPE)
   IS
      v_count   NUMBER (1);
   BEGIN
      /* Get the value of the columns in table GIUW_WITEMDS
      ** in preparation for insertion or update to its corresponding
      ** master table GIUW_ITEMDS. */
      FOR wds_cur IN (SELECT   dist_no, dist_seq_no, item_no, tsi_amt,
                               prem_amt, ann_tsi_amt
                          FROM giuw_witemds
                         WHERE dist_no = p_dist_no
                      ORDER BY dist_no, dist_seq_no, item_no)
      LOOP
         v_count := NULL;

         /* If the record corresponding to the specified DIST_NO
         ** DIST_SEQ_NO and ITEM_NO does not exist in table GIUW_ITEMDS,
         ** then the record in table GIUW_WITEMDS must be inserted
         ** to the said table. */
         IF v_count IS NULL
         THEN
            INSERT INTO giuw_itemds
                        (dist_no, dist_seq_no,
                         item_no, tsi_amt, prem_amt,
                         ann_tsi_amt
                        )
                 VALUES (wds_cur.dist_no, wds_cur.dist_seq_no,
                         wds_cur.item_no, wds_cur.tsi_amt, wds_cur.prem_amt,
                         wds_cur.ann_tsi_amt
                        );
         END IF;
      END LOOP;

      /* Get the value of the columns in table GIUW_WITEMDS_DTL
      ** in preparation for insertion or update to its corresponding
      ** master table GIUW_ITEMDS_DTL. */
      FOR wds_dtl_cur IN (SELECT   dist_no, dist_seq_no, item_no, line_cd,
                                   share_cd, dist_tsi, dist_prem, dist_spct,
                                   ann_dist_spct, ann_dist_tsi, dist_grp, 
                                   dist_spct1   --added by Gzelle 06092014 referenced by aldren's modification 05072014 GIUWS004
                              FROM giuw_witemds_dtl
                             WHERE dist_no = p_dist_no
                          ORDER BY dist_no,
                                   dist_seq_no,
                                   item_no,
                                   line_cd,
                                   share_cd)
      LOOP
         v_count := NULL;

         /* If the record corresponding to the specified DIST_NO, DIST_SEQ_NO,
         ** ITEM_NO, LINE_CD, SHARE_CD does not exist in table GIUW_ITEMDS_DTL,
         ** then the record in table GIUW_ITEMDS_DTL must be inserted to the
         ** said table. */
         IF v_count IS NULL
         THEN
            INSERT INTO giuw_itemds_dtl
                        (dist_no, dist_seq_no,
                         item_no, line_cd,
                         share_cd, dist_tsi,
                         dist_prem, dist_spct,
                         ann_dist_spct,
                         ann_dist_tsi, dist_grp,
                         dist_spct1 --added by Gzelle 06092014 referenced by aldren's modification 05072014 GIUWS004
                        )
                 VALUES (wds_dtl_cur.dist_no, wds_dtl_cur.dist_seq_no,
                         wds_dtl_cur.item_no, wds_dtl_cur.line_cd,
                         wds_dtl_cur.share_cd, wds_dtl_cur.dist_tsi,
                         wds_dtl_cur.dist_prem, wds_dtl_cur.dist_spct,
                         wds_dtl_cur.ann_dist_spct,
                         wds_dtl_cur.ann_dist_tsi, wds_dtl_cur.dist_grp,
                         wds_dtl_cur.dist_spct1     --added by Gzelle 06092014 referenced by aldren's modification 05072014 GIUWS004
                        );
         END IF;
      END LOOP;
   --CLEAR_MESSAGE;
   END;

   PROCEDURE post_wpolicyds_dtl (
      p_dist_no              giuw_pol_dist.dist_no%TYPE,
      p_par_type             gipi_parlist.par_type%TYPE,
      p_nbt_eff_date         gipi_wpolbas.eff_date%TYPE,
      p_msg_alert      OUT   VARCHAR2
   )
   IS
      v_count   NUMBER (1);
   BEGIN
      /* Get the value of the columns in table GIUW_WPOLICYDS
      ** in preparation for insertion or update to its corresponding
      ** master table GIUW_POLICYDS. */
      FOR wds_cur IN (SELECT   dist_no, dist_seq_no, tsi_amt, prem_amt,
                               ann_tsi_amt, item_grp
                          FROM giuw_wpolicyds
                         WHERE dist_no = p_dist_no
                      ORDER BY dist_no, dist_seq_no)
      LOOP
         v_count := NULL;

         /* If the record corresponding to the specified DIST_NO
         ** and DIST_SEQ_NO does not exist in table GIUW_POLICYDS,
         ** then the record in table GIUW_WPOLICYDS must be inserted
         ** to the said table. */
         IF v_count IS NULL
         THEN
            INSERT INTO giuw_policyds
                        (dist_no, dist_seq_no,
                         tsi_amt, prem_amt,
                         ann_tsi_amt, item_grp
                        )
                 VALUES (wds_cur.dist_no, wds_cur.dist_seq_no,
                         wds_cur.tsi_amt, wds_cur.prem_amt,
                         wds_cur.ann_tsi_amt, wds_cur.item_grp
                        );
         END IF;
      END LOOP;

      /* Get the value of the columns in table GIUW_WPOLICYDS_DTL
      ** in preparation for insertion or update to its corresponding
      ** master table GIUW_POLICYDS_DTL. */
      FOR wds_dtl_cur IN (SELECT   a.dist_no, a.dist_seq_no, a.line_cd,
                                   a.share_cd, a.dist_tsi, a.dist_prem,
                                   a.dist_spct, a.ann_dist_spct,
                                   a.ann_dist_tsi, a.dist_grp, b.share_type,
                                   b.expiry_date, b.trty_name, b.eff_date,
                                   a.dist_spct1 --added by Gzelle 06092014 referenced by aldren's modification 05072014 GIUWS004
                              FROM giuw_wpolicyds_dtl a, giis_dist_share b
                             WHERE a.share_cd = b.share_cd
                               AND a.line_cd = b.line_cd
                               AND a.dist_no = p_dist_no
                          ORDER BY a.dist_no,
                                   a.dist_seq_no,
                                   a.line_cd,
                                   a.share_cd)
      LOOP
         v_count := NULL;

         IF wds_dtl_cur.share_type = '2' AND p_par_type = 'P'
         THEN
            --edited by d.alcantara, 01-31-2012, added trunc to p_nbt_eff_date
            IF TRUNC(p_nbt_eff_date) > TRUNC (wds_dtl_cur.expiry_date)
            THEN
               --nok FORMS_DDL('ROLLBACK');

               /* Closes the warning canvas and
               ** sets the cursor style to default. */
               --nok CURSOR_NORMAL;
               p_msg_alert :=
                     'Treaty '
                  || wds_dtl_cur.trty_name
                  || ' has already expired.  '
                  || 'Replace the treaty with another one.';
            END IF;
         END IF;

         /* If the record corresponding to the specified DIST_NO,
         ** DIST_SEQ_NO, LINE_CD, SHARE_CD does not exist in table
         ** GIUW_POLICYDS_DTL, then the record in table GIUW_WPOLICYDS_DTL
         ** must be inserted to the said table. */
         IF v_count IS NULL
         THEN
            INSERT INTO giuw_policyds_dtl
                        (dist_no, dist_seq_no,
                         line_cd, share_cd,
                         dist_tsi, dist_prem,
                         dist_spct, ann_dist_spct,
                         ann_dist_tsi, dist_grp, dist_spct1 --added by Gzelle 06092014 (dist_spct1) referenced by aldren's modification 05072014 GIUWS004
                        )
                 VALUES (wds_dtl_cur.dist_no, wds_dtl_cur.dist_seq_no,
                         wds_dtl_cur.line_cd, wds_dtl_cur.share_cd,
                         wds_dtl_cur.dist_tsi, wds_dtl_cur.dist_prem,
                         wds_dtl_cur.dist_spct, wds_dtl_cur.ann_dist_spct,
                         wds_dtl_cur.ann_dist_tsi, wds_dtl_cur.dist_grp,
                         wds_dtl_cur.dist_spct1 --added by Gzelle 06092014 (dist_spct1) referenced by aldren's modification 05072014 GIUWS004
                        );
         END IF;
      END LOOP;
   --nok CLEAR_MESSAGE;
   END;

   PROCEDURE post_dist_giuws004_final (
      p_par_id              IN       gipi_wpolbas.par_id%TYPE,
      p_dist_no             IN       giuw_pol_dist.dist_no%TYPE,
      p_dist_seq_no         IN       giuw_wpolicyds.dist_seq_no%TYPE,
      p_module              IN       VARCHAR2,
      p_user_id             IN       giis_users.user_id%TYPE,
      p_current_form_name   IN       VARCHAR2,
     p_override_switch     IN       VARCHAR2, -- added by: Nica 05.24.2012
      p_net_msg             OUT      VARCHAR2,
      p_treaty_msg          OUT      VARCHAR2,
      p_override_msg        OUT      VARCHAR2,
      p_net_override        OUT      VARCHAR2,
      p_treaty_override     OUT      VARCHAR2,
      p_msg_alert           OUT      VARCHAR2,
      p_dist_flag           OUT      VARCHAR2,
      p_mean_dist_flag      OUT      VARCHAR2,
      p_workflow_msgr       OUT      VARCHAR2,
      p_param_function      OUT      VARCHAR2
   )
   IS
   BEGIN
      /* Post records retrieved from the working tables to their
      ** corresponding master tables.
      ** IMPORTANT:  This button can only be pressed upon complete distribution
      **             of a specified DIST_NO, that is, GIUW_WPOLICYDS.DIST_FLAG = '2'.
      **             AND if the said distribution involves one or more reinsurers,
      **             that is, if a facultative share, relative to the DIST_NO being
      **             processed, was found to be existing in any of the records in
      **             tables GIUW_WPOLICYDS_DTL, GIUW_WITEMDS_DTL, GIUW_WPERILDS_DTL
      **             and GIUW_WITEMPERILDS_DTL.
      ** NOTE:  For more info on VARIABLES.POST_SW, see package spec VARIABLES. */
      DECLARE
         v_message                VARCHAR2 (2000)
                                               := 'W   o   r   k   i   n   g';
         v_share                  VARCHAR2 (2000)                := 'N';
         --alert_id             alert;
         alert_button             NUMBER;
         --rose08062009
         p_type_exceed            VARCHAR2 (7);
         p_block                  VARCHAR2 (5000);
         v_param_value_v          VARCHAR2 (1);
         v_exist                  VARCHAR2 (1);
         v_share_type             VARCHAR2 (1);
         v_prev_type_exceed       VARCHAR2 (10);
         v_auto_dist              VARCHAR2 (1);
         v_menu_line              giis_line.line_cd%TYPE;         --vj 031710
         v_loc_block              VARCHAR2 (50);                  --vj 031710
         v_count                  NUMBER                         := 0;
         var_v_prev_type_exceed   VARCHAR2 (5000);
         v_par_type               gipi_parlist.par_type%TYPE;
         v_nbt_eff_date           gipi_wpolbas.eff_date%TYPE;
         v_line_cd                gipi_wpolbas.line_cd%TYPE;
         v_nbt_subline_cd         gipi_wpolbas.subline_cd%TYPE;
         v_takeup_term            gipi_wpolbas.takeup_term%TYPE;         
      BEGIN
         /*vj 031710*/
         BEGIN
            SELECT NVL (b.menu_line_cd, b.line_cd), par_type
              INTO v_menu_line, v_par_type
              FROM gipi_parlist a, giis_line b
             WHERE a.line_cd = b.line_cd AND a.par_id = p_par_id;
         END;

         FOR pol IN (SELECT eff_date, line_cd, subline_cd
                       FROM gipi_wpolbas
                      WHERE par_id = p_par_id)
         LOOP
            v_nbt_eff_date := pol.eff_date;
            v_line_cd := pol.line_cd;
            v_nbt_subline_cd := pol.subline_cd;
         END LOOP;
         
        giuw_pol_dist_pkg.create_ri_records (p_dist_no,    
                                              p_par_id,
                                              v_line_cd,
                                              v_nbt_subline_cd
                                             );           
                                                                            
         /* Remove existing records related to the
         ** current DIST_NO from certain distribution
         ** and RI master tables considering the fact
         ** that the current changes made were not yet
         ** posted to the master tables. */
         giuw_pol_dist_pkg.delete_dist_master_tables (p_dist_no);
         --v_message := v_message || '   >';
         --synchronize_message (v_message);         

         /* Post records retrieved from GIUW_WPOLICYDS
         ** and GIUW_WPOLICYDS_DTL to tables GIUW_POLICYDS
         ** and GIUW_POLICYDS_DTL. */
         post_wpolicyds_dtl (p_dist_no,
                             v_par_type,
                             v_nbt_eff_date,
                             p_msg_alert
                            );
         --v_message := v_message || '   >';
         --synchronize_message (v_message);

         /* Post records retrieved from GIUW_WITEMDS
         ** and GIUW_WITEMDS_DTL to tables GIUW_ITEMDS
         ** and GIUW_ITEMDS_DTL. */
         post_witemds_dtl (p_dist_no);
         --v_message := v_message || '   >';
         --synchronize_message (v_message);

         /* Post records retrieved from GIUW_WITEMPERILDS and
         ** GIUW_WITEMPERILDS_DTL to tables GIUW_ITEMPERILDS
         ** and GIUW_ITEMPERILDS_DTL. */
         post_witemperilds_dtl (p_dist_no);
         --v_message := v_message || '   >';
         --synchronize_message (v_message);

         /* Post records retrieved from GIUW_WPERILDS
         ** and GIUW_WPERILDS_DTL to tables GIUW_PERILDS
         ** and GIUW_PERILDS_DTL. */
         post_wperilds_dtl (p_dist_no);

         --v_message := v_message || '   >';
         --synchronize_message (v_message);

         /* Since records in the working tables have
             ** already been copied to the master tables,
             ** the DIST_FLAG of table GIUW_POL_DIST
             ** must then be updated to '2'(With Facultative),
             ** meaning that the distribution record has already
             ** been posted but the data in the working tables
             ** have not yet been deleted because a final posting
             ** by the RI department is still required. */
           /*added the if condition para inde paulit ulit ang
         pagtawag sa check auto dist para inde magulo ang
           update ng autodist 02232010*/

         FOR v IN (SELECT share_type
                     FROM giis_dist_share
                    WHERE line_cd = v_line_cd
                      AND share_type = 3
                      AND share_cd IN (
                             SELECT share_cd
                               FROM giuw_wpolicyds_dtl
                              WHERE dist_no = p_dist_no
                                AND line_cd = v_line_cd))
         LOOP
            IF v.share_type = '3'
            THEN
               v_share := 'Y';
            END IF;
         END LOOP;

         IF v_share = 'Y'
         THEN
            UPDATE giuw_pol_dist
               SET dist_flag = '2',
                   post_flag = 'O',
                   auto_dist = 'N',     --added by Gzelle 06252014
                   special_dist_sw = 'N'
             --auto_dist = 'N'
            WHERE  par_id = p_par_id AND dist_no = p_dist_no;

            p_dist_flag := '2';
            p_mean_dist_flag := 'With Facultative';

            /* A.R.C. 08.13.2004
            ** to create workflow records of Facultative Placement */
            FOR c1 IN (SELECT b.userid, d.event_desc
                         FROM giis_events_column c,
                              giis_event_mod_users b,
                              giis_event_modules a,
                              giis_events d
                        WHERE 1 = 1
                          AND c.event_cd = a.event_cd
                          AND c.event_mod_cd = a.event_mod_cd
                          AND b.event_mod_cd = a.event_mod_cd
                          --AND b.userid <> USER  --A.R.C. 01.23.2006
                          AND b.passing_userid = USER
                          --A.R.C. 01.23.2006
                          AND a.module_id = 'GIUWS004'
                          AND a.event_cd = d.event_cd
                          AND UPPER (d.event_desc) =
                                           'FACULTATIVE PLACEMENT')
            LOOP
               create_transfer_workflow_rec
                                        (c1.event_desc,
                                         p_current_form_name,
                                         --nok GET_APPLICATION_PROPERTY (current_form_name),
                                         c1.userid,
                                         p_par_id,
                                            c1.event_desc
                                         || ' '
                                         || get_policy_no
                                                         (p_par_id),
                                         p_msg_alert,
                                         p_workflow_msgr,
                                         p_user_id
                                        );
            END LOOP;
         ELSE
            UPDATE giuw_pol_dist
               SET dist_flag = '1',
                   post_flag = 'O',
                   auto_dist = 'Y',     --added by Gzelle 06252014
                   special_dist_sw = 'N'
             --auto_dist = 'N'
            WHERE  par_id = p_par_id AND dist_no = p_dist_no;

            p_dist_flag := '1';
            p_mean_dist_flag := 'Undistributed';
            --A.R.C. 02.07.2007
                --added to delete the workflow facultative placement of GIUWS004 if not facul
            delete_workflow_rec ('Facultative Placement',
                                 'GIUWS004',
                                 p_user_id,
                                 p_par_id
                                );
         END IF;  
         
         -- shan 07.24.2014
         UPDATE GIRI_WDISTFRPS
            SET tot_fac_spct2 = NULL
          WHERE dist_no = p_dist_no;
      END;
   END;

   PROCEDURE post_dist_with_validation (
      p_par_id              IN       gipi_wpolbas.par_id%TYPE,
      p_dist_no             IN       giuw_pol_dist.dist_no%TYPE,
      p_dist_seq_no         IN       giuw_wpolicyds.dist_seq_no%TYPE,
      p_module              IN       VARCHAR2,
      p_user_id             IN       giis_users.user_id%TYPE,
      p_current_form_name   IN       VARCHAR2,
     p_override_switch     IN       VARCHAR2, -- added by: Nica 05.24.2012
      p_net_msg             OUT      VARCHAR2,
      p_treaty_msg          OUT      VARCHAR2,
      p_override_msg        OUT      VARCHAR2,
      p_net_override        OUT      VARCHAR2,
      p_treaty_override     OUT      VARCHAR2,
      p_msg_alert           OUT      VARCHAR2,
      p_dist_flag           OUT      VARCHAR2,
      p_mean_dist_flag      OUT      VARCHAR2,
      p_workflow_msgr       OUT      VARCHAR2,
      p_param_function      OUT      VARCHAR2
   )
   IS
   BEGIN
      /* Post records retrieved from the working tables to their
      ** corresponding master tables.
      ** IMPORTANT:  This button can only be pressed upon complete distribution
      **             of a specified DIST_NO, that is, GIUW_WPOLICYDS.DIST_FLAG = '2'.
      **             AND if the said distribution involves one or more reinsurers,
      **             that is, if a facultative share, relative to the DIST_NO being
      **             processed, was found to be existing in any of the records in
      **             tables GIUW_WPOLICYDS_DTL, GIUW_WITEMDS_DTL, GIUW_WPERILDS_DTL
      **             and GIUW_WITEMPERILDS_DTL.
      ** NOTE:  For more info on VARIABLES.POST_SW, see package spec VARIABLES. */
      DECLARE
         v_message                VARCHAR2 (2000)
                                               := 'W   o   r   k   i   n   g';
         v_share                  VARCHAR2 (2000)                := 'N';
         --alert_id             alert;
         alert_button             NUMBER;
         --rose08062009
         p_type_exceed            VARCHAR2 (7);
         p_block                  VARCHAR2 (5000);
         v_param_value_v          VARCHAR2 (1);
         v_exist                  VARCHAR2 (1);
         v_share_type             VARCHAR2 (1);
         v_prev_type_exceed       VARCHAR2 (10);
         v_auto_dist              VARCHAR2 (1);
         v_menu_line              giis_line.line_cd%TYPE;         --vj 031710
         v_loc_block              VARCHAR2 (50);                  --vj 031710
         v_count                  NUMBER                         := 0;
         var_v_prev_type_exceed   VARCHAR2 (5000);
         v_par_type               gipi_parlist.par_type%TYPE;
         v_nbt_eff_date           gipi_wpolbas.eff_date%TYPE;
         v_line_cd                gipi_wpolbas.line_cd%TYPE;
         v_nbt_subline_cd         gipi_wpolbas.subline_cd%TYPE;
         v_takeup_term            gipi_wpolbas.takeup_term%TYPE;    
         v_loc_count                  NUMBER        := 0;       --added by Gzelle 06202014             
      BEGIN
        
            
         /*vj 031710*/
         BEGIN
            SELECT NVL (b.menu_line_cd, b.line_cd), par_type
              INTO v_menu_line, v_par_type
              FROM gipi_parlist a, giis_line b
             WHERE a.line_cd = b.line_cd AND a.par_id = p_par_id;
         END;

         FOR pol IN (SELECT eff_date, line_cd, subline_cd
                       FROM gipi_wpolbas
                      WHERE par_id = p_par_id)
         LOOP
            v_nbt_eff_date := pol.eff_date;
            v_line_cd := pol.line_cd;
            v_nbt_subline_cd := pol.subline_cd;
         END LOOP;

         IF v_menu_line = 'FI'
         THEN
            v_loc_block := 'block';
         ELSIF v_menu_line = 'CA'
         THEN
            v_loc_block := 'location';
         END IF;

         /*end vj 031710*/
         --check_dist_flag;                                        --A.R.C. 08.24.2006

         --VALIDATE_BLOCK_LIMIT; --added by gmi  commented out by rose, placed the codes in package proc. validate_block_limit.limit validation
         --rose 08062009--
         FOR chk_type IN (SELECT   d.share_type,
                                   SUM (ROUND (dist_spct, 14)) dist_spct,
                                   a.eff_date
                              FROM giuw_pol_dist a,
                                   giuw_wpolicyds b,
                                   giuw_wpolicyds_dtl c,
                                   giis_dist_share d
                             WHERE a.dist_no = b.dist_no
                               AND a.dist_no = c.dist_no
                               AND b.dist_seq_no = c.dist_seq_no
                               AND c.line_cd = d.line_cd
                               AND c.share_cd = d.share_cd
                               AND a.par_id = p_par_id
                               AND a.dist_no = p_dist_no
                               AND b.dist_seq_no = p_dist_seq_no
                               AND c.share_cd != 999 -- uncomment by Gzelle 06112014, aldren's modification 05282014 rose 11/11/2009 to avoid the double display of the alert if the sharing is facul and ret only commented out 06162010 for cases that facul is 100%
                          GROUP BY d.share_type, a.eff_date
                          ORDER BY d.share_type)
         LOOP
            v_share_type := chk_type.share_type;

            IF v_menu_line = 'FI'
            THEN
               /*validate_block_limit.limit_validation (p_par_id,*/     --commented out by Gzelle 06202014 replaced with giuw_pol_dist_pkg.limit_validation2
               giuw_pol_dist_pkg.limit_validation2(p_par_id,
                                                   v_line_cd,
                                                   p_block,
                                                   p_type_exceed,
                                                   v_share_type,
                                                   chk_type.eff_date,
                                                   chk_type.dist_spct,
                                                   v_loc_count           --added by Gzelle 06202014
                                                   );
            ELSIF     v_menu_line = 'CA'
                  AND v_nbt_subline_cd =
                                       NVL (giisp.v ('CA_SUBLINE_PFL'), 'PFL')
            THEN
               -- marion 08.10.2010 add b240.nbt_subline_cd = NVL(Giisp.v('CA_SUBLINE_PFL'),'PFL') in if condition
               /*ca_limit_validation (p_par_id,*/       --commented out by Gzelle 06202014 replaced with giuw_pol_dist_pkg.ca_limit_validation2
               giuw_pol_dist_pkg.ca_limit_validation2(p_par_id,
                                                      v_line_cd,
                                                      p_block,
                                                      p_type_exceed,
                                                      v_share_type,
                                                      chk_type.eff_date,
                                                      chk_type.dist_spct,
                                                      v_loc_count     --added by Gzelle 06202014
                                                     );                    --added by VJ 031710
            END IF;

            IF p_type_exceed = 'NET'
            THEN
               --function--check parameter in giis_parameter
               v_param_value_v :=
                  validate_block_limit.check_override_function ('PARAMETER',
                                                                p_module,
                                                                'RO',
                                                                p_user_id
                                                               );
            ELSIF p_type_exceed = 'TREATY'
            THEN
               v_param_value_v :=
                  validate_block_limit.check_override_function ('PARAMETER',
                                                                p_module,
                                                                'TO',
                                                                p_user_id
                                                               );
            END IF;

            /*added by rose 02182010 para twice lalabas ung override canvas pag both treaty and ret ang lumagpas sa limit*/
            IF    (p_type_exceed = 'NET' )  -- (p_type_exceed = 'NET' AND v_prev_type_exceed IS NULL)  -- modified out, dahil dito hindi nag prompt ung override ni Treaty - irwin 10.5.2012
               OR (p_type_exceed = 'TREATY' ) -- (p_type_exceed = 'TREATY' AND v_prev_type_exceed IS NULL)
               OR p_type_exceed IS NULL
            THEN
               IF p_type_exceed = 'NET'
               THEN
                  v_prev_type_exceed := 'RO';
                  var_v_prev_type_exceed := 'RO';
               END IF;

               IF p_type_exceed = 'NET'
               THEN
                  p_param_function := 'RO';
               ELSIF p_type_exceed = 'TREATY'
               THEN
                  p_param_function := 'TO';
               END IF;

               --alert_id := FIND_ALERT ('BLOCK_ALERT');   --nok
               --function--check user still under the function check_override_function--
               v_exist :=
                  validate_block_limit.check_override_function
                                                            ('USER',
                                                             p_module,
                                                             p_param_function,
                                                             p_user_id
                                                            );

               IF v_exist = 'N'
               THEN
                  IF p_type_exceed = 'NET'
                  THEN
                      --nok
                     /*SET_ALERT_PROPERTY (alert_id,
                                         alert_message_text,
                                            'Net retention limit for '
                                         || v_loc_block
                                         || ' '
                                         || p_block
                                         || ' has been exceeded.'
                                         || ' Would you like to continue?'
                                        );                               --vj 031710
                     alert_button := SHOW_ALERT (alert_id);*/
                     /*added by Gzelle 06202014*/
                     IF v_loc_count > 1 THEN
                         p_net_msg :=
                            'Net retention limit for '
                            || p_block
                            || ' '
                            || v_loc_block
                            || 's has been exceeded.'
                            || ' Would you like to continue?';                     
                     ELSE
                         p_net_msg :=
                               'Net retention limit for '
                            || v_loc_block
                            || ' '
                            || p_block
                            || ' has been exceeded.'
                            || ' Would you like to continue?';                     
                     END IF;
                  ELSIF p_type_exceed = 'TREATY'
                  THEN
                     --:parameter.function := 'TO'; --02232010
                     --nok
                     /*SET_ALERT_PROPERTY (alert_id,
                                         alert_message_text,
                                            'Treaty limit for '
                                         || v_loc_block
                                         || ' '
                                         || p_block
                                         || ' has been exceeded.'
                                         || ' Would you like to continue?'
                                        );                               --vj 031710
                     alert_button := SHOW_ALERT (alert_id);*/
                     /*added by Gzelle 06202014*/
                     IF v_loc_count > 1 THEN
                         p_treaty_msg :=
                               'Treaty limit for '
                            || p_block
                            || ' '
                            || v_loc_block
                            || 's has been exceeded.'
                            || ' Would you like to continue?';                     
                     ELSE
                         p_treaty_msg :=
                               'Treaty limit for '
                            || v_loc_block
                            || ' '
                            || p_block
                            || ' has been exceeded.'
                            || ' Would you like to continue?';                     
                     END IF;
                  END IF;
               -------------------03222010 consolidated the version of pnbgen for their specific enh
               ELSIF v_exist = 'Y'
               THEN
                  IF p_type_exceed = 'NET'
                  THEN
                      --nok
                     /*SET_ALERT_PROPERTY (alert_id,
                                         alert_message_text,
                                            'Net retention limit for block '
                                         || p_block
                                         || ' has been exceeded.'
                                         || ' Would you like to continue?'
                                        );
                     alert_button := SHOW_ALERT (alert_id);*/
                     /*p_net_msg :=
                           'Net retention limit for location '    commented out by Gzelle 06202014
                        || p_block                                  replaced with codes below
                        || ' has been exceeded.'
                        || ' Would you like to continue?';*/
                     IF v_loc_count > 1 THEN
                         p_net_msg :=
                            'Net retention limit for '
                            || p_block
                            || ' '
                            || v_loc_block
                            || 's has been exceeded.'
                            || ' Would you like to continue?';                     
                     ELSE
                         p_net_msg :=
                               'Net retention limit for '
                            || v_loc_block
                            || ' '
                            || p_block
                            || ' has been exceeded.'
                            || ' Would you like to continue?';                     
                     END IF;

                     FOR chk_type IN
                        (SELECT   d.share_type,
                                  SUM (ROUND (dist_spct, 14)) dist_spct,
                                  a.eff_date
                             FROM giuw_pol_dist a,
                                  giuw_wpolicyds b,
                                  giuw_wpolicyds_dtl c,
                                  giis_dist_share d
                            WHERE a.dist_no = b.dist_no
                              AND a.dist_no = c.dist_no
                              AND b.dist_seq_no = c.dist_seq_no
                              AND c.line_cd = d.line_cd
                              AND c.share_cd = d.share_cd
                              AND a.par_id = p_par_id
                              AND a.dist_no = p_dist_no
                              AND b.dist_seq_no = p_dist_seq_no
                              AND c.share_cd NOT IN (999, 1)
                         GROUP BY d.share_type, a.eff_date)
                     LOOP
                        v_share_type := chk_type.share_type;

                        IF v_menu_line = 'FI'
                        THEN
                           /*validate_block_limit.limit_validation*/    --commented out by Gzelle 06202014 replaced with giuw_pol_dist_pkg.limit_validation2
                             giuw_pol_dist_pkg.limit_validation2
                                                          (p_par_id,
                                                           v_line_cd,
                                                           p_block,
                                                           p_type_exceed,
                                                           v_share_type,
                                                           chk_type.eff_date,
                                                           chk_type.dist_spct,
                                                           v_loc_count      --added by Gzelle 06202014                                                           
                                                          );
                        ELSIF     v_menu_line = 'CA'
                              AND v_nbt_subline_cd =
                                       NVL (giisp.v ('CA_SUBLINE_PFL'), 'PFL')
                        THEN
                           -- marion 08.10.2010 add b240.nbt_subline_cd = NVL(Giisp.v('CA_SUBLINE_PFL'),'PFL') in if condition
                           /*ca_limit_validation (p_par_id,*/       --commented out by Gzelle 06202014 replaced with giuw_pol_dist_pkg.ca_limit_validation2
                           giuw_pol_dist_pkg.ca_limit_validation2 (p_par_id,
                                                                   v_line_cd,
                                                                   p_block,
                                                                   p_type_exceed,
                                                                   v_share_type,
                                                                   chk_type.eff_date,
                                                                   chk_type.dist_spct,
                                                                   v_loc_count     --added by Gzelle 06202014
                                                                  );
                        --added by rose para sa v_Exist y tapos ca line 03312010
                        END IF;
                     END LOOP;
                  END IF;

                  IF p_type_exceed = 'TREATY'       --moved here by Gzelle 06162014
                  THEN
                    --nok
                    /*SET_ALERT_PROPERTY (alert_id,
                                        alert_message_text,
                                           'Treaty limit for block '
                                        || p_block
                                        || ' has been exceeded.'
                                        || ' Would you like to continue'
                                       );
                    alert_button := SHOW_ALERT (alert_id);*/
                    /*p_treaty_msg :=
                          'Treaty limit for location '       commented out by Gzelle 06202014
                       || p_block                               replaced with codes below
                       || ' has been exceeded.'
                       || ' Would you like to continue';*/
                     IF v_loc_count > 1 THEN
                         p_treaty_msg :=
                               'Treaty limit for '
                            || p_block
                            || ' '
                            || v_loc_block
                            || 's has been exceeded.'
                            || ' Would you like to continue?';                     
                     ELSE
                         p_treaty_msg :=
                               'Treaty limit for '
                            || v_loc_block
                            || ' '
                            || p_block
                            || ' has been exceeded.'
                            || ' Would you like to continue?';                     
                     END IF; 
                  END IF;                  
                  
                -------------------
               END IF;

               IF alert_button = 0
               THEN                                   --nok alert_button2 THEN
                  --RAISE form_trigger_failure;
                  NULL;
               ELSE
                  IF v_param_value_v = 'Y' AND p_type_exceed IS NOT NULL
                  THEN
                     IF v_exist = 'N'
                     THEN
                        /*alert_id := FIND_ALERT ('OVERRIDE');*/ -- nok
                        /*Set_Alert_Property(alert_id, ALERT_MESSAGE_TEXT, 'User has no authority to process distribution block limit. '|| 'Please ask for override or Reassign the PAR to another user.');*//*VJ 031710*/

                        --nok
                        /*SET_ALERT_PROPERTY
                           (alert_id,
                            alert_message_text,
                               'User has no authority to process distribution limit. '
                            || 'Please ask for override or Reassign the PAR to another user.'
                           );
                        alert_button := SHOW_ALERT (alert_id);*/
                        p_override_msg :=
                              'User has no authority to process distribution limit. '
                           || 'Please ask for override or reassign the PAR to another user.';

                        IF alert_button = 0
                        THEN                          --nok alert_button2 THEN
                           --RAISE form_trigger_failure;
                           NULL;
                        ELSE
                           --call override canvas--
                           IF p_type_exceed = 'NET'
                           THEN
                              --nok
                              /*SET_WINDOW_PROPERTY ('override',
                                                   title,
                                                   'Net Retention Override'
                                                  );*/
                              p_net_override := 'Net Retention Override';
                           ELSIF p_type_exceed = 'TREATY'
                           THEN
                              --nok
                              /*SET_WINDOW_PROPERTY ('override',
                                                   title,
                                                   'Treaty Retention Override'
                                                  );*/
                              p_treaty_override :=
                                                  'Treaty Retention Override';
                           END IF;
                        --GO_ITEM ('control.ovr_username');
                        --control_ovr_username := '';
                        --control_ovr_password := '';
                        END IF;
                     END IF;
                  ELSIF v_param_value_v = 'N' AND v_prev_type_exceed = 'RO'
                  THEN
                     FOR chk_type IN
                        (SELECT   d.share_type,
                                  SUM (ROUND (dist_spct, 14)) dist_spct,
                                  a.eff_date
                             FROM giuw_pol_dist a,
                                  giuw_wpolicyds b,
                                  giuw_wpolicyds_dtl c,
                                  giis_dist_share d
                            WHERE a.dist_no = b.dist_no
                              AND a.dist_no = c.dist_no
                              AND b.dist_seq_no = c.dist_seq_no
                              AND c.line_cd = d.line_cd
                              AND c.share_cd = d.share_cd
                              AND a.par_id = p_par_id
                              AND a.dist_no = p_dist_no
                              AND b.dist_seq_no = p_dist_seq_no
                              AND c.share_cd NOT IN (999, 1)
                         GROUP BY d.share_type, a.eff_date)
                     LOOP
                        v_share_type := chk_type.share_type;

                        IF v_menu_line = 'FI'
                        THEN
                           /*validate_block_limit.limit_validation*/    --commented out by Gzelle 06202014 replaced with giuw_pol_dist_pkg.limit_validation2
                             giuw_pol_dist_pkg.limit_validation2
                                                          (p_par_id,
                                                           v_line_cd,
                                                           p_block,
                                                           p_type_exceed,
                                                           v_share_type,
                                                           chk_type.eff_date,
                                                           chk_type.dist_spct,
                                                           v_loc_count     --added by Gzelle 06202014
                                                          );
                        ELSIF     v_menu_line = 'CA'
                              AND v_nbt_subline_cd =
                                       NVL (giisp.v ('CA_SUBLINE_PFL'), 'PFL')
                        THEN
                           -- marion 08.10.2010 add b240.nbt_subline_cd = NVL(Giisp.v('CA_SUBLINE_PFL'),'PFL') in if condition
                           /*ca_limit_validation (p_par_id,*/       --commented out by Gzelle 06202014 replaced with giuw_pol_dist_pkg.ca_limit_validation2
                           giuw_pol_dist_pkg.ca_limit_validation2(p_par_id,
                                                                  v_line_cd,
                                                                  p_block,
                                                                  p_type_exceed,
                                                                  v_share_type,
                                                                  chk_type.eff_date,
                                                                  chk_type.dist_spct,
                                                                  v_loc_count       --added by Gzelle 06202014
                                                                  );         --added by VJ 031710
                        END IF;
                     END LOOP;

                     IF p_type_exceed = 'TREATY'
                     THEN
                          --nok
                        /*alert_id := FIND_ALERT ('BLOCK_ALERT');
                        SET_ALERT_PROPERTY (alert_id,
                                            alert_message_text,
                                               'Treaty limit for '
                                            || v_loc_block
                                            || ' '
                                            || p_block
                                            || ' has been exceeded.'
                                            || ' Would you like to continue?'
                                           );                            --vj 031710
                        alert_button := SHOW_ALERT (alert_id);*/
                        /*p_treaty_msg :=                   --commented out by Gzelle 06202014 replaced with codes below
                              'Treaty limit for '   
                           || v_loc_block
                           || ' '
                           || p_block
                           || ' has been exceeded.'
                           || ' Would you like to continue?';*/
                         IF v_loc_count > 1 THEN
                             p_treaty_msg :=
                                   'Treaty limit for '
                                || p_block
                                || ' '
                                || v_loc_block
                                || 's has been exceeded.'
                                || ' Would you like to continue?';                     
                         ELSE
                             p_treaty_msg :=
                                   'Treaty limit for '
                                || v_loc_block
                                || ' '
                                || p_block
                                || ' has been exceeded.'
                                || ' Would you like to continue?';                     
                         END IF;                            
                     END IF;
                  END IF;

                  --end of rose 08062009--
                  /*commented codes below, transferred to post_dist_final_GIUWS004 by Gzelle 06132014*/
                  /*IF    (v_param_value_v = 'N' AND v_exist IN ('Y', 'N'))
                     OR (    v_param_value_v = 'Y'
                         AND (   v_line_cd NOT IN ('FI', 'CA')
                              OR (    p_type_exceed IS NULL
                                  AND v_prev_type_exceed IS NULL
                                 )
                              OR v_exist = 'Y'
                             )
                        )*/
                     /*rose 03312010 added Casualty line aaded v_exist = 'Y' 05.19.2010*/
                  /*   OR (    p_type_exceed IS NULL
                         AND v_prev_type_exceed IS NULL
                         AND p_param_function IS NULL
                        )
                     OR (    p_type_exceed IS NOT NULL
                         AND v_exist = 'Y'
                         AND v_prev_type_exceed IS NOT NULL
                        )
                OR ( p_override_switch = 'Y' ) /* added by: Nica 05.24.2012 - parameter switch used in geniisys web 
                                                       to indicate that a user override has already been approved*/
                  /*THEN
                     /* Forces oracle to validate any changes
                       ** made to the current field where the cursor
                       ** is located.  Thus, applying the approriate
                       ** changes to its SYSTEM.FORM_STATUS variable. */

                     --nok
                     /*VALIDATE (item_scope);

                     IF FORM_FAILURE THEN
                        RAISE form_trigger_failure;
                     END IF;*/

                     /*IF :SYSTEM.form_status IN ('QUERY', 'NEW')    -- nok
                     THEN
                        IF variables.post_no_commit_sw = 'Y'
                        THEN
                           msg_alert
                              ('Option is only available after changes have been saved.',
                               'I',
                               TRUE
                              );
                        END IF;
                     ELSE
                        msg_alert
                           ('Option is only available after changes have been saved.',
                            'I',
                            TRUE
                           );
                     END IF;

                     FOR a IN (SELECT 1
                                 FROM giuw_wpolicyds_dtl
                                WHERE dist_no = p_dist_no
                                  AND line_cd = p_line_cd
                                  AND dist_spct = 0)
                     LOOP
                        msg_alert ('Share percentage must be greater than 0.',
                                   'E',
                                   TRUE
                                  );
                        EXIT;
                     END LOOP;*/

                     /* Displays the warning canvas and
                     ** sets the cursor style to busy. */
                     --cursor_busy;

                     /* Displays the WORKING message in the status bar
                     ** in an animated manner. */
                     /*FOR c IN 1 .. (NVL (LENGTH (v_message), 0))    -- nok
                     LOOP
                        synchronize_message (SUBSTR (v_message,
                                                     NVL (LENGTH (v_message), 0) - c
                                                    )
                                            );

                        FOR c1 IN 1 .. 1500
                        LOOP
                           NULL;
                        END LOOP;
                     END LOOP;*/
                     
                     /*start added by Gzelle 06112014, as per aldren's modification*/
                     /*giuw_pol_dist_pkg.create_ri_records (p_dist_no,    
                                                           p_par_id,
                                                           v_line_cd,
                                                           v_nbt_subline_cd
                                                          );    
                      BEGIN
                         SELECT a.takeup_term
                           INTO v_takeup_term
                           FROM gipi_wpolbas a
                          WHERE a.par_id = p_par_id;
                      EXCEPTION
                        WHEN NO_DATA_FOUND THEN
                            v_takeup_term := NULL;
                      END;
                      
                      IF v_takeup_term = 'ST' THEN
                          giuw_pol_dist_pkg.compare_wdist_table(p_dist_no, p_par_id );
                      END IF;
                      /*end Gzelle 06112014*/                                                         


                     /* Remove existing records related to the
                     ** current DIST_NO from certain distribution
                     ** and RI master tables considering the fact
                     ** that the current changes made were not yet
                     ** posted to the master tables. */
                     /*giuw_pol_dist_pkg.delete_dist_master_tables (p_dist_no);
                     --v_message := v_message || '   >';
                     --synchronize_message (v_message);

                     /* Post records retrieved from GIUW_WPOLICYDS
                     ** and GIUW_WPOLICYDS_DTL to tables GIUW_POLICYDS
                     ** and GIUW_POLICYDS_DTL. */
                     /*post_wpolicyds_dtl (p_dist_no,
                                         v_par_type,
                                         v_nbt_eff_date,
                                         p_msg_alert
                                        );
                     --v_message := v_message || '   >';
                     --synchronize_message (v_message);

                     /* Post records retrieved from GIUW_WITEMDS
                     ** and GIUW_WITEMDS_DTL to tables GIUW_ITEMDS
                     ** and GIUW_ITEMDS_DTL. */
                     --post_witemds_dtl (p_dist_no);
                     --v_message := v_message || '   >';
                     --synchronize_message (v_message);

                     /* Post records retrieved from GIUW_WITEMPERILDS and
                     ** GIUW_WITEMPERILDS_DTL to tables GIUW_ITEMPERILDS
                     ** and GIUW_ITEMPERILDS_DTL. */
                     --post_witemperilds_dtl (p_dist_no);
                     --v_message := v_message || '   >';
                     --synchronize_message (v_message);

                     /* Post records retrieved from GIUW_WPERILDS
                     ** and GIUW_WPERILDS_DTL to tables GIUW_PERILDS
                     ** and GIUW_PERILDS_DTL. */
                     --post_wperilds_dtl (p_dist_no);

                     --v_message := v_message || '   >';
                     --synchronize_message (v_message);

                     /* Since records in the working tables have
                         ** already been copied to the master tables,
                         ** the DIST_FLAG of table GIUW_POL_DIST
                         ** must then be updated to '2'(With Facultative),
                         ** meaning that the distribution record has already
                         ** been posted but the data in the working tables
                         ** have not yet been deleted because a final posting
                         ** by the RI department is still required. */
                       /*added the if condition para inde paulit ulit ang
                     pagtawag sa check auto dist para inde magulo ang
                       update ng autodist 02232010*/
                     /*IF    v_count = 0
                        OR (v_count > 0 AND p_type_exceed = 'TREATY')
                     THEN                                    /*05202010 rose*/
                     /*   IF    (    var_v_prev_type_exceed IS NOT NULL
                               AND v_param_value_v = 'Y'
                              )
                           OR (    v_prev_type_exceed IS NOT NULL
                               AND v_param_value_v = 'Y'
                              )
                           OR (    p_type_exceed IS NOT NULL
                               AND v_param_value_v = 'Y'
                              )
                           OR (    p_param_function IS NOT NULL
                               AND v_param_value_v = 'Y'
                              )
                        THEN
                           --nok check_auto_dist1;
                           v_count := 1;
                        END IF;
                     END IF;

                     FOR v IN (SELECT share_type
                                 FROM giis_dist_share
                                WHERE line_cd = v_line_cd
                                  AND share_type = 3
                                  AND share_cd IN (
                                         SELECT share_cd
                                           FROM giuw_wpolicyds_dtl
                                          WHERE dist_no = p_dist_no
                                            AND line_cd = v_line_cd))
                     LOOP
                        IF v.share_type = '3'
                        THEN
                           v_share := 'Y';
                        END IF;
                     END LOOP;

                     IF v_share = 'Y'
                     THEN
                        UPDATE giuw_pol_dist
                           SET dist_flag = '2',
                               post_flag = 'O'
                         --auto_dist = 'N'
                        WHERE  par_id = p_par_id AND dist_no = p_dist_no;

                        p_dist_flag := '2';
                        p_mean_dist_flag := 'With Facultative';

                        /* A.R.C. 08.13.2004
                        ** to create workflow records of Facultative Placement */
                       /* FOR c1 IN (SELECT b.userid, d.event_desc
                                     FROM giis_events_column c,
                                          giis_event_mod_users b,
                                          giis_event_modules a,
                                          giis_events d
                                    WHERE 1 = 1
                                      AND c.event_cd = a.event_cd
                                      AND c.event_mod_cd = a.event_mod_cd
                                      AND b.event_mod_cd = a.event_mod_cd
                                      --AND b.userid <> USER  --A.R.C. 01.23.2006
                                      AND b.passing_userid = USER
                                      --A.R.C. 01.23.2006
                                      AND a.module_id = 'GIUWS004'
                                      AND a.event_cd = d.event_cd
                                      AND UPPER (d.event_desc) =
                                                       'FACULTATIVE PLACEMENT')
                        --LOOP
                           create_transfer_workflow_rec
                                                    (c1.event_desc,
                                                     p_current_form_name,
                                                     --nok GET_APPLICATION_PROPERTY (current_form_name),
                                                     c1.userid,
                                                     p_par_id,
                                                        c1.event_desc
                                                     || ' '
                                                     || get_policy_no
                                                                     (p_par_id),
                                                     p_msg_alert,
                                                     p_workflow_msgr,
                                                     p_user_id
                                                    );
                        END LOOP;
                     ELSE
                        UPDATE giuw_pol_dist
                           SET dist_flag = '1',
                               post_flag = 'O'
                         --auto_dist = 'N'
                        WHERE  par_id = p_par_id AND dist_no = p_dist_no;

                        p_dist_flag := '1';
                        p_mean_dist_flag := 'Undistributed';
                        --A.R.C. 02.07.2007
                            --added to delete the workflow facultative placement of GIUWS004 if not facul
                        delete_workflow_rec ('Facultative Placement',
                                             'GIUWS004',
                                             p_user_id,
                                             p_par_id
                                            );
                     END IF;
                  /*v_message := v_message || '   >';      --nok
                  synchronize_message (v_message);
                  FORMS_DDL ('COMMIT');
                  MESSAGE ('Post Distribution Complete.');*/
                  /* Closes the warning canvas and
                  ** sets the cursor style to default. */
                  --cursor_normal;
               --   END IF;
               END IF;
            --
            ELSIF v_prev_type_exceed IS NOT NULL
            THEN
               NULL;
            --nok
             /*var_v_param_value := v_param_value_v;
             var_v_block := p_block;
             var_v_type_exceed := p_type_exceed;
             var_v_share_type := v_share_type;
             var_v_eff_date := chk_type.eff_date;
             var_v_dist_spct := chk_type.dist_spct;*/
            END IF;
         --
         END LOOP;
        --nok
       /*added by rose 02232010*/
      /* IF variables.v_prev_type_exceed IS NULL
          AND v_prev_type_exceed IS NULL
          AND p_type_exceed IS NULL
          AND param_function IS NULL THEN
          check_auto_dist1;
       END IF;

       --for param = N changing of button label
       IF    (variables.v_prev_type_exceed IS NOT NULL AND v_param_value_v = 'N'
             )
          OR (v_prev_type_exceed IS NOT NULL AND v_param_value_v = 'N')
          OR (p_type_exceed IS NOT NULL AND v_param_value_v = 'N')
          OR (param_function IS NOT NULL AND v_param_value_v = 'N')
       THEN
          check_auto_dist1;
       END IF;*/
      END;
   END;
   
   /*
   **  Created by        : Jerome Orio
   **  Date Created     : 04.04.2011
   **  Reference By     : (GIUWS004- Preliminary One-Risk Distribution)
   **  Description     : Insert record for giuw_pol_dist table
   */
   PROCEDURE set_giuw_pol_dist (
      p_dist_no          giuw_pol_dist.dist_no%TYPE,
      p_par_id           giuw_pol_dist.par_id%TYPE,
      p_dist_flag        giuw_pol_dist.dist_flag%TYPE,
      p_redist_flag      giuw_pol_dist.redist_flag%TYPE,
      p_eff_date         giuw_pol_dist.eff_date%TYPE,
      p_expiry_date      giuw_pol_dist.expiry_date%TYPE,
      p_create_date      giuw_pol_dist.create_date%TYPE,
      p_post_flag        giuw_pol_dist.post_flag%TYPE,
      p_policy_id        giuw_pol_dist.policy_id%TYPE,
      p_endt_type        giuw_pol_dist.endt_type%TYPE,
      p_tsi_amt          giuw_pol_dist.tsi_amt%TYPE,
      p_prem_amt         giuw_pol_dist.prem_amt%TYPE,
      p_ann_tsi_amt      giuw_pol_dist.ann_tsi_amt%TYPE,
      p_dist_type        giuw_pol_dist.dist_type%TYPE,
      p_item_posted_sw   giuw_pol_dist.item_posted_sw%TYPE,
      p_ex_loss_sw       giuw_pol_dist.ex_loss_sw%TYPE,
      p_negate_date      giuw_pol_dist.negate_date%TYPE,
      p_acct_ent_date    giuw_pol_dist.acct_ent_date%TYPE,
      p_acct_neg_date    giuw_pol_dist.acct_neg_date%TYPE,
      p_batch_id         giuw_pol_dist.batch_id%TYPE,
      p_user_id          giuw_pol_dist.user_id%TYPE,
      p_last_upd_date    giuw_pol_dist.last_upd_date%TYPE,
      p_cpi_rec_no       giuw_pol_dist.cpi_rec_no%TYPE,
      p_cpi_branch_cd    giuw_pol_dist.cpi_branch_cd%TYPE,
      p_auto_dist        giuw_pol_dist.auto_dist%TYPE,
      p_old_dist_no      giuw_pol_dist.old_dist_no%TYPE,
      p_post_date        giuw_pol_dist.post_date%TYPE,
      p_iss_cd           giuw_pol_dist.iss_cd%TYPE,
      p_prem_seq_no      giuw_pol_dist.prem_seq_no%TYPE,
      p_item_grp         giuw_pol_dist.item_grp%TYPE,
      p_takeup_seq_no    giuw_pol_dist.takeup_seq_no%TYPE,
      p_arc_ext_data     giuw_pol_dist.arc_ext_data%TYPE
   )
   IS
   BEGIN
      MERGE INTO giuw_pol_dist
         USING DUAL
         ON (dist_no = p_dist_no)
         WHEN NOT MATCHED THEN
            INSERT (dist_no, par_id, dist_flag, redist_flag, eff_date,
                    expiry_date, create_date, post_flag, policy_id,
                    endt_type, tsi_amt, prem_amt, ann_tsi_amt, dist_type,
                    item_posted_sw, ex_loss_sw, negate_date, acct_ent_date,
                    acct_neg_date, batch_id, user_id, last_upd_date,
                    cpi_rec_no, cpi_branch_cd, auto_dist, old_dist_no,
                    post_date, iss_cd, prem_seq_no, takeup_seq_no, item_grp,
                    arc_ext_data)
            VALUES (p_dist_no, p_par_id, p_dist_flag, p_redist_flag,
                    p_eff_date, p_expiry_date, p_create_date, p_post_flag,
                    p_policy_id, p_endt_type, p_tsi_amt, p_prem_amt,
                    p_ann_tsi_amt, p_dist_type, p_item_posted_sw,
                    p_ex_loss_sw, p_negate_date, p_acct_ent_date,
                    p_acct_neg_date, p_batch_id, p_user_id, SYSDATE,
                    p_cpi_rec_no, p_cpi_branch_cd, p_auto_dist,
                    p_old_dist_no, p_post_date, p_iss_cd, p_prem_seq_no,
                    p_takeup_seq_no, p_item_grp, p_arc_ext_data)
         WHEN MATCHED THEN
            UPDATE
               SET par_id = p_par_id, dist_flag = p_dist_flag,
                   redist_flag = p_redist_flag,
                                               --eff_date        = p_eff_date,
                                               --expiry_date     = p_expiry_date,
                                               --create_date     = p_create_date,
                                               post_flag = p_post_flag,
                   policy_id = p_policy_id, endt_type = p_endt_type,
                   tsi_amt = p_tsi_amt, prem_amt = p_prem_amt,
                   ann_tsi_amt = p_ann_tsi_amt, dist_type = p_dist_type,
                   item_posted_sw = p_item_posted_sw,
                   ex_loss_sw = p_ex_loss_sw,
                                             --negate_date     = p_negate_date,
                                             --acct_ent_date   = p_acct_ent_date,
                                             --acct_neg_date   = p_acct_neg_date,
                                             batch_id = p_batch_id,
                   user_id = p_user_id, last_upd_date = SYSDATE,
                   cpi_rec_no = p_cpi_rec_no,
                   cpi_branch_cd = p_cpi_branch_cd, auto_dist = p_auto_dist,
                   old_dist_no = p_old_dist_no,
                                               --post_date       = p_post_date,
                                               iss_cd = p_iss_cd,
                   prem_seq_no = p_prem_seq_no,
                   takeup_seq_no = p_takeup_seq_no, item_grp = p_item_grp,
                   arc_ext_data = p_arc_ext_data
            ;
   END;

   PROCEDURE adjust_wpolicyds_dtl (
      p_dist_no       giuw_pol_dist.dist_no%TYPE,
      p_dist_seq_no   giuw_wpolicyds.dist_seq_no%TYPE
   )
   IS
      v_count                   NUMBER;
      v_exist                   VARCHAR2 (1)                           := 'N';
      v_dist_no                 giuw_wpolicyds.dist_no%TYPE;
      v_dist_seq_no             giuw_wpolicyds.dist_seq_no%TYPE;
      v_line_cd                 giuw_wpolicyds_dtl.line_cd%TYPE;
      v_tsi_amt                 giuw_wpolicyds.tsi_amt%TYPE;
      v_prem_amt                giuw_wpolicyds.prem_amt%TYPE;
      v_ann_tsi_amt             giuw_wpolicyds.ann_tsi_amt%TYPE;
      v_dist_tsi                giuw_wpolicyds_dtl.dist_tsi%TYPE;
      v_dist_prem               giuw_wpolicyds_dtl.dist_prem%TYPE;
      v_dist_spct               giuw_wpolicyds_dtl.dist_spct%TYPE;
      v_ann_dist_tsi            giuw_wpolicyds_dtl.ann_dist_tsi%TYPE;
      v_ann_dist_spct           giuw_wpolicyds_dtl.ann_dist_spct%TYPE;
      v_sum_dist_tsi            giuw_wpolicyds_dtl.dist_tsi%TYPE;
      v_sum_dist_prem           giuw_wpolicyds_dtl.dist_prem%TYPE;
      v_sum_dist_spct           giuw_wpolicyds_dtl.dist_spct%TYPE;
      v_sum_dist_spct1          giuw_wpolicyds_dtl.dist_spct1%TYPE;
      v_sum_ann_dist_tsi        giuw_wpolicyds_dtl.ann_dist_tsi%TYPE;
      v_sum_ann_dist_spct       giuw_wpolicyds_dtl.ann_dist_spct%TYPE;
      v_correct_dist_tsi        giuw_wpolicyds_dtl.dist_tsi%TYPE;
      v_correct_dist_prem       giuw_wpolicyds_dtl.dist_prem%TYPE;
      v_correct_dist_spct       giuw_wpolicyds_dtl.dist_spct%TYPE;
      v_correct_dist_spct1      giuw_wpolicyds_dtl.dist_spct1%TYPE;
      v_correct_ann_dist_tsi    giuw_wpolicyds_dtl.ann_dist_tsi%TYPE;
      v_correct_ann_dist_spct   giuw_wpolicyds_dtl.ann_dist_spct%TYPE;
   BEGIN
      v_dist_no := p_dist_no;
      v_dist_seq_no := p_dist_seq_no;

      /* Get the LINE_CD for the particular DIST_SEQ_NO
      ** for use in retrieving the correct data from
      ** GIUW_WPOLICYDS_DTL. */
      FOR c1 IN (SELECT line_cd
                   FROM giuw_wperilds
                  WHERE dist_seq_no = v_dist_seq_no AND dist_no = v_dist_no)
      LOOP
         v_line_cd := c1.line_cd;
         EXIT;
      END LOOP;

      /* ************************************ Start *********************************************
      ** Adjust computational floats between tables GIUW_WPOLICYDS and GIUW_WPOLICYDS_DTL.
      ***************************************************************************************** */
      BEGIN
         /* **************************** Section A **********************************
         ** Compare the amounts retrieved from the master table with the sum of its
         ** counterparts from the detail table.
         ************************************************************************* */
         FOR c10 IN (SELECT ROUND (NVL (tsi_amt, 0), 2) tsi_amt,
                            ROUND (NVL (prem_amt, 0), 2) prem_amt,
                            ROUND (NVL (ann_tsi_amt, 0), 2) ann_tsi_amt
                       FROM giuw_wpolicyds
                      WHERE dist_seq_no = v_dist_seq_no
                        AND dist_no = v_dist_no)
         LOOP
            v_exist := 'Y';
            v_tsi_amt := c10.tsi_amt;
            v_prem_amt := c10.prem_amt;
            v_ann_tsi_amt := c10.ann_tsi_amt;
            EXIT;
         END LOOP;

         IF v_exist = 'N'
         THEN
            RETURN;
         END IF;

         v_exist := 'N';

         FOR c10 IN (SELECT ROUND (SUM (NVL (dist_tsi, 0)), 2) dist_tsi,
                            ROUND (SUM (NVL (dist_prem, 0)), 2) dist_prem,
                            ROUND (SUM (NVL (dist_spct, 0)), 14) dist_spct,
                            ROUND (SUM (NVL (ann_dist_tsi, 0)),
                                   2
                                  ) ann_dist_tsi
                       FROM giuw_wpolicyds_dtl
                      WHERE dist_seq_no = v_dist_seq_no
                            AND dist_no = v_dist_no)
         LOOP
            v_exist := 'Y';
            v_dist_tsi := c10.dist_tsi;
            v_dist_prem := c10.dist_prem;
            v_dist_spct := c10.dist_spct;
            v_ann_dist_tsi := c10.ann_dist_tsi;
            EXIT;
         END LOOP;

         IF v_exist = 'N'
         THEN
            RETURN;
         END IF;

         /*************************** End of Section A ****************************/

         /* If the amounts retrieved from the master table
         ** are not equal to the amounts retrieved from the
         ** the detail table then the procedure below shall
         ** be executed. */
         IF    (100 != v_dist_spct)
            OR (v_tsi_amt != v_dist_tsi)
            OR (v_prem_amt != v_dist_prem)
            OR (v_ann_tsi_amt != v_ann_dist_tsi)
         THEN
            BEGIN
               v_exist := 'N';

               /*************************** Section B *******************************
               ** Adjust the value of the fields belonging to the NET RETENTION share
               ** (SHARE_CD = '1'). If by chance a NET RETENTION share does not exist,
               ** then the NO_DATA_FOUND exception (Section C) shall handle the next
               ** few steps.
               *********************************************************************/

               /* Get the ROWID of the NET RETENTION share
               ** in preparation for update. */
               FOR c10 IN (SELECT ROWID
                             FROM giuw_wpolicyds_dtl
                            WHERE share_cd = '1'
                              AND line_cd = v_line_cd
                              AND dist_seq_no = v_dist_seq_no
                              AND dist_no = v_dist_no)
               LOOP
                  /* Get the sum of each field for all the shares excluding the NET
                  ** RETENTION share.  The result will serve as the SUBTRAHEND in
                  ** calculating for the values to be attained by the fields belonging
                  ** to NET RETENTION. */
                  FOR c20 IN
                     (SELECT ROUND (SUM (dist_tsi), 2) dist_tsi,
                             ROUND (SUM (dist_prem), 2) dist_prem,
                             ROUND (SUM (dist_spct), 14) dist_spct,
                             ROUND (SUM (NVL (ann_dist_tsi, 0)),
                                    2
                                   ) ann_dist_tsi,
                             ROUND (SUM (NVL (ann_dist_spct, 0)),
                                    14
                                   ) ann_dist_spct
                        FROM giuw_wpolicyds_dtl
                       WHERE share_cd != '1'
                         AND line_cd = v_line_cd
                         AND dist_seq_no = v_dist_seq_no
                         AND dist_no = v_dist_no)
                  LOOP
                     v_exist := 'Y';
                     v_sum_dist_tsi := c20.dist_tsi;
                     v_sum_dist_prem := c20.dist_prem;
                     v_sum_dist_spct := c20.dist_spct;
                     v_sum_ann_dist_tsi := c20.ann_dist_tsi;
                     v_sum_ann_dist_spct := c20.ann_dist_spct;
                     EXIT;
                  END LOOP;

                  IF v_exist = 'N'
                  THEN
                     EXIT;
                  END IF;

                  /* Calculate for the values to be attained by the fields
                  ** belonging to the NET RETENTION share by subtracting
                  ** the values attained from the master table with the
                  ** values attained above. */
                  v_correct_dist_tsi := ABS (v_tsi_amt) - ABS (v_sum_dist_tsi);
                  v_correct_dist_prem :=
                                       ABS (v_prem_amt)
                                       - ABS (v_sum_dist_prem);
                  v_correct_dist_spct := 100 - v_sum_dist_spct;
                  v_correct_ann_dist_tsi :=
                                 ABS (v_ann_tsi_amt)
                                 - ABS (v_sum_ann_dist_tsi);
                  v_correct_ann_dist_spct := 100 - v_sum_ann_dist_spct;

                  IF SIGN (v_tsi_amt) = -1
                  THEN
                     v_correct_dist_tsi := v_correct_dist_tsi * -1;
                  END IF;

                  IF SIGN (v_prem_amt) = -1
                  THEN
                     v_correct_dist_prem := v_correct_dist_prem * -1;
                  END IF;

                  IF SIGN (v_ann_tsi_amt) = -1
                  THEN
                     v_correct_ann_dist_tsi := v_correct_ann_dist_tsi * -1;
                  END IF;

                  /* Update the values of the fields belonging to the NET
                  ** RETENTION share to equalize the amounts attained from
                  ** the detail table with the amounts attained from the
                  ** master table. */
                  UPDATE giuw_wpolicyds_dtl
                     SET dist_tsi = v_correct_dist_tsi,
                         dist_prem = v_correct_dist_prem,
                         dist_spct = v_correct_dist_spct,
                         ann_dist_tsi = v_correct_ann_dist_tsi,
                         ann_dist_spct = v_correct_ann_dist_spct
                   WHERE ROWID = c10.ROWID;

                  EXIT;
               END LOOP;

               IF v_exist = 'N'
               THEN
                  RAISE NO_DATA_FOUND;
               END IF;
            /*************************** End of Section B ***************************/
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  BEGIN
                     /****************************** Section C ******************************
                     ** Adjust the value of the fields belonging to the share of the FIRST
                     ** RETRIEVED ROW.
                     ***********************************************************************/

                     /* Get the ROWID of the first retrieved
                     ** row in preparation for update. */
                     FOR c10 IN (SELECT ROWID
                                   FROM giuw_wpolicyds_dtl
                                  WHERE ROWNUM = '1'
                                    AND line_cd = v_line_cd
                                    AND dist_seq_no = v_dist_seq_no
                                    AND dist_no = v_dist_no)
                     LOOP
                        /* Get the sum of each field for all the shares excluding the share
                        ** of the FIRST RETRIEVED ROW.  The result will serve as the SUBTRAHEND
                        ** in calculating for the values to be attained by the fields belonging
                        ** to the FIRST ROW. */
                        FOR c20 IN
                           (SELECT ROUND (SUM (dist_tsi), 2) dist_tsi,
                                   ROUND (SUM (dist_prem), 2) dist_prem,
                                   ROUND (SUM (dist_spct), 14) dist_spct,
                                   ROUND
                                       (SUM (NVL (ann_dist_tsi, 0)),
                                        2
                                       ) ann_dist_tsi,
                                   ROUND
                                      (SUM (NVL (ann_dist_spct, 0)),
                                       14
                                      ) ann_dist_spct
                              FROM giuw_wpolicyds_dtl
                             WHERE ROWID != c10.ROWID
                               AND line_cd = v_line_cd
                               AND dist_seq_no = v_dist_seq_no
                               AND dist_no = v_dist_no)
                        LOOP
                           v_sum_dist_tsi := c20.dist_tsi;
                           v_sum_dist_prem := c20.dist_prem;
                           v_sum_dist_spct := c20.dist_spct;
                           v_sum_ann_dist_tsi := c20.ann_dist_tsi;
                           v_sum_ann_dist_spct := c20.ann_dist_spct;
                           EXIT;
                        END LOOP;

                        /* Calculate for the values to be attained by the fields
                        ** belonging to the share of the FIRST ROW by subtracting
                        ** the values attained from the master table with the
                        ** values attained above. */
                        v_correct_dist_tsi :=
                                         ABS (v_tsi_amt)
                                         - ABS (v_sum_dist_tsi);
                        v_correct_dist_prem :=
                                       ABS (v_prem_amt)
                                       - ABS (v_sum_dist_prem);
                        v_correct_dist_spct := 100 - v_sum_dist_spct;
                        v_correct_ann_dist_tsi :=
                                 ABS (v_ann_tsi_amt)
                                 - ABS (v_sum_ann_dist_tsi);
                        v_correct_ann_dist_spct := 100 - v_sum_ann_dist_spct;

                        IF SIGN (v_tsi_amt) = -1
                        THEN
                           v_correct_dist_tsi := v_correct_dist_tsi * -1;
                        END IF;

                        IF SIGN (v_prem_amt) = -1
                        THEN
                           v_correct_dist_prem := v_correct_dist_prem * -1;
                        END IF;

                        IF SIGN (v_ann_tsi_amt) = -1
                        THEN
                           v_correct_ann_dist_tsi :=
                                                   v_correct_ann_dist_tsi
                                                   * -1;
                        END IF;

                        /* Update the values of the fields belonging to the share
                        ** of the FIRST ROW to equalize the amounts attained from
                        ** the detail table with the amounts attained from the
                        ** master table. */
                        UPDATE giuw_wpolicyds_dtl
                           SET dist_tsi = v_correct_dist_tsi,
                               dist_prem = v_correct_dist_prem,
                               dist_spct = v_correct_dist_spct,
                               ann_dist_tsi = v_correct_ann_dist_tsi,
                               ann_dist_spct = v_correct_ann_dist_spct
                         WHERE ROWID = c10.ROWID;

                        EXIT;
                     END LOOP;
                  END;
            /**************************** End of Section C *************************/
            END;
         END IF;
      END;
/************************************** End ******************************************/
   END;

   PROCEDURE populate_witem_peril_dtl (p_dist_no giuw_pol_dist.dist_no%TYPE)
   IS
      v_dist_no         giuw_pol_dist.dist_no%TYPE;
      v_dist_tsi        giuw_witemds_dtl.dist_tsi%TYPE;
      v_dist_prem       giuw_witemds_dtl.dist_prem%TYPE;
      v_ann_dist_tsi    giuw_witemds_dtl.ann_dist_tsi%TYPE;
      v_dist_tsi1       giuw_witemperilds_dtl.dist_tsi%TYPE;
      v_dist_prem1      giuw_witemperilds_dtl.dist_prem%TYPE;
      v_ann_dist_tsi1   giuw_witemperilds_dtl.ann_dist_tsi%TYPE;
      v_dist_tsi2       giuw_wperilds_dtl.dist_tsi%TYPE;
      v_dist_prem2      giuw_wperilds_dtl.dist_prem%TYPE;
      v_ann_dist_tsi2   giuw_wperilds_dtl.ann_dist_tsi%TYPE;
   BEGIN
      v_dist_no := p_dist_no;

      /* Delete tables in preparation
      ** for data insertion. */
      DELETE      giuw_wperilds_dtl
            WHERE dist_no = v_dist_no;

      DELETE      giuw_witemperilds_dtl
            WHERE dist_no = v_dist_no;

      DELETE      giuw_witemds_dtl
            WHERE dist_no = v_dist_no;

      /* Get the distribution share percentage for each record
      ** in table GIUW_WPOLICYDS_DTL. */
      FOR c1 IN (SELECT dist_seq_no, line_cd, share_cd, dist_spct,
                        ann_dist_spct, dist_grp
                   FROM giuw_wpolicyds_dtl
                  WHERE dist_no = v_dist_no)
      LOOP
         /* Get the amounts from table GIUW_WITEMDS and multiply
         ** it to the share percentage driven from table
         ** GIUW_WPOLICYDS_DTL to arrive at the correct breakdown
         ** of the amounts for table GIUW_WITEMDS_DTL. */
         FOR c2 IN (SELECT tsi_amt, prem_amt, ann_tsi_amt, item_no
                      FROM giuw_witemds
                     WHERE dist_seq_no = c1.dist_seq_no
                       AND dist_no = v_dist_no)
         LOOP
            v_dist_tsi := ROUND (c1.dist_spct / 100 * c2.tsi_amt, 2);
            v_dist_prem := ROUND (c1.dist_spct / 100 * c2.prem_amt, 2);
            v_ann_dist_tsi :=
                           ROUND (c1.ann_dist_spct / 100 * c2.ann_tsi_amt, 2);

            --message('create_witem');pause;
            INSERT INTO giuw_witemds_dtl
                        (dist_no, dist_seq_no, item_no, line_cd,
                         share_cd, dist_spct, dist_tsi, dist_prem,
                         ann_dist_spct, ann_dist_tsi, dist_grp
                        )
                 VALUES (v_dist_no, c1.dist_seq_no, c2.item_no, c1.line_cd,
                         c1.share_cd, c1.dist_spct, v_dist_tsi, v_dist_prem,
                         c1.ann_dist_spct, v_ann_dist_tsi, c1.dist_grp
                        );
         END LOOP;

         /* Get the amounts from table GIUW_WITEMPERILDS and multiply
         ** it to the share percentage driven from table
         ** GIUW_WPOLICYDS_DTL to arrive at the correct breakdown
         ** of the amounts for table GIUW_WITEMPERILDS_DTL. */
         FOR c3 IN (SELECT tsi_amt, prem_amt, ann_tsi_amt, item_no, line_cd,
                           peril_cd
                      FROM giuw_witemperilds
                     WHERE line_cd = c1.line_cd
                       AND dist_seq_no = c1.dist_seq_no
                       AND dist_no = v_dist_no)
         LOOP
            v_dist_tsi1 := ROUND (c1.dist_spct / 100 * c3.tsi_amt, 2);
            v_dist_prem1 := ROUND (c1.dist_spct / 100 * c3.prem_amt, 2);
            v_ann_dist_tsi1 :=
                           ROUND (c1.ann_dist_spct / 100 * c3.ann_tsi_amt, 2);

            INSERT INTO giuw_witemperilds_dtl
                        (dist_no, dist_seq_no, item_no, line_cd,
                         share_cd, dist_spct, dist_tsi,
                         dist_prem, ann_dist_spct, ann_dist_tsi,
                         dist_grp, peril_cd
                        )
                 VALUES (v_dist_no, c1.dist_seq_no, c3.item_no, c3.line_cd,
                         c1.share_cd, c1.dist_spct, v_dist_tsi1,
                         v_dist_prem1, c1.ann_dist_spct, v_ann_dist_tsi1,
                         c1.dist_grp, c3.peril_cd
                        );
         END LOOP;

         /* Get the amounts from table GIUW_WPERILDS and multiply
         ** it to the share percentage driven from table
         ** GIUW_WPOLICYDS_DTL to arrive at the correct breakdown
         ** of the amounts for table GIUW_WPERILDS_DTL. */
         FOR c4 IN (SELECT tsi_amt, prem_amt, ann_tsi_amt, line_cd, peril_cd
                      FROM giuw_wperilds
                     WHERE line_cd = c1.line_cd
                       AND dist_seq_no = c1.dist_seq_no
                       AND dist_no = v_dist_no)
         LOOP
            v_dist_tsi2 := ROUND (c1.dist_spct / 100 * c4.tsi_amt, 2);
            v_dist_prem2 := ROUND (c1.dist_spct / 100 * c4.prem_amt, 2);
            v_ann_dist_tsi2 :=
                           ROUND (c1.ann_dist_spct / 100 * c4.ann_tsi_amt, 2);

            INSERT INTO giuw_wperilds_dtl
                        (dist_no, dist_seq_no, peril_cd, line_cd,
                         share_cd, dist_spct, dist_tsi,
                         dist_prem, ann_dist_spct, ann_dist_tsi,
                         dist_grp
                        )
                 VALUES (v_dist_no, c1.dist_seq_no, c4.peril_cd, c1.line_cd,
                         c1.share_cd, c1.dist_spct, v_dist_tsi2,
                         v_dist_prem2, c1.ann_dist_spct, v_ann_dist_tsi2,
                         c1.dist_grp
                        );
         END LOOP;
      END LOOP;
   END;

   PROCEDURE populate_witem_pl_dtl_giuws005 (
      p_dist_no   giuw_pol_dist.dist_no%TYPE
   )
   IS
      v_dist_no         giuw_pol_dist.dist_no%TYPE;
      v_dist_tsi        giuw_witemds_dtl.dist_tsi%TYPE;
      v_dist_prem       giuw_witemds_dtl.dist_prem%TYPE;
      v_ann_dist_tsi    giuw_witemds_dtl.ann_dist_tsi%TYPE;
      v_dist_tsi1       giuw_witemperilds_dtl.dist_tsi%TYPE;
      v_dist_prem1      giuw_witemperilds_dtl.dist_prem%TYPE;
      v_ann_dist_tsi1   giuw_witemperilds_dtl.ann_dist_tsi%TYPE;
      v_dist_tsi2       giuw_wperilds_dtl.dist_tsi%TYPE;
      v_dist_prem2      giuw_wperilds_dtl.dist_prem%TYPE;
      v_ann_dist_tsi2   giuw_wperilds_dtl.ann_dist_tsi%TYPE;
   BEGIN
      v_dist_no := p_dist_no;

      /* Delete tables in preparation
      ** for data insertion. */
      DELETE      giuw_wperilds_dtl
            WHERE dist_no = v_dist_no;

      DELETE      giuw_witemperilds_dtl
            WHERE dist_no = v_dist_no;

      DELETE      giuw_witemds_dtl
            WHERE dist_no = v_dist_no;

      /* Get the distribution share percentage for each record
      ** in table GIUW_WPOLICYDS_DTL. */
      FOR c1 IN (SELECT dist_seq_no, line_cd, share_cd, dist_spct,
                        ann_dist_spct, dist_grp,
                        dist_spct1                --Added by tonio 06/08/2011
                   FROM giuw_wpolicyds_dtl
                  WHERE dist_no = v_dist_no)
      LOOP
         /* Get the amounts from table GIUW_WITEMDS and multiply
         ** it to the share percentage driven from table
         ** GIUW_WPOLICYDS_DTL to arrive at the correct breakdown
         ** of the amounts for table GIUW_WITEMDS_DTL. */
         FOR c2 IN (SELECT tsi_amt, prem_amt, ann_tsi_amt, item_no
                      FROM giuw_witemds
                     WHERE dist_seq_no = c1.dist_seq_no
                       AND dist_no = v_dist_no)
         LOOP
            v_dist_tsi := ROUND (c1.dist_spct / 100 * c2.tsi_amt, 2);
            v_dist_prem := ROUND (c1.dist_spct1 / 100 * c2.prem_amt, 2);
            --Modified by tonio 06/08/2011
            v_ann_dist_tsi :=
                           ROUND (c1.ann_dist_spct / 100 * c2.ann_tsi_amt, 2);

            INSERT INTO giuw_witemds_dtl
                        (dist_no, dist_seq_no, item_no, line_cd,
                         share_cd, dist_spct, dist_spct1,
                         dist_tsi, dist_prem, ann_dist_spct,
                         ann_dist_tsi, dist_grp
                        )
                 VALUES (v_dist_no, c1.dist_seq_no, c2.item_no, c1.line_cd,
                         c1.share_cd, c1.dist_spct, c1.dist_spct1,
                         v_dist_tsi, v_dist_prem, c1.ann_dist_spct,
                         v_ann_dist_tsi, c1.dist_grp
                        );
         END LOOP;

         /* Get the amounts from table GIUW_WITEMPERILDS and multiply
         ** it to the share percentage driven from table
         ** GIUW_WPOLICYDS_DTL to arrive at the correct breakdown
         ** of the amounts for table GIUW_WITEMPERILDS_DTL. */
         FOR c3 IN (SELECT tsi_amt, prem_amt, ann_tsi_amt, item_no, line_cd,
                           peril_cd
                      FROM giuw_witemperilds
                     WHERE line_cd = c1.line_cd
                       AND dist_seq_no = c1.dist_seq_no
                       AND dist_no = v_dist_no)
         LOOP
            v_dist_tsi1 := ROUND (c1.dist_spct / 100 * c3.tsi_amt, 2);
            v_dist_prem1 := ROUND (c1.dist_spct1 / 100 * c3.prem_amt, 2);
            --Modified by tonio 06/08/2011
            v_ann_dist_tsi1 :=
                           ROUND (c1.ann_dist_spct / 100 * c3.ann_tsi_amt, 2);

            INSERT INTO giuw_witemperilds_dtl
                        (dist_no, dist_seq_no, item_no, line_cd,
                         share_cd, dist_spct, dist_spct1,
                         dist_tsi, dist_prem, ann_dist_spct,
                         ann_dist_tsi, dist_grp, peril_cd
                        )
                 VALUES (v_dist_no, c1.dist_seq_no, c3.item_no, c3.line_cd,
                         c1.share_cd, c1.dist_spct, c1.dist_spct1,
                         v_dist_tsi1, v_dist_prem1, c1.ann_dist_spct,
                         v_ann_dist_tsi1, c1.dist_grp, c3.peril_cd
                        );
         END LOOP;

         /* Get the amounts from table GIUW_WPERILDS and multiply
         ** it to the share percentage driven from table
         ** GIUW_WPOLICYDS_DTL to arrive at the correct breakdown
         ** of the amounts for table GIUW_WPERILDS_DTL. */
         FOR c4 IN (SELECT tsi_amt, prem_amt, ann_tsi_amt, line_cd, peril_cd
                      FROM giuw_wperilds
                     WHERE line_cd = c1.line_cd
                       AND dist_seq_no = c1.dist_seq_no
                       AND dist_no = v_dist_no)
         LOOP
            v_dist_tsi2 := ROUND (c1.dist_spct / 100 * c4.tsi_amt, 2);
            v_dist_prem2 := ROUND (NVL(c1.dist_spct1,c1.dist_spct) / 100 * c4.prem_amt, 2); --added by steven 02.27.2013;NVL
            --Modified by tonio 06/08/2011
            v_ann_dist_tsi2 :=
                           ROUND (c1.ann_dist_spct / 100 * c4.ann_tsi_amt, 2);

            INSERT INTO giuw_wperilds_dtl
                        (dist_no, dist_seq_no, peril_cd, line_cd,
                         share_cd, dist_spct, dist_spct1,
                         dist_tsi, dist_prem, ann_dist_spct,
                         ann_dist_tsi, dist_grp
                        )
                 VALUES (v_dist_no, c1.dist_seq_no, c4.peril_cd, c1.line_cd,
                         c1.share_cd, c1.dist_spct, c1.dist_spct1,
                         v_dist_tsi2, v_dist_prem2, c1.ann_dist_spct,
                         v_ann_dist_tsi2, c1.dist_grp
                        );
         END LOOP;
      END LOOP;
   END;

   PROCEDURE create_ri_records (
      p_dist_no      IN   giuw_pol_dist.dist_no%TYPE,
      p_par_id       IN   gipi_parlist.par_id%TYPE,
      p_line_cd      IN   gipi_wpolbas.line_cd%TYPE,
      p_subline_cd   IN   gipi_wpolbas.subline_cd%TYPE
   )
   IS
      v_frps_exist            BOOLEAN;
      v_line_cd               giuw_wperilds.line_cd%TYPE;
      v_new_dist_tsi          giuw_wpolicyds_dtl.dist_tsi%TYPE;
      v_new_dist_prem         giuw_wpolicyds_dtl.dist_prem%TYPE;
      v_new_dist_spct         giuw_wpolicyds_dtl.dist_spct%TYPE;
      v_exist                 VARCHAR2 (1)                        := 'N';
      v_disallow_posting_sw   VARCHAR2 (1)                        := 'N';
   BEGIN
/* ************************************************************************************* */
/* Checks for the existence of a facultative share code in each of the DIST_SEQ_NO's of
** table GIUW_WPOLICYDS_DTL.  If the said share code exists for a particular DIST_SEQ_NO,
** then procedure will check for an existing record in RI table GIRI_WDISTFRPS and update
** such record in accordance with the values taken in by table GIUW_WPOLICYDS_DTL.  Should
** table GIRI_WDISTFRPS contain no entries with regards to the current DIST_SEQ_NO with the
** facultative share, then a record shall be created against the said table.
** On the other hand, if a facultative share does not exist for a particular DIST_SEQ_NO,
** then procedure will delete any related records in RI tables GIRI_WBINDER_PERIL,
** GIRI_WBINDER, GIRI_WFRPERIL, GIRI_WFRPS_RI, and GIRI_WDISTFRPS.
** NOTE:  A VALID facultative share must not have a zero DIST_TSI and a zero DIST_PREM.
** Modified by:  Crystal 12/28/1998  */
/* ************************************************************************************ */

      /* Disable the POST DISTRIBUTION button first.
      ** If a facultative share was found to be existing then
      ** that's the time to reenable it. */
      --SET_ITEM_PROPERTY('c1306.but_post_dist', ENABLED, PROPERTY_FALSE);
      FOR c1 IN (SELECT c1306.dist_seq_no, c1306.tsi_amt, c1306.prem_amt,
                        b450.currency_cd, b450.currency_rt, c080.user_id
                   FROM giuw_wpolicyds c1306,
                        giuw_pol_dist c080,
                        gipi_winvoice b450
                  WHERE b450.item_grp = c1306.item_grp
                    AND b450.par_id = c080.par_id
                    AND c080.dist_no = c1306.dist_no
                    AND c1306.dist_no = p_dist_no)
      LOOP

         BEGIN
            /* Get the LINE_CD for the particular DIST_SEQ_NO
            ** for use in retrieving the correct data from
            ** GIUW_WPOLICYDS_DTL. */
            FOR c100 IN (SELECT line_cd
                           FROM giuw_wperilds
                          WHERE dist_seq_no = c1.dist_seq_no
                            AND dist_no = p_dist_no)
            LOOP
               v_line_cd := c100.line_cd;
               EXIT;
            END LOOP;

            v_exist := 'N';

            FOR c200 IN (SELECT dist_prem, dist_spct, dist_tsi
                           FROM giuw_wpolicyds_dtl
                          WHERE share_cd = '999'
                            AND line_cd = v_line_cd
                            AND dist_seq_no = c1.dist_seq_no
                            AND dist_no = p_dist_no)
            LOOP
               v_exist := 'Y';
               v_new_dist_prem := c200.dist_prem;
               v_new_dist_spct := c200.dist_spct;
               v_new_dist_tsi := c200.dist_tsi;
               EXIT;
            END LOOP;

            IF v_exist = 'N'
            THEN
               RAISE NO_DATA_FOUND;
            END IF;

            --A.R.C. 03.21.2007
            -- change checking to consider dist_spct instead of tsi and prem
            /*IF v_new_dist_tsi  = 0 AND
               v_new_dist_prem = 0 THEN*/
            IF v_new_dist_spct = 0
            THEN
               /* Disable the POST DISTRIBUTION button first.
               ** If a facultative share was found to be existing then
               ** that's the time to reenable it. */
               --SET_ITEM_PROPERTY('c1306.but_post_dist', ENABLED, PROPERTY_FALSE);
               v_disallow_posting_sw := 'Y';

               /* Sets the distribution flag of table GIUW_WPOLICYDS to
               ** 1, signifying that the current DIST_SEQ_NO is not yet
               ** properly distributed. */
               UPDATE giuw_wpolicyds
                  SET dist_flag = '1'
                WHERE dist_seq_no = c1.dist_seq_no AND dist_no = p_dist_no;
            END IF;

            --A.R.C. 03.21.2007
            -- change checking to consider dist_spct instead of tsi and prem
            /*IF v_new_dist_tsi  != 0 OR
               v_new_dist_prem != 0 THEN*/
            IF v_new_dist_spct != 0
            THEN
               IF v_disallow_posting_sw = 'N'
               THEN
                  /* Enable the POST DISTRIBUTION button because a facultative
                  ** share was found to be existing in table GIUW_WPOLICYDS_DTL. */
                  --IF GET_ITEM_PROPERTY('c1306.but_post_dist', ENABLED) = 'FALSE' THEN --nok
                  --   SET_ITEM_PROPERTY('c1306.but_post_dist', ENABLED, PROPERTY_TRUE);
                  --END IF;
                  NULL;
               END IF;

               /* Checks for an existing record corresponding to
               ** the given DIST_SEQ_NO in table GIRI_WDISTFRPS. */
               v_frps_exist :=
                           check_for_existing_frps (p_dist_no, c1.dist_seq_no);

               IF NOT v_frps_exist
               THEN
                  /* Creates a new record in table GIRI_WDISTFRPS in
                  ** accordance with the data taken in by table
                  ** GIUW_WPOLICYDS_DTL. */
                  create_ri_new_wdistfrps (p_dist_no,
                                           c1.dist_seq_no,
                                           c1.tsi_amt,
                                           c1.prem_amt,
                                           v_new_dist_tsi,
                                           v_new_dist_prem,
                                           v_new_dist_spct,
                                           c1.currency_cd,
                                           c1.currency_rt,
                                           c1.user_id,
                                           p_par_id,
                                           p_line_cd,
                                           p_subline_cd
                                          );
               ELSE
                  /* Updates the existing record of table
                  ** GIRI_WDISTFRPS in accordance with the
                  ** data taken in by table GIUW_WPOLICYDS_DTL. */
                  update_ri_wdistfrps (p_dist_no,
                                       c1.dist_seq_no,
                                       c1.tsi_amt,
                                       c1.prem_amt,
                                       v_new_dist_tsi,
                                       v_new_dist_prem,
                                       v_new_dist_spct,
                                       c1.currency_cd,
                                       c1.currency_rt,
                                       c1.user_id
                                      );
               END IF;
            ELSE
               /* Delete related records in RI tables GIRI_WBINDER_PERIL,
               ** GIRI_WBINDER, GIRI_WFRPERIL, GIRI_WFRPS_RI, and
               ** GIRI_WDISTFRPS. */
               delete_ri_tables (p_dist_no, c1.dist_seq_no);
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               /* Delete related records in RI tables GIRI_WBINDER_PERIL,
               ** GIRI_WBINDER, GIRI_WFRPERIL, GIRI_WFRPS_RI, and
               ** GIRI_WDISTFRPS. */
               delete_ri_tables (p_dist_no, c1.dist_seq_no);
         END;
      END LOOP;
   END;

   /*
   **  Created by        : Jerome Orio
   **  Date Created     : 06.09.2011
   **  Reference By     : (GIUWS006- Preliminary  Peril Distribution by TSI/Prem)
   */
   PROCEDURE create_ri_records2 (
      p_dist_no      IN   giuw_pol_dist.dist_no%TYPE,
      p_par_id       IN   gipi_parlist.par_id%TYPE,
      p_line_cd      IN   gipi_wpolbas.line_cd%TYPE,
      p_subline_cd   IN   gipi_wpolbas.subline_cd%TYPE
   )
   IS
      v_frps_exist            BOOLEAN;
      v_line_cd               giuw_wperilds.line_cd%TYPE;
      v_new_dist_tsi          giuw_wpolicyds_dtl.dist_tsi%TYPE;
      v_new_dist_prem         giuw_wpolicyds_dtl.dist_prem%TYPE;
      v_new_dist_spct         giuw_wpolicyds_dtl.dist_spct%TYPE;
      v_new_dist_spct1        giuw_wpolicyds_dtl.dist_spct1%TYPE;
      v_exist                 VARCHAR2 (1)                         := 'N';
      v_disallow_posting_sw   VARCHAR2 (1)                         := 'N';
	  --added by robert 10.13.15 GENQA 5053
	  v_continue_posting      VARCHAR2 (1)                         := 'N';
      v_allied_tsi            giuw_wperilds_dtl.dist_tsi%TYPE;     
      v_allied_facul_tsi      giuw_wperilds_dtl.dist_tsi%TYPE;      
      v_new_tsi_amt           giuw_wpolicyds_dtl.dist_tsi%TYPE;    
	  
   BEGIN
/* ************************************************************************************* */
/* Checks for the existence of a facultative share code in each of the DIST_SEQ_NO's of
** table GIUW_WPOLICYDS_DTL.  If the said share code exists for a particular DIST_SEQ_NO,
** then procedure will check for an existing record in RI table GIRI_WDISTFRPS and update
** such record in accordance with the values taken in by table GIUW_WPOLICYDS_DTL.  Should
** table GIRI_WDISTFRPS contain no entries with regards to the current DIST_SEQ_NO with the
** facultative share, then a record shall be created against the said table.
** On the other hand, if a facultative share does not exist for a particular DIST_SEQ_NO,
** then procedure will delete any related records in RI tables GIRI_WBINDER_PERIL,
** GIRI_WBINDER, GIRI_WFRPERIL, GIRI_WFRPS_RI, and GIRI_WDISTFRPS.
** NOTE:  A VALID facultative share must not have a zero DIST_TSI and a zero DIST_PREM.
** Modified by:  Crystal 12/28/1998  */
/* ************************************************************************************ */

      /* Disable the POST DISTRIBUTION button first.
      ** If a facultative share was found to be existing then
      ** that's the time to reenable it. */
      --SET_ITEM_PROPERTY('c1104.but_post_dist', ENABLED, PROPERTY_FALSE);
      FOR c1 IN (SELECT c1306.dist_seq_no, c1306.tsi_amt, c1306.prem_amt,
                        b450.currency_cd, b450.currency_rt, c080.user_id
                   FROM giuw_wpolicyds c1306,
                        giuw_pol_dist c080,
                        gipi_winvoice b450
                  WHERE b450.item_grp = c1306.item_grp
                    AND b450.par_id = c080.par_id
                    AND c080.dist_no = c1306.dist_no
                    AND c1306.dist_no = p_dist_no)
      LOOP
         BEGIN
            /* Get the LINE_CD for the particular DIST_SEQ_NO
            ** for use in retrieving the correct data from
            ** GIUW_WPOLICYDS_DTL. */
            FOR c100 IN (SELECT line_cd
                           FROM giuw_wperilds
                          WHERE dist_seq_no = c1.dist_seq_no
                            AND dist_no = p_dist_no)
            LOOP
               v_line_cd := c100.line_cd;
               EXIT;
            END LOOP;

            v_exist := 'N';

            FOR c200 IN (SELECT dist_prem, dist_spct, dist_tsi, dist_spct1
                           FROM giuw_wpolicyds_dtl
                          WHERE share_cd = '999'
                            AND line_cd = v_line_cd
                            AND dist_seq_no = c1.dist_seq_no
                            AND dist_no = p_dist_no)
            LOOP
               v_exist := 'Y';
               v_new_dist_prem := c200.dist_prem;
               v_new_dist_spct := c200.dist_spct;
               v_new_dist_spct1 := c200.dist_spct1;
               v_new_dist_tsi := c200.dist_tsi;
               EXIT;
            END LOOP;

            IF v_exist = 'N'
            THEN
               RAISE NO_DATA_FOUND;
            END IF;

            --A.R.C. 03.21.2007
            -- change checking to consider dist_spct instead of tsi and prem
            /*IF v_new_dist_tsi  = 0 AND
               v_new_dist_prem = 0 THEN*/
            IF v_new_dist_spct = 0
            THEN
			   --added by robert 10.13.15 GENQA 5053
			   FOR allied IN (SELECT SUM (dist_tsi) tsi
                                FROM giuw_wperilds_dtl a, giis_peril b
                               WHERE a.share_cd = '999'
                                 AND a.line_cd = v_line_cd
                                 AND a.dist_seq_no = c1.dist_seq_no
                                 AND a.dist_no = p_dist_no
                                 AND a.line_cd = b.line_cd
                                 AND a.peril_cd = b.peril_cd
                                 AND b.peril_type = 'A')
               LOOP
                  v_continue_posting := 'Y';
                  v_allied_facul_tsi := allied.tsi;
               END LOOP;
			   
               /* Disable the POST DISTRIBUTION button first.
               ** If a facultative share was found to be existing then
               ** that's the time to reenable it. */
               --SET_ITEM_PROPERTY('c1104.but_post_dist', ENABLED, PROPERTY_FALSE);
               IF v_continue_posting = 'N'
               THEN
                  v_disallow_posting_sw := 'Y';

                  /* Sets the distribution flag of table GIUW_WPOLICYDS to
                  ** 1, signifying that the current DIST_SEQ_NO is not yet
                  ** properly distributed. */
                  UPDATE giuw_wpolicyds
                     SET dist_flag = '1'
                   WHERE dist_seq_no = c1.dist_seq_no AND dist_no = p_dist_no;
               ELSE
                  SELECT SUM (dist_tsi)
                    INTO v_allied_tsi
                    FROM giuw_wperilds_dtl
                   WHERE line_cd = v_line_cd
                     AND dist_seq_no = c1.dist_seq_no
                     AND dist_no = p_dist_no
                     AND peril_cd IN (
                            SELECT a.peril_cd
                              FROM giuw_wperilds_dtl a, giis_peril b
                             WHERE a.share_cd = '999'
                               AND a.line_cd = v_line_cd
                               AND a.dist_seq_no = c1.dist_seq_no
                               AND a.dist_no = p_dist_no
                               AND a.line_cd = b.line_cd
                               AND a.peril_cd = b.peril_cd
                               AND b.peril_type = 'A');

                  SELECT (v_allied_facul_tsi / v_allied_tsi) * 100
                    INTO v_new_dist_spct
                    FROM DUAL;

                  v_new_tsi_amt := v_new_dist_tsi;
               END IF;
			   -- end robert 10.13.15 GENQA 5053
            END IF;

            --A.R.C. 03.21.2007
            -- change checking to consider dist_spct instead of tsi and prem
            /*IF v_new_dist_tsi  != 0 OR
               v_new_dist_prem != 0 THEN*/
            IF v_new_dist_spct != 0
            THEN
               IF v_disallow_posting_sw = 'N'
               THEN
                  NULL;
               /* Enable the POST DISTRIBUTION button because a facultative
               ** share was found to be existing in table GIUW_WPOLICYDS_DTL. */
               --IF GET_ITEM_PROPERTY('c1104.but_post_dist', ENABLED) = 'FALSE' THEN
               --   SET_ITEM_PROPERTY('c1104.but_post_dist', ENABLED, PROPERTY_TRUE);
               --END IF;
               END IF;

               /* Checks for an existing record corresponding to
               ** the given DIST_SEQ_NO in table GIRI_WDISTFRPS. */
               v_frps_exist :=
                           check_for_existing_frps (p_dist_no, c1.dist_seq_no);

               IF NOT v_frps_exist
               THEN
                  /* Creates a new record in table GIRI_WDISTFRPS in
                  ** accordance with the data taken in by table
                  ** GIUW_WPOLICYDS_DTL. */
                  giri_wdistfrps_pkg.create_ri_new_wdistfrps
                                                            (p_dist_no,
                                                             c1.dist_seq_no,
                                                             NVL (v_new_tsi_amt,c1.tsi_amt), --modified by robert 10.13.15 GENQA 5053
                                                             c1.prem_amt,
                                                             v_new_dist_tsi,
                                                             v_new_dist_prem,
                                                             v_new_dist_spct,
                                                             c1.currency_cd,
                                                             c1.currency_rt,
                                                             c1.user_id,
                                                             p_par_id,
                                                             p_line_cd,
                                                             p_subline_cd,
                                                             v_new_dist_spct1
                                                            );
               ELSE
                  /* Updates the existing record of table
                  ** GIRI_WDISTFRPS in accordance with the
                  ** data taken in by table GIUW_WPOLICYDS_DTL. */
                  giri_wdistfrps_pkg.update_ri_wdistfrps (p_dist_no,
                                                          c1.dist_seq_no,
                                                          NVL (v_new_tsi_amt,c1.tsi_amt), --modified by robert 10.13.15 GENQA 5053
                                                          c1.prem_amt,
                                                          v_new_dist_tsi,
                                                          v_new_dist_prem,
                                                          v_new_dist_spct,
                                                          c1.currency_cd,
                                                          c1.currency_rt,
                                                          c1.user_id,
                                                          v_new_dist_spct1
                                                         );
               END IF;
            ELSE
               /* Delete related records in RI tables GIRI_WBINDER_PERIL,
               ** GIRI_WBINDER, GIRI_WFRPERIL, GIRI_WFRPS_RI, and
               ** GIRI_WDISTFRPS. */
               delete_ri_tables (p_dist_no, c1.dist_seq_no);
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               /* Delete related records in RI tables GIRI_WBINDER_PERIL,
               ** GIRI_WBINDER, GIRI_WFRPERIL, GIRI_WFRPS_RI, and
               ** GIRI_WDISTFRPS. */
               delete_ri_tables (p_dist_no, c1.dist_seq_no);
         END;
      END LOOP;
   END;

   /*
   **  Created by        : Jerome Orio
   **  Date Created     : 04.04.2011
   **  Reference By     : (GIUWS004- Preliminary One-Risk Distribution)
   **  Description     : post-form-commit trigger
   */
   PROCEDURE post_form_commit_giuws004 (
      p_par_id        giuw_pol_dist.par_id%TYPE,
      p_dist_no       giuw_pol_dist.dist_no%TYPE,
      p_dist_seq_no   giuw_wpolicyds.dist_seq_no%TYPE,
      p_pol_flag      gipi_wpolbas.pol_flag%TYPE,
      p_par_type      gipi_parlist.par_type%TYPE,
      p_line_cd       gipi_wpolbas.line_cd%TYPE,
      p_subline_cd    gipi_wpolbas.subline_cd%TYPE
   )
   IS
      v_changes   VARCHAR2 (1) := 'Y';                 --dahil updated na sya
   BEGIN
      /*  GIUW_POL_DIST_PKG.ADJUST_WPOLICYDS_DTL(p_dist_no, p_dist_seq_no);

        --:c080.dist_flag      := '1';
        --:c080.mean_dist_flag := 'Undistributed';
        UPDATE giuw_pol_dist
           SET dist_flag = '1',
               post_flag = 'O'
         WHERE par_id    = p_par_id
           AND dist_no   = p_dist_no;

      IF p_pol_flag != 2 AND p_par_type = 'P' OR NVL(v_changes,'N') = 'Y' THEN
        GIUW_POL_DIST_PKG.DELETE_DIST_MASTER_TABLES(p_dist_no);
        GIUW_POL_DIST_PKG.POPULATE_WITEM_PERIL_DTL(p_dist_no);
        GIUW_POL_DIST_PKG.ADJUST_NET_RET_IMPERFECTION(p_dist_no);
      END IF;

      UPDATE giuw_wpolicyds
         SET dist_flag =  '2'
       WHERE dist_no   = p_dist_no;

       CREATE_RI_RECORDS(p_dist_no, p_par_id, p_line_cd, p_subline_cd);*/

      -- nok 04.14.2011 - ewan ko parang mali ito eh comment code above muna temp
      --giuw_pol_dist_pkg.adjust_wpolicyds_dtl (p_dist_no, p_dist_seq_no);      commented out by Gzelle 06092014, referenced by aldren's modification GIUWS004
     
     --added by christian - based on FMB giuws004_03292012
      UPDATE giuw_pol_dist
         SET dist_flag = '1',
             post_flag = 'O'
       WHERE par_id    = p_par_id
         AND dist_no   = p_dist_no;

      IF p_pol_flag != 2 AND p_par_type = 'P' OR NVL (v_changes, 'N') = 'Y'
      THEN
         GIUW_POL_DIST_PKG.DELETE_DIST_MASTER_TABLES(p_dist_no); --commented out by christian
         giuw_pol_dist_pkg.populate_witem_peril_dtl (p_dist_no);
         --giuw_pol_dist_pkg.adjust_net_ret_imperfection (p_dist_no);   commented out by Gzelle 06092014, referenced by aldren's modification GIUWS004
         giuw_pol_dist_pkg.ADJUST_ALL_WTABLES_GIUWS004(p_dist_no);    --added by Gzelle 06092014, referenced by aldren's modification GIUWS004 02192014
      END IF;


     --added by christian - based on FMB giuws004_03292012
      UPDATE giuw_wpolicyds
         SET dist_flag = '2'
       WHERE dist_no = p_dist_no;
      
      giuw_pol_dist_pkg.create_ri_records (p_dist_no,
                                           p_par_id,
                                           p_line_cd,
                                           p_subline_cd
                                          );
   END;

   /*
     **  Created by        : Anthony Santos
     **  Date Created     : 06.08.2011
     **  Reference By     : (GIUWS005- Preliminary One-Risk Distribution by Tsi/Prem)
     **  Description     : post-form-commit trigger
     */
   PROCEDURE post_form_commit_giuws005 (
      p_par_id        giuw_pol_dist.par_id%TYPE,
      p_dist_no       giuw_pol_dist.dist_no%TYPE,
      p_dist_seq_no   giuw_wpolicyds.dist_seq_no%TYPE,
      p_pol_flag      gipi_wpolbas.pol_flag%TYPE,
      p_par_type      gipi_parlist.par_type%TYPE,
      p_line_cd       gipi_wpolbas.line_cd%TYPE,
      p_subline_cd    gipi_wpolbas.subline_cd%TYPE
   )
   IS
      v_changes   VARCHAR2 (1) := 'Y';
   BEGIN
      /*giuw_pol_dist_pkg.adjust_wpolicyds_dtl_giuws005 (p_dist_no,
                                                       p_dist_seq_no
                                                      );*/  -- commented out based on 05.30.2014 08:45 PM version : shan 06.03.2014

      UPDATE giuw_pol_dist
         SET dist_flag = '1',
             post_flag = 'O'
       WHERE par_id = p_par_id AND dist_no = p_dist_no;

      IF p_pol_flag != 2 AND p_par_type = 'P' OR NVL (v_changes, 'N') = 'Y'
      THEN
         giuw_pol_dist_pkg.delete_dist_mster_tbl_giuws005 (p_dist_no);
         giuw_pol_dist_pkg.populate_witem_pl_dtl_giuws005 (p_dist_no);
         --giuw_pol_dist_pkg.adjust_net_ret_imp_giuws005 (p_dist_no);   -- commented out based on 05.30.2014 08:45 PM version : shan 06.03.2014
         giuw_pol_dist_pkg.ADJUST_ALL_WTABLES_GIUWS004(p_dist_no);  -- added based on 05.30.2014 08:45 PM version : shan 06.03.2014
      END IF;

      UPDATE giuw_wpolicyds
         SET dist_flag = '2'
       WHERE dist_no = p_dist_no;

      giuw_pol_dist_pkg.create_ri_records_giuws005 (p_dist_no,
                                                    p_par_id,
                                                    p_line_cd,
                                                    p_subline_cd
                                                   );
   END;

   PROCEDURE create_grp_dflt_wperilds2 (
      p_dist_no        IN   giuw_wperilds_dtl.dist_no%TYPE,
      p_dist_seq_no    IN   giuw_wperilds_dtl.dist_seq_no%TYPE,
      p_line_cd        IN   giuw_wperilds_dtl.line_cd%TYPE,
      p_peril_cd       IN   giuw_wperilds_dtl.peril_cd%TYPE,
      p_dist_tsi       IN   giuw_wperilds_dtl.dist_tsi%TYPE,
      p_dist_prem      IN   giuw_wperilds_dtl.dist_prem%TYPE,
      p_ann_dist_tsi   IN   giuw_wperilds_dtl.ann_dist_tsi%TYPE,
      p_rg_count       IN   NUMBER,
      p_pol_flag       IN   gipi_wpolbas.pol_flag%TYPE,
      p_par_id         IN   gipi_wpolbas.par_id%TYPE,
      p_par_type       IN   gipi_parlist.par_type%TYPE,
      p_default_no     IN   giis_default_dist.default_no%TYPE
   )
   IS
      --rg_id         RECORDGROUP;
      rg_name              VARCHAR2 (20)                := 'DFLT_DIST_VALUES';
      rg_col2              VARCHAR2 (40)            := rg_name || '.share_cd';
      rg_col7              VARCHAR2 (40)            := rg_name || '.true_pct';
      v_selection_count    NUMBER;
      v_row                NUMBER;
      v_dist_spct          giuw_wperilds_dtl.dist_spct%TYPE;
      v_dist_tsi           giuw_wperilds_dtl.dist_tsi%TYPE;
      v_dist_prem          giuw_wperilds_dtl.dist_prem%TYPE;
      v_ann_dist_tsi       giuw_wperilds_dtl.ann_dist_tsi%TYPE;
      v_share_cd           giis_dist_share.share_cd%TYPE;
      v_sum_dist_tsi       giuw_wperilds_dtl.dist_tsi%TYPE       := 0;
      v_sum_dist_spct      giuw_wperilds_dtl.dist_spct%TYPE      := 0;
      v_sum_dist_prem      giuw_wperilds_dtl.dist_prem%TYPE      := 0;
      v_sum_ann_dist_tsi   giuw_wperilds_dtl.ann_dist_tsi%TYPE   := 0;
      v_dflt_policy_exists   BOOLEAN := FALSE;   -- shan 07.22.2014
      v_with_dist_spct1    BOOLEAN := FALSE;
      v_dist_spct1          giuw_wpolicyds_dtl.DIST_SPCT1%type;     -- shan 07.22.2014

      PROCEDURE insert_to_wperilds_dtl
      IS
      BEGIN
         INSERT INTO giuw_wperilds_dtl
                     (dist_no, dist_seq_no, line_cd, share_cd,
                      dist_spct, dist_tsi, dist_prem, ann_dist_spct,
                      ann_dist_tsi, dist_grp, peril_cd
                      , dist_spct1  -- shan 07.22.2014
                     )
              VALUES (p_dist_no, p_dist_seq_no, p_line_cd, v_share_cd,
                      v_dist_spct, v_dist_tsi, v_dist_prem, v_dist_spct,
                      v_ann_dist_tsi, 1, p_peril_cd
                      , v_dist_spct1  -- shan 07.22.2014
                     );
      END;
      
      --added by shan 07.22.2014      
      PROCEDURE insert_dflt_values
      IS
      BEGIN 
            /* Create the default distribution records based on the 100%
            ** NET RETENTION and 0% FACULTATIVE hard code defaults. */
            v_share_cd := 1;
            v_dist_spct := 100;
            v_dist_tsi := p_dist_tsi;
            v_dist_prem := p_dist_prem;
            v_ann_dist_tsi := p_ann_dist_tsi;

            FOR c IN 1 .. 2
            LOOP
               insert_to_wperilds_dtl;
               v_share_cd := 999;
               v_dist_spct := 0;
               v_dist_tsi := 0;
               v_dist_prem := 0;
               v_ann_dist_tsi := 0;
            END LOOP;
      END;
   BEGIN
      IF p_rg_count = 0
      THEN
             -- rollie 27may2005 vincent's birthday
         -- see procedure create_items for other info
         --sg_alert('CREATE_GRP_DFLT_WPERILDS','I',FALSE);
         IF p_pol_flag = '2'
         THEN                                                      -- renewal
            ---message('pol flag 2');pause;
            v_dflt_policy_exists := FALSE; 
            
            FOR c IN (SELECT share_cd, dist_spct  -- commented out retrieving of default share from original policy for now : shan 08.06.2014
                             , dist_spct1 -- shan 07.22.2014
                        FROM giuw_perilds_dtl a
                       WHERE a.peril_cd = p_peril_cd
                         AND a.dist_seq_no = p_dist_seq_no
                         AND dist_no =
                                (SELECT MAX(dist_no)
                                   FROM giuw_pol_dist
                                  WHERE dist_flag <> 4
                                    --add by jess 02192019 - to handle ora-01427
                                    AND policy_id = (SELECT MAX(a.old_policy_id)
                                                       FROM gipi_wpolnrep a
                                                           ,gipi_parlist b
                                                      WHERE a.par_id = p_par_id
                                                        AND a.ren_rep_sw = '1'
                                                        AND b.par_id = a.par_id
                                                        AND b.par_status NOT IN(98,99))))
            LOOP
               v_share_cd := c.share_cd;
               v_dist_spct := c.dist_spct;
               v_dist_spct1 := c.dist_spct1;    -- shan 07.22.2014
               v_dist_tsi := ROUND (((p_dist_tsi * c.dist_spct) / 100), 2);
               v_dist_prem := ROUND (((p_dist_prem * NVL(c.dist_spct1, c.dist_spct)) / 100), 2); --ROUND (((p_dist_prem * c.dist_spct) / 100), 2);
               v_ann_dist_tsi :=
                           ROUND (((p_ann_dist_tsi * c.dist_spct) / 100), 2);
               v_sum_dist_tsi := NVL (v_sum_dist_tsi, 0)
                                 + NVL (v_dist_tsi, 0);
               v_sum_dist_prem :=
                               NVL (v_sum_dist_prem, 0)
                               + NVL (v_dist_prem, 0);
               v_sum_ann_dist_tsi :=
                         NVL (v_sum_ann_dist_tsi, 0)
                         + NVL (v_ann_dist_tsi, 0);
               --sg_alert('CREATE_GRP_DFLT_WPERILDS '||p_dist_seq_no||' - '||:b240.par_id||' - '||p_peril_cd||' - '||c.share_cd||' - '||c.dist_spct,'I',FALSE);
               insert_to_wperilds_dtl;
               v_dflt_policy_exists := TRUE;        -- shan 07.22.2014
            END LOOP;
            
            --added by shan 07.22.2014
            IF v_dflt_policy_exists = FALSE THEN
                insert_dflt_values;
            END IF;
            -- end 07.22.2014
         ELSIF p_par_type = 'E'
         THEN
            --message ('insert');pause;
            /*FOR c IN (SELECT share_cd, dist_spct  -- commented out retrieving of default share from original policy for now : shan 08.06.2014
                             , dist_spct1  -- shan 07.22.2014
                        FROM giuw_perilds_dtl a
                       WHERE a.peril_cd = p_peril_cd
                         AND a.dist_seq_no = p_dist_seq_no
                         AND dist_no =
                                (SELECT dist_no
                                   FROM giuw_pol_dist
                                  WHERE dist_flag <> 4     --A.R.C. 12.28.2006
                                    AND par_id =
                                           (SELECT par_id
                                              FROM gipi_polbasic
                                             WHERE endt_seq_no = 0
                                               AND (line_cd,
                                                    subline_cd,
                                                    iss_cd,
                                                    issue_yy,
                                                    pol_seq_no,
                                                    renew_no
                                                   ) =
                                                      (SELECT line_cd,
                                                              subline_cd,
                                                              iss_cd,
                                                              issue_yy,
                                                              pol_seq_no,
                                                              renew_no
                                                         FROM gipi_wpolbas
                                                        WHERE par_id =
                                                                      p_par_id))))
            LOOP
               v_share_cd := c.share_cd;
               v_dist_spct := c.dist_spct;
               v_dist_spct1 := c.dist_spct1;    -- shan 07.22.2014  
               v_dist_tsi := ROUND (((p_dist_tsi * c.dist_spct) / 100), 2);
               v_dist_prem := ROUND (((p_dist_prem * NVL(c.dist_spct1, c.dist_spct)) / 100), 2);  --ROUND (((p_dist_prem * c.dist_spct1) / 100), 2);
               v_ann_dist_tsi :=
                           ROUND (((p_ann_dist_tsi * c.dist_spct) / 100), 2);
               v_sum_dist_tsi := NVL (v_sum_dist_tsi, 0)
                                 + NVL (v_dist_tsi, 0);
               v_sum_dist_prem :=
                               NVL (v_sum_dist_prem, 0)
                               + NVL (v_dist_prem, 0);
               v_sum_ann_dist_tsi :=
                         NVL (v_sum_ann_dist_tsi, 0)
                         + NVL (v_ann_dist_tsi, 0);
               insert_to_wperilds_dtl;
               v_dflt_policy_exists := TRUE;        -- shan 07.22.2014
            END LOOP;*/
            
            --added by shan 07.22.2014
            IF v_dflt_policy_exists = FALSE THEN
                insert_dflt_values;
            END IF;
            -- end 07.22.2014
         ELSE
            /* Create the default distribution records based on the 100%
            ** NET RETENTION and 0% FACULTATIVE hard code defaults. */
            v_share_cd := 1;
            v_dist_spct := 100;
            v_dist_tsi := p_dist_tsi;
            v_dist_prem := p_dist_prem;
            v_ann_dist_tsi := p_ann_dist_tsi;

            FOR c IN 1 .. 2
            LOOP
               insert_to_wperilds_dtl;
               v_share_cd := 999;
               v_dist_spct := 0;
               v_dist_tsi := 0;
               v_dist_prem := 0;
               v_ann_dist_tsi := 0;
            END LOOP;
         END IF;
      ELSE
         /*rg_id             := FIND_GROUP(rg_name);
         v_selection_count := GET_GROUP_SELECTION_COUNT(rg_id);

         FOR c IN 1..v_selection_count
         LOOP
           v_row           := GET_GROUP_SELECTION(rg_id, c);
           v_dist_spct     := GET_GROUP_NUMBER_CELL(rg_col7, v_row);
           v_sum_dist_spct := v_sum_dist_spct + v_dist_spct;
           IF v_sum_dist_spct != 100 THEN
              v_dist_tsi         := ROUND(p_dist_tsi         * v_dist_spct / 100, 2);
              v_dist_prem        := ROUND(p_dist_prem        * v_dist_spct / 100, 2);
              v_ann_dist_tsi     := ROUND(p_ann_dist_tsi     * v_dist_spct / 100, 2);
              v_sum_dist_tsi     := v_sum_dist_tsi     + v_dist_tsi;
              v_sum_dist_prem    := v_sum_dist_prem    + v_dist_prem;
              v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
           ELSE
              v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
              v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
              v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
           END IF;
           v_share_cd     := GET_GROUP_NUMBER_CELL(rg_col2, v_row);
           INSERT_TO_WPERILDS_DTL;
         END LOOP;*/
         
         IF p_pol_flag = '2'
         THEN                                                      -- renewal
            ---message('pol flag 2');pause;
            v_dflt_policy_exists := FALSE; 
            
            FOR c IN (SELECT share_cd, dist_spct  -- commented out retrieving of default share from original policy for now : shan 08.06.2014
                             , dist_spct1 -- shan 07.22.2014
                        FROM giuw_wpolicyds_dtl a
                       WHERE a.dist_seq_no = p_dist_seq_no
                         AND dist_no = p_dist_no)
            LOOP
               v_share_cd := c.share_cd;
               v_dist_spct := c.dist_spct;
               v_dist_spct1 := c.dist_spct1;    -- shan 07.22.2014
               v_dist_tsi := ROUND (((p_dist_tsi * c.dist_spct) / 100), 2);
               v_dist_prem := ROUND (((p_dist_prem * NVL(c.dist_spct1, c.dist_spct)) / 100), 2); --ROUND (((p_dist_prem * c.dist_spct) / 100), 2);
               v_ann_dist_tsi :=
                           ROUND (((p_ann_dist_tsi * c.dist_spct) / 100), 2);
               v_sum_dist_tsi := NVL (v_sum_dist_tsi, 0)
                                 + NVL (v_dist_tsi, 0);
               v_sum_dist_prem :=
                               NVL (v_sum_dist_prem, 0)
                               + NVL (v_dist_prem, 0);
               v_sum_ann_dist_tsi :=
                         NVL (v_sum_ann_dist_tsi, 0)
                         + NVL (v_ann_dist_tsi, 0);
               --sg_alert('CREATE_GRP_DFLT_WPERILDS '||p_dist_seq_no||' - '||:b240.par_id||' - '||p_peril_cd||' - '||c.share_cd||' - '||c.dist_spct,'I',FALSE);               
               insert_to_wperilds_dtl;
               v_dflt_policy_exists := TRUE;        -- shan 07.22.2014
               
               IF NVL(v_dist_spct1, 0) <> 0
               THEN
                 v_with_dist_spct1 := TRUE;
               END IF;
            END LOOP;
         END IF;
            --added by shan 07.22.2014
         IF v_dflt_policy_exists = FALSE THEN
             FOR c IN (SELECT   a.line_cd, a.share_cd, a.share_pct, a.share_amt1,
                                a.peril_cd, a.share_amt2, 1 true_pct
                           FROM giis_default_dist_group a
                          WHERE a.default_no = TO_CHAR (NVL (p_default_no, 0))
                            AND a.line_cd = p_line_cd
                            AND a.share_cd <> 999
                       ORDER BY a.SEQUENCE ASC)
             LOOP
                v_dist_spct     := c.share_pct; --c.true_pct;
                    
                 -- start : shan 07.22.2014
                 IF v_dist_spct IS NULL THEN         
                     FOR h IN (SELECT dist_spct
                                 FROM giuw_wpolicyds_dtl
                                WHERE line_cd = c.line_cd
                                  AND share_cd = c.share_cd
                                  AND dist_no = p_dist_no)
                     LOOP
                        v_dist_spct := h.dist_spct;
                        EXIT;
                     END LOOP; 
                 END IF;
                 -- end : shan 07.22.2014
                     
                v_sum_dist_spct := v_sum_dist_spct + v_dist_spct;

                IF v_sum_dist_spct != 100
                THEN
                   v_dist_tsi := ROUND (p_dist_tsi * v_dist_spct / 100, 2);
                   v_dist_prem := ROUND (p_dist_prem * v_dist_spct / 100, 2);
                   v_ann_dist_tsi :=
                                    ROUND (p_ann_dist_tsi * v_dist_spct / 100, 2);
                   v_sum_dist_tsi := v_sum_dist_tsi + v_dist_tsi;
                   v_sum_dist_prem := v_sum_dist_prem + v_dist_prem;
                   v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
                ELSE
                   v_dist_tsi := p_dist_tsi - v_sum_dist_tsi;
                   v_dist_prem := p_dist_prem - v_sum_dist_prem;
                   v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                END IF;

                v_share_cd := c.share_cd;
                    
                IF v_with_dist_spct1 = TRUE
                THEN
                  v_dist_spct1 := v_dist_spct;
                END IF;
                    
                insert_to_wperilds_dtl;
             END LOOP;
                 
              -- start : shan 07.22.2014
            IF v_sum_dist_spct != 100 THEN
               v_dist_spct    := 100            - v_sum_dist_spct;
               v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
               v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
               v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
               v_share_cd     := '999';
               --p_rg_count     := p_rg_count + 1;
                       
               IF v_with_dist_spct1 = TRUE
               THEN
                 v_dist_spct1 := v_dist_spct;
               END IF;
                       
               INSERT_TO_WPERILDS_DTL;
            END IF;
         END IF;
          -- end : shan 07.22.2014      
      END IF;
   END;

   /* NOTE:  default_type 1 - Use AMOUNTS to create the default distribution records
   **                     2 - Use PERCENTAGE to create the default distribution records. */
   PROCEDURE create_peril_dflt_wperilds (
      p_dist_no           IN   giuw_wperilds_dtl.dist_no%TYPE,
      p_dist_seq_no       IN   giuw_wperilds_dtl.dist_seq_no%TYPE,
      p_line_cd           IN   giuw_wperilds_dtl.line_cd%TYPE,
      p_peril_cd          IN   giuw_wperilds_dtl.peril_cd%TYPE,
      p_dist_tsi          IN   giuw_wperilds_dtl.dist_tsi%TYPE,
      p_dist_prem         IN   giuw_wperilds_dtl.dist_prem%TYPE,
      p_ann_dist_tsi      IN   giuw_wperilds_dtl.ann_dist_tsi%TYPE,
      p_currency_rt       IN   gipi_winvoice.currency_rt%TYPE,
      p_default_no        IN   giis_default_dist.default_no%TYPE,
      p_default_type      IN   giis_default_dist.default_type%TYPE,
      p_dflt_netret_pct   IN   giis_default_dist.dflt_netret_pct%TYPE,
      p_pol_flag          IN   gipi_wpolbas.pol_flag%TYPE,
      p_par_id            IN   gipi_wpolbas.par_id%TYPE,
      p_par_type          IN   gipi_parlist.par_type%TYPE
   )
   IS
      v_dflt_dist_exist    VARCHAR2 (1)                          := 'N';
      v_dist_spct          giuw_wperilds_dtl.dist_spct%TYPE;
      v_dist_spct1          giuw_wperilds_dtl.dist_spct1%TYPE;
      v_dist_tsi           giuw_wperilds_dtl.dist_tsi%TYPE;
      v_dist_prem          giuw_wperilds_dtl.dist_prem%TYPE;
      v_ann_dist_tsi       giuw_wperilds_dtl.ann_dist_tsi%TYPE;
      v_share_cd           giis_dist_share.share_cd%TYPE;
      v_sum_dist_tsi       giuw_wperilds_dtl.dist_tsi%TYPE       := 0;
      v_sum_dist_spct      giuw_wperilds_dtl.dist_spct%TYPE      := 0;
      v_sum_dist_prem      giuw_wperilds_dtl.dist_prem%TYPE      := 0;
      v_sum_ann_dist_tsi   giuw_wperilds_dtl.ann_dist_tsi%TYPE   := 0;
      v_dist_spct_limit    NUMBER;
      v_remaining_tsi      NUMBER               := p_dist_tsi * p_currency_rt;
      v_peril_cd           giuw_wperilds_dtl.peril_cd%TYPE      := p_peril_cd;
      v_dflt_policy_exists BOOLEAN:= FALSE;
      v_with_dist_spct1    BOOLEAN := FALSE;

      CURSOR dist_peril_cur
      IS
         SELECT   a.share_cd, a.share_pct, a.share_amt1
             FROM giis_default_dist_peril a
            WHERE a.default_no = p_default_no
              AND a.line_cd = p_line_cd
              AND a.peril_cd = p_peril_cd
              AND a.share_cd <> 999
         ORDER BY a.SEQUENCE ASC;

      PROCEDURE insert_to_wperilds_dtl
      IS
      BEGIN
         INSERT INTO giuw_wperilds_dtl
                     (dist_no, dist_seq_no, line_cd, share_cd,
                      dist_spct, dist_spct1, dist_tsi, dist_prem, ann_dist_spct,
                      ann_dist_tsi, dist_grp, peril_cd
                     )
              VALUES (p_dist_no, p_dist_seq_no, p_line_cd, v_share_cd,
                      v_dist_spct, v_dist_spct1, v_dist_tsi, v_dist_prem, v_dist_spct,
                      v_ann_dist_tsi, 1, p_peril_cd
                     );

         create_peril_dflt_witemperilds (p_dist_no,
                                         p_dist_seq_no,
                                         p_line_cd,
                                         p_peril_cd,
                                         v_share_cd,
                                         v_dist_spct,
                                         v_dist_spct,
                                         v_dist_spct1
                                        );
      END;
      
      PROCEDURE insert_dflt_values
      IS
      BEGIN 
            /* Create the default distribution records based on the 100%
            ** NET RETENTION and 0% FACULTATIVE hard code defaults. */
            v_share_cd := 1;
            v_dist_spct := 100;
            v_dist_tsi := p_dist_tsi;
            v_dist_prem := p_dist_prem;
            v_ann_dist_tsi := p_ann_dist_tsi;

            FOR c IN 1 .. 2
            LOOP
               insert_to_wperilds_dtl;
               v_share_cd := 999;
               v_dist_spct := 0;
               v_dist_tsi := 0;
               v_dist_prem := 0;
               v_ann_dist_tsi := 0;
            END LOOP;
      END;
   BEGIN      
      IF p_pol_flag = '2'  -- renewal
      THEN       
         v_dflt_policy_exists := FALSE;
                  
         FOR c IN (SELECT share_cd, dist_spct, dist_spct1, peril_cd
                     FROM giuw_perilds_dtl a
                    WHERE a.dist_seq_no = p_dist_seq_no
                      AND a.peril_cd = v_peril_cd
                      AND dist_no =
                             (SELECT MAX(dist_no)
                                FROM giuw_pol_dist
                               WHERE dist_flag <> 4
                                 --add by jess 02192019 - to handle ora-01427
                                 AND policy_id = (SELECT MAX(a.old_policy_id)
                                                    FROM gipi_wpolnrep a
                                                        ,gipi_parlist b
                                                   WHERE a.par_id = p_par_id
                                                     AND a.ren_rep_sw = '1'
                                                     AND b.par_id = a.par_id
                                                     AND b.par_status NOT IN(98,99))))
         LOOP
           v_share_cd := c.share_cd;
            v_dist_spct := c.dist_spct;
            v_dist_spct1 := c.dist_spct1;
            v_peril_cd := c.peril_cd;            
            v_dist_tsi :=
                       ROUND (((NVL (p_dist_tsi, 0) * c.dist_spct) / 100), 2);
            v_dist_prem :=
                      ROUND (((NVL (p_dist_prem, 0) * NVL(NVL(c.dist_spct1, c.dist_spct), 0)) / 100), 2);
            v_ann_dist_tsi :=
                   ROUND (((NVL (p_ann_dist_tsi, 0) * c.dist_spct) / 100), 2);
            v_sum_dist_tsi := NVL (v_sum_dist_tsi, 0) + NVL (v_dist_tsi, 0);
            v_sum_dist_prem := NVL (v_sum_dist_prem, 0)
                               + NVL (v_dist_prem, 0);
            v_sum_ann_dist_tsi :=
                         NVL (v_sum_ann_dist_tsi, 0)
                         + NVL (v_ann_dist_tsi, 0);
            --v_default := 'N';
            --msg_alert('start '||' - '||p_dist_no||' - '||p_dist_seq_no||' - '||p_line_cd||' - '||p_peril_cd||' - '||v_share_cd||' - '||v_dist_spct||' - '||v_dist_spct,'I',FALSE);
            insert_to_wperilds_dtl;
            v_dflt_policy_exists := TRUE;
            
            IF NVL(v_dist_spct1, 0) <> 0
            THEN
              v_with_dist_spct1 := TRUE;
            END IF;
         END LOOP;
         
         v_dflt_dist_exist := 'N';
         
         IF v_dflt_policy_exists = FALSE
         THEN         
             IF p_default_type = 1
             THEN
                FOR c1 IN dist_peril_cur
                LOOP
                   v_dflt_dist_exist := 'Y';

                   IF v_remaining_tsi >= c1.share_amt1
                   THEN
                      v_dist_tsi := c1.share_amt1 / p_currency_rt;
                      v_remaining_tsi := v_remaining_tsi - c1.share_amt1;
                   ELSE
                      v_remaining_tsi := 0;
                   END IF;

                   IF v_remaining_tsi != 0
                   THEN
                      v_dist_spct := ROUND (v_dist_tsi / p_dist_tsi * 100, 9);
                      v_dist_tsi := ROUND (p_dist_tsi * v_dist_spct / 100, 2);
                      v_dist_prem := ROUND (p_dist_prem * v_dist_spct / 100, 2);
                      v_ann_dist_tsi :=
                                    ROUND (p_ann_dist_tsi * v_dist_spct / 100, 2);
                      v_sum_dist_spct := v_sum_dist_spct + v_dist_spct;
                      v_sum_dist_tsi := v_sum_dist_tsi + v_dist_tsi;
                      v_sum_dist_prem := v_sum_dist_prem + v_dist_prem;
                      v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
                   ELSIF v_remaining_tsi = 0
                   THEN
                      v_dist_spct := 100 - v_sum_dist_spct;
                      v_dist_prem := p_dist_prem - v_sum_dist_prem;
                      v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                      v_dist_tsi := p_dist_tsi - v_sum_dist_tsi;
                   END IF;

                   v_share_cd := c1.share_cd;
                   
                   IF v_with_dist_spct1 = TRUE
                   THEN
                     v_dist_spct1 := v_dist_spct;
                   END IF;
                   
                   insert_to_wperilds_dtl;

                   IF v_remaining_tsi = 0
                   THEN
                      EXIT;
                   END IF;
                END LOOP;

                IF v_remaining_tsi != 0 AND v_dflt_dist_exist = 'Y'
                THEN
                   v_dist_spct := 100 - v_sum_dist_spct;
                   v_dist_prem := p_dist_prem - v_sum_dist_prem;
                   v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                   v_dist_tsi := p_dist_tsi - v_sum_dist_tsi;
                   v_share_cd := '999';
                   
                   IF v_with_dist_spct1 = TRUE
                   THEN
                     v_dist_spct1 := v_dist_spct;
                   END IF;                   
                   
                   insert_to_wperilds_dtl;
                END IF;
             /* Use PERCENTAGES to create the default distribution records. */
             ELSIF p_default_type = 2
             THEN
                FOR c1 IN dist_peril_cur
                LOOP
                   v_dflt_dist_exist := 'Y';
                   v_dist_spct := c1.share_pct;

                   IF c1.share_amt1 IS NOT NULL
                   THEN
                      v_dist_tsi := c1.share_amt1 / p_currency_rt;

                      IF p_dist_tsi != 0
                      THEN
                         v_dist_spct_limit :=
                                         ROUND (v_dist_tsi / p_dist_tsi * 100, 9);
                      ELSE
                         v_dist_spct_limit := 0;
                      END IF;

                      /* Modified by Loth 050499
                      ** this statement is only true if v_dist_spct_limit
                      ** is greater than or equal to zero.
                      */
                      IF v_dist_spct_limit >= 0
                      THEN
                         IF v_dist_spct > v_dist_spct_limit
                         THEN
                            v_dist_spct := v_dist_spct_limit;
                         END IF;
                      END IF;
                   END IF;

                   v_sum_dist_spct := v_sum_dist_spct + v_dist_spct;

                   IF v_sum_dist_spct != 100
                   THEN
                      v_dist_tsi := ROUND (p_dist_tsi * v_dist_spct / 100, 2);
                      v_dist_prem := ROUND (p_dist_prem * v_dist_spct / 100, 2);
                      v_ann_dist_tsi :=
                                    ROUND (p_ann_dist_tsi * v_dist_spct / 100, 2);
                      v_sum_dist_tsi := v_sum_dist_tsi + v_dist_tsi;
                      v_sum_dist_prem := v_sum_dist_prem + v_dist_prem;
                      v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
                   ELSE
                      v_dist_tsi := p_dist_tsi - v_sum_dist_tsi;
                      v_dist_prem := p_dist_prem - v_sum_dist_prem;
                      v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                   END IF;

                   v_share_cd := c1.share_cd;
                   
                   IF v_with_dist_spct1 = TRUE
                   THEN
                     v_dist_spct1 := v_dist_spct;
                   END IF;                   
                   
                   insert_to_wperilds_dtl;
                END LOOP;

                IF v_sum_dist_spct != 100 AND v_dflt_dist_exist = 'Y'
                THEN
                   v_dist_spct := 100 - v_sum_dist_spct;
                   v_dist_tsi := p_dist_tsi - v_sum_dist_tsi;
                   v_dist_prem := p_dist_prem - v_sum_dist_prem;
                   v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                   v_share_cd := '999';
                   
                   IF v_with_dist_spct1 = TRUE
                   THEN
                     v_dist_spct1 := v_dist_spct;
                   END IF;                   
                   
                   insert_to_wperilds_dtl;
                END IF;
             END IF;
         END IF;
         
         IF v_dflt_policy_exists = FALSE AND v_dflt_dist_exist = 'N' THEN
            insert_dflt_values;
         END IF;
      ELSIF p_par_type = 'E'
      THEN
         --msg_alert(v_peril_cd||' - '||p_line_cd,'I',FALSE);
         FOR c IN (SELECT share_cd, dist_spct, peril_cd
                     FROM giuw_perilds_dtl a
                    WHERE a.dist_seq_no = p_dist_seq_no
                      AND a.peril_cd = v_peril_cd
                      AND dist_no =
                             (SELECT MAX(dist_no)
                                FROM giuw_pol_dist
                               WHERE dist_flag <> 4        --A.R.C. 12.28.2006
                                 AND par_id =
                                        (SELECT par_id
                                           FROM gipi_polbasic
                                          WHERE endt_seq_no = 0
                                            AND (line_cd,
                                                 subline_cd,
                                                 iss_cd,
                                                 issue_yy,
                                                 pol_seq_no,
                                                 renew_no
                                                ) =
                                                   (SELECT line_cd,
                                                           subline_cd, iss_cd,
                                                           issue_yy,
                                                           pol_seq_no,
                                                           renew_no
                                                      FROM gipi_wpolbas
                                                     WHERE par_id = p_par_id))))
         LOOP
            v_share_cd := c.share_cd;
            v_dist_spct := c.dist_spct;
            v_peril_cd := c.peril_cd;
            v_dist_tsi := ROUND (((p_dist_tsi * c.dist_spct) / 100), 2);
            v_dist_prem := ROUND (((p_dist_prem * c.dist_spct) / 100), 2);
            v_ann_dist_tsi :=
                           ROUND (((p_ann_dist_tsi * c.dist_spct) / 100), 2);
            v_sum_dist_tsi := NVL (v_sum_dist_tsi, 0) + NVL (v_dist_tsi, 0);
            v_sum_dist_prem := NVL (v_sum_dist_prem, 0)
                               + NVL (v_dist_prem, 0);
            v_sum_ann_dist_tsi :=
                         NVL (v_sum_ann_dist_tsi, 0)
                         + NVL (v_ann_dist_tsi, 0);
            --v_default := 'N';
            --msg_alert('start '||v_share_cd||' - '||v_dist_spct||' - '||c.peril_cd||' - '||p_dist_seq_no||' - '||p_dist_no,'I',FALSE);
            insert_to_wperilds_dtl;
         --msg_alert('end '||v_share_cd||' - '||v_dist_spct||' - '||c.peril_cd||' - '||p_dist_seq_no||' - '||p_dist_no,'I',FALSE);
         END LOOP;
      ELSE    /* rollie 13august2005 old default will use */
                 /* Use AMOUNTS to create the default distribution records. */
         IF p_default_type = 1
         THEN
            FOR c1 IN dist_peril_cur
            LOOP
               v_dflt_dist_exist := 'Y';

               IF v_remaining_tsi >= c1.share_amt1
               THEN
                  v_dist_tsi := c1.share_amt1 / p_currency_rt;
                  v_remaining_tsi := v_remaining_tsi - c1.share_amt1;
               ELSE
                  v_remaining_tsi := 0;
               END IF;

               IF v_remaining_tsi != 0
               THEN
                  v_dist_spct := ROUND (v_dist_tsi / p_dist_tsi * 100, 9);
                  v_dist_tsi := ROUND (p_dist_tsi * v_dist_spct / 100, 2);
                  v_dist_prem := ROUND (p_dist_prem * v_dist_spct / 100, 2);
                  v_ann_dist_tsi :=
                                ROUND (p_ann_dist_tsi * v_dist_spct / 100, 2);
                  v_sum_dist_spct := v_sum_dist_spct + v_dist_spct;
                  v_sum_dist_tsi := v_sum_dist_tsi + v_dist_tsi;
                  v_sum_dist_prem := v_sum_dist_prem + v_dist_prem;
                  v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
               ELSIF v_remaining_tsi = 0
               THEN
                  v_dist_spct := 100 - v_sum_dist_spct;
                  v_dist_prem := p_dist_prem - v_sum_dist_prem;
                  v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                  v_dist_tsi := p_dist_tsi - v_sum_dist_tsi;
               END IF;

               v_share_cd := c1.share_cd;
               insert_to_wperilds_dtl;

               IF v_remaining_tsi = 0
               THEN
                  EXIT;
               END IF;
            END LOOP;

            IF v_remaining_tsi != 0 AND v_dflt_dist_exist = 'Y'
            THEN
               v_dist_spct := 100 - v_sum_dist_spct;
               v_dist_prem := p_dist_prem - v_sum_dist_prem;
               v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
               v_dist_tsi := p_dist_tsi - v_sum_dist_tsi;
               v_share_cd := '999';
               insert_to_wperilds_dtl;
            END IF;
         /* Use PERCENTAGES to create the default distribution records. */
         ELSIF p_default_type = 2
         THEN
            FOR c1 IN dist_peril_cur
            LOOP
               v_dflt_dist_exist := 'Y';
               v_dist_spct := c1.share_pct;

               IF c1.share_amt1 IS NOT NULL
               THEN
                  v_dist_tsi := c1.share_amt1 / p_currency_rt;

                  IF p_dist_tsi != 0
                  THEN
                     v_dist_spct_limit :=
                                     ROUND (v_dist_tsi / p_dist_tsi * 100, 9);
                  ELSE
                     v_dist_spct_limit := 0;
                  END IF;

                  /* Modified by Loth 050499
                  ** this statement is only true if v_dist_spct_limit
                  ** is greater than or equal to zero.
                  */
                  IF v_dist_spct_limit >= 0
                  THEN
                     IF v_dist_spct > v_dist_spct_limit
                     THEN
                        v_dist_spct := v_dist_spct_limit;
                     END IF;
                  END IF;
               END IF;

               v_sum_dist_spct := v_sum_dist_spct + v_dist_spct;

               IF v_sum_dist_spct != 100
               THEN
                  v_dist_tsi := ROUND (p_dist_tsi * v_dist_spct / 100, 2);
                  v_dist_prem := ROUND (p_dist_prem * v_dist_spct / 100, 2);
                  v_ann_dist_tsi :=
                                ROUND (p_ann_dist_tsi * v_dist_spct / 100, 2);
                  v_sum_dist_tsi := v_sum_dist_tsi + v_dist_tsi;
                  v_sum_dist_prem := v_sum_dist_prem + v_dist_prem;
                  v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
               ELSE
                  v_dist_tsi := p_dist_tsi - v_sum_dist_tsi;
                  v_dist_prem := p_dist_prem - v_sum_dist_prem;
                  v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
               END IF;

               v_share_cd := c1.share_cd;
               insert_to_wperilds_dtl;
            END LOOP;

            IF v_sum_dist_spct != 100 AND v_dflt_dist_exist = 'Y'
            THEN
               v_dist_spct := 100 - v_sum_dist_spct;
               v_dist_tsi := p_dist_tsi - v_sum_dist_tsi;
               v_dist_prem := p_dist_prem - v_sum_dist_prem;
               v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
               v_share_cd := '999';
               insert_to_wperilds_dtl;
            END IF;
         END IF;

         /* If GIIS_DEFAULT_DIST_PERIL does not contain a record that
         ** corresponds to the particular peril being distributed,
         ** then use the value of the DFLT_NETRET_PCT column retrieved
         ** from table GIIS_DEFAULT_DIST. */
         IF v_dflt_dist_exist = 'N' AND p_dflt_netret_pct IS NOT NULL
         THEN
            IF p_dflt_netret_pct != 100
            THEN
               v_dist_spct := p_dflt_netret_pct;
               v_dist_tsi := ROUND (p_dist_tsi * p_dflt_netret_pct / 100, 2);
               v_dist_prem :=
                             ROUND (p_dist_prem * p_dflt_netret_pct / 100, 2);
               v_ann_dist_tsi :=
                          ROUND (p_ann_dist_tsi * p_dflt_netret_pct / 100, 2);
               v_sum_dist_tsi := v_sum_dist_tsi + v_dist_tsi;
               v_sum_dist_prem := v_sum_dist_prem + v_dist_prem;
               v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
            ELSE
               v_dist_spct := p_dflt_netret_pct;
               v_dist_tsi := p_dist_tsi;
               v_dist_prem := p_dist_prem;
               v_ann_dist_tsi := p_ann_dist_tsi;
            END IF;

            v_share_cd := 1;
            insert_to_wperilds_dtl;

            IF p_dflt_netret_pct != 100
            THEN
               v_dist_spct := 100 - p_dflt_netret_pct;
               v_dist_tsi := p_dist_tsi - v_sum_dist_tsi;
               v_dist_prem := p_dist_prem - v_sum_dist_prem;
               v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
               v_share_cd := '999';
               insert_to_wperilds_dtl;
            END IF;
         /* If no default distribution record was found in table
         ** GIIS_DEFAULT_DIST, then create the record using
         ** the traditional 100% NET RETENTION, 0% FACULTATIVE
         ** default. */
         ELSIF v_dflt_dist_exist = 'N'
         THEN
            /* Create the default distribution records based on the 100%
            ** NET RETENTION and 0% FACULTATIVE hard code defaults. */
            v_share_cd := 1;
            v_dist_spct := 100;
            v_dist_tsi := p_dist_tsi;
            v_dist_prem := p_dist_prem;
            v_ann_dist_tsi := p_ann_dist_tsi;

            FOR c IN 1 .. 2
            LOOP
               insert_to_wperilds_dtl;
               v_share_cd := 999;
               v_dist_spct := 0;
               v_dist_tsi := 0;
               v_dist_prem := 0;
               v_ann_dist_tsi := 0;
            END LOOP;
         END IF;
      END IF;
   END;

   /* Create records in table GIUW_WITEMDS_DTL based on
   ** the values taken in by table GIUW_WITEMPERILDS_DTL. */
   PROCEDURE create_peril_dflt_witemds (
      p_dist_no       IN   giuw_pol_dist.dist_no%TYPE,
      p_dist_seq_no   IN   giuw_wpolicyds.dist_seq_no%TYPE,
      p_pol_flag      IN   gipi_wpolbas.pol_flag%TYPE,
      p_par_id        IN   gipi_wpolbas.par_id%TYPE,
      p_par_type      IN   gipi_parlist.par_type%TYPE
   )
   IS
      v_dist_spct          giuw_witemds_dtl.dist_spct%TYPE;
      v_dist_spct1         giuw_witemds_dtl.dist_spct1%TYPE;
      v_ann_dist_spct      giuw_witemds_dtl.ann_dist_spct%TYPE;
      v_allied_dist_prem   giuw_witemds_dtl.dist_prem%TYPE;
      v_dist_prem          giuw_witemds_dtl.dist_prem%TYPE;
      v_tsi_amt            giuw_wpolicyds_dtl.dist_tsi%TYPE;
      v_prem_amt           giuw_wpolicyds_dtl.dist_prem%TYPE;
      v_ann_tsi_amt        giuw_wpolicyds_dtl.ann_dist_tsi%TYPE;
      v_dflt_policy_exists BOOLEAN := FALSE; 
      v_with_dist_spct1    BOOLEAN := FALSE;
   BEGIN
      IF p_pol_flag = '2'
      THEN
         FOR a1 IN (SELECT   a.dist_no, a.dist_seq_no, a.item_no, a.line_cd,
                             a.share_cd, a.dist_grp,
                             SUM (DECODE (a170.peril_type,
                                          'B', a.dist_tsi,
                                          0
                                         )
                                 ) dist_tsi,
                             SUM (a.dist_prem) dist_prem,
                             SUM (DECODE (a170.peril_type,
                                          'B', a.ann_dist_tsi,
                                          0
                                         )
                                 ) ann_dist_tsi
                        FROM giuw_witemperilds_dtl a, giis_peril a170
                       WHERE a170.peril_cd = a.peril_cd
                         AND a170.line_cd = a.line_cd
                         AND a.dist_seq_no = p_dist_seq_no
                         AND a.dist_no = p_dist_no
                    GROUP BY a.dist_no,
                             a.dist_seq_no,
                             a.item_no,
                             a.line_cd,
                             a.share_cd,
                             a.dist_grp)
         LOOP
            --v_insert := 'Y';
            v_dflt_policy_exists := FALSE;  
            
            FOR b1 IN (SELECT share_cd, dist_spct, dist_spct1
                         FROM giuw_itemds_dtl b
                        WHERE b.line_cd = a1.line_cd
                          AND b.item_no = a1.item_no
                          AND b.share_cd = a1.share_cd
                          AND dist_no =
                                 (SELECT MAX(dist_no)
                                    FROM giuw_pol_dist
                                   WHERE dist_flag <> 4
                                     --add by jess 02192019 - to handle ora-01427
                                     AND policy_id =
                                                    (SELECT MAX(a.old_policy_id)
                                                       FROM gipi_wpolnrep a
                                                           ,gipi_parlist b
                                                      WHERE a.par_id = p_par_id
                                                        AND a.ren_rep_sw = '1'
                                                        AND b.par_id = a.par_id
                                                        AND b.par_status NOT IN(98, 99))))
            LOOP
               v_tsi_amt := ROUND (((a1.dist_tsi * b1.dist_spct) / 100), 2);
               v_prem_amt :=
                            ROUND (((a1.dist_prem * NVL(b1.dist_spct1, b1.dist_spct)) / 100), 2);
               v_ann_tsi_amt :=
                         ROUND (((a1.ann_dist_tsi * b1.dist_spct) / 100), 2);

               --msg_alert('insert into giuw_witemds_dtl renewal '||p_dist_no||' - '||p_dist_seq_no||' - '||a1.item_no||' - '||a1.line_cd||' - '||a1.share_cd,'I',FALSE);
               INSERT INTO giuw_witemds_dtl
                           (dist_no, dist_seq_no, item_no,
                            line_cd, share_cd, dist_spct, dist_spct1,
                            dist_tsi, dist_prem, ann_dist_spct,
                            ann_dist_tsi, dist_grp
                           )
                    VALUES (p_dist_no, p_dist_seq_no, a1.item_no,
                            a1.line_cd, a1.share_cd, b1.dist_spct, b1.dist_spct1,
                            v_tsi_amt, v_prem_amt, b1.dist_spct,
                            v_ann_tsi_amt, a1.dist_grp
                           );
                           
              v_dflt_policy_exists := TRUE;
              
              IF NVL(b1.dist_spct1, 0) <> 0
              THEN
                v_with_dist_spct1 := TRUE;
              END IF;
            END LOOP;           
         
            IF v_dflt_policy_exists = FALSE
            THEN
               FOR c3 IN (SELECT tsi_amt, prem_amt, ann_tsi_amt, item_no
                            FROM giuw_witemds
                           WHERE item_no = a1.item_no
                             AND dist_seq_no = p_dist_seq_no
                             AND dist_no = p_dist_no)
               LOOP
                  /* Divide the individual TSI/Premium with the total TSI/Premium
                  ** and multiply it by 100 to arrive at the correct percentage for
                  ** the breakdown. */
                  IF c3.tsi_amt != 0
                  THEN
                     v_dist_spct := ROUND (a1.dist_tsi / c3.tsi_amt, 9) * 100;
                  ELSE
                     v_dist_spct :=
                                   ROUND (a1.dist_prem / c3.prem_amt, 9)
                                   * 100;
                  END IF;

                  IF c3.ann_tsi_amt = 0
                  THEN
                     v_ann_dist_spct := 0;
                  ELSE
                     v_ann_dist_spct :=
                             ROUND (a1.ann_dist_tsi / c3.ann_tsi_amt, 9)
                             * 100;
                  END IF;

                  IF v_with_dist_spct1 = TRUE
                  THEN
                    v_dist_spct1 := v_dist_spct;
                  END IF;

                  INSERT INTO giuw_witemds_dtl
                              (dist_no, dist_seq_no, item_no,
                               line_cd, share_cd, dist_spct, dist_spct1,
                               dist_tsi, dist_prem, ann_dist_spct,
                               ann_dist_tsi, dist_grp
                              )
                       VALUES (p_dist_no, p_dist_seq_no, c3.item_no,
                               a1.line_cd, a1.share_cd, v_dist_spct, v_dist_spct1,
                               a1.dist_tsi, a1.dist_prem, v_ann_dist_spct,
                               a1.ann_dist_tsi, a1.dist_grp
                              );
               END LOOP;   
            END IF;
         END LOOP;    
      ELSIF p_par_type = 'E'
      THEN
         FOR a1 IN (SELECT   a.dist_no, a.dist_seq_no, a.item_no, a.line_cd,
                             a.share_cd, a.dist_grp,
                             SUM (DECODE (a170.peril_type,
                                          'B', a.dist_tsi,
                                          0
                                         )
                                 ) dist_tsi,
                             SUM (a.dist_prem) dist_prem,
                             SUM (DECODE (a170.peril_type,
                                          'B', a.ann_dist_tsi,
                                          0
                                         )
                                 ) ann_dist_tsi
                        FROM giuw_witemperilds_dtl a, giis_peril a170
                       WHERE a170.peril_cd = a.peril_cd
                         AND a170.line_cd = a.line_cd
                         AND a.dist_seq_no = p_dist_seq_no
                         AND a.dist_no = p_dist_no
                    GROUP BY a.dist_no,
                             a.dist_seq_no,
                             a.item_no,
                             a.line_cd,
                             a.share_cd,
                             a.dist_grp)
         LOOP
            --v_insert := 'Y';
            FOR b1 IN (SELECT share_cd, dist_spct
                         FROM giuw_itemds_dtl b
                        WHERE b.line_cd = a1.line_cd
                          AND b.item_no = a1.item_no
                          AND b.share_cd = a1.share_cd
                          AND dist_no =
                                 (SELECT MAX(dist_no)
                                    FROM giuw_pol_dist
                                   WHERE dist_flag <> 4    --A.R.C. 12.28.2006
                                     AND par_id =
                                            (SELECT par_id
                                               FROM gipi_polbasic
                                              WHERE endt_seq_no = 0
                                                AND (line_cd,
                                                     subline_cd,
                                                     iss_cd,
                                                     issue_yy,
                                                     pol_seq_no,
                                                     renew_no
                                                    ) =
                                                       (SELECT line_cd,
                                                               subline_cd,
                                                               iss_cd,
                                                               issue_yy,
                                                               pol_seq_no,
                                                               renew_no
                                                          FROM gipi_wpolbas
                                                         WHERE par_id =
                                                                      p_par_id))))
            LOOP
               v_tsi_amt := ROUND (((a1.dist_tsi * b1.dist_spct) / 100), 2);
               v_prem_amt :=
                            ROUND (((a1.dist_prem * b1.dist_spct) / 100), 2);
               v_ann_tsi_amt :=
                         ROUND (((a1.ann_dist_tsi * b1.dist_spct) / 100), 2);

               --msg_alert('insert into giuw_witemds_dtl renewal '||p_dist_no||' - '||p_dist_seq_no||' - '||a1.item_no||' - '||a1.line_cd||' - '||a1.share_cd,'I',FALSE);
               INSERT INTO giuw_witemds_dtl
                           (dist_no, dist_seq_no, item_no,
                            line_cd, share_cd, dist_spct,
                            dist_tsi, dist_prem, ann_dist_spct,
                            ann_dist_tsi, dist_grp
                           )
                    VALUES (p_dist_no, p_dist_seq_no, a1.item_no,
                            a1.line_cd, a1.share_cd, b1.dist_spct,
                            v_tsi_amt, v_prem_amt, b1.dist_spct,
                            v_ann_tsi_amt, a1.dist_grp
                           );
            --v_insert := 'N';
            END LOOP;
         END LOOP;
      ELSE                                                  /* default code */
         FOR c1 IN (SELECT   line_cd line_cd, item_no item_no,
                             share_cd share_cd, dist_grp dist_grp
                        FROM giuw_witemperilds_dtl
                       WHERE dist_no = p_dist_no
                         AND dist_seq_no = p_dist_seq_no
                    GROUP BY item_no, line_cd, share_cd, dist_grp)
         LOOP
            FOR c2 IN (SELECT SUM (DECODE (a170.peril_type,
                                           'B', a.dist_tsi,
                                           0
                                          )
                                  ) dist_tsi,
                              SUM (a.dist_prem) dist_prem,
                              SUM (DECODE (a170.peril_type,
                                           'B', a.ann_dist_tsi,
                                           0
                                          )
                                  ) ann_dist_tsi
                         FROM giuw_witemperilds_dtl a, giis_peril a170
                        WHERE a170.peril_cd = a.peril_cd
                          AND a170.line_cd = a.line_cd
                          AND a.dist_grp = c1.dist_grp
                          AND a.share_cd = c1.share_cd
                          AND a.line_cd = c1.line_cd
                          AND a.item_no = c1.item_no
                          AND a.dist_seq_no = p_dist_seq_no
                          AND a.dist_no = p_dist_no)
            LOOP
               FOR c3 IN (SELECT tsi_amt, prem_amt, ann_tsi_amt, item_no
                            FROM giuw_witemds
                           WHERE item_no = c1.item_no
                             AND dist_seq_no = p_dist_seq_no
                             AND dist_no = p_dist_no)
               LOOP
                  /* Divide the individual TSI/Premium with the total TSI/Premium
                  ** and multiply it by 100 to arrive at the correct percentage for
                  ** the breakdown. */
                  IF c3.tsi_amt != 0
                  THEN
                     v_dist_spct := ROUND (c2.dist_tsi / c3.tsi_amt, 9) * 100;
                  ELSE
                     v_dist_spct :=
                                   ROUND (c2.dist_prem / c3.prem_amt, 9)
                                   * 100;
                  END IF;

                  /* Updated by Loth 050499
                  ** To avoid the problem of Zero devide
                  */
                  IF c3.ann_tsi_amt = 0
                  THEN
                     v_ann_dist_spct := 0;
                  ELSE
                     v_ann_dist_spct :=
                             ROUND (c2.ann_dist_tsi / c3.ann_tsi_amt, 9)
                             * 100;
                  END IF;

                  INSERT INTO giuw_witemds_dtl
                              (dist_no, dist_seq_no, item_no,
                               line_cd, share_cd, dist_spct,
                               dist_tsi, dist_prem, ann_dist_spct,
                               ann_dist_tsi, dist_grp
                              )
                       VALUES (p_dist_no, p_dist_seq_no, c3.item_no,
                               c1.line_cd, c1.share_cd, v_dist_spct,
                               c2.dist_tsi, c2.dist_prem, v_ann_dist_spct,
                               c2.ann_dist_tsi, c1.dist_grp
                              );
               END LOOP;

               EXIT;
            END LOOP;
         END LOOP;
      END IF;
   END;

   PROCEDURE create_peril_dflt_dist (
      p_dist_no           IN   giuw_wpolicyds.dist_no%TYPE,
      p_dist_seq_no       IN   giuw_wpolicyds.dist_seq_no%TYPE,
      p_dist_flag         IN   giuw_wpolicyds.dist_flag%TYPE,
      p_policy_tsi        IN   giuw_wpolicyds.tsi_amt%TYPE,
      p_policy_premium    IN   giuw_wpolicyds.prem_amt%TYPE,
      p_policy_ann_tsi    IN   giuw_wpolicyds.ann_tsi_amt%TYPE,
      p_item_grp          IN   giuw_wpolicyds.item_grp%TYPE,
      p_line_cd           IN   giis_line.line_cd%TYPE,
      p_default_no        IN   giis_default_dist.default_no%TYPE,
      p_default_type      IN   giis_default_dist.default_type%TYPE,
      p_dflt_netret_pct   IN   giis_default_dist.dflt_netret_pct%TYPE,
      p_currency_rt       IN   gipi_witem.currency_rt%TYPE,
      p_par_id            IN   gipi_parlist.par_id%TYPE,
      p_pol_flag          IN   gipi_wpolbas.pol_flag%TYPE,
      p_par_type          IN   gipi_parlist.par_type%TYPE
   )
   IS
      v_peril_cd        giis_peril.peril_cd%TYPE;
      v_peril_tsi       giuw_wperilds.tsi_amt%TYPE       := 0;
      v_peril_premium   giuw_wperilds.prem_amt%TYPE      := 0;
      v_peril_ann_tsi   giuw_wperilds.ann_tsi_amt%TYPE   := 0;
      v_exist           VARCHAR2 (1)                     := 'N';
      v_insert_sw       VARCHAR2 (1)                     := 'N';

      /* Updates the amounts of the previously processed PERIL_CD
      ** while looping inside cursor C3.  After which, the records
      ** for table GIUW_WPERILDS_DTL are also created.
      ** NOTE:  This is a LOCAL PROCEDURE BODY called below. */
      PROCEDURE upd_create_wperil_dtl_data
      IS
      BEGIN
         UPDATE giuw_wperilds
            SET tsi_amt = v_peril_tsi,
                prem_amt = v_peril_premium,
                ann_tsi_amt = v_peril_ann_tsi
          WHERE peril_cd = v_peril_cd
            AND line_cd = p_line_cd
            AND dist_seq_no = p_dist_seq_no
            AND dist_no = p_dist_no;

         giuw_pol_dist_pkg.create_peril_dflt_wperilds (p_dist_no,
                                                       p_dist_seq_no,
                                                       p_line_cd,
                                                       v_peril_cd,
                                                       v_peril_tsi,
                                                       v_peril_premium,
                                                       v_peril_ann_tsi,
                                                       p_currency_rt,
                                                       p_default_no,
                                                       p_default_type,
                                                       p_dflt_netret_pct,
                                                       p_pol_flag,
                                                       p_par_id,
                                                       p_par_type
                                                      );
      END;
   BEGIN
      --msg_alert(:b240.par_type||' - '||variables.v_pol_flag,'I',FALSE);
      /* Create records in table GIUW_WPOLICYDS and GIUW_WPOLICYDS_DTL
      ** for the specified DIST_SEQ_NO. */
      INSERT INTO giuw_wpolicyds
                  (dist_no, dist_seq_no, dist_flag, tsi_amt,
                   prem_amt, ann_tsi_amt, item_grp
                  )
           VALUES (p_dist_no, p_dist_seq_no, p_dist_flag, p_policy_tsi,
                   p_policy_premium, p_policy_ann_tsi, p_item_grp
                  );

      /* Get the amounts for each item in table GIPI_WITEM in preparation
      ** for data insertion to its corresponding distribution tables. */
      FOR c2 IN (SELECT a.item_no, a.tsi_amt, a.prem_amt, a.ann_tsi_amt
                   FROM gipi_witem a
                  WHERE EXISTS (
                           SELECT '1'
                             FROM gipi_witmperl b
                            WHERE b.par_id = a.par_id
                                  AND b.item_no = a.item_no)
                    AND a.item_grp = p_item_grp
                    AND a.par_id = p_par_id)
      LOOP
         /* Create records in table GIUW_WITEMDS and GIUW_WITEMDS_DTL
         ** for the specified DIST_SEQ_NO. */
         INSERT INTO giuw_witemds
                     (dist_no, dist_seq_no, item_no, tsi_amt,
                      prem_amt, ann_tsi_amt
                     )
              VALUES (p_dist_no, p_dist_seq_no, c2.item_no, c2.tsi_amt,
                      c2.prem_amt, c2.ann_tsi_amt
                     );
      END LOOP;

      /* Initialize the value of the variables
      ** in preparation for processing the new
      ** DIST_SEQ_NO. */
      v_peril_cd := NULL;
      v_peril_tsi := 0;
      v_peril_premium := 0;
      v_peril_ann_tsi := 0;
      v_exist := 'N';

      /* Get the amounts for each combination of the ITEM_NO and the PERIL_CD
      ** in table GIPI_WITMPERL in preparation for data insertion to
      ** distribution tables GIUW_WITEMPERILDS, GIUW_WITEMPERILDS_DTL,
      ** GIUW_WPERILDS and GIUW_WPERILDS_DTL. */
      FOR c3 IN (SELECT   b490.tsi_amt itmperil_tsi,
                          b490.prem_amt itmperil_premium,
                          b490.ann_tsi_amt itmperil_ann_tsi,
                          b490.item_no item_no, b490.peril_cd peril_cd
                     FROM gipi_witmperl b490, gipi_witem b480
                    WHERE b490.item_no = b480.item_no
                      AND b490.par_id = b480.par_id
                      AND b480.item_grp = p_item_grp
                      AND b480.par_id = p_par_id
                 ORDER BY b490.peril_cd)
      LOOP
         v_exist := 'Y';

         /* Create records in table GIUW_WITEMPERILDS and GIUW_WITEMPERILDS_DTL
         ** for the specified DIST_SEQ_NO. */
         INSERT INTO giuw_witemperilds
                     (dist_no, dist_seq_no, item_no, peril_cd,
                      line_cd, tsi_amt, prem_amt,
                      ann_tsi_amt
                     )
              VALUES (p_dist_no, p_dist_seq_no, c3.item_no, c3.peril_cd,
                      p_line_cd, c3.itmperil_tsi, c3.itmperil_premium,
                      c3.itmperil_ann_tsi
                     );

         /* Create the newly processed PERIL_CD in table
         ** GIUW_WPERILDS. */
         IF v_peril_cd IS NULL
         THEN
            v_peril_cd := c3.peril_cd;
            v_insert_sw := 'Y';
         END IF;

         /* Check if the value of the previously processed
         ** PERIL_CD is equal to the one currently processed.
         ** Should the two be unequal, then the amounts of
         ** the previously processed PERIL_CD must be updated
         ** to reflect the true value of each field for the
         ** specified PERIL_CD.  After the amounts of the specified
         ** PERIL_CD have been updated, then that's the time to
         ** create the records in table GIUW_WPERILDS_DTL.
         ** On the other hand, if the value of the two PERIL_CDs
         ** are equal, then the amounts of the currently processed
         ** record is added along with the amounts of the previously
         ** processed records of the same PERIL_CD.  Such amounts
         ** shall be used later on when the two PERIL_CDs become
         ** unequal. */
         IF v_peril_cd != c3.peril_cd
         THEN
            /* Updates the amounts of the previously processed PERIL_CD.
            ** After which, the records for table GIUW_WPERILDS_DTL are
            ** also created. */
            upd_create_wperil_dtl_data;
            /* Assigns the new PERIL_CD to the V_PERIL_CD
            ** variable in preparation for data creation
            ** in table GIUW_WPERILDS. */
            v_peril_cd := c3.peril_cd;
            v_peril_tsi := c3.itmperil_tsi;
            v_peril_premium := c3.itmperil_premium;
            v_peril_ann_tsi := c3.itmperil_ann_tsi;
            v_insert_sw := 'Y';
         ELSIF v_peril_cd = c3.peril_cd
         THEN
            v_peril_tsi := v_peril_tsi + c3.itmperil_tsi;
            v_peril_premium := v_peril_premium + c3.itmperil_premium;
            v_peril_ann_tsi := v_peril_ann_tsi + c3.itmperil_ann_tsi;
         END IF;

         IF v_insert_sw = 'Y'
         THEN
            INSERT INTO giuw_wperilds
                        (dist_no, dist_seq_no, peril_cd, line_cd,
                         tsi_amt, prem_amt, ann_tsi_amt
                        )
                 VALUES (p_dist_no, p_dist_seq_no, v_peril_cd, p_line_cd,
                         v_peril_tsi, v_peril_premium, v_peril_ann_tsi
                        );

            v_insert_sw := 'N';
         END IF;
      END LOOP;

      IF v_exist = 'Y'
      THEN
         /* Updates the amounts of the last processed PERIL_CD.
         ** After which, its corresponding records for table
         ** GIUW_WPERILDS_DTL are also created.
         ** NOTE:  This was done so, because the last processed
         **        PERIL_CD is no longer handled by the C3 loop. */
         upd_create_wperil_dtl_data;
      END IF;

      /* Create records in table GIUW_WITEMDS_DTL based on
      ** the values inserted to table GIUW_WITEMPERILDS_DTL. */
      giuw_pol_dist_pkg.create_peril_dflt_witemds (p_dist_no,
                                                   p_dist_seq_no,
                                                   p_pol_flag,
                                                   p_par_id,
                                                   p_par_type
                                                  );
      /* Create records in table GIUW_WPOLICYDS_DTL based on
      ** the values inserted to table GIUW_WITEMDS_DTL. */
      create_peril_dflt_wpolicyds (p_dist_no, p_dist_seq_no);
      giuw_pol_dist_pkg.update_dtls_no_share_cd2 (p_dist_no,
                                                  p_dist_seq_no,
                                                  p_line_cd
                                                 );
   END;

   PROCEDURE create_grp_dflt_dist2 (
      p_dist_no          IN       giuw_wpolicyds.dist_no%TYPE,
      p_dist_seq_no      IN       giuw_wpolicyds.dist_seq_no%TYPE,
      p_dist_flag        IN       giuw_wpolicyds.dist_flag%TYPE,
      p_policy_tsi       IN       giuw_wpolicyds.tsi_amt%TYPE,
      p_policy_premium   IN       giuw_wpolicyds.prem_amt%TYPE,
      p_policy_ann_tsi   IN       giuw_wpolicyds.ann_tsi_amt%TYPE,
      p_item_grp         IN       giuw_wpolicyds.item_grp%TYPE,
      p_line_cd          IN       giis_line.line_cd%TYPE,
      p_rg_count         IN OUT   NUMBER,
      p_default_type     IN       giis_default_dist.default_type%TYPE,
      p_currency_rt      IN       gipi_witem.currency_rt%TYPE,
      p_par_id           IN       gipi_parlist.par_id%TYPE,
      p_pol_flag         IN       gipi_wpolbas.pol_flag%TYPE,
      p_par_type         IN       gipi_parlist.par_type%TYPE,
      p_default_no       IN       giis_default_dist.default_no%TYPE,
      p_takeup_seq_no    IN       giuw_pol_dist.takeup_seq_no%TYPE
   )
   IS
      v_peril_cd          giis_peril.peril_cd%TYPE;
      v_peril_tsi         giuw_wperilds.tsi_amt%TYPE        := 0;
      v_peril_premium     giuw_wperilds.prem_amt%TYPE       := 0;
      v_peril_ann_tsi     giuw_wperilds.ann_tsi_amt%TYPE    := 0;
      v_exist             VARCHAR2 (1)                      := 'N';
      v_insert_sw         VARCHAR2 (1)                      := 'N';
      dist_cnt            NUMBER                            := 0;
      dist_max            giuw_pol_dist.dist_no%TYPE;
      p2_policy_tsi       giuw_wpolicyds.tsi_amt%TYPE
                                                     := NVL (p_policy_tsi, 0);
      p2_policy_premium   giuw_wpolicyds.prem_amt%TYPE
                                                 := NVL (p_policy_premium, 0);
      p2_policy_ann_tsi   giuw_wpolicyds.ann_tsi_amt%TYPE
                                                 := NVL (p_policy_ann_tsi, 0);
      v_tsi_amt           gipi_witmperl.tsi_amt%TYPE;
      v_prem_amt          gipi_witmperl.prem_amt%TYPE;
      v_ann_tsi_amt       gipi_witmperl.ann_tsi_amt%TYPE;
      v_item_no           giuw_witemds.item_no%TYPE;

      /* Updates the amounts of the previously processed PERIL_CD
      ** while looping inside cursor C3.  After which, the records
      ** for table GIUW_WPERILDS_DTL are also created.
      ** NOTE:  This is a LOCAL PROCEDURE BODY called below. */
      PROCEDURE upd_create_wperil_dtl_data
      IS
      BEGIN
         UPDATE giuw_wperilds
            SET tsi_amt = v_peril_tsi,
                prem_amt = v_peril_premium,
                ann_tsi_amt = v_peril_ann_tsi
          WHERE peril_cd = v_peril_cd
            AND line_cd = p_line_cd
            AND dist_seq_no = p_dist_seq_no
            AND dist_no = p_dist_no;

         giuw_pol_dist_pkg.create_grp_dflt_wperilds2 (p_dist_no,
                                                      p_dist_seq_no,
                                                      p_line_cd,
                                                      v_peril_cd,
                                                      v_peril_tsi,
                                                      v_peril_premium,
                                                      v_peril_ann_tsi,
                                                      p_rg_count,
                                                      p_pol_flag,
                                                      p_par_id,
                                                      p_par_type,
                                                      p_default_no
                                                     );
      END;
   BEGIN
      SELECT COUNT (dist_no), MAX (dist_no)
        INTO dist_cnt, dist_max
        FROM giuw_pol_dist
       WHERE par_id = p_par_id AND item_grp = NVL (p_item_grp, p_item_grp);

      IF dist_cnt = 0 AND dist_max IS NULL
      THEN
         BEGIN
            SELECT COUNT (dist_no), MAX (dist_no)
              INTO dist_cnt, dist_max
              FROM giuw_pol_dist
             WHERE par_id = p_par_id AND item_grp IS NULL;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               NULL;
         END;
      END IF;

      IF p_dist_no = dist_max
      THEN
         -- jhing 04.07.2016 republicfullweb sr# 21797 
         -- commented out, code in calc_prem_dep may lead to erroneous premium amt. 
         -- amounts in DS tables should be based on gipi_witmperl. Depreciation of 
         -- premium is already handled in renewal processing
         
--         FOR x IN
--            (SELECT SUM
--                       (NVL
--                           (DECODE (c.peril_type, 'B', a.tsi_amt, 0), 0)
--/*beth- (ROUND((NVL(DECODE(c.peril_type,'B',a.tsi_amt,0),0)/dist_cnt),2) * (dist_cnt - 1))*/
--                       ) tsi_amt,
--                    
--                    --SUM(NVL(a.prem_amt,0) - (ROUND((NVL(a.prem_amt,0)/dist_cnt),2) * (dist_cnt - 1))) prem_amt, -- MILDRED commented 03172010 for prem dep enh
--                    SUM (calc_prem_dep (p_par_id,
--                                        p_line_cd,
--                                        a.peril_cd,
--                                        dist_cnt,
--                                        dist_cnt,
--                                        NVL (a.prem_amt, 0)
--                                       )
--                        ) prem_amt,
--                    
--                    -- mildred 03172010 for prem dep enhancement
--                    SUM
--                       (NVL
--                           (DECODE (c.peril_type, 'B', a.ann_tsi_amt, 0), 0)
--/*beth- (ROUND((NVL(DECODE(c.peril_type,'B',a.ann_tsi_amt,0),0)/dist_cnt),2) * (dist_cnt - 1))*/
--                       ) ann_tsi_amt
--               FROM gipi_witmperl a, gipi_witem b, giis_peril c
--              WHERE a.par_id = b.par_id
--                AND a.item_no = b.item_no
--                AND a.par_id = p_par_id
--                AND b.item_grp = NVL (p_item_grp, p_item_grp)
--                AND a.peril_cd = c.peril_cd
--                AND c.line_cd = p_line_cd)
         FOR x IN (SELECT SUM (NVL (DECODE (c.peril_type, 'B', a.tsi_amt, 0), 0)) tsi_amt,
                                   SUM(NVL(a.prem_amt,0) - (ROUND((NVL(a.prem_amt,0)/dist_cnt),2) * (dist_cnt - 1)))  prem_amt,
                                   SUM (NVL (DECODE (c.peril_type, 'B', a.ann_tsi_amt, 0), 0))
                                      ann_tsi_amt
                              FROM gipi_witmperl a, gipi_witem b, giis_peril c
                             WHERE     a.par_id = b.par_id
                                   AND a.item_no = b.item_no
                                   AND a.par_id = p_par_id
                                   AND b.item_grp = NVL (p_item_grp, p_item_grp)
                                   AND a.peril_cd = c.peril_cd
                                   AND c.line_cd = p_line_cd)
         LOOP
            v_tsi_amt := x.tsi_amt;
            v_prem_amt := x.prem_amt;
            v_ann_tsi_amt := x.ann_tsi_amt;
         END LOOP;
      ELSE
      
         -- jhing 04.07.2016 republicfullweb sr# 21797 
         -- commented out, code in calc_prem_dep may lead to erroneous premium amt. 
         -- amounts in DS tables should be based on gipi_witmperl. Depreciation of 
         -- premium is already handled in renewal processing      
      
--         FOR x IN
--            (SELECT SUM
--                       (ROUND ((NVL (DECODE (c.peril_type, 'B', a.tsi_amt, 0),
--                                     0
--                                    )                        /*beth/dist_cnt*/
--                               ),
--                               2
--                              )
--                       ) tsi_amt,
--                    
--                    --SUM(ROUND((NVL(a.prem_amt,0)/dist_cnt),2)) prem_amt, -- MILDRED commented 03172010 for prem dep enh
--                    SUM (calc_prem_dep (p_par_id,
--                                        p_line_cd,
--                                        a.peril_cd,
--                                        dist_cnt,
--                                        p_takeup_seq_no,
--                                        NVL (a.prem_amt, 0)
--                                       )
--                        ) prem_amt,
--                    
--                    -- mildred 03172010 for prem dep enhancement
--                    SUM
--                       (ROUND ((NVL (DECODE (c.peril_type,
--                                             'B', a.ann_tsi_amt,
--                                             0
--                                            ),
--                                     0
--                                    )                        /*beth/dist_cnt*/
--                               ),
--                               2
--                              )
--                       ) ann_tsi_amt
--               FROM gipi_witmperl a, gipi_witem b, giis_peril c
--              WHERE a.par_id = b.par_id
--                AND a.item_no = b.item_no
--                AND a.par_id = p_par_id
--                AND b.item_grp = NVL (p_item_grp, p_item_grp)
--                AND a.peril_cd = c.peril_cd
--                AND c.line_cd = p_line_cd)
         FOR x IN (SELECT SUM (ROUND ( (NVL (DECODE (c.peril_type, 'B', a.tsi_amt, 0), 0)), 2))
                              tsi_amt,
                           SUM (ROUND ( (NVL (a.prem_amt, 0) / dist_cnt), 2)) prem_amt,
                           SUM (
                              ROUND ( (NVL (DECODE (c.peril_type, 'B', a.ann_tsi_amt, 0), 0)), 2))
                              ann_tsi_amt
                      FROM gipi_witmperl a, gipi_witem b, giis_peril c
                     WHERE     a.par_id = b.par_id
                           AND a.item_no = b.item_no
                           AND a.par_id = p_par_id
                           AND b.item_grp = NVL (p_item_grp, p_item_grp)
                           AND a.peril_cd = c.peril_cd
                           AND c.line_cd = p_line_cd  )
         LOOP
            v_tsi_amt := x.tsi_amt;
            v_prem_amt := x.prem_amt;
            v_ann_tsi_amt := x.ann_tsi_amt;
         END LOOP;
      END IF;

        /* IF p_dist_no = dist_max THEN
                p2_policy_tsi         := NVL(p2_policy_tsi,0) - (ROUND((NVL(p2_policy_tsi,0)/dist_cnt),2) * (dist_cnt - 1));
                p2_policy_premium    := NVL(p2_policy_premium,0) - (ROUND((NVL(p2_policy_premium,0)/dist_cnt),2) * (dist_cnt - 1));
                p2_policy_ann_tsi     := NVL(p2_policy_ann_tsi,0) - (ROUND((NVL(p2_policy_ann_tsi,0)/dist_cnt),2) * (dist_cnt - 1));
            ELSE
                p2_policy_tsi         := p2_policy_tsi/ dist_cnt;
                p2_policy_premium     := p2_policy_premium / dist_cnt;
                p2_policy_ann_tsi     := p2_policy_ann_tsi / dist_cnt;
            END IF;
      */
        /* Create records in table GIUW_WPOLICYDS and GIUW_WPOLICYDS_DTL
        ** for the specified DIST_SEQ_NO. */
      INSERT INTO giuw_wpolicyds
                  (dist_no, dist_seq_no, dist_flag, tsi_amt,
                   prem_amt, ann_tsi_amt, item_grp
                  )
           VALUES (p_dist_no, p_dist_seq_no, p_dist_flag,
                                                         --p2_policy_tsi , p2_policy_premium , p2_policy_ann_tsi ,
                                                         v_tsi_amt,
                   v_prem_amt, v_ann_tsi_amt, p_item_grp
                  );


         -- jhing 04.07.2016 republicfullweb sr# 21797 
         -- commented out, create the distribution DS tables first before distributing
         -- the DTL tables to ensure adjustments can still be made for long term. Create the 
         -- giuw_witemperilds and then create the other tables ( giuw_witemds and giuw_wperilds ) 
         -- based on giuw_witemperilds and then adjust giuw_wpolicyds based on giuw_witemperilds         
         
                    
--      giuw_pol_dist_pkg.create_grp_dflt_wpolicyds2 (p_dist_no,
--                                                    p_dist_seq_no,
--                                                    p_line_cd,
--                                                    --p2_policy_tsi , p2_policy_premium , p2_policy_ann_tsi ,
--                                                    v_tsi_amt,
--                                                    v_prem_amt,
--                                                    v_ann_tsi_amt,
--                                                    p_rg_count,
--                                                    p_default_type,
--                                                    p_currency_rt,
--                                                    p_par_id,
--                                                    p_item_grp,
--                                                    p_pol_flag,
--                                                    p_par_type,
--                                       p_default_no
--                                                   );

--      /* Get the amounts for each item in table GIPI_WITEM in preparation
--      ** for data insertion to its corresponding distribution tables. */
--      FOR c2 IN (SELECT a.item_no, a.tsi_amt, a.prem_amt, a.ann_tsi_amt
--                   FROM gipi_witem a
--                  WHERE EXISTS (
--                           SELECT '1'
--                             FROM gipi_witmperl b
--                            WHERE b.par_id = a.par_id
--                                  AND b.item_no = a.item_no)
--                    AND a.item_grp = p_item_grp
--                    AND a.par_id = p_par_id)
--      LOOP
--         IF p_dist_no = dist_max
--         THEN
--            FOR x IN
--               (SELECT SUM
--                          (NVL
--                              (DECODE (c.peril_type, 'B', a.tsi_amt, 0), 0)
--/*beth - (ROUND((NVL(DECODE(c.peril_type,'B',a.tsi_amt,0),0)/dist_cnt),2) * (dist_cnt - 1))*/
--                          ) tsi_amt,
--                       
--                       --SUM(NVL(a.prem_amt,0) - (ROUND((NVL(a.prem_amt,0)/dist_cnt),2) * (dist_cnt - 1))) prem_amt,  -- MILDRED commented 03172010 for prem dep enh
--                       SUM (calc_prem_dep (p_par_id,
--                                           p_line_cd,
--                                           a.peril_cd,
--                                           dist_cnt,
--                                           dist_cnt,
--                                           NVL (a.prem_amt, 0)
--                                          )
--                           ) prem_amt,
--                       
--                       -- mildred 03172010 for prem dep enhancement
--                       SUM
--                          (NVL
--                              (DECODE (c.peril_type, 'B', a.ann_tsi_amt, 0),
--                               0)
--/*beth- (ROUND((NVL(DECODE(c.peril_type,'B',a.ann_tsi_amt,0),0)/dist_cnt),2) * (dist_cnt - 1))*/
--                          ) ann_tsi_amt
--                  FROM gipi_witmperl a, gipi_witem b, giis_peril c
--                 WHERE a.par_id = b.par_id
--                   AND a.item_no = b.item_no
--                   AND a.par_id = p_par_id
--                   AND b.item_no = c2.item_no
--                   AND a.peril_cd = c.peril_cd
--                   AND c.line_cd = p_line_cd)
--            LOOP
--               c2.tsi_amt := x.tsi_amt;
----NVL(c2.tsi_amt,0) - (ROUND((NVL(c2.tsi_amt,0)/dist_cnt),2) * (dist_cnt - 1));
--               c2.prem_amt := x.prem_amt;
----NVL(c2.prem_amt,0) - (ROUND((NVL(c2.prem_amt,0)/dist_cnt),2) * (dist_cnt - 1));
--               c2.ann_tsi_amt := x.ann_tsi_amt;
----NVL(c2.ann_tsi_amt,0) - (ROUND((NVL(c2.ann_tsi_amt,0)/dist_cnt),2) * (dist_cnt - 1));
--            END LOOP;
--         ELSE
--            FOR x IN
--               (SELECT SUM
--                          (ROUND
--                               ((NVL (DECODE (c.peril_type,
--                                              'B', a.tsi_amt,
--                                              0
--                                             ),
--                                      0
--                                     )                       /*beth/dist_cnt*/
--                                ),
--                                2
--                               )
--                          ) tsi_amt,
--                       
--                       --SUM(ROUND((NVL(a.prem_amt,0)/dist_cnt),2)) prem_amt,  -- MILDRED commented 03172010 for prem dep enh
--                       SUM (calc_prem_dep (p_par_id,
--                                           p_line_cd,
--                                           a.peril_cd,
--                                           dist_cnt,
--                                           p_takeup_seq_no,
--                                           NVL (a.prem_amt, 0)
--                                          )
--                           ) prem_amt,
--                       
--                       -- mildred 03172010 for prem dep enhancement
--                       SUM
--                          (ROUND
--                              ((NVL (DECODE (c.peril_type,
--                                             'B', a.ann_tsi_amt,
--                                             0
--                                            ),
--                                     0
--                                    )                        /*beth/dist_cnt*/
--                               ),
--                               2
--                              )
--                          ) ann_tsi_amt
--                  FROM gipi_witmperl a, gipi_witem b, giis_peril c
--                 WHERE a.par_id = b.par_id
--                   AND a.item_no = b.item_no
--                   AND a.par_id = p_par_id
--                   AND a.item_no = c2.item_no
--                   AND a.peril_cd = c.peril_cd
--                   AND c.line_cd = p_line_cd)
--            LOOP
--               c2.tsi_amt := x.tsi_amt;
----NVL(c2.tsi_amt,0) - (ROUND((NVL(c2.tsi_amt,0)/dist_cnt),2) * (dist_cnt - 1));
--               c2.prem_amt := x.prem_amt;
----NVL(c2.prem_amt,0) - (ROUND((NVL(c2.prem_amt,0)/dist_cnt),2) * (dist_cnt - 1));
--               c2.ann_tsi_amt := x.ann_tsi_amt;
----NVL(c2.ann_tsi_amt,0) - (ROUND((NVL(c2.ann_tsi_amt,0)/dist_cnt),2) * (dist_cnt - 1));
--            END LOOP;
--         END IF;
--
--               /* Create records in table GIUW_WITEMDS and GIUW_WITEMDS_DTL
--         ** for the specified DIST_SEQ_NO. */
--         INSERT INTO giuw_witemds
--                     (dist_no, dist_seq_no, item_no, tsi_amt,
--                      prem_amt, ann_tsi_amt
--                     )
--              VALUES (p_dist_no, p_dist_seq_no, c2.item_no, c2.tsi_amt,
--                      c2.prem_amt, c2.ann_tsi_amt
--                     );
--
--         giuw_pol_dist_pkg.create_grp_dflt_witemds2 (p_dist_no,
--                                                     p_dist_seq_no,
--                                                     c2.item_no,
--                                                     p_line_cd,
--                                                     c2.tsi_amt,
--                                                     c2.prem_amt,
--                                                     c2.ann_tsi_amt,
--                                                     p_rg_count,
--                                                     p_pol_flag,
--                                                     p_par_id,
--                                                     p_par_type,
--                                        p_default_no
--                                                    );
--      END LOOP;
--
--      /* Initialize the value of the variables
--      ** in preparation for processing the new
--      ** DIST_SEQ_NO. */
--      v_peril_cd := NULL;
--      v_peril_tsi := 0;
--      v_peril_premium := 0;
--      v_peril_ann_tsi := 0;
--      v_exist := 'N';
--      v_item_no := NULL;
--
--      /* Get the amounts for each combination of the ITEM_NO and the PERIL_CD
--      ** in table GIPI_WITMPERL in preparation for data insertion to
--      ** distribution tables GIUW_WITEMPERILDS, GIUW_WITEMPERILDS_DTL,
--      ** GIUW_WPERILDS and GIUW_WPERILDS_DTL. */
--      FOR c3 IN (SELECT   b490.tsi_amt itmperil_tsi,
--                          b490.prem_amt itmperil_premium,
--                          b490.ann_tsi_amt itmperil_ann_tsi,
--                          b490.item_no item_no, b490.peril_cd peril_cd
--                     FROM gipi_witmperl b490, gipi_witem b480
--                    WHERE b490.item_no = b480.item_no
--                      AND b490.par_id = b480.par_id
--                      AND b480.item_grp = p_item_grp
--                      AND b480.par_id = p_par_id
--                 ORDER BY b490.peril_cd)
--      LOOP
--         v_exist := 'Y';
--
--/* Create records in table GIUW_WITEMPERILDS and GIUW_WITEMPERILDS_DTL
--** for the specified DIST_SEQ_NO. */---------------------------------------
--         IF p_dist_no = dist_max
--         THEN
--            v_tsi_amt :=
--               NVL
--                  (c3.itmperil_tsi, 0) /*beth- (ROUND((NVL(c3.itmperil_tsi,0)/dist_cnt),2) * (dist_cnt - 1))*/;
--            --v_prem_amt   := NVL(c3.itmperil_premium,0) - (ROUND((NVL(c3.itmperil_premium,0)/dist_cnt),2) * (dist_cnt - 1));  -- MILDRED commented 03172010 for prem dep enh
--            v_prem_amt :=
--               calc_prem_dep (p_par_id,
--                              p_line_cd,
--                              c3.peril_cd,
--                              dist_cnt,
--                              dist_cnt,
--                              NVL (c3.itmperil_premium, 0)
--                             );                             --mildred 03172010
--            v_ann_tsi_amt :=
--               NVL
--                  (c3.itmperil_ann_tsi, 0) /*beth- (ROUND((NVL(c3.itmperil_ann_tsi,0)/dist_cnt),2) * (dist_cnt - 1))*/;
--         ELSE
--            v_tsi_amt :=
--                      ROUND ((NVL (c3.itmperil_tsi, 0) /*beth/dist_cnt*/), 2);
--            --v_prem_amt   := ROUND((NVL(c3.itmperil_premium,0)/dist_cnt),2);  -- MILDRED commented 03172010 for prem dep enh
--            v_prem_amt :=
--               calc_prem_dep (p_par_id,
--                              p_line_cd,
--                              c3.peril_cd,
--                              dist_cnt,
--                              p_takeup_seq_no,
--                              NVL (c3.itmperil_premium, 0)
--                             );            --mildred 03172010 for prem dep enh
--            v_ann_tsi_amt :=
--                   ROUND ((NVL (c3.itmperil_ann_tsi, 0) /*beth/dist_cnt*/), 2);
--         END IF;
--
--         INSERT INTO giuw_witemperilds
--                     (dist_no, dist_seq_no, item_no, peril_cd,
--                      line_cd, tsi_amt, prem_amt, ann_tsi_amt
--                     )
--              VALUES (p_dist_no, p_dist_seq_no, c3.item_no, c3.peril_cd,
--                      p_line_cd, v_tsi_amt, v_prem_amt, v_ann_tsi_amt
--                     );
--
--         giuw_pol_dist_pkg.create_grp_dflt_witemperilds2 (p_dist_no,
--                                                          p_dist_seq_no,
--                                                          c3.item_no,
--                                                          p_line_cd,
--                                                          c3.peril_cd,
--                                                          v_tsi_amt,
--                                                          v_prem_amt,
--                                                          v_ann_tsi_amt,
--                                                          p_rg_count,
--                                                          p_pol_flag,
--                                                          p_par_id,
--                                                          p_par_type,
--                                            p_default_no
--                                                         );
--      END LOOP;
--
----------------------------------------------------------------------------------
--      /* Create the newly processed PERIL_CD in table
--      ** GIUW_WPERILDS. */
--      FOR c4 IN (SELECT   SUM (b490.tsi_amt) itmperil_tsi,
--                          SUM (b490.prem_amt) itmperil_premium,
--                          SUM (b490.ann_tsi_amt) itmperil_ann_tsi,
--                          
--                          --B490.item_no     item_no          ,
--                          b490.peril_cd peril_cd
--                     FROM gipi_witmperl b490, gipi_witem b480
--                    WHERE b490.item_no = b480.item_no
--                      AND b490.par_id = b480.par_id
--                      AND b480.item_grp = p_item_grp
--                      AND b480.par_id = p_par_id
--                 GROUP BY b490.peril_cd)
--      LOOP
--         --msg_alert('giuw_wperilds','I',FALSE);
--         IF p_dist_no = dist_max
--         THEN
--            c4.itmperil_tsi :=
--               NVL
--                  (c4.itmperil_tsi, 0) /*beth- (ROUND((NVL(c4.itmperil_tsi,0)/dist_cnt),2) * (dist_cnt - 1))*/;
--            --c4.itmperil_premium  := NVL(c4.itmperil_premium,0) - (ROUND((NVL(c4.itmperil_premium,0)/dist_cnt),2) * (dist_cnt - 1));  -- MILDRED commented 03172010 for prem dep enh
--            c4.itmperil_premium :=
--               calc_prem_dep (p_par_id,
--                              p_line_cd,
--                              c4.peril_cd,
--                              dist_cnt,
--                              dist_cnt,
--                              NVL (c4.itmperil_premium, 0)
--                             );                             --mildred 03172010
--            c4.itmperil_ann_tsi :=
--               NVL
--                  (c4.itmperil_ann_tsi, 0) /*beth- (ROUND((NVL(c4.itmperil_ann_tsi,0)/dist_cnt),2) * (dist_cnt - 1))*/;
--         ELSE
--            c4.itmperil_tsi := c4.itmperil_tsi /*beth/ dist_cnt*/;
--            --c4.itmperil_premium  := c4.itmperil_premium / dist_cnt;  -- MILDRED commented 03172010 for prem dep enh
--            c4.itmperil_premium :=
--               calc_prem_dep (p_par_id,
--                              p_line_cd,
--                              c4.peril_cd,
--                              dist_cnt,
--                              p_takeup_seq_no,
--                              NVL (c4.itmperil_premium, 0)
--                             );            --mildred 03172010 for prem dep enh
--            c4.itmperil_ann_tsi := c4.itmperil_ann_tsi /*beth/ dist_cnt*/;
--         END IF;
--
--         INSERT INTO giuw_wperilds
--                     (dist_no, dist_seq_no, peril_cd, line_cd,
--                      tsi_amt, prem_amt,
--                      ann_tsi_amt
--                     )
--              VALUES (p_dist_no, p_dist_seq_no, c4.peril_cd, p_line_cd,
--                      c4.itmperil_tsi, c4.itmperil_premium,
--                      c4.itmperil_ann_tsi
--                     );
--
--         v_peril_cd := c4.peril_cd;
--         v_peril_tsi := c4.itmperil_tsi;
--         v_peril_premium := c4.itmperil_premium;
--         v_peril_ann_tsi := c4.itmperil_ann_tsi;
--         upd_create_wperil_dtl_data;
--      END LOOP;
--
--      giuw_pol_dist_pkg.update_dtls_no_share_cd2 (p_dist_no,
--                                                  p_dist_seq_no,
--                                                  p_line_cd
--                                                 );


     -- jhing 04.07.2016 populate giuw_witemds   
      IF p_dist_no = dist_max
      THEN
         FOR x IN (SELECT SUM (NVL (DECODE (c.peril_type, 'B', a.tsi_amt, 0), 0)) tsi_amt,
                                   SUM(NVL(a.prem_amt,0) - (ROUND((NVL(a.prem_amt,0)/dist_cnt),2) * (dist_cnt - 1)))  prem_amt,
                                   SUM (NVL (DECODE (c.peril_type, 'B', a.ann_tsi_amt, 0), 0))
                                      ann_tsi_amt , a.item_no 
                              FROM gipi_witmperl a, gipi_witem b, giis_peril c
                             WHERE     a.par_id = b.par_id
                                   AND a.item_no = b.item_no
                                   AND a.par_id = p_par_id
                                   AND b.item_grp = NVL (p_item_grp, p_item_grp)
                                   AND a.peril_cd = c.peril_cd
                                   AND c.line_cd = p_line_cd
                                   GROUP BY a.item_no
                                   ORDER BY a.item_no )
         LOOP
            v_tsi_amt := x.tsi_amt;
            v_prem_amt := x.prem_amt;
            v_ann_tsi_amt := x.ann_tsi_amt;
            
           INSERT INTO giuw_witemds
                     (dist_no, dist_seq_no, item_no, tsi_amt,
                      prem_amt, ann_tsi_amt
                     )
              VALUES (p_dist_no, p_dist_seq_no, x.item_no, x.tsi_amt,
                      x.prem_amt, x.ann_tsi_amt
                     );            
            
         END LOOP;
      ELSE
         FOR x IN (SELECT SUM (ROUND ( (NVL (DECODE (c.peril_type, 'B', a.tsi_amt, 0), 0)), 2))
                              tsi_amt,
                           SUM (ROUND ( (NVL (a.prem_amt, 0) / dist_cnt), 2)) prem_amt,
                           SUM (
                              ROUND ( (NVL (DECODE (c.peril_type, 'B', a.ann_tsi_amt, 0), 0)), 2))
                              ann_tsi_amt , a.item_no 
                      FROM gipi_witmperl a, gipi_witem b, giis_peril c
                     WHERE     a.par_id = b.par_id
                           AND a.item_no = b.item_no
                           AND a.par_id = p_par_id
                           AND b.item_grp = NVL (p_item_grp, p_item_grp)
                           AND a.peril_cd = c.peril_cd
                           AND c.line_cd = p_line_cd 
                           GROUP BY a.item_no 
                           ORDER BY a.item_no  )
         LOOP
            v_tsi_amt := x.tsi_amt;
            v_prem_amt := x.prem_amt;
            v_ann_tsi_amt := x.ann_tsi_amt;

             INSERT INTO giuw_witemds
                     (dist_no, dist_seq_no, item_no, tsi_amt,
                      prem_amt, ann_tsi_amt
                     )
              VALUES (p_dist_no, p_dist_seq_no, x.item_no, x.tsi_amt,
                      x.prem_amt, x.ann_tsi_amt
                     );                        
         END LOOP;
      END IF; 


     -- jhing 04.07.2016 populate giuw_witemperilds
     IF p_dist_no = dist_max
      THEN
         FOR x IN (SELECT SUM (NVL (a.tsi_amt, 0)) tsi_amt,
                                   SUM(NVL(a.prem_amt,0) - (ROUND((NVL(a.prem_amt,0)/dist_cnt),2) * (dist_cnt - 1)))  prem_amt,
                                   SUM (NVL ( a.ann_tsi_amt, 0)) ann_tsi_amt,
                                   a.item_no, a.peril_cd 
                              FROM gipi_witmperl a, gipi_witem b
                             WHERE     a.par_id = b.par_id
                                   AND a.item_no = b.item_no
                                   AND a.par_id = p_par_id
                                   AND b.item_grp = NVL (p_item_grp, p_item_grp)
                                   GROUP BY a.item_no, a.peril_cd )
         LOOP
            v_tsi_amt := x.tsi_amt;
            v_prem_amt := x.prem_amt;
            v_ann_tsi_amt := x.ann_tsi_amt;
            
             INSERT INTO giuw_witemperilds
                     (dist_no, dist_seq_no, item_no, peril_cd,
                      line_cd, tsi_amt, prem_amt, ann_tsi_amt
                     )
              VALUES (p_dist_no, p_dist_seq_no, x.item_no, x.peril_cd,
                      p_line_cd, v_tsi_amt, v_prem_amt, v_ann_tsi_amt
                     );          
            
         END LOOP;
      ELSE
         FOR x IN (SELECT SUM (ROUND ( NVL (a.tsi_amt, 0), 2)) tsi_amt,
                           SUM (ROUND ( (NVL (a.prem_amt, 0) / dist_cnt), 2)) prem_amt,
                           SUM (
                              ROUND ( (NVL (a.ann_tsi_amt, 0)), 2) ) ann_tsi_amt,
                              a.item_no , a.peril_cd 
                      FROM gipi_witmperl a, gipi_witem b
                     WHERE     a.par_id = b.par_id
                           AND a.item_no = b.item_no
                           AND a.par_id = p_par_id
                           AND b.item_grp = NVL (p_item_grp, p_item_grp)
                           GROUP BY a.item_no, a.peril_cd  )
         LOOP
            v_tsi_amt := x.tsi_amt;
            v_prem_amt := x.prem_amt;
            v_ann_tsi_amt := x.ann_tsi_amt;
            
           INSERT INTO giuw_witemperilds
                     (dist_no, dist_seq_no, item_no, peril_cd,
                      line_cd, tsi_amt, prem_amt, ann_tsi_amt
                     )
              VALUES (p_dist_no, p_dist_seq_no, x.item_no, x.peril_cd,
                      p_line_cd, v_tsi_amt, v_prem_amt, v_ann_tsi_amt
                     );                       
            
         END LOOP;
      END IF;   
      
            
    -- jhing 04.07.2016 adjust giuw_witemperilds based on gipi_winvperl 
         
         
         
 
         
     -- populate giuw_wperilds based on giuw_witemperilds
     FOR t1 IN (   SELECT a.peril_cd,
                             SUM (NVL (a.tsi_amt, 0)) tsi_amt,
                             SUM (NVL (a.prem_amt, 0)) prem_amt,
                             SUM (NVL (a.ann_tsi_amt, 0)) ann_tsi_amt ,
                             a.line_cd 
                        FROM giuw_witemperilds a
                       WHERE a.dist_no = p_dist_no AND a.dist_seq_no = p_dist_seq_no
                    GROUP BY a.peril_cd, a.line_cd 
                    ORDER BY a.peril_cd )
     LOOP
         INSERT INTO giuw_wperilds
                     (dist_no, dist_seq_no, peril_cd, tsi_amt,
                      prem_amt, ann_tsi_amt, line_cd 
                     )
              VALUES (p_dist_no, p_dist_seq_no, t1.peril_cd, t1.tsi_amt,
                     t1.prem_amt, t1.ann_tsi_amt, t1.line_cd 
                     );    
     END LOOP;  
     
     -- update giuw_wpolicyds based on giuw_witemperilds      
      FOR t1 IN (  SELECT  SUM (DECODE (b.peril_type, 'B', NVL (a.tsi_amt, 0), 0)) tsi_amt,
                                 SUM (NVL (a.prem_amt, 0)) prem_amt,
                                 SUM (DECODE (b.peril_type, 'B', NVL (a.ann_tsi_amt, 0), 0))
                                    ann_tsi_amt
                            FROM giuw_witemperilds a, giis_peril b
                           WHERE     a.dist_no = p_dist_no
                                 AND a.dist_seq_no = p_dist_seq_no
                                 AND a.line_cd = b.line_cd
                                 AND a.peril_cd = b.peril_cd)
       LOOP
             UPDATE giuw_wpolicyds 
               SET tsi_amt = t1.tsi_amt, prem_amt = t1.prem_amt,
                    ann_tsi_amt = t1.ann_tsi_amt
             WHERE dist_no = p_dist_no
                AND dist_seq_no = p_dist_seq_no ;     
         
       END LOOP;     
       

     -- update giuw_witemds based on giuw_witemperilds      
      FOR t1 IN (  SELECT  SUM (DECODE (b.peril_type, 'B', NVL (a.tsi_amt, 0), 0)) tsi_amt,
                                 SUM (NVL (a.prem_amt, 0)) prem_amt,
                                 SUM (DECODE (b.peril_type, 'B', NVL (a.ann_tsi_amt, 0), 0))
                                    ann_tsi_amt, a.item_no
                            FROM giuw_witemperilds a, giis_peril b
                           WHERE     a.dist_no = p_dist_no
                                 AND a.dist_seq_no = p_dist_seq_no
                                 AND a.line_cd = b.line_cd
                                 AND a.peril_cd = b.peril_cd
                                 GROUP BY a.item_no )
       LOOP
             UPDATE giuw_witemds 
               SET tsi_amt = t1.tsi_amt, prem_amt = t1.prem_amt,
                    ann_tsi_amt = t1.ann_tsi_amt
             WHERE dist_no = p_dist_no
                AND dist_seq_no = p_dist_seq_no
                AND item_no = t1.item_no ;     
         
       END LOOP;                  
     
     -- jhing 04.07.2016 populate default distribution. Populate giuw_policyds_dtl first 
     -- then giuw_witemperilds_dtl then update all dtl tables based on giuw_witemperilds_dtl 

   END;

   PROCEDURE create_par_distribution_recs2 (
      p_dist_no         IN   giuw_pol_dist.dist_no%TYPE,
      p_par_id          IN   gipi_parlist.par_id%TYPE,
      p_line_cd         IN   gipi_parlist.line_cd%TYPE,
      p_subline_cd      IN   gipi_wpolbas.subline_cd%TYPE,
      p_iss_cd          IN   gipi_wpolbas.iss_cd%TYPE,
      p_pack_pol_flag   IN   gipi_wpolbas.pack_pol_flag%TYPE,
      p_pol_flag        IN   gipi_wpolbas.pol_flag%TYPE,
      p_par_type        IN   gipi_parlist.par_type%TYPE,
      p_item_grp        IN   giuw_pol_dist.item_grp%TYPE,
      p_takeup_seq_no   IN   giuw_pol_dist.takeup_seq_no%TYPE
   )
   IS
      v_line_cd             gipi_parlist.line_cd%TYPE;
      v_subline_cd          gipi_wpolbas.subline_cd%TYPE;
      v_dist_seq_no         giuw_wpolicyds.dist_seq_no%TYPE          := 0;
      --rg_id      RECORDGROUP;
      rg_name               VARCHAR2 (20)               := 'DFLT_DIST_VALUES';
      rg_count              NUMBER;
      v_exist               VARCHAR2 (1);
      v_errors              NUMBER;
      v_default_no          giis_default_dist.default_no%TYPE;
      v_default_type        giis_default_dist.default_type%TYPE;
      v_dflt_netret_pct     giis_default_dist.dflt_netret_pct%TYPE;
      v_dist_type           giis_default_dist.dist_type%TYPE;
      v_post_flag           VARCHAR2 (1)                             := 'O';
      v_orig_post_flag      VARCHAR2 (1);
      v_package_policy_sw   VARCHAR2 (1)                             := 'Y';
   BEGIN
     IF p_pol_flag = 2 
     THEN
       SELECT post_flag
         INTO v_orig_post_flag
         FROM giuw_pol_dist
        WHERE dist_flag <> 4
          AND policy_id = (SELECT MAX(a.old_policy_id)
                             FROM gipi_wpolnrep a
                                 ,gipi_parlist b
                            WHERE a.par_id = p_par_id                            
                              AND a.ren_rep_sw = '1'
                              AND b.par_id = a.par_id
                              AND b.par_status NOT IN (98,99));
     ELSIF p_par_type = 'E'
     THEN
        SELECT post_flag
          INTO v_orig_post_flag
          FROM giuw_pol_dist
         WHERE dist_no =
                (SELECT MAX(dist_no)
                  FROM giuw_pol_dist
                 WHERE dist_flag <> 4
                   AND par_id =
                       (SELECT par_id
                          FROM gipi_polbasic
                         WHERE endt_seq_no = 0
                           AND (line_cd,
                                subline_cd,
                                iss_cd,
                                issue_yy,
                                pol_seq_no,
                                renew_no
                               ) =
                                  (SELECT line_cd,
                                          subline_cd,
                                          iss_cd,
                                          issue_yy,
                                          pol_seq_no,
                                          renew_no
                                     FROM gipi_wpolbas
                                    WHERE par_id =
                                                  p_par_id)));         
     END IF;   
          
     v_line_cd := p_line_cd;
     v_subline_cd := p_subline_cd;
     
      /* Get the unique ITEM_GRP to produce a unique DIST_SEQ_NO for each. */
      FOR c1 IN (SELECT   NVL (item_grp, 1) item_grp,
                          pack_line_cd pack_line_cd,
                          pack_subline_cd pack_subline_cd,
                          currency_rt currency_rt, SUM (tsi_amt) policy_tsi,
                          SUM (prem_amt) policy_premium,
                          SUM (ann_tsi_amt) policy_ann_tsi
                     FROM gipi_witem a
                    WHERE EXISTS (
                              SELECT 1
                                FROM gipi_witmperl
                               WHERE par_id = a.par_id
                                     AND item_no = a.item_no)
                      --(prem_amt != 0
                         --OR  tsi_amt  != 0)
                      AND item_grp = NVL (p_item_grp, item_grp)
                      AND par_id = p_par_id
                 GROUP BY item_grp, pack_line_cd, pack_subline_cd,
                          currency_rt)
      LOOP         
            FOR c2 IN (SELECT default_no, default_type, dist_type,
                              dflt_netret_pct
                         FROM giis_default_dist
                        WHERE iss_cd = p_iss_cd
                          AND subline_cd = v_subline_cd
                          AND line_cd = v_line_cd)
            LOOP
               v_default_no := c2.default_no;
               v_default_type := c2.default_type;
               v_dist_type := c2.dist_type;
               v_dflt_netret_pct := c2.dflt_netret_pct;
               EXIT;
            END LOOP;
         
             rg_count := 0;  
             
             IF (v_orig_post_flag IS NULL AND v_dist_type = '1') OR v_orig_post_flag = 'O' 
             THEN
               FOR c IN (SELECT rownum, a.line_cd    , a.share_cd , a.share_pct  ,
                         a.share_amt1 , a.peril_cd , a.share_amt2 ,
                         1 true_pct 
                   FROM GIIS_DEFAULT_DIST_GROUP a 
                   WHERE a.default_no = TO_CHAR(NVL(v_default_no, 0))
                   AND a.line_cd    = v_line_cd
                   AND a.share_cd   <> 999 
                   ORDER BY a.sequence ASC)
               LOOP
                 rg_count := c.rownum;
               END LOOP;
             ELSIF (v_orig_post_flag IS NULL AND v_dist_type = '2') OR v_orig_post_flag = 'P' 
             THEN
               FOR c IN (SELECT rownum, a.line_cd    , a.share_cd , a.share_pct,
                         a.share_amt1 , a.peril_cd , a.share_amt2 ,
                         1 true_pct 
                   FROM GIIS_DEFAULT_DIST_PERIL a 
                   WHERE a.default_no = TO_CHAR(NVL(v_default_no, 0))
                   AND a.line_cd    = v_line_cd
                   AND a.share_cd   <> 999 
                   ORDER BY a.sequence ASC)
               LOOP
                 rg_count := c.rownum;
               END LOOP;
             END IF;        

         /* Generate a new DIST_SEQ_NO for the new
         ** item group. */
         v_dist_seq_no := v_dist_seq_no + 1;   
         
         -- jhing 04.07.2016 called procedure earlier then will comment out the rest of the codes below
          giuw_pol_dist_pkg.create_grp_dflt_dist2 (p_dist_no,
                                                         v_dist_seq_no,
                                                         '2',
                                                         c1.policy_tsi,
                                                         c1.policy_premium,
                                                         c1.policy_ann_tsi,
                                                         c1.item_grp,
                                                         v_line_cd,
                                                         rg_count,
                                                         v_default_type,
                                                         c1.currency_rt,
                                                         p_par_id,
                                                         p_pol_flag,
                                                         p_par_type,
                                                         v_default_no,
                                                         p_takeup_seq_no
                                                        );     
         
--         IF v_orig_post_flag IS NULL -- if not endt nor renewal, setup default distribution based on default distribution type
--         THEN
--             IF NVL (v_dist_type, '1') = '1'
--             THEN
--                v_post_flag := 'O';
--                giuw_pol_dist_pkg.create_grp_dflt_dist2 (p_dist_no,
--                                                         v_dist_seq_no,
--                                                         '2',
--                                                         c1.policy_tsi,
--                                                         c1.policy_premium,
--                                                         c1.policy_ann_tsi,
--                                                         c1.item_grp,
--                                                         v_line_cd,
--                                                         rg_count,
--                                                         v_default_type,
--                                                         c1.currency_rt,
--                                                         p_par_id,
--                                                         p_pol_flag,
--                                                         p_par_type,
--                                                         v_default_no,
--                                                         p_takeup_seq_no
--                                                        );
--             ELSIF v_dist_type = '2'
--             THEN
--                v_post_flag := 'P';
--                giuw_pol_dist_pkg.create_peril_dflt_dist (p_dist_no,
--                                                          v_dist_seq_no,
--                                                          '2',
--                                                          c1.policy_tsi,
--                                                          c1.policy_premium,
--                                                          c1.policy_ann_tsi,
--                                                          c1.item_grp,
--                                                          v_line_cd,
--                                                          v_default_no,
--                                                          v_default_type,
--                                                          v_dflt_netret_pct,
--                                                          c1.currency_rt,
--                                                          p_par_id,
--                                                          p_pol_flag,
--                                                          p_par_type
--                                                         );
--             END IF;
--         ELSIF v_orig_post_flag = 'O' -- if original policy distribution is By Group
--         THEN
--            v_post_flag := 'O';
--            giuw_pol_dist_pkg.create_grp_dflt_dist2 (p_dist_no,
--                                                     v_dist_seq_no,
--                                                     '2',
--                                                     c1.policy_tsi,
--                                                     c1.policy_premium,
--                                                     c1.policy_ann_tsi,
--                                                     c1.item_grp,
--                                                     v_line_cd,
--                                                     rg_count,
--                                                     v_default_type,
--                                                     c1.currency_rt,
--                                                     p_par_id,
--                                                     p_pol_flag,
--                                                     p_par_type,
--                                                     v_default_no,
--                                                     p_takeup_seq_no
--                                                    );
--         ELSIF v_orig_post_flag = 'P' -- if original policy distribution is By Peril
--         THEN
--            v_post_flag := 'P';
--            giuw_pol_dist_pkg.create_peril_dflt_dist (p_dist_no,
--                                                      v_dist_seq_no,
--                                                      '2',
--                                                      c1.policy_tsi,
--                                                      c1.policy_premium,
--                                                      c1.policy_ann_tsi,
--                                                      c1.item_grp,
--                                                      v_line_cd,
--                                                      v_default_no,
--                                                      v_default_type,
--                                                      v_dflt_netret_pct,
--                                                      c1.currency_rt,
--                                                      p_par_id,
--                                                      p_pol_flag,
--                                                      p_par_type
--                                                     );                                                                  
--         END IF;
      END LOOP;
     
     GIUW_POL_DIST_PKG.POPULATE_DEFAULT_DIST ( p_dist_no, v_post_flag, v_dist_type );

     IF v_post_flag = 'O' 
     THEN
        GIUW_POL_DIST_PKG.ADJUST_ALL_WTABLES_GIUWS004(p_dist_no);
     ELSIF v_post_flag = 'P' 
     THEN
        ADJUST_DISTRIBUTION_PERIL_PKG.ADJUST_DISTRIBUTION(p_dist_no);
     END IF;

      /* Create records in RI tables if a facultative
      ** share exists in any of the DIST_SEQ_NO in table
      ** GIUW_WPOLICYDS_DTL. */
      create_ri_records (p_dist_no, p_par_id, p_line_cd, p_subline_cd);

      /* Set the value of the DIST_FLAG back
      ** to Undistributed after recreation. */
      UPDATE giuw_pol_dist
         SET dist_flag = '1',
             post_flag = v_post_flag
       WHERE par_id = p_par_id AND dist_no = p_dist_no;

      giuw_pol_dist_pkg.v_share_pct_updated := FALSE;
   END;

   PROCEDURE check_dist_flag (
      p_dist_no       IN       giuw_wperilds_dtl.dist_no%TYPE,
      p_dist_seq_no   IN       giuw_wperilds_dtl.dist_seq_no%TYPE,
      p_peril_cd      IN       giuw_wperilds_dtl.peril_cd%TYPE,
      p_count         OUT      NUMBER,
      p_count2        OUT      NUMBER
   )
   IS
   BEGIN
      SELECT COUNT (*)
        INTO p_count
        FROM giuw_wperilds_dtl
       WHERE dist_no = p_dist_no
         AND dist_seq_no = p_dist_seq_no
         AND peril_cd = p_peril_cd;

      SELECT COUNT (*)
        INTO p_count2
        FROM giri_distfrps
       WHERE dist_no = p_dist_no AND dist_seq_no = p_dist_seq_no;
   END check_dist_flag;

   PROCEDURE create_par_distribution_recs3 (
      p_dist_no         IN   giuw_pol_dist.dist_no%TYPE,
      p_par_id          IN   gipi_parlist.par_id%TYPE,
      p_line_cd         IN   gipi_parlist.line_cd%TYPE,
      p_subline_cd      IN   gipi_wpolbas.subline_cd%TYPE,
      p_iss_cd          IN   gipi_wpolbas.iss_cd%TYPE,
      p_pack_pol_flag   IN   gipi_wpolbas.pack_pol_flag%TYPE,
      p_pol_flag        IN   gipi_wpolbas.pol_flag%TYPE,
      p_par_type        IN   gipi_parlist.par_type%TYPE,
      p_item_grp        IN   giuw_wpolicyds.item_grp%TYPE
   )
   IS
      v_line_cd             gipi_parlist.line_cd%TYPE;
      v_subline_cd          gipi_wpolbas.subline_cd%TYPE;
      v_dist_seq_no         giuw_wpolicyds.dist_seq_no%TYPE          := 0;
      --rg_id                    RECORDGROUP;
      rg_name               VARCHAR2 (20)               := 'DFLT_DIST_VALUES';
      rg_count              NUMBER                                   := 0;
      v_exist               VARCHAR2 (1);
      v_errors              NUMBER;
      v_default_no          giis_default_dist.default_no%TYPE;
      v_default_type        giis_default_dist.default_type%TYPE;
      v_dflt_netret_pct     giis_default_dist.dflt_netret_pct%TYPE;
      v_dist_type           giis_default_dist.dist_type%TYPE;
      v_post_flag           VARCHAR2 (1)                             := 'O';
      v_package_policy_sw   VARCHAR2 (1)                             := 'Y';
      v_dist_exists         VARCHAR2 (1)                             := 'N';
      v_item_grp            giuw_wpolicyds.item_grp%TYPE;
   BEGIN
      FOR a IN (SELECT 1
                  FROM giuw_wpolicyds
                 WHERE dist_no = p_dist_no)
      LOOP
         v_dist_exists := 'Y';
         EXIT;
      END LOOP;

      FOR a IN (SELECT item_grp
                  FROM giuw_pol_dist
                 WHERE dist_no = p_dist_no)
      LOOP
         v_item_grp := a.item_grp;
         EXIT;
      END LOOP;

      /* Get the unique ITEM_GRP to produce a unique DIST_SEQ_NO for each. */
      IF NVL (v_dist_exists, 'N') = 'N'
      THEN
         FOR c1 IN (SELECT   NVL (item_grp, 1) item_grp,
                             pack_line_cd pack_line_cd,
                             pack_subline_cd pack_subline_cd,
                             currency_rt currency_rt,
                             SUM (tsi_amt) policy_tsi,
                             SUM (prem_amt) policy_premium,
                             SUM (ann_tsi_amt) policy_ann_tsi
                        FROM gipi_witem a
                       WHERE EXISTS (
                                SELECT 1
                                  FROM gipi_witmperl
                                 WHERE par_id = a.par_id
                                   AND item_no = a.item_no)
                         --(b.prem_amt != 0
                         --OR b.tsi_amt  != 0)
                         AND par_id = p_par_id
                         AND a.item_grp = NVL (v_item_grp, a.item_grp)
                    GROUP BY item_grp,
                             pack_line_cd,
                             pack_subline_cd,
                             currency_rt)
         LOOP
              /* If the PAR processed is a package policy
            ** then get the true LINE_CD and true SUBLINE_CD,
            ** that is, the PACK_LINE_CD and PACK_SUBLINE_CD
            ** from the GIPI_WITEM table.
            ** This will be used upon inserting to certain
            ** distribution tables requiring a value for
            ** the similar field. */
            IF p_pack_pol_flag = 'N'
            THEN
               v_line_cd := p_line_cd;
               v_subline_cd := p_subline_cd;
            ELSE
               v_line_cd := c1.pack_line_cd;
               v_subline_cd := c1.pack_subline_cd;
               v_package_policy_sw := 'Y';
            END IF;

            IF v_package_policy_sw = 'Y'
            THEN
               FOR c2 IN (SELECT default_no, default_type, dist_type,
                                 dflt_netret_pct
                            FROM giis_default_dist
                           WHERE iss_cd = p_iss_cd
                             AND subline_cd = v_subline_cd
                             AND line_cd = v_line_cd
                             AND dist_type = '2' /* By peril -- jhing 12.12.2014 */ )
               LOOP
                  v_default_no := c2.default_no;
                  v_default_type := c2.default_type;
                  v_dist_type := c2.dist_type;
                  v_dflt_netret_pct := c2.dflt_netret_pct;
                  EXIT;
               END LOOP;

               v_package_policy_sw := 'N';
            END IF;

            /* Generate a new DIST_SEQ_NO for the new
            ** item group. */
            v_dist_seq_no := v_dist_seq_no + 1;
            v_post_flag := 'P';
            giuw_pol_dist_pkg.create_peril_dflt_dist2 (p_dist_no,
                                                       v_dist_seq_no,
                                                       '2',
                                                       c1.policy_tsi,
                                                       c1.policy_premium,
                                                       c1.policy_ann_tsi,
                                                       c1.item_grp,
                                                       v_line_cd,
                                                       v_default_no,
                                                       v_default_type,
                                                       v_dflt_netret_pct,
                                                       c1.currency_rt,
                                                       p_par_id,
                                                       p_item_grp,
                                                       v_dist_exists,
                                                       p_pol_flag,
                                                       p_par_type
                                                      );
         END LOOP;
         recompute_dist_peril_pkg.RECOMPUTE_DTL_TABLES(p_dist_no); --edgar 06/24/2014
      ELSE
         FOR a IN (SELECT dist_seq_no, tsi_amt, prem_amt, ann_tsi_amt,
                          item_grp
                     FROM giuw_wpolicyds
                    WHERE dist_no = p_dist_no
                      AND item_grp = NVL (v_item_grp, item_grp))
         LOOP
            v_post_flag := 'P';
            --added edgar 06/20/2014 for default_no and default_type
            FOR c2 IN (SELECT default_no, default_type, dist_type,
                             dflt_netret_pct
                        FROM giis_default_dist
                       WHERE iss_cd = p_iss_cd
                         AND subline_cd = p_subline_cd
                         AND line_cd = p_line_cd
                         AND dist_type = '2' /* By peril -- jhing 12.12.2014 */)
            LOOP
              v_default_no := c2.default_no;
              v_default_type := c2.default_type;
              v_dist_type := c2.dist_type;
              v_dflt_netret_pct := c2.dflt_netret_pct;
              EXIT;
            END LOOP;
            --ended edgar 06/20/2014
            giuw_pol_dist_pkg.create_peril_dflt_dist2 (p_dist_no,
                                                       a.dist_seq_no,
                                                       '2',
                                                       a.tsi_amt,
                                                       a.prem_amt,
                                                       a.ann_tsi_amt,
                                                       a.item_grp,
                                                       p_line_cd,
                                                       v_default_no,
                                                       v_default_type,
                                                       v_dflt_netret_pct,
                                                       1,
                                                       p_par_id,
                                                       p_item_grp,
                                                       v_dist_exists,
                                                       p_pol_flag,
                                                       p_par_type
                                                      );
         END LOOP;
         recompute_dist_peril_pkg.RECOMPUTE_DTL_TABLES(p_dist_no); --edgar 06/24/2014
      END IF;

      /*IF NOT ID_NULL(rg_id) THEN
        DELETE_GROUP(rg_id);
      END IF;*/
      IF p_pol_flag != '2' AND p_par_type = 'P'
      THEN
         /* Adjust computational floats to equalize the amounts
             ** attained by the master tables with that of its detail
             ** tables.
             ** Tables involved:  GIUW_WPERILDS     - GIUW_WPERILDS_DTL
             **                   GIUW_WITEMDS      - GIUW_WITEMDS_DTL
             **                   GIUW_WITEMPERILDS - GIUW_WITEMPERILDS_DTL */
         giuw_pol_dist_pkg.adjust_net_ret_imperfection2 (p_dist_no);
         /* Equalize the amounts of tables GIUW_PERILDS
         ** and GIUW_PERILDS_DTL. */
         --giuw_pol_dist_pkg.adjust_peril_level_amts2 (p_dist_no); -- jhing 12.19.2014 commented out 
      END IF;

      /* Create records in RI tables if a facultative
      ** share exists in any of the DIST_SEQ_NO in table
      ** GIUW_WPOLICYDS_DTL. */
      /*giuw_pol_dist_pkg.create_ri_records (p_dist_no,
                                           p_par_id,
                                           p_line_cd,
                                           p_subline_cd
                                          ); */ -- jhing 12.19.2014 commented out 

      /* Set the value of the DIST_FLAG back
      ** to Undistributed after recreation. */

      --:c080.dist_flag      := '1';
      --:c080.mean_dist_flag := 'Undistributed';
      UPDATE giuw_pol_dist
         SET dist_flag = '1',
             post_flag = v_post_flag
       WHERE par_id = p_par_id AND dist_no = p_dist_no;
   --ADJUST_AMTS(p_dist_no);
   END create_par_distribution_recs3;

   /*
   **  Created by  : Emman
   **  Date Created  : 06.01.2011
   **  Reference By  : (GIUWS003 - Preliminary Peril Distribution
   **  Description  : Post Distribution
   */
   PROCEDURE post_dist_giuws003 (
      p_par_id              IN       gipi_wpolbas.par_id%TYPE,
      p_dist_no             IN       giuw_pol_dist.dist_no%TYPE,
      p_dist_seq_no         IN       giuw_wpolicyds.dist_seq_no%TYPE,
      p_module              IN       VARCHAR2,
      p_user_id             IN       giis_users.user_id%TYPE,
      p_current_form_name   IN       VARCHAR2,
      p_net_msg             OUT      VARCHAR2,
      p_treaty_msg          OUT      VARCHAR2,
      p_override_msg        OUT      VARCHAR2,
      p_net_override        OUT      VARCHAR2,
      p_treaty_override     OUT      VARCHAR2,
      p_msg_alert           OUT      VARCHAR2,
      p_dist_flag           OUT      VARCHAR2,
      p_mean_dist_flag      OUT      VARCHAR2,
      p_workflow_msgr       OUT      VARCHAR2,
      p_param_function      OUT      VARCHAR2
   )
   IS
   BEGIN
      /* Post records retrieved from the working tables to their
      ** corresponding master tables.
      ** IMPORTANT:  This button can only be pressed upon complete distribution
      **             of a specified DIST_NO, that is, GIUW_WPOLICYDS.DIST_FLAG = '2'.
      **             AND if the said distribution involves one or more reinsurers,
      **             that is, if a facultative share, relative to the DIST_NO being
      **             processed, was found to be existing in any of the records in
      **             tables GIUW_WPOLICYDS_DTL, GIUW_WITEMDS_DTL, GIUW_WPERILDS_DTL
      **             and GIUW_WITEMPERILDS_DTL.
      ** NOTE:  For more info on VARIABLES.POST_SW, see package spec VARIABLES. */
      DECLARE
         v_message                VARCHAR2 (2000)
                                               := 'W   o   r   k   i   n   g';
         v_share                  VARCHAR2 (2000)                := 'N';
         --alert_id             alert;
         alert_button             NUMBER;
         --rose08062009
         p_type_exceed            VARCHAR2 (7);
         p_block                  VARCHAR2 (5000);
         v_param_value_v          VARCHAR2 (1);
         v_exist                  VARCHAR2 (1);
         v_share_type             VARCHAR2 (1);
         v_prev_type_exceed       VARCHAR2 (10);
         v_auto_dist              VARCHAR2 (1);
         v_menu_line              giis_line.line_cd%TYPE;         --vj 031710
         v_loc_block              VARCHAR2 (50);                  --vj 031710
         v_count                  NUMBER                         := 0;
         var_v_prev_type_exceed   VARCHAR2 (5000);
         v_par_type               gipi_parlist.par_type%TYPE;
         v_nbt_eff_date           gipi_wpolbas.eff_date%TYPE;
         v_line_cd                gipi_wpolbas.line_cd%TYPE;
         v_nbt_subline_cd         gipi_wpolbas.subline_cd%TYPE;
         v_loc_count              NUMBER := 0; --edgar 06/20/2014
      BEGIN
        
         
         /*vj 031710*/
         BEGIN
            SELECT NVL (b.menu_line_cd, b.line_cd), par_type
              INTO v_menu_line, v_par_type
              FROM gipi_parlist a, giis_line b
             WHERE a.line_cd = b.line_cd AND a.par_id = p_par_id;
         END;

         FOR pol IN (SELECT eff_date, line_cd, subline_cd
                       FROM gipi_wpolbas
                      WHERE par_id = p_par_id)
         LOOP
            v_nbt_eff_date := pol.eff_date;
            v_line_cd := pol.line_cd;
            v_nbt_subline_cd := pol.subline_cd;
         END LOOP;

         IF v_menu_line = 'FI'
         THEN
            v_loc_block := 'block';
         ELSIF v_menu_line = 'CA'
         THEN
            v_loc_block := 'location';
         END IF;

         FOR chk_type IN (SELECT   d.share_type,
                                   SUM (ROUND (dist_spct, 14)) dist_spct,
                                   a.eff_date
                              FROM giuw_pol_dist a,
                                   giuw_wpolicyds b,
                                   giuw_wpolicyds_dtl c,
                                   giis_dist_share d
                             WHERE a.dist_no = b.dist_no
                               AND a.dist_no = c.dist_no
                               AND b.dist_seq_no = c.dist_seq_no
                               AND c.line_cd = d.line_cd
                               AND c.share_cd = d.share_cd
                               AND a.par_id = p_par_id
                               AND a.dist_no = p_dist_no
                               AND b.dist_seq_no = p_dist_seq_no
                          GROUP BY d.share_type, a.eff_date
                          ORDER BY d.share_type)
         LOOP
            v_share_type := chk_type.share_type;

            IF v_menu_line = 'FI'
            THEN
               --validate_block_limit.limit_validation --changed edgar 06/20/2014
               giuw_pol_dist_pkg.LIMIT_VALIDATION2 (p_par_id,
                                                      v_line_cd,
                                                      p_block,
                                                      p_type_exceed,
                                                      v_share_type,
                                                      chk_type.eff_date,
                                                      chk_type.dist_spct,
                                                      v_loc_count
                                                     );
                 IF v_loc_count > 1
                 THEN
                    v_loc_block := 'blocks';
                 ELSE
                    v_loc_block := 'block';
                 END IF;
            ELSIF     v_menu_line = 'CA'
                  AND v_nbt_subline_cd =
                                       NVL (giisp.v ('CA_SUBLINE_PFL'), 'PFL')
            THEN
               --ca_limit_validation -- changed edgar 06/20/2014
               giuw_pol_dist_pkg.CA_LIMIT_VALIDATION2 (p_par_id,
                                                        v_line_cd,
                                                        p_block,
                                                        p_type_exceed,
                                                        v_share_type,
                                                        chk_type.eff_date,
                                                        chk_type.dist_spct,
                                                        v_loc_count
                                                       );
                 IF v_loc_count > 1
                 THEN
                    v_loc_block := 'locations';
                 ELSE
                    v_loc_block := 'location';
                 END IF;
            END IF;

            IF p_type_exceed = 'NET'
            THEN
               v_param_value_v :=
                  validate_block_limit.check_override_function ('PARAMETER',
                                                                p_module,
                                                                'RO',
                                                                p_user_id
                                                               );
            ELSIF p_type_exceed = 'TREATY'
            THEN
               v_param_value_v :=
                  validate_block_limit.check_override_function ('PARAMETER',
                                                                p_module,
                                                                'TO',
                                                                p_user_id
                                                               );
            END IF;

            IF    (p_type_exceed = 'NET' )  -- (p_type_exceed = 'NET' AND v_prev_type_exceed IS NULL)  -- modified out, dahil dito hindi nag prompt ung override ni Treaty - irwin 10.5.2012
               OR (p_type_exceed = 'TREATY' ) -- (p_type_exceed = 'TREATY' AND v_prev_type_exceed IS NULL)
               OR p_type_exceed IS NULL
            THEN
               IF p_type_exceed = 'NET'
               THEN
                  v_prev_type_exceed := 'RO';
                  var_v_prev_type_exceed := 'RO';
               ELSIF p_type_exceed = 'TREATY'
               THEN
                  v_prev_type_exceed := 'TO';
                  var_v_prev_type_exceed := 'TO';
               END IF;

               IF p_type_exceed = 'NET'
               THEN
                  p_param_function := 'RO';
               ELSIF p_type_exceed = 'TREATY'
               THEN
                  p_param_function := 'TO';
               END IF;

               v_exist :=
                  validate_block_limit.check_override_function
                                                            ('USER',
                                                             p_module,
                                                             p_param_function,
                                                             p_user_id
                                                            );

               IF v_exist = 'N'
               THEN
                  IF p_type_exceed = 'NET' --modified for v_loc_count edgar 06/20/2014
                  THEN
                     IF v_loc_count > 1
                     THEN
                        p_net_msg :=
                           'Net retention limit for '
                        || p_block
                        || ' '
                        || v_loc_block
                        || ' has been exceeded.'
                        || ' Would you like to continue?';
                     ELSE   
                        p_net_msg :=
                           'Net retention limit for '
                        || v_loc_block
                        || ' '
                        || p_block
                        || ' has been exceeded.'
                        || ' Would you like to continue?';
                     END IF;
                  ELSIF p_type_exceed = 'TREATY' --modified for v_loc_count edgar 06/20/2014
                  THEN
                     IF  v_loc_count > 1 
                     THEN
                        p_treaty_msg :=
                           'Treaty limit for '
                        || p_block
                        || ' '
                        || v_loc_block
                        || ' has been exceeded.'
                        || ' Would you like to continue?';
                     ELSE  
                        p_treaty_msg :=
                           'Treaty limit for '
                        || v_loc_block
                        || ' '
                        || p_block
                        || ' has been exceeded.'
                        || ' Would you like to continue?';
                     END IF;
                  END IF;
               ELSIF v_exist = 'Y'
               THEN
                  IF p_type_exceed = 'NET' --modified for v_loc_count edgar 06/20/2014
                  THEN
                     /*p_net_msg :=
                           'Net retention limit for block '
                        || p_block
                        || ' has been exceeded.'
                        || ' Would you like to continue?';*/ --edgar 06/20/2014
                     IF v_loc_count > 1
                     THEN
                        p_net_msg :=
                           'Net retention limit for '
                        || p_block
                        || ' '
                        || v_loc_block
                        || ' has been exceeded.'
                        || ' Would you like to continue?';
                     ELSE   
                        p_net_msg :=
                           'Net retention limit for '
                        || v_loc_block
                        || ' '
                        || p_block
                        || ' has been exceeded.'
                        || ' Would you like to continue?';
                     END IF;

                     FOR chk_type IN
                        (SELECT   d.share_type,
                                  SUM (ROUND (dist_spct, 14)) dist_spct,
                                  a.eff_date
                             FROM giuw_pol_dist a,
                                  giuw_wpolicyds b,
                                  giuw_wpolicyds_dtl c,
                                  giis_dist_share d
                            WHERE a.dist_no = b.dist_no
                              AND a.dist_no = c.dist_no
                              AND b.dist_seq_no = c.dist_seq_no
                              AND c.line_cd = d.line_cd
                              AND c.share_cd = d.share_cd
                              AND a.par_id = p_par_id
                              AND a.dist_no = p_dist_no
                              AND b.dist_seq_no = p_dist_seq_no
                              AND c.share_cd NOT IN (999, 1)
                         GROUP BY d.share_type, a.eff_date)
                     LOOP
                        v_share_type := chk_type.share_type;

                        IF v_menu_line = 'FI'
                        THEN
                           /*validate_block_limit.limit_validation (p_par_id,
                                                                  v_line_cd,
                                                                  p_block,
                                                                  p_type_exceed,
                                                                  v_share_type,
                                                                  chk_type.eff_date,
                                                                  chk_type.dist_spct
                                                                  );
                           */--changed edgar 06/20/2014
                           giuw_pol_dist_pkg.LIMIT_VALIDATION2 (p_par_id,
                                                                  v_line_cd,
                                                                  p_block,
                                                                  p_type_exceed,
                                                                  v_share_type,
                                                                  chk_type.eff_date,
                                                                  chk_type.dist_spct,
                                                                  v_loc_count
                                                                 );
                             IF v_loc_count > 1
                             THEN
                                v_loc_block := 'blocks';
                             ELSE
                                v_loc_block := 'block';
                             END IF;                            
                        ELSIF     v_menu_line = 'CA'
                              AND v_nbt_subline_cd =
                                       NVL (giisp.v ('CA_SUBLINE_PFL'), 'PFL')
                        THEN
                           /*ca_limit_validation (p_par_id,
                                                v_line_cd,
                                                p_block,
                                                p_type_exceed,
                                                v_share_type,
                                                chk_type.eff_date,
                                                chk_type.dist_spct
                                               );
                           */ -- changed edgar 06/20/2014
                           giuw_pol_dist_pkg.CA_LIMIT_VALIDATION2 (p_par_id,
                                                                    v_line_cd,
                                                                    p_block,
                                                                    p_type_exceed,
                                                                    v_share_type,
                                                                    chk_type.eff_date,
                                                                    chk_type.dist_spct,
                                                                    v_loc_count
                                                                   );
                             IF v_loc_count > 1
                             THEN
                                v_loc_block := 'locations';
                             ELSE
                                v_loc_block := 'location';
                             END IF;
                        END IF;
                     END LOOP;

                     IF p_type_exceed = 'TREATY' --modified for v_loc_count edgar 06/20/2014
                     THEN
                         IF  v_loc_count > 1 
                         THEN
                            p_treaty_msg :=
                               'Treaty limit for '
                            || p_block
                            || ' '
                            || v_loc_block
                            || ' has been exceeded.'
                            || ' Would you like to continue?';
                         ELSE  
                            p_treaty_msg :=
                               'Treaty limit for '
                            || v_loc_block
                            || ' '
                            || p_block
                            || ' has been exceeded.'
                            || ' Would you like to continue?';
                         END IF;
                     END IF;
                  END IF;
                  /*added by edgar 06/10/2014*/
                  IF p_type_exceed = 'TREATY' --modified for v_loc_count edgar 06/20/2014
                     THEN
                     IF  v_loc_count > 1 
                     THEN
                        p_treaty_msg :=
                           'Treaty limit for '
                        || p_block
                        || ' '
                        || v_loc_block
                        || ' has been exceeded.'
                        || ' Would you like to continue?';
                     ELSE  
                        p_treaty_msg :=
                           'Treaty limit for '
                        || v_loc_block
                        || ' '
                        || p_block
                        || ' has been exceeded.'
                        || ' Would you like to continue?';
                     END IF;
                  END IF;
               END IF;

               IF alert_button = 0
               THEN
                  NULL;
               ELSE
                  IF v_param_value_v = 'Y' AND p_type_exceed IS NOT NULL
                  THEN
                     IF v_exist = 'N'
                     THEN
                        p_override_msg :=
                              'User has no authority to process distribution limit. '
                           || 'Please ask for override or Reassign the PAR to another user.';

                        IF alert_button = 0
                        THEN
                           NULL;
                        ELSE
                           --call override canvas--
                           IF p_type_exceed = 'NET'
                           THEN
                              p_net_override := 'Net Retention Override';
                           ELSIF p_type_exceed = 'TREATY'
                           THEN
                              p_treaty_override :=
                                                  'Treaty Retention Override';
                           END IF;
                        END IF;
                     END IF;
                  ELSIF v_param_value_v = 'N' AND v_prev_type_exceed = 'RO'
                  THEN
                     FOR chk_type IN
                        (SELECT   d.share_type,
                                  SUM (ROUND (dist_spct, 14)) dist_spct,
                                  a.eff_date
                             FROM giuw_pol_dist a,
                                  giuw_wpolicyds b,
                                  giuw_wpolicyds_dtl c,
                                  giis_dist_share d
                            WHERE a.dist_no = b.dist_no
                              AND a.dist_no = c.dist_no
                              AND b.dist_seq_no = c.dist_seq_no
                              AND c.line_cd = d.line_cd
                              AND c.share_cd = d.share_cd
                              AND a.par_id = p_par_id
                              AND a.dist_no = p_dist_no
                              AND b.dist_seq_no = p_dist_seq_no
                              AND c.share_cd NOT IN (999, 1)
                         GROUP BY d.share_type, a.eff_date)
                     LOOP
                        v_share_type := chk_type.share_type;

                        IF v_menu_line = 'FI'
                        THEN
                           /*validate_block_limit.limit_validation
                                                          (p_par_id,
                                                           v_line_cd,
                                                           p_block,
                                                           p_type_exceed,
                                                           v_share_type,
                                                           chk_type.eff_date,
                                                           chk_type.dist_spct
                                                          );*/ --changed edgar 06/20/2014
                           giuw_pol_dist_pkg.LIMIT_VALIDATION2 (p_par_id,
                                                                  v_line_cd,
                                                                  p_block,
                                                                  p_type_exceed,
                                                                  v_share_type,
                                                                  chk_type.eff_date,
                                                                  chk_type.dist_spct,
                                                                  v_loc_count
                                                                 );
                             IF v_loc_count > 1
                             THEN
                                v_loc_block := 'blocks';
                             ELSE
                                v_loc_block := 'block';
                             END IF;        
                        ELSIF     v_menu_line = 'CA'
                              AND v_nbt_subline_cd =
                                       NVL (giisp.v ('CA_SUBLINE_PFL'), 'PFL')
                        THEN
                           /*ca_limit_validation (p_par_id,
                                                v_line_cd,
                                                p_block,
                                                p_type_exceed,
                                                v_share_type,
                                                chk_type.eff_date,
                                                chk_type.dist_spct
                                               );         --added by VJ 031710*/ --changed edgar 06/20/2014
                            giuw_pol_dist_pkg.CA_LIMIT_VALIDATION2 (p_par_id,
                                                                    v_line_cd,
                                                                    p_block,
                                                                    p_type_exceed,
                                                                    v_share_type,
                                                                    chk_type.eff_date,
                                                                    chk_type.dist_spct,
                                                                    v_loc_count
                                                                   );
                             IF v_loc_count > 1
                             THEN
                                v_loc_block := 'locations';
                             ELSE
                                v_loc_block := 'location';
                             END IF;
                        END IF;
                     END LOOP;

                     IF p_type_exceed = 'TREATY' --modified for v_loc_count edgar 06/20/2014
                     THEN
                        IF v_loc_count > 1 THEN
                            p_treaty_msg :=
                                  'Treaty limit for '
                               || p_block
                               || ' '
                               || v_loc_block
                               || ' has been exceeded.'
                               || ' Would you like to continue?';
                        ELSE
                            p_treaty_msg :=
                                  'Treaty limit for '
                               || v_loc_block
                               || ' '
                               || p_block
                               || ' has been exceeded.'
                               || ' Would you like to continue?';
                        END IF;
                     END IF;
                  END IF; 
                /*commented out codes below and transfered to post_dist_giuws003_final to separate validation and posting edgar 06/10/2014*/
                /*  IF    (v_param_value_v = 'N' AND v_exist IN ('Y', 'N'))
                     OR (    v_param_value_v = 'Y'
                         AND (   v_line_cd NOT IN ('FI', 'CA')
                              OR (    p_type_exceed IS NULL
                                  AND v_prev_type_exceed IS NULL
                                 )
                              OR v_exist = 'Y'
                             )
                        ) 
                     OR (    p_type_exceed IS NULL
                         AND v_prev_type_exceed IS NULL
                         AND p_param_function IS NULL
                        )
                     OR (    p_type_exceed IS NOT NULL
                         AND v_exist = 'Y'
                         AND v_prev_type_exceed IS NOT NULL
                        )
                  THEN
                     /* Remove existing records related to the
                     ** current DIST_NO from certain distribution
                     ** and RI master tables considering the fact
                     ** that the current changes made were not yet
                     ** posted to the master tables. */
                    /* giuw_pol_dist_pkg.delete_dist_master_tables (p_dist_no);
                     /* Post records retrieved from GIUW_WPOLICYDS
                     ** and GIUW_WPOLICYDS_DTL to tables GIUW_POLICYDS
                     ** and GIUW_POLICYDS_DTL. */
                  /*   post_wpolicyds_dtl (p_dist_no,
                                         v_par_type,
                                         v_nbt_eff_date,
                                         p_msg_alert
                                        );
                     /* Post records retrieved from GIUW_WITEMDS
                     ** and GIUW_WITEMDS_DTL to tables GIUW_ITEMDS
                     ** and GIUW_ITEMDS_DTL. */
                  /*   post_witemds_dtl (p_dist_no);
                     /* Post records retrieved from GIUW_WITEMPERILDS and
                     ** GIUW_WITEMPERILDS_DTL to tables GIUW_ITEMPERILDS
                     ** and GIUW_ITEMPERILDS_DTL. */
                  /*   post_witemperilds_dtl (p_dist_no);
                     /* Post records retrieved from GIUW_WPERILDS
                     ** and GIUW_WPERILDS_DTL to tables GIUW_PERILDS
                     ** and GIUW_PERILDS_DTL. */
                   /*  post_wperilds_dtl (p_dist_no);

                         /* Since records in the working tables have
                         ** already been copied to the master tables,
                         ** the DIST_FLAG of table GIUW_POL_DIST
                         ** must then be updated to '2'(With Facultative),
                         ** meaning that the distribution record has already
                         ** been posted but the data in the working tables
                         ** have not yet been deleted because a final posting
                         ** by the RI department is still required. */
                       /*added the if condition para inde paulit ulit ang
                     pagtawag sa check auto dist para inde magulo ang
                       update ng autodist 02232010*/
               /*      IF    v_count = 0
                        OR (v_count > 0 AND p_type_exceed = 'TREATY')
                     THEN                                    /*05202010 rose*/
/*IF    (    var_v_prev_type_exceed IS NOT NULL
       AND v_param_value_v = 'Y'
      )
   OR (    v_prev_type_exceed IS NOT NULL
       AND v_param_value_v = 'Y'
      )
   OR (p_type_exceed IS NOT NULL AND v_param_value_v = 'Y'
      )
   OR (    p_param_function IS NOT NULL
       AND v_param_value_v = 'Y'
      )*/
                  /*      IF    var_v_prev_type_exceed IS NOT NULL
                           OR v_prev_type_exceed IS NOT NULL
                           OR p_type_exceed IS NOT NULL
                           OR p_param_function IS NOT NULL
                        THEN
                           v_count := 1;
                        END IF;
                     END IF;

                     FOR v IN (SELECT share_type
                                 FROM giis_dist_share
                                WHERE line_cd = v_line_cd
                                  AND share_type = 3
                                  AND share_cd IN (
                                         SELECT share_cd
                                           FROM giuw_wperilds_dtl
                                          WHERE dist_no = p_dist_no
                                            AND line_cd = v_line_cd))
                     LOOP
                        IF v.share_type = '3'
                        THEN
                           v_share := 'Y';
                        END IF;
                     END LOOP;

                     IF v_share = 'Y'
                     THEN
                        UPDATE giuw_pol_dist
                           SET dist_flag = '2',
                               post_flag = 'P',
                               auto_dist = 'N',
                               special_dist_sw = 'N'
                         WHERE par_id = p_par_id AND dist_no = p_dist_no;

                        p_dist_flag := '2';
                        p_mean_dist_flag := 'With Facultative';

                        /** to create workflow records of Facultative Placement */
                     /*   FOR c1 IN (SELECT b.userid, d.event_desc
                                     FROM giis_events_column c,
                                          giis_event_mod_users b,
                                          giis_event_modules a,
                                          giis_events d
                                    WHERE 1 = 1
                                      AND c.event_cd = a.event_cd
                                      AND c.event_mod_cd = a.event_mod_cd
                                      AND b.event_mod_cd = a.event_mod_cd
                                      AND b.passing_userid = USER
                                      AND a.module_id = 'GIUWS003'
                                      AND a.event_cd = d.event_cd
                                      AND UPPER (d.event_desc) =
                                                       'FACULTATIVE PLACEMENT')
                        LOOP
                           create_transfer_workflow_rec
                                                    (c1.event_desc,
                                                     p_current_form_name,
                                                     --nok GET_APPLICATION_PROPERTY (current_form_name),
                                                     c1.userid,
                                                     p_par_id,
                                                        c1.event_desc
                                                     || ' '
                                                     || get_policy_no
                                                                     (p_par_id),
                                                     p_msg_alert,
                                                     p_workflow_msgr,
                                                     p_user_id
                                                    );
                        END LOOP;
                     ELSE
                        UPDATE giuw_pol_dist
                           SET dist_flag = '1',
                               post_flag = 'P',
                               auto_dist = 'N',
                               special_dist_sw = 'N'
                         WHERE par_id = p_par_id AND dist_no = p_dist_no;

                        p_dist_flag := '1';
                        p_mean_dist_flag := 'Undistributed';
                        --added to delete the workflow facultative placement of GIUWS004 if not facul
                        delete_workflow_rec ('Facultative Placement',
                                             'GIUWS004',
                                             p_user_id,
                                             p_par_id
                                            ); 
                     END IF;
                  END IF;*/
               END IF;
            ELSIF v_prev_type_exceed IS NOT NULL
            THEN
               NULL;
            END IF;
         END LOOP;
      END;
   END post_dist_giuws003;

   /*
   **  Created by  : Emman
   **  Date Created  : 06.02.2011
   **  Reference By  : (GIUWS003 - Preliminary Peril Distribution)
   **  Description  : Adjust computational floats to equalize the amounts
   **        attained by the master tables with that of its detail
   **        tables.
   */
   PROCEDURE adjust_wperilds_dtl (
      p_dist_no       giuw_pol_dist.dist_no%TYPE,
      p_dist_seq_no   giuw_wperilds.dist_seq_no%TYPE,
      p_line_cd       giuw_wperilds.line_cd%TYPE,
      p_peril_cd      giuw_wperilds.peril_cd%TYPE
   )
   IS
      v_count                   NUMBER;
      v_exist                   VARCHAR2 (1)                           := 'N';
      v_dist_no                 giuw_wperilds.dist_no%TYPE;
      v_dist_seq_no             giuw_wperilds.dist_seq_no%TYPE;
      v_line_cd                 giuw_wperilds.line_cd%TYPE;
      v_peril_cd                giuw_wperilds.peril_cd%TYPE;
      v_tsi_amt                 giuw_wperilds.tsi_amt%TYPE;
      v_prem_amt                giuw_wperilds.prem_amt%TYPE;
      v_dist_tsi                giuw_wperilds_dtl.dist_tsi%TYPE;
      v_dist_spct               giuw_wperilds_dtl.dist_spct%TYPE;
      v_dist_prem               giuw_wperilds_dtl.dist_prem%TYPE;
      v_ann_tsi_amt             giuw_wperilds.ann_tsi_amt%TYPE;
      v_ann_dist_tsi            giuw_wperilds_dtl.ann_dist_tsi%TYPE;
      v_ann_dist_spct           giuw_wperilds_dtl.ann_dist_spct%TYPE;
      v_sum_dist_tsi            giuw_wperilds_dtl.dist_tsi%TYPE;
      v_sum_dist_spct           giuw_wperilds_dtl.dist_spct%TYPE;
      v_sum_dist_prem           giuw_wperilds_dtl.dist_prem%TYPE;
      v_correct_dist_tsi        giuw_wperilds_dtl.dist_tsi%TYPE;
      v_sum_ann_dist_tsi        giuw_wperilds_dtl.ann_dist_tsi%TYPE;
      v_sum_ann_dist_spct       giuw_wperilds_dtl.ann_dist_spct%TYPE;
      v_correct_dist_spct       giuw_wperilds_dtl.dist_spct%TYPE;
      v_correct_dist_prem       giuw_wperilds_dtl.dist_prem%TYPE;
      v_correct_ann_dist_tsi    giuw_wperilds_dtl.ann_dist_tsi%TYPE;
      v_correct_ann_dist_spct   giuw_wperilds_dtl.ann_dist_spct%TYPE;
   BEGIN
      --msg_alert('ADJUST_WPERILDS_DTL','I',FALSE);
      v_dist_no := p_dist_no;
      v_dist_seq_no := p_dist_seq_no;
      v_line_cd := p_line_cd;
      v_peril_cd := p_peril_cd;

      /************************************* Start *********************************************
      ** Adjust computational floats between tables GIUW_WPERILDS and GIUW_WPERILDS_DTL.
      ******************************************************************************************/
      BEGIN
         /* **************************** Section A **********************************
         ** Compare the amounts retrieved from the master table with the sum of its
         ** counterparts from the detail table.
         ************************************************************************* */
         FOR c10 IN (SELECT ROUND (NVL (tsi_amt, 0), 2) tsi_amt,
                            ROUND (NVL (prem_amt, 0), 2) prem_amt,
                            ROUND (NVL (ann_tsi_amt, 0), 2) ann_tsi_amt
                       FROM giuw_wperilds
                      WHERE peril_cd = v_peril_cd
                        AND line_cd = v_line_cd
                        AND dist_seq_no = v_dist_seq_no
                        AND dist_no = v_dist_no)
         LOOP
            v_exist := 'Y';
            v_tsi_amt := c10.tsi_amt;
            v_prem_amt := c10.prem_amt;
            v_ann_tsi_amt := c10.ann_tsi_amt;
            EXIT;
         END LOOP;

         IF v_exist = 'N'
         THEN
            RETURN;
         END IF;

         v_exist := 'N';

         FOR c10 IN (SELECT ROUND (SUM (NVL (dist_tsi, 0)), 2) dist_tsi,
                            ROUND (SUM (NVL (dist_prem, 0)), 2) dist_prem,
                            ROUND (SUM (NVL (dist_spct, 0)), 14) dist_spct,
                            ROUND (SUM (NVL (ann_dist_tsi, 0)),
                                   2
                                  ) ann_dist_tsi
                       FROM giuw_wperilds_dtl
                      WHERE peril_cd = v_peril_cd
                        AND line_cd = v_line_cd
                        AND dist_seq_no = v_dist_seq_no
                        AND dist_no = v_dist_no)
         LOOP
            v_exist := 'Y';
            v_dist_tsi := c10.dist_tsi;
            v_dist_prem := c10.dist_prem;
            v_dist_spct := c10.dist_spct;
            v_ann_dist_tsi := c10.ann_dist_tsi;
            EXIT;
         END LOOP;

         IF v_exist = 'N'
         THEN
            RETURN;
         END IF;

         /*************************** End of Section A ****************************/

         /* If the amounts retrieved from the master table
         ** are not equal to the amounts retrieved from the
         ** the detail table then the procedure below shall
         ** be executed. */
         IF    (100 != v_dist_spct)
            OR (v_tsi_amt != v_dist_tsi)
            OR (v_prem_amt != v_dist_prem)
            OR (v_ann_tsi_amt != v_ann_dist_tsi)
         THEN
            BEGIN
               v_exist := 'N';

               /*************************** Section B *******************************
               ** Adjust the value of the fields belonging to the NET RETENTION share
               ** (SHARE_CD = '1'). If by chance a NET RETENTION share does not exist,
               ** then the NO_DATA_FOUND exception (Section C) shall handle the next
               ** few steps.
               *********************************************************************/

               /* Get the ROWID of the NET RETENTION share
               ** in preparation for update. */
               FOR c10 IN (SELECT share_cd --ROWID replaced by: Nica 06.06.2013
                             FROM giuw_wperilds_dtl
                            WHERE share_cd = '1'
                              AND peril_cd = v_peril_cd
                              AND line_cd = v_line_cd
                              AND dist_seq_no = v_dist_seq_no
                              AND dist_no = v_dist_no)
               LOOP
                  /* Get the sum of each field for all the shares excluding the NET
                  ** RETENTION share.  The result will serve as the SUBTRAHEND in
                  ** calculating for the values to be attained by the fields belonging
                  ** to NET RETENTION. */
                  FOR c20 IN
                     (SELECT ROUND (SUM (dist_tsi), 2) dist_tsi,
                             ROUND (SUM (dist_prem), 2) dist_prem,
                             ROUND (SUM (dist_spct), 14) dist_spct,
                             ROUND (SUM (NVL (ann_dist_tsi, 0)),
                                    2
                                   ) ann_dist_tsi,
                             ROUND (SUM (NVL (ann_dist_spct, 0)),
                                    14
                                   ) ann_dist_spct
                        FROM giuw_wperilds_dtl
                       WHERE share_cd != '1'
                         AND peril_cd = v_peril_cd
                         AND line_cd = v_line_cd
                         AND dist_seq_no = v_dist_seq_no
                         AND dist_no = v_dist_no)
                  LOOP
                     v_exist := 'Y';
                     v_sum_dist_tsi := c20.dist_tsi;
                     v_sum_dist_prem := c20.dist_prem;
                     v_sum_dist_spct := c20.dist_spct;
                     v_sum_ann_dist_tsi := c20.ann_dist_tsi;
                     v_sum_ann_dist_spct := c20.ann_dist_spct;
                     EXIT;
                  END LOOP;

                  IF v_exist = 'N'
                  THEN
                     EXIT;
                  END IF;

                  /* Calculate for the values to be attained by the fields
                  ** belonging to the NET RETENTION share by subtracting
                  ** the values attained from the master table with the
                  ** values attained above. */
                  /*v_correct_dist_tsi := ABS (v_tsi_amt) - ABS (v_sum_dist_tsi);
                  v_correct_dist_prem :=
                                       ABS (v_prem_amt)
                                       - ABS (v_sum_dist_prem);
                  v_correct_dist_spct := 100 - v_sum_dist_spct;
                  v_correct_ann_dist_tsi :=
                                 ABS (v_ann_tsi_amt)
                                 - ABS (v_sum_ann_dist_tsi);
                  v_correct_ann_dist_spct := 100 - v_sum_ann_dist_spct;*/ -- replaced by: Nica 06.06.2013
                  
                  -- added NVL to replace null values with zero to prevent 
                  -- saving null values in GIUW_WPERILDS_DTL - Nica 06.06.2013
                  v_correct_dist_tsi := ABS (NVL(v_tsi_amt,0)) - ABS (NVL(v_sum_dist_tsi,0));
                  v_correct_dist_prem := ABS (NVL(v_prem_amt,0)) - ABS (NVL(v_sum_dist_prem,0));
                  v_correct_dist_spct := 100 - NVL(v_sum_dist_spct,0);
                  v_correct_ann_dist_tsi := ABS (NVL(v_ann_tsi_amt,0)) - ABS (NVL(v_sum_ann_dist_tsi,0));
                  v_correct_ann_dist_spct := 100 - NVL(v_sum_ann_dist_spct,0);

                  IF SIGN (v_tsi_amt) = -1
                  THEN
                     v_correct_dist_tsi := v_correct_dist_tsi * -1;
                  END IF;

                  IF SIGN (v_prem_amt) = -1
                  THEN
                     v_correct_dist_prem := v_correct_dist_prem * -1;
                  END IF;

                  IF SIGN (v_ann_tsi_amt) = -1
                  THEN
                     v_correct_ann_dist_tsi := v_correct_ann_dist_tsi * -1;
                  END IF;

                  /* Update the values of the fields belonging to the NET
                  ** RETENTION share to equalize the amounts attained from
                  ** the detail table with the amounts attained from the
                  ** master table. */
                  UPDATE giuw_wperilds_dtl
                     SET dist_tsi = v_correct_dist_tsi,
                         dist_prem = v_correct_dist_prem,
                         dist_spct = v_correct_dist_spct,
                         ann_dist_tsi = v_correct_ann_dist_tsi,
                         ann_dist_spct = v_correct_ann_dist_spct
                   --WHERE ROWID = c10.ROWID; replaced by: Nica 06.06.2013 used giuw_wperilds_dtl's PK columns instead of rowid
                   WHERE share_cd = '1'
                     AND peril_cd = v_peril_cd
                     AND line_cd = v_line_cd
                     AND dist_seq_no = v_dist_seq_no
                     AND dist_no = v_dist_no;
                   

                  EXIT;
               END LOOP;

               IF v_exist = 'N'
               THEN
                  RAISE NO_DATA_FOUND;
               END IF;
            /*************************** End of Section B ***************************/
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  BEGIN
                     /****************************** Section C ******************************
                     ** Adjust the value of the fields belonging to the share of the FIRST
                     ** RETRIEVED ROW.
                     ***********************************************************************/

                     /* Get the ROWID of the first retrieved
                     ** row in preparation for update. */
                     FOR c10 IN (SELECT share_cd --ROWID replaced by: Nica 06.06.2013
                                   FROM GIUW_WPERILDS_DTL
                                  WHERE ROWNUM = '1'
                                    AND peril_cd = v_peril_cd
                                    AND line_cd = v_line_cd
                                    AND dist_seq_no = v_dist_seq_no
                                    AND dist_no = v_dist_no)
                     LOOP
                        /* Get the sum of each field for all the shares excluding the share
                        ** of the FIRST RETRIEVED ROW.  The result will serve as the SUBTRAHEND
                        ** in calculating for the values to be attained by the fields belonging
                        ** to the FIRST ROW. */
                        FOR c20 IN
                           (SELECT ROUND (SUM (dist_tsi), 2) dist_tsi,
                                   ROUND (SUM (dist_prem), 2) dist_prem,
                                   ROUND (SUM (dist_spct), 14) dist_spct,
                                   ROUND
                                       (SUM (NVL (ann_dist_tsi, 0)),
                                        2
                                       ) ann_dist_tsi,
                                   ROUND
                                      (SUM (NVL (ann_dist_spct, 0)),
                                       14
                                      ) ann_dist_spct
                              FROM giuw_wperilds_dtl
                             WHERE share_cd != c10.share_cd --ROWID != c10.ROWID replaced by: Nica 06.06.2013
                               AND peril_cd = v_peril_cd
                               AND line_cd = v_line_cd
                               AND dist_seq_no = v_dist_seq_no
                               AND dist_no = v_dist_no)
                        LOOP
                           v_sum_dist_tsi := c20.dist_tsi;
                           v_sum_dist_prem := c20.dist_prem;
                           v_sum_dist_spct := c20.dist_spct;
                           v_sum_ann_dist_tsi := c20.ann_dist_tsi;
                           v_sum_ann_dist_spct := c20.ann_dist_spct;
                           EXIT;
                        END LOOP;

                        /* Calculate for the values to be attained by the fields
                        ** belonging to the share of the FIRST ROW by subtracting
                        ** the values attained from the master table with the
                        ** values attained above. */
                        /*v_correct_dist_tsi :=
                                         ABS (v_tsi_amt)
                                         - ABS (v_sum_dist_tsi);
                        v_correct_dist_prem :=
                                       ABS (v_prem_amt)
                                       - ABS (v_sum_dist_prem);
                        v_correct_dist_spct := 100 - v_sum_dist_spct;
                        v_correct_ann_dist_tsi :=
                                 ABS (v_ann_tsi_amt)
                                 - ABS (v_sum_ann_dist_tsi);
                        v_correct_ann_dist_spct := 100 - v_sum_ann_dist_spct;*/
                        
                        -- added NVL to replace null values with zero to prevent 
                        -- saving null values in GIUW_WPERILDS_DTL - Nica 06.06.2013
                        v_correct_dist_tsi := ABS (NVL(v_tsi_amt,0)) - ABS (NVL(v_sum_dist_tsi,0));
                        v_correct_dist_prem := ABS (NVL(v_prem_amt,0)) - ABS (NVL(v_sum_dist_prem,0));
                        v_correct_dist_spct := 100 - NVL(v_sum_dist_spct,0);
                        v_correct_ann_dist_tsi := ABS (NVL(v_ann_tsi_amt,0)) - ABS (NVL(v_sum_ann_dist_tsi,0));
                        v_correct_ann_dist_spct := 100 - NVL(v_sum_ann_dist_spct,0);

                        IF SIGN (v_tsi_amt) = -1
                        THEN
                           v_correct_dist_tsi := v_correct_dist_tsi * -1;
                        END IF;

                        IF SIGN (v_prem_amt) = -1
                        THEN
                           v_correct_dist_prem := v_correct_dist_prem * -1;
                        END IF;

                        IF SIGN (v_ann_tsi_amt) = -1
                        THEN
                           v_correct_ann_dist_tsi :=
                                                   v_correct_ann_dist_tsi
                                                   * -1;
                        END IF;

                        /* Update the values of the fields belonging to the share
                        ** of the FIRST ROW to equalize the amounts attained from
                        ** the detail table with the amounts attained from the
                        ** master table. */
                        UPDATE giuw_wperilds_dtl
                           SET dist_tsi = v_correct_dist_tsi,
                               dist_prem = v_correct_dist_prem,
                               dist_spct = v_correct_dist_spct,
                               ann_dist_tsi = v_correct_ann_dist_tsi,
                               ann_dist_spct = v_correct_ann_dist_spct
                         --WHERE ROWID = c10.ROWID; replaced by: Nica 06.06.2013 used giuw_wperilds_dtl's PK columns instead of rowid
                           WHERE share_cd = c10.share_cd
                             AND peril_cd = v_peril_cd
                             AND line_cd = v_line_cd
                             AND dist_seq_no = v_dist_seq_no
                             AND dist_no = v_dist_no;

                        EXIT;
                     END LOOP;
                  END;
            /**************************** End of Section C *************************/
            END;
         END IF;
      END;
/************************************** End ******************************************/
   END adjust_wperilds_dtl;

   /* Adjust computational floats to equalize the amounts
   ** attained by the master tables with that of its detail
   ** tables.
   ** Tables involved:  GIUW_WPERILDS - GIUW_WPERILDS_DTL
   ** Referenced in the following trigger/s or program unit/s:
   **      POST-FORMS-COMMIT        form level */
   PROCEDURE adjust_wperilds_dtl2 (
      p_dist_no       giuw_pol_dist.dist_no%TYPE,
      p_dist_seq_no   giuw_wperilds.dist_seq_no%TYPE,
      p_line_cd       giuw_wperilds.line_cd%TYPE,
      p_peril_cd      giuw_wperilds.peril_cd%TYPE
   )
   IS
      v_count                   NUMBER;
      v_exist                   VARCHAR2 (1)                           := 'N';
      v_dist_no                 giuw_wperilds.dist_no%TYPE;
      v_dist_seq_no             giuw_wperilds.dist_seq_no%TYPE;
      v_line_cd                 giuw_wperilds.line_cd%TYPE;
      v_peril_cd                giuw_wperilds.peril_cd%TYPE;
      v_tsi_amt                 giuw_wperilds.tsi_amt%TYPE;
      v_prem_amt                giuw_wperilds.prem_amt%TYPE;
      v_dist_tsi                giuw_wperilds_dtl.dist_tsi%TYPE;
      v_dist_spct               giuw_wperilds_dtl.dist_spct%TYPE;
      v_dist_spct1              giuw_wperilds_dtl.dist_spct1%TYPE;    --aaron
      v_dist_prem               giuw_wperilds_dtl.dist_prem%TYPE;
      v_ann_tsi_amt             giuw_wperilds.ann_tsi_amt%TYPE;
      v_ann_dist_tsi            giuw_wperilds_dtl.ann_dist_tsi%TYPE;
      v_ann_dist_spct           giuw_wperilds_dtl.ann_dist_spct%TYPE;
      v_sum_dist_tsi            giuw_wperilds_dtl.dist_tsi%TYPE;
      v_sum_dist_spct           giuw_wperilds_dtl.dist_spct%TYPE;
      v_sum_dist_spct1          giuw_wperilds_dtl.dist_spct%TYPE;
      v_sum_dist_prem           giuw_wperilds_dtl.dist_prem%TYPE;
      v_correct_dist_tsi        giuw_wperilds_dtl.dist_tsi%TYPE;
      v_sum_ann_dist_tsi        giuw_wperilds_dtl.ann_dist_tsi%TYPE;
      v_sum_ann_dist_spct       giuw_wperilds_dtl.ann_dist_spct%TYPE;
      v_correct_dist_spct       giuw_wperilds_dtl.dist_spct%TYPE;
      v_correct_dist_prem       giuw_wperilds_dtl.dist_prem%TYPE;
      v_correct_ann_dist_tsi    giuw_wperilds_dtl.ann_dist_tsi%TYPE;
      v_correct_ann_dist_spct   giuw_wperilds_dtl.ann_dist_spct%TYPE;
      v_correct_dist_spct1      giuw_wperilds_dtl.dist_spct%TYPE;
   BEGIN
      --msg_alert('ADJUST_WPERILDS_DTL','I',FALSE);
      v_dist_no := p_dist_no;
      v_dist_seq_no := p_dist_seq_no;
      v_line_cd := p_line_cd;
      v_peril_cd := p_peril_cd;

      /************************************* Start *********************************************
      ** Adjust computational floats between tables GIUW_WPERILDS and GIUW_WPERILDS_DTL.
      ******************************************************************************************/
      BEGIN
         /* **************************** Section A **********************************
         ** Compare the amounts retrieved from the master table with the sum of its
         ** counterparts from the detail table.
         ************************************************************************* */
         FOR c10 IN (SELECT ROUND (NVL (tsi_amt, 0), 2) tsi_amt,
                            ROUND (NVL (prem_amt, 0), 2) prem_amt,
                            ROUND (NVL (ann_tsi_amt, 0), 2) ann_tsi_amt
                       FROM giuw_wperilds
                      WHERE peril_cd = v_peril_cd
                        AND line_cd = v_line_cd
                        AND dist_seq_no = v_dist_seq_no
                        AND dist_no = v_dist_no)
         LOOP
            v_exist := 'Y';
            v_tsi_amt := c10.tsi_amt;
            v_prem_amt := c10.prem_amt;
            v_ann_tsi_amt := c10.ann_tsi_amt;
            EXIT;
         END LOOP;

         IF v_exist = 'N'
         THEN
            RETURN;
         END IF;

         v_exist := 'N';

         FOR c10 IN (SELECT ROUND (SUM (NVL (dist_tsi, 0)), 2) dist_tsi,
                            ROUND (SUM (NVL (dist_prem, 0)), 2) dist_prem,
                            ROUND (SUM (NVL (dist_spct, 0)), 14) dist_spct,
                            ROUND (SUM (NVL (dist_spct1, 0)), 14) dist_spct1,
                            
                            --aaron
                            ROUND (SUM (NVL (ann_dist_tsi, 0)),
                                   2
                                  ) ann_dist_tsi
                       FROM giuw_wperilds_dtl
                      WHERE peril_cd = v_peril_cd
                        AND line_cd = v_line_cd
                        AND dist_seq_no = v_dist_seq_no
                        AND dist_no = v_dist_no)
         LOOP
            v_exist := 'Y';
            v_dist_tsi := c10.dist_tsi;
            v_dist_prem := c10.dist_prem;
            v_dist_spct := c10.dist_spct;
            v_dist_spct1 := c10.dist_spct1;                           --aaron
            v_ann_dist_tsi := c10.ann_dist_tsi;
            EXIT;
         END LOOP;

         IF v_exist = 'N'
         THEN
            RETURN;
         END IF;

         /*************************** End of Section A ****************************/

         /* If the amounts retrieved from the master table
         ** are not equal to the amounts retrieved from the
         ** the detail table then the procedure below shall
         ** be executed. */
         IF    (100 != v_dist_spct)
            OR (100 != v_dist_spct1)
            OR                                                         --aaron
               (v_tsi_amt != v_dist_tsi
               )
            OR (v_prem_amt != v_dist_prem)
            OR (v_ann_tsi_amt != v_ann_dist_tsi)
         THEN
            BEGIN
               v_exist := 'N';

               /*************************** Section B *******************************
               ** Adjust the value of the fields belonging to the NET RETENTION share
               ** (SHARE_CD = '1'). If by chance a NET RETENTION share does not exist,
               ** then the NO_DATA_FOUND exception (Section C) shall handle the next
               ** few steps.
               *********************************************************************/

               /* Get the ROWID of the NET RETENTION share
               ** in preparation for update. */
               FOR c10 IN (SELECT ROWID
                             FROM giuw_wperilds_dtl
                            WHERE share_cd = '1'
                              AND peril_cd = v_peril_cd
                              AND line_cd = v_line_cd
                              AND dist_seq_no = v_dist_seq_no
                              AND dist_no = v_dist_no)
               LOOP
                  /* Get the sum of each field for all the shares excluding the NET
                  ** RETENTION share.  The result will serve as the SUBTRAHEND in
                  ** calculating for the values to be attained by the fields belonging
                  ** to NET RETENTION. */
                  FOR c20 IN
                     (SELECT ROUND (SUM (dist_tsi), 2) dist_tsi,
                             ROUND (SUM (dist_prem), 2) dist_prem,
                             ROUND (SUM (dist_spct), 14) dist_spct,
                             ROUND (SUM (dist_spct1), 14) dist_spct1, --aaron
                             ROUND (SUM (NVL (ann_dist_tsi, 0)),
                                    2
                                   ) ann_dist_tsi,
                             ROUND (SUM (NVL (ann_dist_spct, 0)),
                                    14
                                   ) ann_dist_spct
                        FROM giuw_wperilds_dtl
                       WHERE share_cd != '1'
                         AND peril_cd = v_peril_cd
                         AND line_cd = v_line_cd
                         AND dist_seq_no = v_dist_seq_no
                         AND dist_no = v_dist_no)
                  LOOP
                     v_exist := 'Y';
                     v_sum_dist_tsi := c20.dist_tsi;
                     v_sum_dist_prem := c20.dist_prem;
                     v_sum_dist_spct := c20.dist_spct;
                     v_sum_dist_spct1 := c20.dist_spct1;              --aaron
                     v_sum_ann_dist_tsi := c20.ann_dist_tsi;
                     v_sum_ann_dist_spct := c20.ann_dist_spct;
                     EXIT;
                  END LOOP;

                  IF v_exist = 'N' THEN
                     EXIT;
                  END IF;

                  /* Calculate for the values to be attained by the fields
                  ** belonging to the NET RETENTION share by subtracting
                  ** the values attained from the master table with the
                  ** values attained above. */
                  /* added nvl = 0 to avoid null values when transferring parameters
                  ** from one module to another upon committing in module giuws006
                  ** --petermkaw 11192009 */
                  v_correct_dist_tsi        := NVL (ABS (v_tsi_amt), 0) - NVL (ABS (v_sum_dist_tsi), 0);
                  v_correct_dist_prem       := NVL (ABS (v_prem_amt), 0) - NVL (ABS (v_sum_dist_prem), 0);
                  v_correct_dist_spct       := 100 - NVL (v_sum_dist_spct, 0);
                  v_correct_dist_spct1      := 100 - NVL (v_sum_dist_spct1, 0); --aaron
                  v_correct_ann_dist_tsi    := NVL (ABS (v_ann_tsi_amt), 0) - NVL (ABS (v_sum_ann_dist_tsi), 0);
                  v_correct_ann_dist_spct   := 100 - NVL (v_sum_ann_dist_spct, 0);

                  IF SIGN (v_tsi_amt) = -1 THEN
                     v_correct_dist_tsi := v_correct_dist_tsi * -1;
                  END IF;

                  IF SIGN (v_prem_amt) = -1 THEN
                     v_correct_dist_prem := v_correct_dist_prem * -1;
                  END IF;

                  IF SIGN (v_ann_tsi_amt) = -1 THEN
                     v_correct_ann_dist_tsi := v_correct_ann_dist_tsi * -1;
                  END IF;

                  /* Update the values of the fields belonging to the NET
                  ** RETENTION share to equalize the amounts attained from
                  ** the detail table with the amounts attained from the
                  ** master table. */
                  UPDATE giuw_wperilds_dtl
                     SET dist_tsi = v_correct_dist_tsi,
                         dist_prem = v_correct_dist_prem,
                         dist_spct = v_correct_dist_spct,
                         dist_spct1 = v_correct_dist_spct1,
                         ann_dist_tsi = v_correct_ann_dist_tsi,
                         ann_dist_spct = v_correct_ann_dist_spct
                   WHERE --ROWID = c10.ROWID; modified condition by christian 
                         share_cd = '1'
                     AND peril_cd = v_peril_cd
                     AND line_cd = v_line_cd
                     AND dist_seq_no = v_dist_seq_no
                     AND dist_no = v_dist_no;

                  EXIT;
               END LOOP;

               IF v_exist = 'N' THEN
                  RAISE NO_DATA_FOUND;
               END IF;
            /*************************** End of Section B ***************************/
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  BEGIN
                     /****************************** Section C ******************************
                     ** Adjust the value of the fields belonging to the share of the FIRST
                     ** RETRIEVED ROW.
                     ***********************************************************************/

                     /* Get the ROWID of the first retrieved
                     ** row in preparation for update. */
                     FOR c10 IN (SELECT ROWID
                                   FROM giuw_wperilds_dtl
                                  WHERE ROWNUM = '1'
                                    AND peril_cd = v_peril_cd
                                    AND line_cd = v_line_cd
                                    AND dist_seq_no = v_dist_seq_no
                                    AND dist_no = v_dist_no)
                     LOOP
                        /* Get the sum of each field for all the shares excluding the share
                        ** of the FIRST RETRIEVED ROW.  The result will serve as the SUBTRAHEND
                        ** in calculating for the values to be attained by the fields belonging
                        ** to the FIRST ROW. */
                        FOR c20 IN
                           (SELECT ROUND (SUM (dist_tsi), 2) dist_tsi,
                                   ROUND (SUM (dist_prem), 2) dist_prem,
                                   ROUND (SUM (dist_spct), 14) dist_spct,
                                   ROUND (SUM (dist_spct1), 14) dist_spct1,
                                   ROUND (SUM (NVL (ann_dist_tsi, 0)), 2 ) ann_dist_tsi,
                                   ROUND (SUM (NVL (ann_dist_spct, 0)), 14 ) ann_dist_spct
                              FROM giuw_wperilds_dtl
                             WHERE ROWID != c10.ROWID
                               AND peril_cd = v_peril_cd
                               AND line_cd = v_line_cd
                               AND dist_seq_no = v_dist_seq_no
                               AND dist_no = v_dist_no)
                        LOOP
                           v_sum_dist_tsi := c20.dist_tsi;
                           v_sum_dist_prem := c20.dist_prem;
                           v_sum_dist_spct := c20.dist_spct;
                           v_sum_dist_spct1    := c20.dist_spct1;
                           v_sum_ann_dist_tsi := c20.ann_dist_tsi;
                           v_sum_ann_dist_spct := c20.ann_dist_spct;
                           EXIT;
                        END LOOP;

                        /* Calculate for the values to be attained by the fields
                        ** belonging to the share of the FIRST ROW by subtracting
                        ** the values attained from the master table with the
                        ** values attained above. */
                        /* added nvl = 0 to avoid null values when transferring parameters
                        ** from one module to another upon committing in module giuws006
                        ** --petermkaw 11192009 */
                        v_correct_dist_tsi := NVL (ABS (v_tsi_amt), 0) - NVL (ABS (v_sum_dist_tsi), 0);
                        v_correct_dist_prem := NVL (ABS (v_prem_amt), 0) - NVL (ABS (v_sum_dist_prem), 0);
                        v_correct_dist_spct := 100 - NVL (v_sum_dist_spct, 0);
                        v_correct_dist_spct1 := 100 - NVL(v_sum_dist_spct1,0);
                        v_correct_ann_dist_tsi := NVL (ABS (v_ann_tsi_amt), 0) - NVL (ABS (v_sum_ann_dist_tsi), 0);
                        v_correct_ann_dist_spct := 100 - NVL (v_sum_ann_dist_spct, 0);

                        IF SIGN (v_tsi_amt) = -1 THEN
                           v_correct_dist_tsi := v_correct_dist_tsi * -1;
                        END IF;

                        IF SIGN (v_prem_amt) = -1 THEN
                           v_correct_dist_prem := v_correct_dist_prem * -1;
                        END IF;

                        IF SIGN (v_ann_tsi_amt) = -1 THEN
                           v_correct_ann_dist_tsi := v_correct_ann_dist_tsi * -1;
                        END IF;

                        /* Update the values of the fields belonging to the share
                        ** of the FIRST ROW to equalize the amounts attained from
                        ** the detail table with the amounts attained from the
                        ** master table. */
                        UPDATE giuw_wperilds_dtl
                           SET dist_tsi = v_correct_dist_tsi,
                               dist_prem = v_correct_dist_prem,
                               dist_spct = v_correct_dist_spct,
                               dist_spct1 = v_correct_dist_spct1,
                               ann_dist_tsi = v_correct_ann_dist_tsi,
                               ann_dist_spct = v_correct_ann_dist_spct
                         WHERE ROWID = c10.ROWID;

                        EXIT;
                     END LOOP;
                  END;
            /**************************** End of Section C *************************/
            END;
         END IF;
      END;
/************************************** End ******************************************/
   END;

   PROCEDURE adjust_policy_level_amts (
      p_dist_no   IN   giuw_pol_dist.dist_no%TYPE
   )
   IS
      v_exist                   VARCHAR2 (1)                           := 'N';
      v_count                   NUMBER;
      v_line_cd                 gipi_parlist.line_cd%TYPE;
      v_tsi_amt                 giuw_wpolicyds.tsi_amt%TYPE;
      v_prem_amt                giuw_wpolicyds.prem_amt%TYPE;
      v_ann_tsi_amt             giuw_wpolicyds.ann_tsi_amt%TYPE;
      v_dist_spct               giuw_wpolicyds_dtl.dist_spct%TYPE;
      v_dist_tsi                giuw_wpolicyds_dtl.dist_tsi%TYPE;
      v_dist_prem               giuw_wpolicyds_dtl.dist_prem%TYPE;
      v_ann_dist_tsi            giuw_wpolicyds_dtl.ann_dist_tsi%TYPE;
      v_ann_dist_spct           giuw_wpolicyds_dtl.ann_dist_spct%TYPE;
      v_sum_dist_tsi            giuw_wpolicyds_dtl.dist_tsi%TYPE;
      v_sum_dist_prem           giuw_wpolicyds_dtl.dist_prem%TYPE;
      v_sum_dist_spct           giuw_wpolicyds_dtl.dist_spct%TYPE;
      v_sum_ann_dist_tsi        giuw_wpolicyds_dtl.ann_dist_tsi%TYPE;
      v_sum_ann_dist_spct       giuw_wpolicyds_dtl.ann_dist_spct%TYPE;
      v_correct_dist_tsi        giuw_wpolicyds_dtl.dist_tsi%TYPE;
      v_correct_dist_prem       giuw_wpolicyds_dtl.dist_prem%TYPE;
      v_correct_dist_spct       giuw_wpolicyds_dtl.dist_spct%TYPE;
      v_correct_ann_dist_tsi    giuw_wpolicyds_dtl.ann_dist_tsi%TYPE;
      v_correct_ann_dist_spct   giuw_wpolicyds_dtl.ann_dist_spct%TYPE;
   BEGIN
      /* Scan each DIST_SEQ_NO for computational floats. */
      FOR c1 IN (SELECT dist_no, dist_seq_no,
                        ROUND (NVL (tsi_amt, 0), 2) tsi_amt,
                        ROUND (NVL (prem_amt, 0), 2) prem_amt,
                        ROUND (NVL (ann_tsi_amt, 0), 2) ann_tsi_amt
                   FROM giuw_wpolicyds
                  WHERE dist_no = p_dist_no)
      LOOP
         BEGIN
            /* Get the LINE_CD for the particular DIST_SEQ_NO
            ** for use in retrieving the correct data from
            ** GIUW_WPOLICYDS_DTL. */
            FOR c2 IN (SELECT line_cd
                         FROM giuw_wperilds
                        WHERE dist_seq_no = c1.dist_seq_no
                          AND dist_no = c1.dist_no)
            LOOP
               v_line_cd := c2.line_cd;
               EXIT;
            END LOOP;

            /* **************************** Section A **********************************
            ** Compare the amounts retrieved from the master table with the sum of its
            ** counterparts from the detail table.
            ************************************************************************* */
            v_tsi_amt := c1.tsi_amt;
            v_prem_amt := c1.prem_amt;
            v_ann_tsi_amt := c1.ann_tsi_amt;
            v_exist := 'N';

            FOR c10 IN (SELECT ROUND (SUM (NVL (dist_tsi, 0)), 2) dist_tsi,
                               ROUND (SUM (NVL (dist_prem, 0)), 2) dist_prem,
                               ROUND (SUM (NVL (dist_spct, 0)), 14) dist_spct,
                               ROUND (SUM (NVL (ann_dist_tsi, 0)),
                                      2
                                     ) ann_dist_tsi
                          FROM giuw_wpolicyds_dtl
                         WHERE dist_seq_no = c1.dist_seq_no
                           AND dist_no = c1.dist_no)
            LOOP
               v_exist := 'Y';
               v_dist_tsi := c10.dist_tsi;
               v_dist_prem := c10.dist_prem;
               v_dist_spct := c10.dist_spct;
               v_ann_dist_tsi := c10.ann_dist_tsi;
               EXIT;
            END LOOP;

            IF v_exist = 'N'
            THEN
               EXIT;
            END IF;

            /*************************** End of Section A ****************************/

            /* If the amounts retrieved from the master table
            ** are not equal to the amounts retrieved from the
            ** the detail table then the procedure below shall
            ** be executed. */
            IF    (100 != v_dist_spct)
               OR (v_tsi_amt != v_dist_tsi)
               OR (v_prem_amt != v_dist_prem)
               OR (v_ann_tsi_amt != v_ann_dist_tsi)
            THEN
               BEGIN
                  v_exist := 'N';

                  /*************************** Section B *******************************
                  ** Adjust the value of the fields belonging to the NET RETENTION share
                  ** (SHARE_CD = '1'). If by chance a NET RETENTION share does not exist,
                  ** then the NO_DATA_FOUND exception (Section C) shall handle the next
                  ** few steps.
                  *********************************************************************/

                  /* Get the ROWID of the NET RETENTION share
                  ** in preparation for update. */
                  FOR c10 IN (SELECT ROWID
                                FROM giuw_wpolicyds_dtl
                               WHERE share_cd = '1'
                                 AND line_cd = v_line_cd
                                 AND dist_seq_no = c1.dist_seq_no
                                 AND dist_no = c1.dist_no)
                  LOOP
                     /* Get the sum of each field for all the shares excluding the NET
                     ** RETENTION share.  The result will serve as the SUBTRAHEND in
                     ** calculating for the values to be attained by the fields belonging
                     ** to NET RETENTION. */
                     FOR c20 IN
                        (SELECT ROUND (SUM (dist_tsi), 2) dist_tsi,
                                ROUND (SUM (dist_prem), 2) dist_prem,
                                ROUND (SUM (dist_spct), 14) dist_spct,
                                ROUND (SUM (NVL (ann_dist_tsi, 0)),
                                       2
                                      ) ann_dist_tsi,
                                ROUND
                                     (SUM (NVL (ann_dist_spct, 0)),
                                      14
                                     ) ann_dist_spct
                           FROM giuw_wpolicyds_dtl
                          WHERE share_cd != '1'
                            AND line_cd = v_line_cd
                            AND dist_seq_no = c1.dist_seq_no
                            AND dist_no = c1.dist_no)
                     LOOP
                        v_exist := 'Y';
                        v_sum_dist_tsi := c20.dist_tsi;
                        v_sum_dist_prem := c20.dist_prem;
                        v_sum_dist_spct := c20.dist_spct;
                        v_sum_ann_dist_tsi := c20.ann_dist_tsi;
                        v_sum_ann_dist_spct := c20.ann_dist_spct;
                        EXIT;
                     END LOOP;

                     IF v_exist = 'N'
                     THEN
                        EXIT;
                     END IF;

                     /* Calculate for the values to be attained by the fields
                     ** belonging to the NET RETENTION share by subtracting
                     ** the values attained from the master table with the
                     ** values attained above. */
                     v_correct_dist_tsi :=
                          ABS (NVL (v_tsi_amt, 0))
                        - ABS (NVL (v_sum_dist_tsi, 0));
                     v_correct_dist_prem :=
                          ABS (NVL (v_prem_amt, 0))
                        - ABS (NVL (v_sum_dist_prem, 0));
                     v_correct_dist_spct := 100 - NVL (v_sum_dist_spct, 0);
                     v_correct_ann_dist_tsi :=
                          ABS (NVL (v_ann_tsi_amt, 0))
                        - ABS (NVL (v_sum_ann_dist_tsi, 0));
                     v_correct_ann_dist_spct :=
                                            100 - NVL (v_sum_ann_dist_spct, 0);

                     IF SIGN (v_tsi_amt) = -1
                     THEN
                        v_correct_dist_tsi := v_correct_dist_tsi * -1;
                     END IF;

                     IF SIGN (v_prem_amt) = -1
                     THEN
                        v_correct_dist_prem := v_correct_dist_prem * -1;
                     END IF;

                     IF SIGN (v_ann_tsi_amt) = -1
                     THEN
                        v_correct_ann_dist_tsi := v_correct_ann_dist_tsi * -1;
                     END IF;

                     /* Update the values of the fields belonging to the NET
                     ** RETENTION share to equalize the amounts attained from
                     ** the detail table with the amounts attained from the
                     ** master table. */
                     UPDATE giuw_wpolicyds_dtl
                        SET dist_tsi = v_correct_dist_tsi,
                            dist_prem = v_correct_dist_prem,
                            dist_spct = v_correct_dist_spct,
                            ann_dist_tsi = v_correct_ann_dist_tsi,
                            ann_dist_spct = v_correct_ann_dist_spct
                      WHERE ROWID = c10.ROWID;

                     EXIT;
                  END LOOP;

                  IF v_exist = 'N'
                  THEN
                     RAISE NO_DATA_FOUND;
                  END IF;
               /*************************** End of Section B ***************************/
               EXCEPTION
                  WHEN NO_DATA_FOUND
                  THEN
                     BEGIN
                        /****************************** Section C ******************************
                        ** Adjust the value of the fields belonging to the share of the FIRST
                        ** RETRIEVED ROW.
                        ***********************************************************************/

                        /* Get the ROWID of the first retrieved
                        ** row in preparation for update. */
                        FOR c10 IN (SELECT ROWID
                                      FROM giuw_wpolicyds_dtl
                                     WHERE ROWNUM = '1'
                                       AND dist_seq_no = c1.dist_seq_no
                                       AND dist_no = c1.dist_no)
                        LOOP
                           /* Get the sum of each field for all the shares excluding the share
                           ** of the FIRST RETRIEVED ROW.  The result will serve as the SUBTRAHEND
                           ** in calculating for the values to be attained by the fields belonging
                           ** to the FIRST ROW. */
                           FOR c20 IN
                              (SELECT ROUND (SUM (dist_tsi), 2) dist_tsi,
                                      ROUND (SUM (dist_prem), 2) dist_prem,
                                      ROUND (SUM (dist_spct), 14) dist_spct,
                                      ROUND
                                         (SUM (NVL (ann_dist_tsi, 0)),
                                          2
                                         ) ann_dist_tsi,
                                      ROUND
                                         (SUM (NVL (ann_dist_spct, 0)),
                                          14
                                         ) ann_dist_spct
                                 FROM giuw_wpolicyds_dtl
                                WHERE ROWID != c10.ROWID
                                  AND dist_seq_no = c1.dist_seq_no
                                  AND dist_no = c1.dist_no)
                           LOOP
                              v_sum_dist_tsi := c20.dist_tsi;
                              v_sum_dist_prem := c20.dist_prem;
                              v_sum_dist_spct := c20.dist_spct;
                              v_sum_ann_dist_tsi := c20.ann_dist_tsi;
                              v_sum_ann_dist_spct := c20.ann_dist_spct;
                              EXIT;
                           END LOOP;

                           /* Calculate for the values to be attained by the fields
                           ** belonging to the share of the FIRST ROW by subtracting
                           ** the values attained from the master table with the
                           ** values attained above. */
                           v_correct_dist_tsi :=
                                         ABS (v_tsi_amt)
                                         - ABS (v_sum_dist_tsi);
                           v_correct_dist_prem :=
                                       ABS (v_prem_amt)
                                       - ABS (v_sum_dist_prem);
                           v_correct_dist_spct := 100 - v_sum_dist_spct;
                           v_correct_ann_dist_tsi :=
                                 ABS (v_ann_tsi_amt)
                                 - ABS (v_sum_ann_dist_tsi);
                           v_correct_ann_dist_spct :=
                                                     100 - v_sum_ann_dist_spct;

                           IF SIGN (v_tsi_amt) = -1
                           THEN
                              v_correct_dist_tsi := v_correct_dist_tsi * -1;
                           END IF;

                           IF SIGN (v_prem_amt) = -1
                           THEN
                              v_correct_dist_prem := v_correct_dist_prem * -1;
                           END IF;

                           IF SIGN (v_ann_tsi_amt) = -1
                           THEN
                              v_correct_ann_dist_tsi :=
                                                   v_correct_ann_dist_tsi
                                                   * -1;
                           END IF;

                           /* Update the values of the fields belonging to the share
                           ** of the FIRST ROW to equalize the amounts attained from
                           ** the detail table with the amounts attained from the
                           ** master table. */
                           UPDATE giuw_wpolicyds_dtl
                              SET dist_tsi = v_correct_dist_tsi,
                                  dist_prem = v_correct_dist_prem,
                                  dist_spct = v_correct_dist_spct,
                                  ann_dist_tsi = v_correct_ann_dist_tsi,
                                  ann_dist_spct = v_correct_ann_dist_spct
                            WHERE ROWID = c10.ROWID;

                           EXIT;
                        END LOOP;
                     END;
               /**************************** End of Section C *************************/
               END;
            END IF;
         END;
      END LOOP;
   END adjust_policy_level_amts;

   PROCEDURE adjust_item_level_amts (p_dist_no IN giuw_pol_dist.dist_no%TYPE)
   IS
      v_exist                   VARCHAR2 (1)                           := 'N';
      v_count                   NUMBER;
      v_line_cd                 gipi_parlist.line_cd%TYPE;
      v_tsi_amt                 giuw_wpolicyds.tsi_amt%TYPE;
      v_prem_amt                giuw_wpolicyds.prem_amt%TYPE;
      v_ann_tsi_amt             giuw_wpolicyds.ann_tsi_amt%TYPE;
      v_dist_spct               giuw_wpolicyds_dtl.dist_spct%TYPE;
      v_dist_tsi                giuw_wpolicyds_dtl.dist_tsi%TYPE;
      v_dist_prem               giuw_wpolicyds_dtl.dist_prem%TYPE;
      v_ann_dist_tsi            giuw_wpolicyds_dtl.ann_dist_tsi%TYPE;
      v_ann_dist_spct           giuw_wpolicyds_dtl.ann_dist_spct%TYPE;
      v_sum_dist_tsi            giuw_wpolicyds_dtl.dist_tsi%TYPE;
      v_sum_dist_prem           giuw_wpolicyds_dtl.dist_prem%TYPE;
      v_sum_dist_spct           giuw_wpolicyds_dtl.dist_spct%TYPE;
      v_sum_ann_dist_tsi        giuw_wpolicyds_dtl.ann_dist_tsi%TYPE;
      v_sum_ann_dist_spct       giuw_wpolicyds_dtl.ann_dist_spct%TYPE;
      v_correct_dist_tsi        giuw_wpolicyds_dtl.dist_tsi%TYPE;
      v_correct_dist_prem       giuw_wpolicyds_dtl.dist_prem%TYPE;
      v_correct_dist_spct       giuw_wpolicyds_dtl.dist_spct%TYPE;
      v_correct_ann_dist_tsi    giuw_wpolicyds_dtl.ann_dist_tsi%TYPE;
      v_correct_ann_dist_spct   giuw_wpolicyds_dtl.ann_dist_spct%TYPE;
   BEGIN
      /* Scan each combination of the DIST_SEQ_NO and ITEM_NO for computational floats. */
      FOR c1 IN (SELECT dist_no, dist_seq_no, item_no,
                        ROUND (NVL (tsi_amt, 0), 2) tsi_amt,
                        ROUND (NVL (prem_amt, 0), 2) prem_amt,
                        ROUND (NVL (ann_tsi_amt, 0), 2) ann_tsi_amt
                   FROM giuw_witemds
                  WHERE dist_no = p_dist_no)
      LOOP
         BEGIN
            /* Get the LINE_CD for the particular DIST_SEQ_NO
            ** for use in retrieving the correct data from
            ** GIUW_WITEMDS_DTL. */
            FOR c2 IN (SELECT line_cd
                         FROM giuw_wperilds
                        WHERE dist_seq_no = c1.dist_seq_no
                          AND dist_no = c1.dist_no)
            LOOP
               v_line_cd := c2.line_cd;
               EXIT;
            END LOOP;

            /* **************************** Section A **********************************
            ** Compare the amounts retrieved from the master table with the sum of its
            ** counterparts from the detail table.
            ************************************************************************** */
            v_tsi_amt := c1.tsi_amt;
            v_prem_amt := c1.prem_amt;
            v_ann_tsi_amt := c1.ann_tsi_amt;
            v_exist := 'N';

            FOR c10 IN (SELECT ROUND (SUM (NVL (dist_tsi, 0)), 2) dist_tsi,
                               ROUND (SUM (NVL (dist_prem, 0)), 2) dist_prem,
                               ROUND (SUM (NVL (dist_spct, 0)), 14) dist_spct,
                               ROUND (SUM (NVL (ann_dist_tsi, 0)),
                                      2
                                     ) ann_dist_tsi
                          FROM giuw_witemds_dtl
                         WHERE line_cd = v_line_cd
                           AND item_no = c1.item_no
                           AND dist_seq_no = c1.dist_seq_no
                           AND dist_no = c1.dist_no)
            LOOP
               v_exist := 'Y';
               v_dist_tsi := c10.dist_tsi;
               v_dist_prem := c10.dist_prem;
               v_dist_spct := c10.dist_spct;
               v_ann_dist_tsi := c10.ann_dist_tsi;
               EXIT;
            END LOOP;

            IF v_exist = 'N'
            THEN
               EXIT;
            END IF;

            /******************************** End of Section A ******************************/

            /* If the amounts retrieved from the master table
            ** are not equal to the amounts retrieved from the
            ** the detail table then the procedure below shall
            ** be executed. */
            IF    (100 != v_dist_spct)
               OR (v_tsi_amt != v_dist_tsi)
               OR (v_prem_amt != v_dist_prem)
               OR (v_ann_tsi_amt != v_ann_dist_tsi)
            THEN
               BEGIN
                  v_exist := 'N';

                  /*************************** Section B *******************************
                  ** Adjust the value of the fields belonging to the NET RETENTION share
                  ** (SHARE_CD = '1'). If by chance a NET RETENTION share does not exist,
                  ** then the NO_DATA_FOUND exception (Section F) shall handle the next
                  ** few steps.
                  *********************************************************************/

                  /* Get the ROWID of the NET RETENTION share
                  ** in preparation for update. */
                  FOR c10 IN (SELECT ROWID
                                FROM giuw_witemds_dtl
                               WHERE share_cd = '1'
                                 AND line_cd = v_line_cd
                                 AND item_no = c1.item_no
                                 AND dist_seq_no = c1.dist_seq_no
                                 AND dist_no = c1.dist_no)
                  LOOP
                     /* Get the sum of each field for all the shares excluding the NET
                     ** RETENTION share.  The result will serve as the SUBTRAHEND in
                     ** calculating for the values to be attained by the fields belonging
                     ** to NET RETENTION. */
                     FOR c20 IN
                        (SELECT ROUND (SUM (dist_tsi), 2) dist_tsi,
                                ROUND (SUM (dist_prem), 2) dist_prem,
                                ROUND (SUM (dist_spct), 14) dist_spct,
                                ROUND (SUM (NVL (ann_dist_tsi, 0)),
                                       2
                                      ) ann_dist_tsi,
                                ROUND
                                     (SUM (NVL (ann_dist_spct, 0)),
                                      14
                                     ) ann_dist_spct
                           FROM giuw_witemds_dtl
                          WHERE share_cd != '1'
                            AND line_cd = v_line_cd
                            AND item_no = c1.item_no
                            AND dist_seq_no = c1.dist_seq_no
                            AND dist_no = c1.dist_no)
                     LOOP
                        v_exist := 'Y';
                        v_sum_dist_tsi := c20.dist_tsi;
                        v_sum_dist_prem := c20.dist_prem;
                        v_sum_dist_spct := c20.dist_spct;
                        v_sum_ann_dist_tsi := c20.ann_dist_tsi;
                        v_sum_ann_dist_spct := c20.ann_dist_spct;
                        EXIT;
                     END LOOP;

                     IF v_exist = 'N'
                     THEN
                        EXIT;
                     END IF;

                     /* Calculate for the values to be attained by the fields
                     ** belonging to the NET RETENTION share by subtracting
                     ** the values attained from the master table with the
                     ** values attained above. */
                     v_correct_dist_tsi :=
                          ABS (NVL (v_tsi_amt, 0))
                        - ABS (NVL (v_sum_dist_tsi, 0));
                     v_correct_dist_prem :=
                          ABS (NVL (v_prem_amt, 0))
                        - ABS (NVL (v_sum_dist_prem, 0));
                     v_correct_dist_spct := 100 - NVL (v_sum_dist_spct, 0);
                     v_correct_ann_dist_tsi :=
                          ABS (NVL (v_ann_tsi_amt, 0))
                        - ABS (NVL (v_sum_ann_dist_tsi, 0));
                     v_correct_ann_dist_spct :=
                                            100 - NVL (v_sum_ann_dist_spct, 0);

                     IF SIGN (v_tsi_amt) = -1
                     THEN
                        v_correct_dist_tsi := v_correct_dist_tsi * -1;
                     END IF;

                     IF SIGN (v_prem_amt) = -1
                     THEN
                        v_correct_dist_prem := v_correct_dist_prem * -1;
                     END IF;

                     IF SIGN (v_ann_tsi_amt) = -1
                     THEN
                        v_correct_ann_dist_tsi := v_correct_ann_dist_tsi * -1;
                     END IF;

                     /* Update the values of the fields belonging to the NET
                     ** RETENTION share to equalize the amounts attained from
                     ** the detail table with the amounts attained from the
                     ** master table. */
                     UPDATE giuw_witemds_dtl
                        SET dist_tsi = v_correct_dist_tsi,
                            dist_prem = v_correct_dist_prem,
                            dist_spct = v_correct_dist_spct,
                            ann_dist_tsi = v_correct_ann_dist_tsi,
                            ann_dist_spct = v_correct_ann_dist_spct
                      WHERE ROWID = c10.ROWID;

                     EXIT;
                  END LOOP;

                  IF v_exist = 'N'
                  THEN
                     RAISE NO_DATA_FOUND;
                  END IF;
               /*************************** End of Section B ***************************/
               EXCEPTION
                  WHEN NO_DATA_FOUND
                  THEN
                     BEGIN
                        /****************************** Section C ******************************
                        ** Adjust the value of the fields belonging to the share of the FIRST
                        ** RETRIEVED ROW.
                        ***********************************************************************/

                        /* Get the ROWID of the first retrieved
                        ** row in preparation for update. */
                        FOR c10 IN (SELECT ROWID
                                      FROM giuw_witemds_dtl
                                     WHERE line_cd = v_line_cd
                                       AND item_no = c1.item_no
                                       AND dist_seq_no = c1.dist_seq_no
                                       AND dist_no = c1.dist_no)
                        LOOP
                           /* Get the sum of each field for all the shares excluding the share
                           ** of the FIRST RETRIEVED ROW.  The result will serve as the SUBTRAHEND
                           ** in calculating for the values to be attained by the fields belonging
                           ** to the FIRST ROW. */
                           FOR c20 IN
                              (SELECT ROUND (SUM (dist_tsi), 2) dist_tsi,
                                      ROUND (SUM (dist_prem), 2) dist_prem,
                                      ROUND (SUM (dist_spct), 14) dist_spct,
                                      ROUND
                                         (SUM (NVL (ann_dist_tsi, 0)),
                                          2
                                         ) ann_dist_tsi,
                                      ROUND
                                         (SUM (NVL (ann_dist_spct, 0)),
                                          14
                                         ) ann_dist_spct
                                 FROM giuw_witemds_dtl
                                WHERE ROWID != c10.ROWID
                                  AND line_cd = v_line_cd
                                  AND item_no = c1.item_no
                                  AND dist_seq_no = c1.dist_seq_no
                                  AND dist_no = c1.dist_no)
                           LOOP
                              v_sum_dist_tsi := c20.dist_tsi;
                              v_sum_dist_prem := c20.dist_prem;
                              v_sum_dist_spct := c20.dist_spct;
                              v_sum_ann_dist_tsi := c20.ann_dist_tsi;
                              v_sum_ann_dist_spct := c20.ann_dist_spct;
                              EXIT;
                           END LOOP;

                           /* Calculate for the values to be attained by the fields
                           ** belonging to the share of the FIRST ROW by subtracting
                           ** the values attained from the master table with the
                           ** values attained above. */
                           v_correct_dist_tsi :=
                                         ABS (v_tsi_amt)
                                         - ABS (v_sum_dist_tsi);
                           v_correct_dist_prem :=
                                       ABS (v_prem_amt)
                                       - ABS (v_sum_dist_prem);
                           v_correct_dist_spct := 100 - v_sum_dist_spct;
                           v_correct_ann_dist_tsi :=
                                 ABS (v_ann_tsi_amt)
                                 - ABS (v_sum_ann_dist_tsi);
                           v_correct_ann_dist_spct :=
                                                     100 - v_sum_ann_dist_spct;

                           IF SIGN (v_tsi_amt) = -1
                           THEN
                              v_correct_dist_tsi := v_correct_dist_tsi * -1;
                           END IF;

                           IF SIGN (v_prem_amt) = -1
                           THEN
                              v_correct_dist_prem := v_correct_dist_prem * -1;
                           END IF;

                           IF SIGN (v_ann_tsi_amt) = -1
                           THEN
                              v_correct_ann_dist_tsi :=
                                                   v_correct_ann_dist_tsi
                                                   * -1;
                           END IF;

                           /* Update the values of the fields belonging to the share
                           ** of the FIRST ROW to equalize the amounts attained from
                           ** the detail table with the amounts attained from the
                           ** master table. */
                           UPDATE giuw_witemds_dtl
                              SET dist_tsi = v_correct_dist_tsi,
                                  dist_prem = v_correct_dist_prem,
                                  dist_spct = v_correct_dist_spct,
                                  ann_dist_tsi = v_correct_ann_dist_tsi,
                                  ann_dist_spct = v_correct_ann_dist_spct
                            WHERE ROWID = c10.ROWID;

                           EXIT;
                        END LOOP;
                     END;
               /**************************** End of Section C *************************/
               END;
            END IF;
         END;
      END LOOP;
   END adjust_item_level_amts;

   PROCEDURE adjust_item_peril_level_amts (
      p_dist_no   IN   giuw_pol_dist.dist_no%TYPE
   )
   IS
      v_exist                   VARCHAR2 (1)                           := 'N';
      v_count                   NUMBER;
      v_tsi_amt                 giuw_wpolicyds.tsi_amt%TYPE;
      v_prem_amt                giuw_wpolicyds.prem_amt%TYPE;
      v_ann_tsi_amt             giuw_wpolicyds.ann_tsi_amt%TYPE;
      v_dist_spct               giuw_wpolicyds_dtl.dist_spct%TYPE;
      v_dist_tsi                giuw_wpolicyds_dtl.dist_tsi%TYPE;
      v_dist_prem               giuw_wpolicyds_dtl.dist_prem%TYPE;
      v_ann_dist_tsi            giuw_wpolicyds_dtl.ann_dist_tsi%TYPE;
      v_ann_dist_spct           giuw_wpolicyds_dtl.ann_dist_spct%TYPE;
      v_sum_dist_tsi            giuw_wpolicyds_dtl.dist_tsi%TYPE;
      v_sum_dist_prem           giuw_wpolicyds_dtl.dist_prem%TYPE;
      v_sum_dist_spct           giuw_wpolicyds_dtl.dist_spct%TYPE;
      v_sum_ann_dist_tsi        giuw_wpolicyds_dtl.ann_dist_tsi%TYPE;
      v_sum_ann_dist_spct       giuw_wpolicyds_dtl.ann_dist_spct%TYPE;
      v_correct_dist_tsi        giuw_wpolicyds_dtl.dist_tsi%TYPE;
      v_correct_dist_prem       giuw_wpolicyds_dtl.dist_prem%TYPE;
      v_correct_dist_spct       giuw_wpolicyds_dtl.dist_spct%TYPE;
      v_correct_ann_dist_tsi    giuw_wpolicyds_dtl.ann_dist_tsi%TYPE;
      v_correct_ann_dist_spct   giuw_wpolicyds_dtl.ann_dist_spct%TYPE;
   BEGIN
      /*
      **  Created by   : Jerome Orio
      **  Date Created : April 05, 2010
      **  Reference By : (GIPIS055 - POST PAR)
      **  Description  : ADJUST_ITEM_PERIL_LEVEL_AMTS program unit
      */

      /* Scan each combination of the DIST_SEQ_NO, ITEM_NO, LINE_CD and
      ** PERIL_CD for computational floats. */
      FOR c1 IN (SELECT dist_no, dist_seq_no, item_no, line_cd, peril_cd,
                        ROUND (NVL (tsi_amt, 0), 2) tsi_amt,
                        ROUND (NVL (prem_amt, 0), 2) prem_amt,
                        ROUND (NVL (ann_tsi_amt, 0), 2) ann_tsi_amt
                   FROM giuw_witemperilds
                  WHERE dist_no = p_dist_no)
      LOOP
         BEGIN
            /* **************************** Section A **********************************
            ** Compare the amounts retrieved from the master table with the sum of its
            ** counterparts from the detail table.
            ************************************************************************* */
            v_tsi_amt := c1.tsi_amt;
            v_prem_amt := c1.prem_amt;
            v_ann_tsi_amt := c1.ann_tsi_amt;
            v_exist := 'N';

            FOR c10 IN (SELECT ROUND (SUM (NVL (dist_tsi, 0)), 2) dist_tsi,
                               ROUND (SUM (NVL (dist_prem, 0)), 2) dist_prem,
                               ROUND (SUM (NVL (dist_spct, 0)), 14)
                                                                   dist_spct,
                               ROUND (SUM (NVL (ann_dist_tsi, 0)),
                                      2
                                     ) ann_dist_tsi
                          FROM giuw_witemperilds_dtl
                         WHERE peril_cd = c1.peril_cd
                           AND line_cd = c1.line_cd
                           AND item_no = c1.item_no
                           AND dist_seq_no = c1.dist_seq_no
                           AND dist_no = c1.dist_no)
            LOOP
               v_exist := 'Y';
               v_dist_tsi := c10.dist_tsi;
               v_dist_prem := c10.dist_prem;
               v_dist_spct := c10.dist_spct;
               v_ann_dist_tsi := c10.ann_dist_tsi;
               EXIT;
            END LOOP;

            IF v_exist = 'N'
            THEN
               EXIT;
            END IF;

            /******************************** End of Section A ******************************/

            /* If the amounts retrieved from the master table
            ** are not equal to the amounts retrieved from the
            ** the detail table then the procedure below shall
            ** be executed. */
            IF    (100 != v_dist_spct)
               OR (v_tsi_amt != v_dist_tsi)
               OR (v_prem_amt != v_dist_prem)
               OR (v_ann_tsi_amt != v_ann_dist_tsi)
            THEN
               BEGIN
                  v_exist := 'N';

                  /*************************** Section B *******************************
                  ** Adjust the value of the fields belonging to the NET RETENTION share
                  ** (SHARE_CD = '1'). If by chance a NET RETENTION share does not exist,
                  ** then the NO_DATA_FOUND exception (Section F) shall handle the next
                  ** few steps.
                  *********************************************************************/

                  /* Get the ROWID of the NET RETENTION share
                  ** in preparation for update. */
                  FOR c10 IN (SELECT ROWID
                                FROM giuw_witemperilds_dtl
                               WHERE share_cd = '1'
                                 AND peril_cd = c1.peril_cd
                                 AND line_cd = c1.line_cd
                                 AND item_no = c1.item_no
                                 AND dist_seq_no = c1.dist_seq_no
                                 AND dist_no = c1.dist_no)
                  LOOP
                     /* Get the sum of each field for all the shares excluding the NET
                     ** RETENTION share.  The result will serve as the SUBTRAHEND in
                     ** calculating for the values to be attained by the fields belonging
                     ** to NET RETENTION. */
                     FOR c20 IN
                        (SELECT ROUND (SUM (dist_tsi), 2) dist_tsi,
                                ROUND (SUM (dist_prem), 2) dist_prem,
                                ROUND (SUM (dist_spct), 14) dist_spct,
                                ROUND (SUM (NVL (ann_dist_tsi, 0)),
                                       2
                                      ) ann_dist_tsi,
                                ROUND
                                     (SUM (NVL (ann_dist_spct, 0)),
                                      14
                                     ) ann_dist_spct
                           FROM giuw_witemperilds_dtl
                          WHERE share_cd != '1'
                            AND peril_cd = c1.peril_cd
                            AND line_cd = c1.line_cd
                            AND item_no = c1.item_no
                            AND dist_seq_no = c1.dist_seq_no
                            AND dist_no = c1.dist_no)
                     LOOP
                        v_exist := 'Y';
                        v_sum_dist_tsi := c20.dist_tsi;
                        v_sum_dist_prem := c20.dist_prem;
                        v_sum_dist_spct := c20.dist_spct;
                        v_sum_ann_dist_tsi := c20.ann_dist_tsi;
                        v_sum_ann_dist_spct := c20.ann_dist_spct;
                        EXIT;
                     END LOOP;

                     IF v_exist = 'N'
                     THEN
                        EXIT;
                     END IF;

                     /* Calculate for the values to be attained by the fields
                     ** belonging to the NET RETENTION share by subtracting
                     ** the values attained from the master table with the
                     ** values attained above. */
                     v_correct_dist_tsi :=
                                         ABS (v_tsi_amt)
                                         - ABS (v_sum_dist_tsi);
                     v_correct_dist_prem :=
                                       ABS (v_prem_amt)
                                       - ABS (v_sum_dist_prem);
                     v_correct_dist_spct := 100 - v_sum_dist_spct;
                     v_correct_ann_dist_tsi :=
                                 ABS (v_ann_tsi_amt)
                                 - ABS (v_sum_ann_dist_tsi);
                     v_correct_ann_dist_spct := 100 - v_sum_ann_dist_spct;

                     IF SIGN (v_tsi_amt) = -1
                     THEN
                        v_correct_dist_tsi := v_correct_dist_tsi * -1;
                     END IF;

                     IF SIGN (v_prem_amt) = -1
                     THEN
                        v_correct_dist_prem := v_correct_dist_prem * -1;
                     END IF;

                     IF SIGN (v_ann_tsi_amt) = -1
                     THEN
                        v_correct_ann_dist_tsi := v_correct_ann_dist_tsi * -1;
                     END IF;

                     /* Update the values of the fields belonging to the NET
                     ** RETENTION share to equalize the amounts attained from
                     ** the detail table with the amounts attained from the
                     ** master table. */
                     UPDATE giuw_witemperilds_dtl
                        SET dist_tsi = v_correct_dist_tsi,
                            dist_prem = v_correct_dist_prem,
                            dist_spct = v_correct_dist_spct,
                            ann_dist_tsi = v_correct_ann_dist_tsi,
                            ann_dist_spct = v_correct_ann_dist_spct
                      WHERE ROWID = c10.ROWID;

                     EXIT;
                  END LOOP;

                  IF v_exist = 'N'
                  THEN
                     RAISE NO_DATA_FOUND;
                  END IF;
               /*************************** End of Section B ***************************/
               EXCEPTION
                  WHEN NO_DATA_FOUND
                  THEN
                     BEGIN
                        /****************************** Section C ******************************
                        ** Adjust the value of the fields belonging to the share of the FIRST
                        ** RETRIEVED ROW.
                        ***********************************************************************/

                        /* Get the ROWID of the first retrieved
                        ** row in preparation for update. */
                        FOR c10 IN (SELECT ROWID
                                      FROM giuw_witemperilds_dtl
                                     WHERE ROWNUM = 1
                                       AND peril_cd = c1.peril_cd
                                       AND line_cd = c1.line_cd
                                       AND item_no = c1.item_no
                                       AND dist_seq_no = c1.dist_seq_no
                                       AND dist_no = c1.dist_no)
                        LOOP
                           /* Get the sum of each field for all the shares excluding the share
                           ** of the FIRST RETRIEVED ROW.  The result will serve as the SUBTRAHEND
                           ** in calculating for the values to be attained by the fields belonging
                           ** to the FIRST ROW. */
                           FOR c20 IN
                              (SELECT ROUND (SUM (dist_tsi), 2) dist_tsi,
                                      ROUND (SUM (dist_prem), 2) dist_prem,
                                      ROUND (SUM (dist_spct), 14) dist_spct,
                                      ROUND
                                         (SUM (NVL (ann_dist_tsi, 0)),
                                          2
                                         ) ann_dist_tsi,
                                      ROUND
                                         (SUM (NVL (ann_dist_spct, 0)),
                                          14
                                         ) ann_dist_spct
                                 FROM giuw_witemperilds_dtl
                                WHERE ROWID != c10.ROWID
                                  AND peril_cd = c1.peril_cd
                                  AND line_cd = c1.line_cd
                                  AND item_no = c1.item_no
                                  AND dist_seq_no = c1.dist_seq_no
                                  AND dist_no = c1.dist_no)
                           LOOP
                              v_sum_dist_tsi := c20.dist_tsi;
                              v_sum_dist_prem := c20.dist_prem;
                              v_sum_dist_spct := c20.dist_spct;
                              v_sum_ann_dist_tsi := c20.ann_dist_tsi;
                              v_sum_ann_dist_spct := c20.ann_dist_spct;
                              EXIT;
                           END LOOP;

                           /* Calculate for the values to be attained by the fields
                           ** belonging to the share of the FIRST ROW by subtracting
                           ** the values attained from the master table with the
                           ** values attained above. */
                           v_correct_dist_tsi :=
                                         ABS (v_tsi_amt)
                                         - ABS (v_sum_dist_tsi);
                           v_correct_dist_prem :=
                                       ABS (v_prem_amt)
                                       - ABS (v_sum_dist_prem);
                           v_correct_dist_spct := 100 - v_sum_dist_spct;
                           v_correct_ann_dist_tsi :=
                                 ABS (v_ann_tsi_amt)
                                 - ABS (v_sum_ann_dist_tsi);
                           v_correct_ann_dist_spct :=
                                                     100 - v_sum_ann_dist_spct;

                           IF SIGN (v_tsi_amt) = -1
                           THEN
                              v_correct_dist_tsi := v_correct_dist_tsi * -1;
                           END IF;

                           IF SIGN (v_prem_amt) = -1
                           THEN
                              v_correct_dist_prem := v_correct_dist_prem * -1;
                           END IF;

                           IF SIGN (v_ann_tsi_amt) = -1
                           THEN
                              v_correct_ann_dist_tsi :=
                                                   v_correct_ann_dist_tsi
                                                   * -1;
                           END IF;

                           /* Update the values of the fields belonging to the share
                           ** of the FIRST ROW to equalize the amounts attained from
                           ** the detail table with the amounts attained from the
                           ** master table. */
                           UPDATE giuw_witemperilds_dtl
                              SET dist_tsi = v_correct_dist_tsi,
                                  dist_prem = v_correct_dist_prem,
                                  dist_spct = v_correct_dist_spct,
                                  ann_dist_tsi = v_correct_ann_dist_tsi,
                                  ann_dist_spct = v_correct_ann_dist_spct
                            WHERE ROWID = c10.ROWID;

                           EXIT;
                        END LOOP;
                     END;
               /**************************** End of Section C *************************/
               END;
            END IF;
         END;
      END LOOP;
   END adjust_item_peril_level_amts;

   PROCEDURE post_form_commit_giuws003 (
      p_par_id        gipi_wpolbas.par_id%TYPE,
      p_dist_no       giuw_pol_dist.dist_no%TYPE,
      p_dist_seq_no   giuw_wperilds.dist_seq_no%TYPE,
      p_line_cd       giuw_wperilds.line_cd%TYPE,
      p_peril_cd      giuw_wperilds.peril_cd%TYPE,
      p_subline_cd    gipi_wpolbas.subline_cd%TYPE,
      p_pol_flag      gipi_wpolbas.pol_flag%TYPE,
      p_par_type      gipi_parlist.par_type%TYPE,
      p_post_sw       VARCHAR2
   )
   IS
      v_changes   VARCHAR2 (1) := 'Y';                 --dahil updated na sya
   BEGIN
      /* Adjust computational floats to equalize the amounts
      ** attained by the master tables with that of its detail
      ** tables.
      ** Tables involved:  GIUW_WPERILDS - GIUW_WPERILDS_DTL */
      IF p_pol_flag != '2' AND p_par_type = 'P' OR NVL (v_changes, 'N') = 'Y'
      THEN
         GIUW_POL_DIST_PKG.ADJUST_WPERILDS_DTL(p_dist_no, p_dist_seq_no, p_line_cd, p_peril_cd); -- commented out by christian
         --NULL;
      END IF;

      IF (p_post_sw = 'Y')
      THEN
         RETURN;
      END IF;

/* *************************** START OF FOR COMMIT ONLY ******************************** */
/*  PROCEDURE IS ONLY PERFORMED DURING COMMIT PROCESSING WHERE THE VALUE OF THE VARIABLE
**  VARIABLES.POST_SW IS EQUAL TO 'N'.                                                   */
/* ************************************************************************************* */

      /* Reset DIST_FLAG to undistributed as
      ** the current changes made were not yet
      ** posted to the master tables. */
      UPDATE giuw_pol_dist
         SET dist_flag = '1',
             post_flag = 'P'
       WHERE par_id = p_par_id AND dist_no = p_dist_no;

      IF p_pol_flag != '2' AND p_par_type = 'P' OR NVL (v_changes, 'N') = 'Y'
      THEN
         /* Remove existing records related to the
         ** current DIST_NO from certain distribution
         ** and RI master tables considering the fact
         ** that the current changes made were not yet
         ** posted to the master tables. */
         giuw_pol_dist_pkg.delete_dist_master_tables (p_dist_no);

         BEGIN
            giuw_witemperilds_dtl_pkg.populate_witemperilds_dtl (p_dist_no);
            giuw_witemds_dtl_pkg.populate_witemds_dtl (p_dist_no);
            giuw_wpolicyds_dtl_pkg.populate_wpolicyds_dtl (p_dist_no);
            /* Adjust computational floats to equalize the amounts
            ** attained by the master tables with that of its detail
            ** tables.
            ** Tables involved:  GIUW_WPOLICYDS    - GIUW_WPOLICYDS_DTL
            **                   GIUW_WITEMDS      - GIUW_WITEMDS_DTL
            **                   GIUW_WITEMPERILDS - GIUW_WITEMPERILDS_DTL */
            giuw_pol_dist_pkg.adjust_net_ret_imperfection2 (p_dist_no);
         /*UPDATE giuw_wpolicyds
            SET dist_flag = '2'
          WHERE dist_no = p_dist_no;*/
         END;
      END IF;

      /* Create records in RI tables if a facultative
      ** share exists in any of the DIST_SEQ_NO in table
      ** GIUW_WPOLICYDS_DTL. */
      create_ri_records (p_dist_no, p_par_id, p_line_cd, p_subline_cd);
      /* ******************************** END OF FOR COMMIT ONLY ******************************** */
      v_changes := 'N';
   END post_form_commit_giuws003;

   PROCEDURE create_peril_dflt_wperilds2 (
      p_dist_no           IN   giuw_wperilds_dtl.dist_no%TYPE,
      p_dist_seq_no       IN   giuw_wperilds_dtl.dist_seq_no%TYPE,
      p_line_cd           IN   giuw_wperilds_dtl.line_cd%TYPE,
      p_peril_cd          IN   giuw_wperilds_dtl.peril_cd%TYPE,
      p_dist_tsi          IN   giuw_wperilds_dtl.dist_tsi%TYPE,
      p_dist_prem         IN   giuw_wperilds_dtl.dist_prem%TYPE,
      p_ann_dist_tsi      IN   giuw_wperilds_dtl.ann_dist_tsi%TYPE,
      p_currency_rt       IN   gipi_winvoice.currency_rt%TYPE,
      p_default_no        IN   giis_default_dist.default_no%TYPE,
      p_default_type      IN   giis_default_dist.default_type%TYPE,
      p_dflt_netret_pct   IN   giis_default_dist.dflt_netret_pct%TYPE,
      p_pol_flag          IN   gipi_wpolbas.pol_flag%TYPE,
      p_par_id            IN   gipi_wpolbas.par_id%TYPE,
      p_par_type          IN   gipi_parlist.par_type%TYPE
   )
   IS
      v_dflt_dist_exist    VARCHAR2 (1)                          := 'N';
      v_dist_spct          giuw_wperilds_dtl.dist_spct%TYPE;
      v_dist_tsi           giuw_wperilds_dtl.dist_tsi%TYPE;
      v_dist_prem          giuw_wperilds_dtl.dist_prem%TYPE;
      v_ann_dist_tsi       giuw_wperilds_dtl.ann_dist_tsi%TYPE;
      v_share_cd           giis_dist_share.share_cd%TYPE;
      v_sum_dist_tsi       giuw_wperilds_dtl.dist_tsi%TYPE       := 0;
      v_sum_dist_spct      giuw_wperilds_dtl.dist_spct%TYPE      := 0;
      v_sum_dist_prem      giuw_wperilds_dtl.dist_prem%TYPE      := 0;
      v_sum_ann_dist_tsi   giuw_wperilds_dtl.ann_dist_tsi%TYPE   := 0;
      v_dist_spct_limit    NUMBER;
      v_remaining_tsi      NUMBER               := p_dist_tsi * p_currency_rt;
      v_item_no            NUMBER;
      v_default            VARCHAR2 (1)                          := 'Y';
      v_peril_cd           giuw_wperilds_dtl.peril_cd%TYPE      := p_peril_cd;
      v_existing           VARCHAR2(1) := 'N'; --edgar 06/11/2014

      CURSOR dist_peril_cur
      IS
         SELECT   a.share_cd, a.share_pct, a.share_amt1
             FROM giis_default_dist_peril a
            WHERE a.default_no = p_default_no
              AND a.line_cd = p_line_cd
              AND a.peril_cd = p_peril_cd
              AND a.share_cd <> 999
         ORDER BY a.SEQUENCE ASC;

      PROCEDURE insert_to_wperilds_dtl
      IS
      BEGIN
         INSERT INTO giuw_wperilds_dtl
                     (dist_no, dist_seq_no, line_cd, share_cd,
                      dist_spct, dist_tsi, dist_prem, ann_dist_spct,
                      ann_dist_tsi, dist_grp, peril_cd
                     )
              VALUES (p_dist_no, p_dist_seq_no, p_line_cd, v_share_cd,
                      v_dist_spct, v_dist_tsi, v_dist_prem, v_dist_spct,
                      v_ann_dist_tsi, 1, p_peril_cd
                     );
      END;
   BEGIN
      IF p_pol_flag = '2'
      THEN
         FOR c IN (SELECT DISTINCT share_cd, dist_spct
                              FROM giuw_perilds_dtl a
                             WHERE 1 = 1
                               AND a.peril_cd = p_peril_cd
                               AND a.dist_seq_no = p_dist_seq_no
                               AND dist_no =
                                      (SELECT MAX (dist_no)
                                         FROM giuw_pol_dist
                                        WHERE policy_id =
                                                    (SELECT MAX(a.old_policy_id)
                                                       FROM gipi_wpolnrep a
                                                           ,gipi_parlist b
                                                      WHERE a.par_id = p_par_id
                                                        AND a.ren_rep_sw = '1'
                                                        AND a.par_id = b.par_id
                                                        AND b.par_status NOT IN(98,99)))
                   /*UNION
                   SELECT DISTINCT share_cd, dist_spct
                              FROM giuw_wperilds_dtl a
                             WHERE 1 = 1
                               AND a.peril_cd = p_peril_cd
                               AND a.dist_seq_no = p_dist_seq_no
                               AND dist_no =
                                      (SELECT MAX (dist_no)
                                         FROM giuw_pol_dist
                                        WHERE policy_id =
                                                    (SELECT old_policy_id
                                                       FROM gipi_wpolnrep
                                                      WHERE par_id = p_par_id))*/--commented out by edgar 06/11/2014
                                                      )
         LOOP
            v_existing := 'Y'; 
            v_share_cd := c.share_cd;
            v_dist_spct := c.dist_spct;
            v_dist_tsi := ROUND (((p_dist_tsi * c.dist_spct) / 100), 2);
            v_dist_prem := ROUND (((p_dist_prem * c.dist_spct) / 100), 2);
            v_ann_dist_tsi :=
                           ROUND (((p_ann_dist_tsi * c.dist_spct) / 100), 2);
            v_sum_dist_tsi := NVL (v_sum_dist_tsi, 0) + NVL (v_dist_tsi, 0);
            v_sum_dist_prem := NVL (v_sum_dist_prem, 0)
                               + NVL (v_dist_prem, 0);
            v_sum_ann_dist_tsi :=
                         NVL (v_sum_ann_dist_tsi, 0)
                         + NVL (v_ann_dist_tsi, 0);
            insert_to_wperilds_dtl;
         END LOOP;
         /*added edgar 06/11/2014*/
         IF v_existing = 'N'
         THEN
             /* Use AMOUNTS to create the default distribution records. */
             IF p_default_type = 1
             THEN
                FOR c1 IN dist_peril_cur
                LOOP
                   v_dflt_dist_exist := 'Y';

                   IF v_remaining_tsi >= c1.share_amt1
                   THEN
                      v_dist_tsi := c1.share_amt1 / p_currency_rt;
                      v_remaining_tsi := v_remaining_tsi - c1.share_amt1;
                   ELSE
                      v_remaining_tsi := 0;
                   END IF;

                   IF v_remaining_tsi != 0
                   THEN
                      IF p_dist_tsi = 0
                      THEN
                         v_dist_spct := 0;
                      ELSE
                         v_dist_spct := ROUND (v_dist_tsi / p_dist_tsi * 100, 14);
                      END IF;

                      v_dist_tsi := ROUND (p_dist_tsi * v_dist_spct / 100, 2);
                      v_dist_prem := ROUND (p_dist_prem * v_dist_spct / 100, 2);
                      v_ann_dist_tsi :=
                                     ROUND (p_ann_dist_tsi * v_dist_spct / 100, 2);
                      v_sum_dist_spct := v_sum_dist_spct + v_dist_spct;
                      v_sum_dist_tsi := v_sum_dist_tsi + v_dist_tsi;
                      v_sum_dist_prem := v_sum_dist_prem + v_dist_prem;
                      v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
                   ELSIF v_remaining_tsi = 0
                   THEN
                      v_dist_spct := 100 - v_sum_dist_spct;
                      v_dist_prem := p_dist_prem - v_sum_dist_prem;
                      v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                      v_dist_tsi := p_dist_tsi - v_sum_dist_tsi;
                   END IF;

                   v_share_cd := c1.share_cd;
                   insert_to_wperilds_dtl;

                   IF v_remaining_tsi = 0
                   THEN
                      EXIT;
                   END IF;
                END LOOP;

                IF v_remaining_tsi != 0 AND v_dflt_dist_exist = 'Y'
                THEN
                   v_dist_spct := 100 - v_sum_dist_spct;
                   v_dist_prem := p_dist_prem - v_sum_dist_prem;
                   v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                   v_dist_tsi := p_dist_tsi - v_sum_dist_tsi;
                   v_share_cd := '999';
                   insert_to_wperilds_dtl;
                END IF;
             /* Use PERCENTAGES to create the default distribution records. */
             ELSIF p_default_type = 2
             THEN
                FOR c1 IN dist_peril_cur
                LOOP
                   v_dflt_dist_exist := 'Y';
                   v_dist_spct := c1.share_pct;

                   IF c1.share_amt1 IS NOT NULL
                   THEN
                      v_dist_tsi := c1.share_amt1 / p_currency_rt;

                      IF p_dist_tsi != 0
                      THEN
                         v_dist_spct_limit :=
                                        ROUND (v_dist_tsi / p_dist_tsi * 100, 14);
                      ELSE
                         v_dist_spct_limit := 0;
                      END IF;

                      /* Modified by Loth 050499
                      ** this statement is only true if v_dist_spct_limit
                      ** is greater than or equal to zero.
                      */
                      IF v_dist_spct_limit >= 0
                      THEN
                         IF v_dist_spct > v_dist_spct_limit
                         THEN
                            v_dist_spct := v_dist_spct_limit;
                         END IF;
                      END IF;
                   END IF;

                   v_sum_dist_spct := v_sum_dist_spct + v_dist_spct;

                   IF v_sum_dist_spct != 100
                   THEN
                      v_dist_tsi := ROUND (p_dist_tsi * v_dist_spct / 100, 2);
                      v_dist_prem := ROUND (p_dist_prem * v_dist_spct / 100, 2);
                      v_ann_dist_tsi :=
                                    ROUND (p_ann_dist_tsi * v_dist_spct / 100, 2);
                      v_sum_dist_tsi := v_sum_dist_tsi + v_dist_tsi;
                      v_sum_dist_prem := v_sum_dist_prem + v_dist_prem;
                      v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
                   ELSE
                      v_dist_tsi := p_dist_tsi - v_sum_dist_tsi;
                      v_dist_prem := p_dist_prem - v_sum_dist_prem;
                      v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                   END IF;

                   v_share_cd := c1.share_cd;
                   insert_to_wperilds_dtl;
                END LOOP;

                IF v_sum_dist_spct != 100 AND v_dflt_dist_exist = 'Y'
                THEN
                   v_dist_spct := 100 - v_sum_dist_spct;
                   v_dist_tsi := p_dist_tsi - v_sum_dist_tsi;
                   v_dist_prem := p_dist_prem - v_sum_dist_prem;
                   v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                   v_share_cd := '999';
                   insert_to_wperilds_dtl;
                END IF;
             END IF;

             /* If GIIS_DEFAULT_DIST_PERIL does not contain a record that
             ** corresponds to the particular peril being distributed,
             ** then use the value of the DFLT_NETRET_PCT column retrieved
             ** from table GIIS_DEFAULT_DIST. */
             IF v_dflt_dist_exist = 'N' AND p_dflt_netret_pct IS NOT NULL
             THEN
                IF p_dflt_netret_pct != 100
                THEN
                   v_dist_spct := p_dflt_netret_pct;
                   v_dist_tsi := ROUND (p_dist_tsi * p_dflt_netret_pct / 100, 2);
                   v_dist_prem :=
                                 ROUND (p_dist_prem * p_dflt_netret_pct / 100, 2);
                   v_ann_dist_tsi :=
                              ROUND (p_ann_dist_tsi * p_dflt_netret_pct / 100, 2);
                   v_sum_dist_tsi := v_sum_dist_tsi + v_dist_tsi;
                   v_sum_dist_prem := v_sum_dist_prem + v_dist_prem;
                   v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
                ELSE
                   v_dist_spct := p_dflt_netret_pct;
                   v_dist_tsi := p_dist_tsi;
                   v_dist_prem := p_dist_prem;
                   v_ann_dist_tsi := p_ann_dist_tsi;
                END IF;

                v_share_cd := 1;
                insert_to_wperilds_dtl;

                IF p_dflt_netret_pct != 100
                THEN
                   v_dist_spct := 100 - p_dflt_netret_pct;
                   v_dist_tsi := p_dist_tsi - v_sum_dist_tsi;
                   v_dist_prem := p_dist_prem - v_sum_dist_prem;
                   v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                   v_share_cd := '999';
                   insert_to_wperilds_dtl;
                END IF;
             /* If no default distribution record was found in table
             ** GIIS_DEFAULT_DIST, then create the record using
             ** the traditional 100% NET RETENTION, 0% FACULTATIVE
             ** default. */
             ELSIF v_dflt_dist_exist = 'N'
             THEN
                /* Create the default distribution records based on the 100%
                ** NET RETENTION and 0% FACULTATIVE hard code defaults. */
                v_share_cd := 1;
                v_dist_spct := 100;
                v_dist_tsi := p_dist_tsi;
                v_dist_prem := p_dist_prem;
                v_ann_dist_tsi := p_ann_dist_tsi;

                FOR c IN 1 .. 2
                LOOP
                   insert_to_wperilds_dtl;
                   v_share_cd := 999;
                   v_dist_spct := 0;
                   v_dist_tsi := 0;
                   v_dist_prem := 0;
                   v_ann_dist_tsi := 0;
                END LOOP;

             END IF;
         END IF;
        /*ended edgar 06/11/2014*/      
      ELSIF p_par_type = 'E'
      THEN
         FOR c IN (SELECT DISTINCT share_cd, dist_spct
                              FROM giuw_perilds_dtl a
                             WHERE 1 = 1
                               AND a.peril_cd = p_peril_cd
                               AND a.dist_seq_no = p_dist_seq_no
                               AND dist_no =
                                      (SELECT MAX (dist_no)
                                         FROM giuw_pol_dist
                                        WHERE par_id =
                                                 (SELECT par_id
                                                    FROM gipi_polbasic
                                                   WHERE endt_seq_no = 0
                                                     AND (line_cd,
                                                          subline_cd,
                                                          iss_cd,
                                                          issue_yy,
                                                          pol_seq_no,
                                                          renew_no
                                                         ) =
                                                            (SELECT line_cd,
                                                                    subline_cd,
                                                                    iss_cd,
                                                                    issue_yy,
                                                                    pol_seq_no,
                                                                    renew_no
                                                               FROM gipi_wpolbas
                                                              WHERE par_id =
                                                                       p_par_id)))
                   /*UNION
                   SELECT DISTINCT share_cd, dist_spct
                              FROM giuw_wperilds_dtl a
                             WHERE 1 = 1
                               AND a.peril_cd = p_peril_cd
                               AND a.dist_seq_no = p_dist_seq_no
                               AND dist_no =
                                      (SELECT MAX (dist_no)
                                         FROM giuw_pol_dist
                                        WHERE par_id =
                                                 (SELECT par_id
                                                    FROM gipi_polbasic
                                                   WHERE endt_seq_no = 0
                                                     AND (line_cd,
                                                          subline_cd,
                                                          iss_cd,
                                                          issue_yy,
                                                          pol_seq_no,
                                                          renew_no
                                                         ) =
                                                            (SELECT line_cd,
                                                                    subline_cd,
                                                                    iss_cd,
                                                                    issue_yy,
                                                                    pol_seq_no,
                                                                    renew_no
                                                               FROM gipi_wpolbas
                                                              WHERE par_id =
                                                                       p_par_id)))*/--commented out by edgar 06/11/2014
                                                                       )
         LOOP
            v_existing := 'Y';
            v_share_cd := c.share_cd;
            v_dist_spct := c.dist_spct;
            v_dist_tsi := ROUND (((p_dist_tsi * c.dist_spct) / 100), 2);
            v_dist_prem := ROUND (((p_dist_prem * c.dist_spct) / 100), 2);
            v_ann_dist_tsi :=
                           ROUND (((p_ann_dist_tsi * c.dist_spct) / 100), 2);
            v_sum_dist_tsi := NVL (v_sum_dist_tsi, 0) + NVL (v_dist_tsi, 0);
            v_sum_dist_prem := NVL (v_sum_dist_prem, 0)
                               + NVL (v_dist_prem, 0);
            v_sum_ann_dist_tsi :=
                         NVL (v_sum_ann_dist_tsi, 0)
                         + NVL (v_ann_dist_tsi, 0);
            insert_to_wperilds_dtl;
         END LOOP;
         
         /*added edgar 06/11/2014*/
         IF v_existing = 'N'
         THEN
             /* Use AMOUNTS to create the default distribution records. */
             IF p_default_type = 1
             THEN
                FOR c1 IN dist_peril_cur
                LOOP
                   v_dflt_dist_exist := 'Y';

                   IF v_remaining_tsi >= c1.share_amt1
                   THEN
                      v_dist_tsi := c1.share_amt1 / p_currency_rt;
                      v_remaining_tsi := v_remaining_tsi - c1.share_amt1;
                   ELSE
                      v_remaining_tsi := 0;
                   END IF;

                   IF v_remaining_tsi != 0
                   THEN
                      IF p_dist_tsi = 0
                      THEN
                         v_dist_spct := 0;
                      ELSE
                         v_dist_spct := ROUND (v_dist_tsi / p_dist_tsi * 100, 14);
                      END IF;

                      v_dist_tsi := ROUND (p_dist_tsi * v_dist_spct / 100, 2);
                      v_dist_prem := ROUND (p_dist_prem * v_dist_spct / 100, 2);
                      v_ann_dist_tsi :=
                                     ROUND (p_ann_dist_tsi * v_dist_spct / 100, 2);
                      v_sum_dist_spct := v_sum_dist_spct + v_dist_spct;
                      v_sum_dist_tsi := v_sum_dist_tsi + v_dist_tsi;
                      v_sum_dist_prem := v_sum_dist_prem + v_dist_prem;
                      v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
                   ELSIF v_remaining_tsi = 0
                   THEN
                      v_dist_spct := 100 - v_sum_dist_spct;
                      v_dist_prem := p_dist_prem - v_sum_dist_prem;
                      v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                      v_dist_tsi := p_dist_tsi - v_sum_dist_tsi;
                   END IF;

                   v_share_cd := c1.share_cd;
                   insert_to_wperilds_dtl;

                   IF v_remaining_tsi = 0
                   THEN
                      EXIT;
                   END IF;
                END LOOP;

                IF v_remaining_tsi != 0 AND v_dflt_dist_exist = 'Y'
                THEN
                   v_dist_spct := 100 - v_sum_dist_spct;
                   v_dist_prem := p_dist_prem - v_sum_dist_prem;
                   v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                   v_dist_tsi := p_dist_tsi - v_sum_dist_tsi;
                   v_share_cd := '999';
                   insert_to_wperilds_dtl;
                END IF;
             /* Use PERCENTAGES to create the default distribution records. */
             ELSIF p_default_type = 2
             THEN
                FOR c1 IN dist_peril_cur
                LOOP
                   v_dflt_dist_exist := 'Y';
                   v_dist_spct := c1.share_pct;

                   IF c1.share_amt1 IS NOT NULL
                   THEN
                      v_dist_tsi := c1.share_amt1 / p_currency_rt;

                      IF p_dist_tsi != 0
                      THEN
                         v_dist_spct_limit :=
                                        ROUND (v_dist_tsi / p_dist_tsi * 100, 14);
                      ELSE
                         v_dist_spct_limit := 0;
                      END IF;

                      /* Modified by Loth 050499
                      ** this statement is only true if v_dist_spct_limit
                      ** is greater than or equal to zero.
                      */
                      IF v_dist_spct_limit >= 0
                      THEN
                         IF v_dist_spct > v_dist_spct_limit
                         THEN
                            v_dist_spct := v_dist_spct_limit;
                         END IF;
                      END IF;
                   END IF;

                   v_sum_dist_spct := v_sum_dist_spct + v_dist_spct;

                   IF v_sum_dist_spct != 100
                   THEN
                      v_dist_tsi := ROUND (p_dist_tsi * v_dist_spct / 100, 2);
                      v_dist_prem := ROUND (p_dist_prem * v_dist_spct / 100, 2);
                      v_ann_dist_tsi :=
                                    ROUND (p_ann_dist_tsi * v_dist_spct / 100, 2);
                      v_sum_dist_tsi := v_sum_dist_tsi + v_dist_tsi;
                      v_sum_dist_prem := v_sum_dist_prem + v_dist_prem;
                      v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
                   ELSE
                      v_dist_tsi := p_dist_tsi - v_sum_dist_tsi;
                      v_dist_prem := p_dist_prem - v_sum_dist_prem;
                      v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                   END IF;

                   v_share_cd := c1.share_cd;
                   insert_to_wperilds_dtl;
                END LOOP;

                IF v_sum_dist_spct != 100 AND v_dflt_dist_exist = 'Y'
                THEN
                   v_dist_spct := 100 - v_sum_dist_spct;
                   v_dist_tsi := p_dist_tsi - v_sum_dist_tsi;
                   v_dist_prem := p_dist_prem - v_sum_dist_prem;
                   v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                   v_share_cd := '999';
                   insert_to_wperilds_dtl;
                END IF;
             END IF;

             /* If GIIS_DEFAULT_DIST_PERIL does not contain a record that
             ** corresponds to the particular peril being distributed,
             ** then use the value of the DFLT_NETRET_PCT column retrieved
             ** from table GIIS_DEFAULT_DIST. */
             IF v_dflt_dist_exist = 'N' AND p_dflt_netret_pct IS NOT NULL
             THEN
                IF p_dflt_netret_pct != 100
                THEN
                   v_dist_spct := p_dflt_netret_pct;
                   v_dist_tsi := ROUND (p_dist_tsi * p_dflt_netret_pct / 100, 2);
                   v_dist_prem :=
                                 ROUND (p_dist_prem * p_dflt_netret_pct / 100, 2);
                   v_ann_dist_tsi :=
                              ROUND (p_ann_dist_tsi * p_dflt_netret_pct / 100, 2);
                   v_sum_dist_tsi := v_sum_dist_tsi + v_dist_tsi;
                   v_sum_dist_prem := v_sum_dist_prem + v_dist_prem;
                   v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
                ELSE
                   v_dist_spct := p_dflt_netret_pct;
                   v_dist_tsi := p_dist_tsi;
                   v_dist_prem := p_dist_prem;
                   v_ann_dist_tsi := p_ann_dist_tsi;
                END IF;

                v_share_cd := 1;
                insert_to_wperilds_dtl;

                IF p_dflt_netret_pct != 100
                THEN
                   v_dist_spct := 100 - p_dflt_netret_pct;
                   v_dist_tsi := p_dist_tsi - v_sum_dist_tsi;
                   v_dist_prem := p_dist_prem - v_sum_dist_prem;
                   v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                   v_share_cd := '999';
                   insert_to_wperilds_dtl;
                END IF;
             /* If no default distribution record was found in table
             ** GIIS_DEFAULT_DIST, then create the record using
             ** the traditional 100% NET RETENTION, 0% FACULTATIVE
             ** default. */
             ELSIF v_dflt_dist_exist = 'N'
             THEN
                /* Create the default distribution records based on the 100%
                ** NET RETENTION and 0% FACULTATIVE hard code defaults. */
                v_share_cd := 1;
                v_dist_spct := 100;
                v_dist_tsi := p_dist_tsi;
                v_dist_prem := p_dist_prem;
                v_ann_dist_tsi := p_ann_dist_tsi;

                FOR c IN 1 .. 2
                LOOP
                   insert_to_wperilds_dtl;
                   v_share_cd := 999;
                   v_dist_spct := 0;
                   v_dist_tsi := 0;
                   v_dist_prem := 0;
                   v_ann_dist_tsi := 0;
                END LOOP;

             END IF;
         END IF;
        /*ended edgar 06/11/2014*/            
      ELSE
         /* Use AMOUNTS to create the default distribution records. */
         IF p_default_type = 1
         THEN
            FOR c1 IN dist_peril_cur
            LOOP
               v_dflt_dist_exist := 'Y';

               IF v_remaining_tsi >= c1.share_amt1
               THEN
                  v_dist_tsi := c1.share_amt1 / p_currency_rt;
                  v_remaining_tsi := v_remaining_tsi - c1.share_amt1;
               ELSE
                  v_remaining_tsi := 0;
               END IF;

               IF v_remaining_tsi != 0
               THEN
                  IF p_dist_tsi = 0
                  THEN
                     v_dist_spct := 0;
                  ELSE
                     v_dist_spct := ROUND (v_dist_tsi / p_dist_tsi * 100, 14);
                  END IF;

                  v_dist_tsi := ROUND (p_dist_tsi * v_dist_spct / 100, 2);
                  v_dist_prem := ROUND (p_dist_prem * v_dist_spct / 100, 2);
                  v_ann_dist_tsi :=
                                 ROUND (p_ann_dist_tsi * v_dist_spct / 100, 2);
                  v_sum_dist_spct := v_sum_dist_spct + v_dist_spct;
                  v_sum_dist_tsi := v_sum_dist_tsi + v_dist_tsi;
                  v_sum_dist_prem := v_sum_dist_prem + v_dist_prem;
                  v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
               ELSIF v_remaining_tsi = 0
               THEN
                  v_dist_spct := 100 - v_sum_dist_spct;
                  v_dist_prem := p_dist_prem - v_sum_dist_prem;
                  v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                  v_dist_tsi := p_dist_tsi - v_sum_dist_tsi;
               END IF;

               v_share_cd := c1.share_cd;
               insert_to_wperilds_dtl;

               IF v_remaining_tsi = 0
               THEN
                  EXIT;
               END IF;
            END LOOP;

            IF v_remaining_tsi != 0 AND v_dflt_dist_exist = 'Y'
            THEN
               v_dist_spct := 100 - v_sum_dist_spct;
               v_dist_prem := p_dist_prem - v_sum_dist_prem;
               v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
               v_dist_tsi := p_dist_tsi - v_sum_dist_tsi;
               v_share_cd := '999';
               insert_to_wperilds_dtl;
            END IF;
         /* Use PERCENTAGES to create the default distribution records. */
         ELSIF p_default_type = 2
         THEN
            FOR c1 IN dist_peril_cur
            LOOP
               v_dflt_dist_exist := 'Y';
               v_dist_spct := c1.share_pct;

               IF c1.share_amt1 IS NOT NULL
               THEN
                  v_dist_tsi := c1.share_amt1 / p_currency_rt;

                  IF p_dist_tsi != 0
                  THEN
                     v_dist_spct_limit :=
                                    ROUND (v_dist_tsi / p_dist_tsi * 100, 14);
                  ELSE
                     v_dist_spct_limit := 0;
                  END IF;

                  /* Modified by Loth 050499
                  ** this statement is only true if v_dist_spct_limit
                  ** is greater than or equal to zero.
                  */
                  IF v_dist_spct_limit >= 0
                  THEN
                     IF v_dist_spct > v_dist_spct_limit
                     THEN
                        v_dist_spct := v_dist_spct_limit;
                     END IF;
                  END IF;
               END IF;

               v_sum_dist_spct := v_sum_dist_spct + v_dist_spct;

               IF v_sum_dist_spct != 100
               THEN
                  v_dist_tsi := ROUND (p_dist_tsi * v_dist_spct / 100, 2);
                  v_dist_prem := ROUND (p_dist_prem * v_dist_spct / 100, 2);
                  v_ann_dist_tsi :=
                                ROUND (p_ann_dist_tsi * v_dist_spct / 100, 2);
                  v_sum_dist_tsi := v_sum_dist_tsi + v_dist_tsi;
                  v_sum_dist_prem := v_sum_dist_prem + v_dist_prem;
                  v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
               ELSE
                  v_dist_tsi := p_dist_tsi - v_sum_dist_tsi;
                  v_dist_prem := p_dist_prem - v_sum_dist_prem;
                  v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
               END IF;

               v_share_cd := c1.share_cd;
               insert_to_wperilds_dtl;
            END LOOP;

            IF v_sum_dist_spct != 100 AND v_dflt_dist_exist = 'Y'
            THEN
               v_dist_spct := 100 - v_sum_dist_spct;
               v_dist_tsi := p_dist_tsi - v_sum_dist_tsi;
               v_dist_prem := p_dist_prem - v_sum_dist_prem;
               v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
               v_share_cd := '999';
               insert_to_wperilds_dtl;
            END IF;
         END IF;

         /* If GIIS_DEFAULT_DIST_PERIL does not contain a record that
         ** corresponds to the particular peril being distributed,
         ** then use the value of the DFLT_NETRET_PCT column retrieved
         ** from table GIIS_DEFAULT_DIST. */
         IF v_dflt_dist_exist = 'N' AND p_dflt_netret_pct IS NOT NULL
         THEN
            IF p_dflt_netret_pct != 100
            THEN
               v_dist_spct := p_dflt_netret_pct;
               v_dist_tsi := ROUND (p_dist_tsi * p_dflt_netret_pct / 100, 2);
               v_dist_prem :=
                             ROUND (p_dist_prem * p_dflt_netret_pct / 100, 2);
               v_ann_dist_tsi :=
                          ROUND (p_ann_dist_tsi * p_dflt_netret_pct / 100, 2);
               v_sum_dist_tsi := v_sum_dist_tsi + v_dist_tsi;
               v_sum_dist_prem := v_sum_dist_prem + v_dist_prem;
               v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
            ELSE
               v_dist_spct := p_dflt_netret_pct;
               v_dist_tsi := p_dist_tsi;
               v_dist_prem := p_dist_prem;
               v_ann_dist_tsi := p_ann_dist_tsi;
            END IF;

            v_share_cd := 1;
            insert_to_wperilds_dtl;

            IF p_dflt_netret_pct != 100
            THEN
               v_dist_spct := 100 - p_dflt_netret_pct;
               v_dist_tsi := p_dist_tsi - v_sum_dist_tsi;
               v_dist_prem := p_dist_prem - v_sum_dist_prem;
               v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
               v_share_cd := '999';
               insert_to_wperilds_dtl;
            END IF;
         /* If no default distribution record was found in table
         ** GIIS_DEFAULT_DIST, then create the record using
         ** the traditional 100% NET RETENTION, 0% FACULTATIVE
         ** default. */
         ELSIF v_dflt_dist_exist = 'N'
         THEN
            /* Create the default distribution records based on the 100%
            ** NET RETENTION and 0% FACULTATIVE hard code defaults. */
            v_share_cd := 1;
            v_dist_spct := 100;
            v_dist_tsi := p_dist_tsi;
            v_dist_prem := p_dist_prem;
            v_ann_dist_tsi := p_ann_dist_tsi;

            FOR c IN 1 .. 2
            LOOP
               insert_to_wperilds_dtl;
               v_share_cd := 999;
               v_dist_spct := 0;
               v_dist_tsi := 0;
               v_dist_prem := 0;
               v_ann_dist_tsi := 0;
            END LOOP;
         END IF;
      END IF;
   END;

   /*
   **  Created by  : Emman
   **  Date Created  : 06.03.2010
   **  Reference By  : (GIUWS003 - Preliminary Peril Distribution)
   **  Description  : Create records in table GIUW_WITEMDS_DTL based on
   **        the values taken in by table GIUW_WITEMPERILDS_DTL.
   */
   PROCEDURE create_peril_dflt_witemds2 (
      p_dist_no       IN   giuw_pol_dist.dist_no%TYPE,
      p_dist_seq_no   IN   giuw_wpolicyds.dist_seq_no%TYPE,
      p_item_no       IN   giuw_witemperilds.item_no%TYPE,
      p_line_cd       IN   giuw_wperilds.line_cd%TYPE,
      p_tsi_amt       IN   giuw_wperilds.tsi_amt%TYPE,
      p_prem_amt      IN   giuw_wperilds.prem_amt%TYPE,
      p_ann_tsi_amt   IN   giuw_wperilds.ann_tsi_amt%TYPE,
      p_pol_flag      IN   gipi_wpolbas.pol_flag%TYPE,
      p_par_id        IN   gipi_wpolbas.par_id%TYPE,
      p_par_type      IN   gipi_parlist.par_type%TYPE
   )
   IS
      v_dist_spct          giuw_witemds_dtl.dist_spct%TYPE;
      v_ann_dist_spct      giuw_witemds_dtl.ann_dist_spct%TYPE;
      v_allied_dist_prem   giuw_witemds_dtl.dist_prem%TYPE;
      v_dist_prem          giuw_witemds_dtl.dist_prem%TYPE;
      v_insert             VARCHAR2 (1)                           := 'Y';
      v_tsi_amt            giuw_wpolicyds_dtl.dist_tsi%TYPE;
      v_prem_amt           giuw_wpolicyds_dtl.dist_prem%TYPE;
      v_ann_tsi_amt        giuw_wpolicyds_dtl.ann_dist_tsi%TYPE;
      v_share_cd           giis_dist_share.share_cd%TYPE;
      v_exist              VARCHAR2(1) := 'N';
   BEGIN
      IF p_pol_flag = '2' OR p_par_type = 'E'
      THEN
         FOR a1 IN (SELECT   c.share_cd,
                             SUM (DECODE (b.peril_type,
                                          'B', tsi_amt * (dist_spct / 100),
                                          0
                                         )
                                 ) dist_tsi,
                             SUM (a.prem_amt) dist_prem,
                             SUM (DECODE (b.peril_type,
                                          'B', ann_tsi_amt
                                           * (dist_spct / 100),
                                          0
                                         )
                                 ) ann_dist_tsi
                        FROM gipi_witmperl a,
                             giis_peril b,
                             giuw_wperilds_dtl c
                       WHERE b.peril_cd = a.peril_cd
                         AND b.line_cd = a.line_cd
                         AND c.peril_cd = a.peril_cd
                         AND c.line_cd = a.line_cd
                         AND b.line_cd = p_line_cd
                         AND a.par_id = p_par_id
                         AND a.item_no = p_item_no
                         AND c.dist_seq_no = p_dist_seq_no
                         AND c.dist_no = p_dist_no
                    GROUP BY c.share_cd)
         LOOP
            v_exist := 'Y';
            v_share_cd := a1.share_cd;

            IF p_tsi_amt = 0
            THEN
               v_dist_spct := 0;
            ELSE
               v_dist_spct := ROUND ((a1.dist_tsi / p_tsi_amt) * 100, 14);
            END IF;

            v_tsi_amt := ROUND (((a1.dist_tsi * v_dist_spct) / 100), 2);
            v_prem_amt := ROUND (((a1.dist_prem * v_dist_spct) / 100), 2);
            v_ann_tsi_amt :=
                           ROUND (((a1.ann_dist_tsi * v_dist_spct) / 100), 2);

            INSERT INTO giuw_witemds_dtl
                        (dist_no, dist_seq_no, item_no, line_cd,
                         share_cd, dist_spct, dist_tsi, dist_prem,
                         ann_dist_spct, ann_dist_tsi, dist_grp
                        )
                 VALUES (p_dist_no, p_dist_seq_no, p_item_no, p_line_cd,
                         a1.share_cd, v_dist_spct, v_tsi_amt, v_prem_amt,
                         v_dist_spct, v_ann_tsi_amt, 1
                        );
         END LOOP;
         /*added edgar 06/11/2014*/
         IF v_exist = 'N' THEN
            INSERT INTO giuw_witemds_dtl
                        (dist_no, dist_seq_no, item_no, line_cd,
                         share_cd, dist_spct, dist_tsi, dist_prem,
                         ann_dist_spct, ann_dist_tsi, dist_grp
                        )
                 VALUES (p_dist_no, p_dist_seq_no, p_item_no, p_line_cd,
                         1, 100, p_tsi_amt, p_prem_amt,
                         100, p_ann_tsi_amt, 1
                        );
                        
            INSERT INTO giuw_witemds_dtl
                        (dist_no, dist_seq_no, item_no, line_cd,
                         share_cd, dist_spct, dist_tsi, dist_prem,
                         ann_dist_spct, ann_dist_tsi, dist_grp
                        )
                 VALUES (p_dist_no, p_dist_seq_no, p_item_no, p_line_cd,
                         999, 0, 0, 0,
                         0, 0, 1
                        );                                    
         END IF;
         
      ELSE
         FOR c1 IN (SELECT   line_cd line_cd, item_no item_no,
                             share_cd share_cd, dist_grp dist_grp
                        FROM giuw_witemperilds_dtl
                       WHERE dist_no = p_dist_no
                         AND dist_seq_no = p_dist_seq_no
                    GROUP BY item_no, line_cd, share_cd, dist_grp)
         LOOP
            FOR c2 IN (SELECT SUM (DECODE (a170.peril_type,
                                           'B', a.dist_tsi,
                                           0
                                          )
                                  ) dist_tsi,
                              SUM (a.dist_prem) dist_prem,
                              SUM (DECODE (a170.peril_type,
                                           'B', a.ann_dist_tsi,
                                           0
                                          )
                                  ) ann_dist_tsi
                         FROM giuw_witemperilds_dtl a, giis_peril a170
                        WHERE a170.peril_cd = a.peril_cd
                          AND a170.line_cd = a.line_cd
                          AND a.dist_grp = c1.dist_grp
                          AND a.share_cd = c1.share_cd
                          AND a.line_cd = c1.line_cd
                          AND a.item_no = c1.item_no
                          AND a.dist_seq_no = p_dist_seq_no
                          AND a.dist_no = p_dist_no)
            LOOP
               FOR c3 IN (SELECT tsi_amt, prem_amt, ann_tsi_amt, item_no
                            FROM giuw_witemds
                           WHERE item_no = c1.item_no
                             AND dist_seq_no = p_dist_seq_no
                             AND dist_no = p_dist_no)
               LOOP
                  IF c3.tsi_amt != 0
                  THEN
                     v_dist_spct := ROUND (c2.dist_tsi / c3.tsi_amt, 2) * 100;
                  ELSIF c3.prem_amt != 0
                  THEN
                     v_dist_spct :=
                                   ROUND (c2.dist_prem / c3.prem_amt, 2)
                                   * 100;
                  ELSE
                     v_dist_spct := 0;
                  END IF;

                  IF c3.ann_tsi_amt = 0
                  THEN
                     v_ann_dist_spct := 0;
                  ELSE
                     v_ann_dist_spct :=
                             ROUND (c2.ann_dist_tsi / c3.ann_tsi_amt, 2)
                             * 100;
                  END IF;

                  INSERT INTO giuw_witemds_dtl
                              (dist_no, dist_seq_no, item_no,
                               line_cd, share_cd, dist_spct,
                               dist_tsi, dist_prem, ann_dist_spct,
                               ann_dist_tsi, dist_grp
                              )
                       VALUES (p_dist_no, p_dist_seq_no, c3.item_no,
                               c1.line_cd, c1.share_cd, v_dist_spct,
                               c2.dist_tsi, c2.dist_prem, v_dist_spct,
                               c2.ann_dist_tsi, c1.dist_grp
                              );
               END LOOP;

               EXIT;
            END LOOP;
         END LOOP;
      END IF;
   END create_peril_dflt_witemds2;

   /*
   **  Created by  : Emman
   **  Date Created  : 06.06.2010
   **  Reference By  : (GIUWS003 - Preliminary Peril Distribution)
   **  Description  : inherits dist_spct of latest policy/endt when the prem is zero
   */
   PROCEDURE inherit_dist_pct (
      p_dist_no    NUMBER,
      p_par_type   gipi_parlist.par_type%TYPE,
      p_par_id     gipi_parlist.par_id%TYPE
   )
   IS
   BEGIN
      IF p_par_type = 'E'
      THEN                                                            -- endt
         FOR a IN (SELECT dist_no, item_no, share_cd
                     FROM giuw_witemds_dtl
                    WHERE dist_spct = 0
                      AND (dist_prem = 0 OR dist_tsi = 0)
                      AND dist_no = p_dist_no)
         LOOP
            FOR b IN (SELECT dist_spct
                        FROM giuw_itemds_dtl
                       WHERE item_no = a.item_no
                         AND share_cd = a.share_cd
                         AND dist_no =
                                (SELECT MAX (dist_no)
                                   FROM giuw_pol_dist
                                  WHERE par_id =
                                           (SELECT MAX (par_id)
                                              FROM gipi_polbasic
                                             WHERE 1 = 1
                                               AND (line_cd,
                                                    subline_cd,
                                                    iss_cd,
                                                    issue_yy,
                                                    pol_seq_no,
                                                    renew_no
                                                   ) =
                                                      (SELECT line_cd,
                                                              subline_cd,
                                                              iss_cd,
                                                              issue_yy,
                                                              pol_seq_no,
                                                              renew_no
                                                         FROM gipi_wpolbas
                                                        WHERE par_id =
                                                                      p_par_id))))
            LOOP
               UPDATE giuw_witemds_dtl
                  SET dist_spct = b.dist_spct
                WHERE dist_no = a.dist_no
                  AND share_cd = a.share_cd
                  AND item_no = a.item_no;
            END LOOP;
         END LOOP;

         FOR a IN (SELECT dist_no, share_cd
                     FROM giuw_wpolicyds_dtl
                    WHERE dist_spct = 0
                      AND (dist_prem = 0 OR dist_tsi = 0)
                      AND dist_no = p_dist_no)
         LOOP
            FOR b IN (SELECT dist_spct
                        FROM giuw_policyds_dtl
                       WHERE 1 = 1
                         AND share_cd = a.share_cd
                         AND dist_no =
                                (SELECT MAX (dist_no)
                                   FROM giuw_pol_dist
                                  WHERE par_id =
                                           (SELECT MAX (par_id)
                                              FROM gipi_polbasic
                                             WHERE 1 = 1
                                               AND (line_cd,
                                                    subline_cd,
                                                    iss_cd,
                                                    issue_yy,
                                                    pol_seq_no,
                                                    renew_no
                                                   ) =
                                                      (SELECT line_cd,
                                                              subline_cd,
                                                              iss_cd,
                                                              issue_yy,
                                                              pol_seq_no,
                                                              renew_no
                                                         FROM gipi_wpolbas
                                                        WHERE par_id =
                                                                      p_par_id))))
            LOOP
               UPDATE giuw_wpolicyds_dtl
                  SET dist_spct = b.dist_spct
                WHERE share_cd = a.share_cd AND dist_no = a.dist_no;
            END LOOP;
         END LOOP;
      ELSE                                                          -- renewal
         FOR a IN (SELECT dist_no, item_no, share_cd
                     FROM giuw_witemds_dtl
                    WHERE dist_spct = 0
                      AND (dist_prem = 0 OR dist_tsi = 0)
                      AND dist_no = p_dist_no)
         LOOP
            FOR b IN (SELECT dist_spct
                        FROM giuw_itemds_dtl
                       WHERE item_no = a.item_no
                         AND share_cd = a.share_cd
                         AND dist_no =
                                (SELECT MAX (dist_no)
                                   FROM giuw_pol_dist
                                  WHERE policy_id = (SELECT old_policy_id
                                                       FROM gipi_wpolnrep
                                                      WHERE par_id = p_par_id)))
            LOOP
               UPDATE giuw_witemds_dtl
                  SET dist_spct = b.dist_spct
                WHERE dist_no = a.dist_no
                  AND share_cd = a.share_cd
                  AND item_no = a.item_no;
            END LOOP;
         END LOOP;

         FOR a IN (SELECT dist_no, share_cd
                     FROM giuw_wpolicyds_dtl
                    WHERE dist_spct = 0
                      AND (dist_prem = 0 OR dist_tsi = 0)
                      AND dist_no = p_dist_no)
         LOOP
            FOR b IN (SELECT dist_spct
                        FROM giuw_policyds_dtl
                       WHERE 1 = 1
                         AND share_cd = a.share_cd
                         AND dist_no =
                                (SELECT MAX (dist_no)
                                   FROM giuw_pol_dist
                                  WHERE policy_id = (SELECT old_policy_id
                                                       FROM gipi_wpolnrep
                                                      WHERE par_id = p_par_id)))
            LOOP
               UPDATE giuw_wpolicyds_dtl
                  SET dist_spct = b.dist_spct
                WHERE share_cd = a.share_cd AND dist_no = a.dist_no;
            END LOOP;
         END LOOP;
      END IF;
   END inherit_dist_pct;

   /*
   **  Created by  : Emman
   **  Date Created  : 06.06.2010
   **  Reference By  : (GIUWS003 - Preliminary Peril Distribution)
   **  Description  : Execute procedure CREATE_PERIL_DFLT_DIST
   */
   PROCEDURE create_peril_dflt_dist2 (
      p_dist_no             IN   giuw_wpolicyds.dist_no%TYPE,
      p_dist_seq_no         IN   giuw_wpolicyds.dist_seq_no%TYPE,
      p_dist_flag           IN   giuw_wpolicyds.dist_flag%TYPE,
      p_policy_tsi          IN   giuw_wpolicyds.tsi_amt%TYPE,
      p_policy_premium      IN   giuw_wpolicyds.prem_amt%TYPE,
      p_policy_ann_tsi      IN   giuw_wpolicyds.ann_tsi_amt%TYPE,
      p_item_grp            IN   giuw_wpolicyds.item_grp%TYPE,
      p_line_cd             IN   giis_line.line_cd%TYPE,
      p_default_no          IN   giis_default_dist.default_no%TYPE,
      p_default_type        IN   giis_default_dist.default_type%TYPE,
      p_dflt_netret_pct     IN   giis_default_dist.dflt_netret_pct%TYPE,
      p_currency_rt         IN   gipi_witem.currency_rt%TYPE,
      p_par_id              IN   gipi_parlist.par_id%TYPE,
      p_pol_dist_item_grp   IN   giuw_pol_dist.item_grp%TYPE,
      p_dist_exists         IN   VARCHAR2,
      p_pol_flag            IN   gipi_wpolbas.pol_flag%TYPE,
      p_par_type            IN   gipi_parlist.par_type%TYPE
   )
   IS
      v_peril_cd          giis_peril.peril_cd%TYPE;
      v_peril_tsi         giuw_wperilds.tsi_amt%TYPE        := 0;
      v_peril_premium     giuw_wperilds.prem_amt%TYPE       := 0;
      v_peril_ann_tsi     giuw_wperilds.ann_tsi_amt%TYPE    := 0;
      v_exist             VARCHAR2 (1)                      := 'N';
      v_insert_sw         VARCHAR2 (1)                      := 'N';
      dist_cnt            NUMBER                            := 0;
      dist_max            giuw_pol_dist.dist_no%TYPE;
      p2_policy_tsi       giuw_wpolicyds.tsi_amt%TYPE
                                                     := NVL (p_policy_tsi, 0);
      p2_policy_premium   giuw_wpolicyds.prem_amt%TYPE
                                                 := NVL (p_policy_premium, 0);
      p2_policy_ann_tsi   giuw_wpolicyds.ann_tsi_amt%TYPE
                                                 := NVL (p_policy_ann_tsi, 0);
      ---------------------------------------------------- added 04.17.08
      v_tsi_amt           gipi_witmperl.tsi_amt%TYPE;
      v_prem_amt          gipi_witmperl.prem_amt%TYPE;
      v_ann_tsi_amt       gipi_witmperl.ann_tsi_amt%TYPE;

----------------------------------------------------

      /* Updates the amounts of the previously processed PERIL_CD
      ** while looping inside cursor C3.  After which, the records
      ** for table GIUW_WPERILDS_DTL are also created.
      ** NOTE:  This is a LOCAL PROCEDURE BODY called below. */
      PROCEDURE upd_create_wperil_dtl_data
      IS
      BEGIN
         giuw_pol_dist_pkg.create_peril_dflt_wperilds2 (p_dist_no,
                                                        p_dist_seq_no,
                                                        p_line_cd,
                                                        v_peril_cd,
                                                        v_peril_tsi,
                                                        v_peril_premium,
                                                        v_peril_ann_tsi,
                                                        p_currency_rt,
                                                        p_default_no,
                                                        p_default_type,
                                                        p_dflt_netret_pct,
                                                        p_pol_flag,
                                                        p_par_id,
                                                        p_par_type
                                                       );
      END;
   BEGIN
      SELECT COUNT (dist_no), MAX (dist_no)
        INTO dist_cnt, dist_max
        FROM giuw_pol_dist
       WHERE par_id = p_par_id
         AND item_grp = NVL (p_pol_dist_item_grp, item_grp);

      IF dist_cnt = 0 AND dist_max IS NULL
      THEN
         BEGIN
            SELECT COUNT (dist_no), MAX (dist_no)
              INTO dist_cnt, dist_max
              FROM giuw_pol_dist
             WHERE par_id = p_par_id AND item_grp IS NULL;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               NULL;
         END;
      END IF;

/************************************/
      IF NVL (p_dist_exists, 'N') = 'N'
      THEN
         IF p_dist_no = dist_max
         THEN
            FOR x IN (SELECT SUM (NVL (DECODE (c.peril_type,
                                               'B', a.tsi_amt,
                                               0
                                              ),
                                       0
                                      )
                                 ) tsi_amt,
                             SUM (  NVL (a.prem_amt, 0)
                                  - (  ROUND ((NVL (a.prem_amt, 0) / dist_cnt
                                              ),
                                              2
                                             )
                                     * (dist_cnt - 1)
                                    )
                                 ) prem_amt,
                             SUM (NVL (DECODE (c.peril_type,
                                               'B', a.ann_tsi_amt,
                                               0
                                              ),
                                       0
                                      )
                                 ) ann_tsi_amt
                        FROM gipi_witmperl a, gipi_witem b, giis_peril c
                       WHERE a.par_id = b.par_id
                         AND a.item_no = b.item_no
                         AND a.par_id = p_par_id
                         AND b.item_grp =
                                         NVL (p_pol_dist_item_grp, p_item_grp)
                         AND a.peril_cd = c.peril_cd
                         AND c.line_cd = p_line_cd)
            LOOP
               v_tsi_amt := x.tsi_amt;
               v_prem_amt := x.prem_amt;
               v_ann_tsi_amt := x.ann_tsi_amt;
            END LOOP;

------------------
            INSERT INTO giuw_wpolicyds
                        (dist_no, dist_seq_no, dist_flag, tsi_amt,
                         prem_amt, ann_tsi_amt, item_grp
                        )
                 VALUES (p_dist_no, p_dist_seq_no, p_dist_flag, v_tsi_amt,
                         v_prem_amt, v_ann_tsi_amt, p_item_grp
                        );
         ELSE
            FOR x IN
               (SELECT SUM
                          (ROUND
                               ((NVL (DECODE (c.peril_type,
                                              'B', a.tsi_amt,
                                              0
                                             ),
                                      0
                                     )                       /*beth/dist_cnt*/
                                ),
                                2
                               )
                          ) tsi_amt,
                       SUM (ROUND ((NVL (a.prem_amt, 0) / dist_cnt), 2)
                           ) prem_amt,
                       SUM
                          (ROUND
                              ((NVL (DECODE (c.peril_type,
                                             'B', a.ann_tsi_amt,
                                             0
                                            ),
                                     0
                                    )                        /*beth/dist_cnt*/
                               ),
                               2
                              )
                          ) ann_tsi_amt
                  FROM gipi_witmperl a, gipi_witem b, giis_peril c
                 WHERE a.par_id = b.par_id
                   AND a.item_no = b.item_no
                   AND a.par_id = p_par_id
                   AND b.item_grp = NVL (p_pol_dist_item_grp, p_item_grp)
                   AND a.peril_cd = c.peril_cd
                   AND c.line_cd = p_line_cd)
            LOOP
               v_tsi_amt := x.tsi_amt;
               v_prem_amt := x.prem_amt;
               v_ann_tsi_amt := x.ann_tsi_amt;
            END LOOP;

            INSERT INTO giuw_wpolicyds
                        (dist_no, dist_seq_no, dist_flag, tsi_amt,
                         prem_amt, ann_tsi_amt, item_grp
                        )
                 VALUES (p_dist_no, p_dist_seq_no, p_dist_flag, v_tsi_amt,
                         v_prem_amt, v_ann_tsi_amt, p_item_grp
                        );
         END IF;
      ELSE
         IF p_dist_no = dist_max
         THEN
            FOR x IN
               (SELECT SUM (NVL (DECODE (c.peril_type, 'B', b490.tsi_amt, 0),
                                 0
                                )
                           ) tsi_amt,
                       SUM (  NVL (b490.prem_amt, 0)
                            - (  ROUND ((NVL (b490.prem_amt, 0) / dist_cnt),
                                        2)
                               * (dist_cnt - 1)
                              )
                           ) prem_amt,
                       SUM (NVL (DECODE (c.peril_type,
                                         'B', b490.ann_tsi_amt,
                                         0
                                        ),
                                 0
                                )
                           ) ann_tsi_amt
                  FROM gipi_witmperl b490, gipi_witem b480, giis_peril c
                 WHERE b490.item_no = b480.item_no
                   AND b490.par_id = b480.par_id
                   AND b480.item_grp = p_item_grp
                   AND b480.par_id = p_par_id
                   AND b490.peril_cd = c.peril_cd
                   AND c.line_cd = p_line_cd
                   AND EXISTS (
                          SELECT 1
                            FROM giuw_wpolicyds c
                           WHERE 1 = 1
                             AND c.dist_no = p_dist_no
                             AND c.dist_seq_no = p_dist_seq_no
                             AND c.item_grp = p_item_grp
                             AND c.item_grp = b480.item_grp)
                   AND EXISTS (
                          SELECT 1
                            FROM giuw_witemds c
                           WHERE 1 = 1
                             AND c.dist_no = p_dist_no
                             AND c.dist_seq_no = p_dist_seq_no
                             AND c.item_no = b480.item_no))
            LOOP
               v_tsi_amt := x.tsi_amt;
               v_prem_amt := x.prem_amt;
               v_ann_tsi_amt := x.ann_tsi_amt;

               -- to prevent inserting of null to giuw_wpolicyds (emman 07.13.2011)
               IF v_tsi_amt IS NULL OR v_prem_amt IS NULL
               THEN
                  EXIT;
               END IF;

               UPDATE giuw_wpolicyds
                  SET tsi_amt = v_tsi_amt,
                      prem_amt = v_prem_amt,
                      ann_tsi_amt = v_ann_tsi_amt
                WHERE dist_no = p_dist_no AND dist_seq_no = p_dist_seq_no;
            END LOOP;
         ELSE
            FOR x IN
               (SELECT SUM (ROUND ((NVL (DECODE (c.peril_type,
                                                 'B', b490.tsi_amt,
                                                 0
                                                ),
                                         0
                                        )
                                   ),
                                   2
                                  )
                           ) tsi_amt,
                       SUM (ROUND ((NVL (b490.prem_amt, 0) / dist_cnt), 2)
                           ) prem_amt,
                       SUM
                          (ROUND ((NVL (DECODE (c.peril_type,
                                                'B', b490.ann_tsi_amt,
                                                0
                                               ),
                                        0
                                       )
                                  ),
                                  2
                                 )
                          ) ann_tsi_amt
                  FROM gipi_witmperl b490, gipi_witem b480, giis_peril c
                 WHERE b490.item_no = b480.item_no
                   AND b490.par_id = b480.par_id
                   AND b480.item_grp = p_item_grp
                   AND b480.par_id = p_par_id
                   AND b490.peril_cd = c.peril_cd
                   AND c.line_cd = p_line_cd
                   AND EXISTS (
                          SELECT 1
                            FROM giuw_wpolicyds c
                           WHERE 1 = 1
                             AND c.dist_no = p_dist_no
                             AND c.dist_seq_no = p_dist_seq_no
                             AND c.item_grp = p_item_grp
                             AND c.item_grp = b480.item_grp)
                   AND EXISTS (
                          SELECT 1
                            FROM giuw_witemds c
                           WHERE 1 = 1
                             AND c.dist_no = p_dist_no
                             AND c.dist_seq_no = p_dist_seq_no
                             AND c.item_no = b480.item_no))
            LOOP
               v_tsi_amt := x.tsi_amt;
               v_prem_amt := x.prem_amt;
               v_ann_tsi_amt := x.ann_tsi_amt;

                  ----------
               -- to prevent inserting of null to giuw_wpolicyds (emman 07.13.2011)
               IF v_tsi_amt IS NULL OR v_prem_amt IS NULL
               THEN
                  EXIT;
               END IF;

               UPDATE giuw_wpolicyds
                  SET tsi_amt = v_tsi_amt,
                      prem_amt = v_prem_amt,
                      ann_tsi_amt = v_ann_tsi_amt
                WHERE dist_no = p_dist_no AND dist_seq_no = p_dist_seq_no;
            END LOOP;
         END IF;
      END IF;

      IF NVL (p_dist_exists, 'N') = 'N'
      THEN
         FOR c4 IN (SELECT   SUM (b490.tsi_amt) itmperil_tsi,
                             SUM (b490.prem_amt) itmperil_premium,
                             SUM (b490.ann_tsi_amt) itmperil_ann_tsi,
                             b490.peril_cd peril_cd
                        FROM gipi_witmperl b490, gipi_witem b480
                       WHERE b490.item_no = b480.item_no
                         AND b490.par_id = b480.par_id
                         AND b480.item_grp = p_item_grp
                         AND b480.par_id = p_par_id
                    GROUP BY b490.peril_cd)
         LOOP
            IF p_dist_no = dist_max
            THEN
               c4.itmperil_tsi := NVL (c4.itmperil_tsi, 0);
               c4.itmperil_premium :=
                    NVL (c4.itmperil_premium, 0)
                  - (  ROUND ((NVL (c4.itmperil_premium, 0) / dist_cnt), 2)
                     * (dist_cnt - 1)
                    );
               c4.itmperil_ann_tsi := NVL (c4.itmperil_ann_tsi, 0);
            ELSE
               c4.itmperil_tsi := c4.itmperil_tsi;
               c4.itmperil_premium := c4.itmperil_premium / dist_cnt;
               c4.itmperil_ann_tsi := c4.itmperil_ann_tsi;
            END IF;

            INSERT INTO giuw_wperilds
                        (dist_no, dist_seq_no, peril_cd, line_cd,
                         tsi_amt, prem_amt,
                         ann_tsi_amt
                        )
                 VALUES (p_dist_no, p_dist_seq_no, c4.peril_cd, p_line_cd,
                         c4.itmperil_tsi, c4.itmperil_premium,
                         c4.itmperil_ann_tsi
                        );

            v_peril_cd := c4.peril_cd;
            v_peril_tsi := c4.itmperil_tsi;
            v_peril_premium := c4.itmperil_premium;
            v_peril_ann_tsi := c4.itmperil_ann_tsi;
            upd_create_wperil_dtl_data;
         END LOOP;
      ELSE
         FOR c4 IN (SELECT   SUM (b490.tsi_amt) itmperil_tsi,
                             SUM (b490.prem_amt) itmperil_premium,
                             SUM (b490.ann_tsi_amt) itmperil_ann_tsi,
                             b490.peril_cd peril_cd
                        FROM gipi_witmperl b490, gipi_witem b480
                       WHERE b490.item_no = b480.item_no
                         AND b490.par_id = b480.par_id
                         AND b480.item_grp = p_item_grp
                         AND b480.par_id = p_par_id
                         AND EXISTS (
                                SELECT 1
                                  FROM giuw_witemds c
                                 WHERE 1 = 1
                                   AND c.dist_no = p_dist_no
                                   AND c.dist_seq_no = p_dist_seq_no
                                   AND c.item_no = b480.item_no)
                    GROUP BY b490.peril_cd)
         LOOP
            IF p_dist_no = dist_max
            THEN
               c4.itmperil_tsi := NVL (c4.itmperil_tsi, 0);
               c4.itmperil_premium :=
                    NVL (c4.itmperil_premium, 0)
                  - (  ROUND ((NVL (c4.itmperil_premium, 0) / dist_cnt), 2)
                     * (dist_cnt - 1)
                    );
               c4.itmperil_ann_tsi := NVL (c4.itmperil_ann_tsi, 0);
            ELSE
               c4.itmperil_tsi := c4.itmperil_tsi;
               c4.itmperil_premium := c4.itmperil_premium / dist_cnt;
               c4.itmperil_ann_tsi := c4.itmperil_ann_tsi;
            END IF;

            INSERT INTO giuw_wperilds
                        (dist_no, dist_seq_no, peril_cd, line_cd,
                         tsi_amt, prem_amt,
                         ann_tsi_amt
                        )
                 VALUES (p_dist_no, p_dist_seq_no, c4.peril_cd, p_line_cd,
                         c4.itmperil_tsi, c4.itmperil_premium,
                         c4.itmperil_ann_tsi
                        );

            v_peril_cd := c4.peril_cd;
            v_peril_tsi := c4.itmperil_tsi;
            v_peril_premium := c4.itmperil_premium;
            v_peril_ann_tsi := c4.itmperil_ann_tsi;
            upd_create_wperil_dtl_data;
         END LOOP;
      END IF;

      giuw_pol_dist_pkg.update_dtls_no_share_cd (p_dist_no,
                                                 p_dist_seq_no,
                                                 'PERIL',
                                                 p_line_cd
                                                );

      IF NVL (p_dist_exists, 'N') = 'N'
      THEN
         /* Get the amounts for each item in table GIPI_WITEM in preparation
         ** for data insertion to its corresponding distribution tables. */
         FOR c2 IN (SELECT a.item_no, a.tsi_amt, a.prem_amt, a.ann_tsi_amt
                      FROM gipi_witem a
                     WHERE EXISTS (
                              SELECT '1'
                                FROM gipi_witmperl b
                               WHERE b.par_id = a.par_id
                                 AND b.item_no = a.item_no)
                       AND a.item_grp = p_item_grp
                       AND a.par_id = p_par_id)
         LOOP
            IF p_dist_no = dist_max
            THEN
               FOR x IN
                  (SELECT SUM (NVL (DECODE (c.peril_type, 'B', a.tsi_amt, 0),
                                    0
                                   )
                              ) tsi_amt,
                          SUM (  NVL (a.prem_amt, 0)
                               - (  ROUND ((NVL (a.prem_amt, 0) / dist_cnt),
                                           2)
                                  * (dist_cnt - 1)
                                 )
                              ) prem_amt,
                          SUM (NVL (DECODE (c.peril_type,
                                            'B', a.ann_tsi_amt,
                                            0
                                           ),
                                    0
                                   )
                              ) ann_tsi_amt
                     FROM gipi_witmperl a, giis_peril c
                    WHERE a.par_id = p_par_id
                      AND a.item_no = c2.item_no
                      AND a.peril_cd = c.peril_cd
                      AND c.line_cd = p_line_cd)
               LOOP
                  v_tsi_amt := x.tsi_amt;
                  v_prem_amt := x.prem_amt;
                  v_ann_tsi_amt := x.ann_tsi_amt;
               END LOOP;
            ELSE
               FOR x IN
                  (SELECT SUM (ROUND ((NVL (DECODE (c.peril_type,
                                                    'B', a.tsi_amt,
                                                    0
                                                   ),
                                            0
                                           )
                                      ),
                                      2
                                     )
                              ) tsi_amt,
                          SUM (ROUND ((NVL (a.prem_amt, 0) / dist_cnt), 2)
                              ) prem_amt,
                          SUM
                             (ROUND ((NVL (DECODE (c.peril_type,
                                                   'B', a.ann_tsi_amt,
                                                   0
                                                  ),
                                           0
                                          )
                                     ),
                                     2
                                    )
                             ) ann_tsi_amt
                     FROM gipi_witmperl a, giis_peril c
                    WHERE a.par_id = p_par_id
                      AND a.item_no = c2.item_no
                      AND a.peril_cd = c.peril_cd
                      AND c.line_cd = p_line_cd)
               LOOP
                  v_tsi_amt := x.tsi_amt;
                  v_prem_amt := x.prem_amt;
                  v_ann_tsi_amt := x.ann_tsi_amt;
               END LOOP;
            END IF;

            /* Create records in table GIUW_WITEMDS and GIUW_WITEMDS_DTL
            ** for the specified DIST_SEQ_NO. */
            INSERT INTO giuw_witemds
                        (dist_no, dist_seq_no, item_no, tsi_amt,
                         prem_amt, ann_tsi_amt
                        )
                 VALUES (p_dist_no, p_dist_seq_no, c2.item_no, v_tsi_amt,
                         v_prem_amt, v_ann_tsi_amt
                        );

            giuw_pol_dist_pkg.create_peril_dflt_witemds2 (p_dist_no,
                                                          p_dist_seq_no,
                                                          c2.item_no,
                                                          p_line_cd,
                                                          v_tsi_amt,
                                                          v_prem_amt,
                                                          v_ann_tsi_amt,
                                                          p_pol_flag,
                                                          p_par_id,
                                                          p_par_type
                                                         );
         END LOOP;
      ELSE
         FOR c2 IN (SELECT a.item_no, b.tsi_amt, b.prem_amt, b.ann_tsi_amt
                      FROM giuw_witemds a, gipi_witem b
                     WHERE a.dist_no = p_dist_no
                       AND a.dist_seq_no = p_dist_seq_no
                       AND a.item_no = b.item_no
                       AND b.par_id = p_par_id
                       AND EXISTS (
                              SELECT 1
                                FROM gipi_witmperl c
                               WHERE b.par_id = c.par_id
                                 AND b.item_no = c.item_no))
         LOOP
            IF p_dist_no = dist_max
            THEN
               FOR x IN
                  (SELECT SUM (NVL (DECODE (c.peril_type, 'B', a.tsi_amt, 0),
                                    0
                                   )
                              ) tsi_amt,
                          SUM (  NVL (a.prem_amt, 0)
                               - (  ROUND ((NVL (a.prem_amt, 0) / dist_cnt),
                                           2)
                                  * (dist_cnt - 1)
                                 )
                              ) prem_amt,
                          SUM (NVL (DECODE (c.peril_type,
                                            'B', a.ann_tsi_amt,
                                            0
                                           ),
                                    0
                                   )
                              ) ann_tsi_amt
                     FROM gipi_witmperl a, giis_peril c
                    WHERE a.par_id = p_par_id
                      AND a.item_no = c2.item_no
                      AND a.peril_cd = c.peril_cd
                      AND c.line_cd = p_line_cd)
               LOOP
                  v_tsi_amt := x.tsi_amt;
                  v_prem_amt := x.prem_amt;
                  v_ann_tsi_amt := x.ann_tsi_amt;
               END LOOP;
            ELSE
               FOR x IN
                  (SELECT SUM
                             (ROUND
                                 ((NVL
                                      (DECODE (c.peril_type,
                                               'B', a.tsi_amt,
                                               0
                                              ),
                                       0
                                      )                      /*beth/dist_cnt*/
                                  ),
                                  2
                                 )
                             ) tsi_amt,
                          SUM (ROUND ((NVL (a.prem_amt, 0) / dist_cnt), 2)
                              ) prem_amt,
                          SUM
                             (ROUND
                                 ((NVL
                                      (DECODE (c.peril_type,
                                               'B', a.ann_tsi_amt,
                                               0
                                              ),
                                       0
                                      )                      /*beth/dist_cnt*/
                                  ),
                                  2
                                 )
                             ) ann_tsi_amt
                     FROM gipi_witmperl a, giis_peril c
                    WHERE a.par_id = p_par_id
                      AND a.item_no = c2.item_no
                      AND a.peril_cd = c.peril_cd
                      AND c.line_cd = p_line_cd)
               LOOP
                  v_tsi_amt := x.tsi_amt;
                  v_prem_amt := x.prem_amt;
                  v_ann_tsi_amt := x.ann_tsi_amt;
               END LOOP;
            END IF;

            UPDATE giuw_witemds
               SET tsi_amt = v_tsi_amt,
                   prem_amt = v_prem_amt,
                   ann_tsi_amt = v_ann_tsi_amt
             WHERE dist_no = p_dist_no
               AND item_no = c2.item_no
               AND dist_seq_no = p_dist_seq_no;

            giuw_pol_dist_pkg.create_peril_dflt_witemds2 (p_dist_no,
                                                          p_dist_seq_no,
                                                          c2.item_no,
                                                          p_line_cd,
                                                          v_tsi_amt,
                                                          v_prem_amt,
                                                          v_ann_tsi_amt,
                                                          p_pol_flag,
                                                          p_par_id,
                                                          p_par_type
                                                         );
         END LOOP;
      END IF;

      giuw_pol_dist_pkg.update_dtls_no_share_cd (p_dist_no,
                                                 p_dist_seq_no,
                                                 'ITEM',
                                                 p_line_cd
                                                );
      /* Initialize the value of the variables
      ** in preparation for processing the new
      ** DIST_SEQ_NO. */
      v_peril_cd := NULL;
      v_peril_tsi := 0;
      v_peril_premium := 0;
      v_peril_ann_tsi := 0;
      v_exist := 'N';

      /* Get the amounts for each combination of the ITEM_NO and the PERIL_CD
      ** in table GIPI_WITMPERL in preparation for data insertion to
      ** distribution tables GIUW_WITEMPERILDS, GIUW_WITEMPERILDS_DTL,
      ** GIUW_WPERILDS and GIUW_WPERILDS_DTL. */

      /* rollie 09august2005
      ** recoded inserting of data in table giuw_wperilds and giuw_witemperilds
      */
      IF NVL (p_dist_exists, 'N') = 'N'
      THEN
         FOR c3 IN (SELECT   b490.tsi_amt itmperil_tsi,
                             b490.prem_amt itmperil_premium,
                             b490.ann_tsi_amt itmperil_ann_tsi,
                             b490.item_no item_no, b490.peril_cd peril_cd
                        FROM gipi_witmperl b490, gipi_witem b480
                       WHERE b490.item_no = b480.item_no
                         AND b490.par_id = b480.par_id
                         AND b480.item_grp = p_item_grp
                         AND b480.par_id = p_par_id
                    ORDER BY b490.peril_cd)
         LOOP
            IF p_dist_no = dist_max
            THEN
               c3.itmperil_tsi := NVL (c3.itmperil_tsi, 0);
               c3.itmperil_premium :=
                    NVL (c3.itmperil_premium, 0)
                  - (  ROUND ((NVL (c3.itmperil_premium, 0) / dist_cnt), 2)
                     * (dist_cnt - 1)
                    );
               c3.itmperil_ann_tsi := NVL (c3.itmperil_ann_tsi, 0);
            ELSE
               c3.itmperil_tsi := c3.itmperil_tsi;
               c3.itmperil_premium := c3.itmperil_premium / dist_cnt;
               c3.itmperil_ann_tsi := c3.itmperil_ann_tsi;
            END IF;

            /* Create records in table GIUW_WITEMPERILDS and GIUW_WITEMPERILDS_DTL
            ** for the specified DIST_SEQ_NO. */
            INSERT INTO giuw_witemperilds
                        (dist_no, dist_seq_no, item_no, peril_cd,
                         line_cd, tsi_amt, prem_amt,
                         ann_tsi_amt
                        )
                 VALUES (p_dist_no, p_dist_seq_no, c3.item_no, c3.peril_cd,
                         p_line_cd, c3.itmperil_tsi, c3.itmperil_premium,
                         c3.itmperil_ann_tsi
                        );

            giuw_pol_dist_pkg.create_peril_dflt_witmperilds
                                                         (p_dist_no,
                                                          p_dist_seq_no,
                                                          c3.item_no,
                                                          p_line_cd,
                                                          c3.peril_cd,
                                                          c3.itmperil_tsi,
                                                          c3.itmperil_premium,
                                                          c3.itmperil_ann_tsi,
                                                          p_par_id,
                                                          p_pol_flag,
                                                          p_par_type
                                                         );
         END LOOP;
      ELSE
         FOR c3 IN (SELECT   b490.tsi_amt itmperil_tsi,
                             b490.prem_amt itmperil_premium,
                             b490.ann_tsi_amt itmperil_ann_tsi,
                             b490.item_no item_no, b490.peril_cd peril_cd
                        FROM gipi_witmperl b490, gipi_witem b480
                       WHERE b490.item_no = b480.item_no
                         AND b490.par_id = b480.par_id
                         AND b480.item_grp = p_item_grp
                         AND b480.par_id = p_par_id
                         AND EXISTS (
                                SELECT 1
                                  FROM giuw_wpolicyds c
                                 WHERE 1 = 1
                                   AND c.dist_no = p_dist_no
                                   AND c.dist_seq_no = p_dist_seq_no
                                   AND c.item_grp = p_item_grp
                                   AND c.item_grp = b480.item_grp)
                         AND EXISTS (
                                SELECT 1
                                  FROM giuw_witemds c
                                 WHERE 1 = 1
                                   AND c.dist_no = p_dist_no
                                   AND c.dist_seq_no = p_dist_seq_no
                                   AND c.item_no = b480.item_no)
                    ORDER BY b490.peril_cd)
         LOOP
            IF p_dist_no = dist_max
            THEN
               c3.itmperil_tsi := NVL (c3.itmperil_tsi, 0);
               c3.itmperil_premium :=
                    NVL (c3.itmperil_premium, 0)
                  - (  ROUND ((NVL (c3.itmperil_premium, 0) / dist_cnt), 2)
                     * (dist_cnt - 1)
                    );
               c3.itmperil_ann_tsi := NVL (c3.itmperil_ann_tsi, 0);
            ELSE
               c3.itmperil_tsi := c3.itmperil_tsi;
               c3.itmperil_premium := c3.itmperil_premium / dist_cnt;
               c3.itmperil_ann_tsi := c3.itmperil_ann_tsi;
            END IF;

            /* Create records in table GIUW_WITEMPERILDS and GIUW_WITEMPERILDS_DTL
            ** for the specified DIST_SEQ_NO. */
            INSERT INTO giuw_witemperilds
                        (dist_no, dist_seq_no, item_no, peril_cd,
                         line_cd, tsi_amt, prem_amt,
                         ann_tsi_amt
                        )
                 VALUES (p_dist_no, p_dist_seq_no, c3.item_no, c3.peril_cd,
                         p_line_cd, c3.itmperil_tsi, c3.itmperil_premium,
                         c3.itmperil_ann_tsi
                        );

            giuw_pol_dist_pkg.create_peril_dflt_witmperilds
                                                         (p_dist_no,
                                                          p_dist_seq_no,
                                                          c3.item_no,
                                                          p_line_cd,
                                                          c3.peril_cd,
                                                          c3.itmperil_tsi,
                                                          c3.itmperil_premium,
                                                          c3.itmperil_ann_tsi,
                                                          p_par_id,
                                                          p_pol_flag,
                                                          p_par_type
                                                         );
         END LOOP;
      END IF;

      giuw_pol_dist_pkg.update_dtls_no_share_cd (p_dist_no,
                                                 p_dist_seq_no,
                                                 'ITEMPERIL',
                                                 p_line_cd
                                                );
      giuw_pol_dist_pkg.update_witemds (p_dist_no, p_dist_seq_no);
      --encapsulate create_peril_dflt_wpolicyds2 into for loop to correct amounts being passed on parameter edgar 06/23/2014
         FOR a IN (SELECT dist_seq_no, tsi_amt, prem_amt, ann_tsi_amt,
                          item_grp
                     FROM giuw_wpolicyds
                    WHERE dist_no = p_dist_no
                      AND dist_seq_no = p_dist_seq_no)
         LOOP
          giuw_pol_dist_pkg.create_peril_dflt_wpolicyds2 (p_dist_no,
                                                          p_dist_seq_no,
                                                          p_line_cd,
                                                          --v_tsi_amt,
                                                          --v_prem_amt,
                                                          --v_ann_tsi_amt,
                                                          a.tsi_amt,
                                                          a.prem_amt,
                                                          a.ann_tsi_amt,
                                                          p_par_id,
                                                          p_item_grp,
                                                          p_pol_flag,
                                                          p_par_type
                                                         );
         END LOOP;         
      --end edgar 06/23/2014                                            
      giuw_pol_dist_pkg.update_dtls_no_share_cd (p_dist_no,
                                                 p_dist_seq_no,
                                                 'POLICY',
                                                 p_line_cd
                                                );

      IF p_pol_flag = '2' OR p_par_type = 'E'
      THEN
         giuw_pol_dist_pkg.inherit_dist_pct (p_dist_no, p_par_type, p_par_id);
      END IF;
   END create_peril_dflt_dist2;

    /*Modified by : Shan Bati
    **Date modified : 06.09.2014
    **Included dist_spct1 on the default distribution of renewal and endorsement
    */
   PROCEDURE create_peril_dflt_witmperilds2 (
      p_dist_no        IN   giuw_wperilds_dtl.dist_no%TYPE,
      p_dist_seq_no    IN   giuw_wperilds_dtl.dist_seq_no%TYPE,
      p_item_no        IN   giuw_witemperilds_dtl.item_no%TYPE,
      p_line_cd        IN   giuw_wperilds_dtl.line_cd%TYPE,
      p_peril_cd       IN   giuw_wperilds_dtl.peril_cd%TYPE,
      p_dist_tsi       IN   giuw_witemperilds_dtl.dist_tsi%TYPE,
      p_dist_prem      IN   giuw_witemperilds_dtl.dist_prem%TYPE,
      p_ann_dist_tsi   IN   giuw_witemperilds_dtl.ann_dist_tsi%TYPE,
      p_default_no     IN   giis_default_dist.default_no%TYPE,
      p_par_id         IN   gipi_parlist.par_id%TYPE,
      p_pol_flag       IN   gipi_wpolbas.pol_flag%TYPE,
      p_par_type       IN   gipi_parlist.par_type%TYPE
   )
   IS
      v_dist_tsi           giuw_witemperilds_dtl.dist_tsi%TYPE;
      v_dist_prem          giuw_witemperilds_dtl.dist_prem%TYPE;
      v_ann_dist_tsi       giuw_witemperilds_dtl.ann_dist_tsi%TYPE;
      v_insert             VARCHAR2 (1)                              := 'N';
      v_share_cd           giuw_wperilds_dtl.share_cd%TYPE;
      v_dist_spct          giuw_wperilds_dtl.dist_spct%TYPE;
      v_dist_spct1                     giuw_wperilds_dtl.dist_spct1%TYPE;
      v_sum_dist_tsi       giuw_witemperilds_dtl.dist_tsi%TYPE       := 0;
      v_sum_dist_spct      giuw_witemperilds_dtl.dist_spct%TYPE      := 0;
      v_sum_dist_prem      giuw_witemperilds_dtl.dist_prem%TYPE      := 0;
      v_sum_ann_dist_tsi   giuw_witemperilds_dtl.ann_dist_tsi%TYPE   := 0;
      v_exist              VARCHAR2 (1);

      CURSOR dist_peril_cur
      IS
         SELECT   a.share_cd, a.share_pct, a.share_amt1
             FROM giis_default_dist_peril a
            WHERE a.default_no = p_default_no
              AND a.line_cd = p_line_cd
              AND a.peril_cd = p_peril_cd
         --AND a.share_cd   <> 999
         ORDER BY a.SEQUENCE ASC;
   BEGIN
      FOR x IN dist_peril_cur
      LOOP
         v_exist := 'Y';
      END LOOP;

      IF p_pol_flag = '2'
      THEN
         FOR c2 IN (SELECT DISTINCT share_cd, dist_spct, dist_spct1
                               FROM giuw_perilds_dtl a
                              WHERE 1 = 1
                                AND a.peril_cd = p_peril_cd
                                AND a.dist_seq_no = p_dist_seq_no
                                AND dist_no =
                                       (SELECT MAX (dist_no)
                                          FROM giuw_pol_dist
                                         WHERE policy_id =
                                                    (SELECT MAX(a.old_policy_id)
                                                       FROM gipi_wpolnrep a
                                                           ,gipi_parlist b
                                                      WHERE a.par_id = p_par_id
                                                        AND a.ren_rep_sw = '1'
                                                        AND a.par_id = b.par_id
                                                        AND b.par_status NOT IN(98,99)))
                    UNION
                    SELECT DISTINCT share_cd, dist_spct, dist_spct1
                               FROM giuw_wperilds_dtl a
                              WHERE 1 = 1
                                AND a.peril_cd = p_peril_cd
                                AND a.dist_seq_no = p_dist_seq_no
                                AND dist_no =
                                       (SELECT MAX (dist_no)
                                          FROM giuw_pol_dist
                                         WHERE policy_id =
                                                    (SELECT old_policy_id
                                                       FROM gipi_wpolnrep
                                                      WHERE par_id = p_par_id)))
         LOOP
            v_share_cd := c2.share_cd;
            v_dist_spct := c2.dist_spct;
          v_dist_spct1    := c2.dist_spct1;
            v_dist_tsi := ROUND (((p_dist_tsi * c2.dist_spct) / 100), 2);
            v_dist_prem := ROUND(((p_dist_prem    * NVL(c2.dist_spct1,c2.dist_spct))/ 100), 2);
            v_ann_dist_tsi :=
                          ROUND (((p_ann_dist_tsi * c2.dist_spct) / 100), 2);
            v_sum_dist_tsi := NVL (v_sum_dist_tsi, 0) + NVL (v_dist_tsi, 0);
            v_sum_dist_prem := NVL (v_sum_dist_prem, 0)
                               + NVL (v_dist_prem, 0);
            v_sum_ann_dist_tsi :=
                         NVL (v_sum_ann_dist_tsi, 0)
                         + NVL (v_ann_dist_tsi, 0);

            INSERT INTO giuw_witemperilds_dtl
                        (dist_no, dist_seq_no, item_no, line_cd,
                         peril_cd, share_cd, dist_spct, dist_tsi,
                         dist_prem, ann_dist_spct, ann_dist_tsi, dist_grp,    
                       dist_spct1)
                 VALUES (p_dist_no, p_dist_seq_no, p_item_no, p_line_cd,
                         p_peril_cd, v_share_cd, v_dist_spct, v_dist_tsi,
                         v_dist_prem, v_dist_spct, v_ann_dist_tsi, 1,    
                       v_dist_spct1);
         END LOOP;
      ELSIF p_par_type = 'E'
      THEN
         FOR c2 IN (SELECT DISTINCT share_cd, dist_spct, dist_spct1
                               FROM giuw_perilds_dtl a
                              WHERE 1 = 1
                                AND a.peril_cd = p_peril_cd
                                AND a.dist_seq_no = p_dist_seq_no
                                AND dist_no =
                                       (SELECT MAX (dist_no)
                                          FROM giuw_pol_dist
                                         WHERE par_id =
                                                  (SELECT par_id
                                                     FROM gipi_polbasic
                                                    WHERE endt_seq_no = 0
                                                      AND (line_cd,
                                                           subline_cd,
                                                           iss_cd,
                                                           issue_yy,
                                                           pol_seq_no,
                                                           renew_no
                                                          ) =
                                                             (SELECT line_cd,
                                                                     subline_cd,
                                                                     iss_cd,
                                                                     issue_yy,
                                                                     pol_seq_no,
                                                                     renew_no
                                                                FROM gipi_wpolbas
                                                               WHERE par_id =
                                                                        p_par_id)))
                    UNION
                    SELECT DISTINCT share_cd, dist_spct, dist_spct1
                               FROM giuw_wperilds_dtl a
                              WHERE 1 = 1
                                AND a.peril_cd = p_peril_cd
                                AND a.dist_seq_no = p_dist_seq_no
                                AND dist_no =
                                       (SELECT MAX (dist_no)
                                          FROM giuw_pol_dist
                                         WHERE par_id =
                                                  (SELECT par_id
                                                     FROM gipi_polbasic
                                                    WHERE endt_seq_no = 0
                                                      AND (line_cd,
                                                           subline_cd,
                                                           iss_cd,
                                                           issue_yy,
                                                           pol_seq_no,
                                                           renew_no
                                                          ) =
                                                             (SELECT line_cd,
                                                                     subline_cd,
                                                                     iss_cd,
                                                                     issue_yy,
                                                                     pol_seq_no,
                                                                     renew_no
                                                                FROM gipi_wpolbas
                                                               WHERE par_id =
                                                                        p_par_id))))
         LOOP
            v_share_cd := c2.share_cd;
            v_dist_spct := c2.dist_spct;
          v_dist_spct1 := c2.dist_spct1;
            v_dist_tsi := ROUND (((p_dist_tsi * c2.dist_spct) / 100), 2);
            v_dist_prem :=  ROUND(((p_dist_prem    * NVL(c2.dist_spct1,c2.dist_spct))/ 100), 2);
            v_ann_dist_tsi :=
                          ROUND (((p_ann_dist_tsi * c2.dist_spct) / 100), 2);
            v_sum_dist_tsi := NVL (v_sum_dist_tsi, 0) + NVL (v_dist_tsi, 0);
            v_sum_dist_prem := NVL (v_sum_dist_prem, 0)
                               + NVL (v_dist_prem, 0);
            v_sum_ann_dist_tsi :=
                         NVL (v_sum_ann_dist_tsi, 0)
                         + NVL (v_ann_dist_tsi, 0);

            INSERT INTO giuw_witemperilds_dtl
                        (dist_no, dist_seq_no, item_no, line_cd,
                         peril_cd, share_cd, dist_spct, dist_tsi,
                         dist_prem, ann_dist_spct, ann_dist_tsi, dist_grp   ,
                       dist_spct1)
                 VALUES (p_dist_no, p_dist_seq_no, p_item_no, p_line_cd,
                         p_peril_cd, c2.share_cd, c2.dist_spct, v_dist_tsi,
                         v_dist_prem, c2.dist_spct, v_ann_dist_tsi, 1,
                       v_dist_spct1);
         END LOOP;
      ELSIF v_exist = 'Y'
      THEN
         /* added by aaron to check if default distribution rates exist in
         ** giis_default_dist_peril.
         */
         FOR x IN dist_peril_cur
         LOOP
            v_share_cd := x.share_cd;
            v_dist_spct := x.share_pct;
            v_dist_spct1 := x.share_pct;    -- shan 07.31.2014
            v_dist_tsi := ROUND (((p_dist_tsi * v_dist_spct) / 100), 2);
            v_dist_prem := ROUND (((p_dist_prem * v_dist_spct) / 100), 2);

            INSERT INTO giuw_witemperilds_dtl
                        (dist_no, dist_seq_no, item_no, line_cd,
                         peril_cd, share_cd, dist_spct, dist_tsi,
                         dist_prem, ann_dist_spct, ann_dist_tsi, dist_grp
                        , dist_spct1)   -- added dist_spct1 : shan 07.31.2014
                 VALUES (p_dist_no, p_dist_seq_no, p_item_no, p_line_cd,
                         p_peril_cd, v_share_cd, v_dist_spct, v_dist_tsi,
                         v_dist_prem, v_dist_spct, v_ann_dist_tsi, 1
                        , v_dist_spct1);
         END LOOP;
      ELSE
         v_share_cd := 1;
         v_dist_spct := 100;
         v_dist_tsi := p_dist_tsi;
         v_dist_prem := p_dist_prem;
         v_ann_dist_tsi := p_ann_dist_tsi;

         FOR c IN 1 .. 2
         LOOP
            INSERT INTO giuw_witemperilds_dtl
                        (dist_no, dist_seq_no, item_no, line_cd,
                         peril_cd, share_cd, dist_spct, dist_tsi,
                         dist_prem, ann_dist_spct, ann_dist_tsi, dist_grp
                        )
                 VALUES (p_dist_no, p_dist_seq_no, p_item_no, p_line_cd,
                         p_peril_cd, v_share_cd, v_dist_spct, v_dist_tsi,
                         v_dist_prem, v_dist_spct, v_ann_dist_tsi, 1
                        );

            v_share_cd := 999;
            v_dist_spct := 0;
            v_dist_tsi := 0;
            v_dist_prem := 0;
            v_ann_dist_tsi := 0;
         END LOOP;
      END IF;
   END;

   /*
   **  Created by  : Emman
   **  Date Created  : 06.06.2010
   **  Reference By  : (GIUWS003 - Preliminary Peril Distribution)
   **  Description  : Execute procedure CREATE_PERIL_DFLT_WITEMPERILDS
   */
   PROCEDURE create_peril_dflt_witmperilds (
      p_dist_no        IN   giuw_wperilds_dtl.dist_no%TYPE,
      p_dist_seq_no    IN   giuw_wperilds_dtl.dist_seq_no%TYPE,
      p_item_no        IN   giuw_witemperilds_dtl.item_no%TYPE,
      p_line_cd        IN   giuw_wperilds_dtl.line_cd%TYPE,
      p_peril_cd       IN   giuw_wperilds_dtl.peril_cd%TYPE,
      p_dist_tsi       IN   giuw_witemperilds_dtl.dist_tsi%TYPE,
      p_dist_prem      IN   giuw_witemperilds_dtl.dist_prem%TYPE,
      p_ann_dist_tsi   IN   giuw_witemperilds_dtl.ann_dist_tsi%TYPE,
      p_par_id         IN   gipi_parlist.par_id%TYPE,
      p_pol_flag       IN   gipi_wpolbas.pol_flag%TYPE,
      p_par_type       IN   gipi_parlist.par_type%TYPE
   )
   IS
      v_dist_tsi           giuw_witemperilds_dtl.dist_tsi%TYPE;
      v_dist_prem          giuw_witemperilds_dtl.dist_prem%TYPE;
      v_ann_dist_tsi       giuw_witemperilds_dtl.ann_dist_tsi%TYPE;
      v_insert             VARCHAR2 (1)                              := 'N';
      v_share_cd           giuw_wperilds_dtl.share_cd%TYPE;
      v_dist_spct          giuw_wperilds_dtl.dist_spct%TYPE;
      v_sum_dist_tsi       giuw_witemperilds_dtl.dist_tsi%TYPE       := 0;
      v_sum_dist_spct      giuw_witemperilds_dtl.dist_spct%TYPE      := 0;
      v_sum_dist_prem      giuw_witemperilds_dtl.dist_prem%TYPE      := 0;
      v_sum_ann_dist_tsi   giuw_witemperilds_dtl.ann_dist_tsi%TYPE   := 0;
      v_exist              VARCHAR2(1) := 'N';
   BEGIN
      IF p_pol_flag = '2'
      THEN
         FOR c2 IN (SELECT DISTINCT share_cd, dist_spct
                               FROM giuw_itemperilds_dtl a -- modified to itemperilds_dtl from perilds_dtl edgar 06/11/2014
                              WHERE 1 = 1
                                AND a.peril_cd = p_peril_cd
                                AND a.item_no = p_item_no --added condition edgar 06/11/2014
                                AND a.dist_seq_no = p_dist_seq_no
                                AND dist_no =
                                       (SELECT MAX (dist_no)
                                          FROM giuw_pol_dist
                                         WHERE policy_id =
                                                    (SELECT MAX(a.old_policy_id)
                                                       FROM gipi_wpolnrep a
                                                           ,gipi_parlist b
                                                      WHERE a.par_id = p_par_id
                                                        AND a.ren_rep_sw = '1'
                                                        AND a.par_id = b.par_id
                                                        AND b.par_status NOT IN(98,99)))
                    /*UNION
                    SELECT DISTINCT share_cd, dist_spct
                               FROM giuw_wperilds_dtl a
                              WHERE 1 = 1
                                AND a.peril_cd = p_peril_cd
                                AND a.dist_seq_no = p_dist_seq_no
                                AND dist_no =
                                       (SELECT MAX (dist_no)
                                          FROM giuw_pol_dist
                                         WHERE policy_id =
                                                    (SELECT old_policy_id
                                                       FROM gipi_wpolnrep
                                                      WHERE par_id = p_par_id))*/)--commented out edgar 06/11/2014
         LOOP
            v_exist := 'Y';
            v_share_cd := c2.share_cd;
            v_dist_spct := c2.dist_spct;
            v_dist_tsi := ROUND (((p_dist_tsi * c2.dist_spct) / 100), 2);
            v_dist_prem := ROUND (((p_dist_prem * c2.dist_spct) / 100), 2);
            v_ann_dist_tsi :=
                          ROUND (((p_ann_dist_tsi * c2.dist_spct) / 100), 2);
            v_sum_dist_tsi := NVL (v_sum_dist_tsi, 0) + NVL (v_dist_tsi, 0);
            v_sum_dist_prem := NVL (v_sum_dist_prem, 0)
                               + NVL (v_dist_prem, 0);
            v_sum_ann_dist_tsi :=
                         NVL (v_sum_ann_dist_tsi, 0)
                         + NVL (v_ann_dist_tsi, 0);

            INSERT INTO giuw_witemperilds_dtl
                        (dist_no, dist_seq_no, item_no, line_cd,
                         peril_cd, share_cd, dist_spct, dist_tsi,
                         dist_prem, ann_dist_spct, ann_dist_tsi, dist_grp
                        )
                 VALUES (p_dist_no, p_dist_seq_no, p_item_no, p_line_cd,
                         p_peril_cd, v_share_cd, v_dist_spct, v_dist_tsi,
                         v_dist_prem, v_dist_spct, v_ann_dist_tsi, 1
                        );
         END LOOP;
         
         IF v_exist = 'N' THEN
             v_share_cd := 1;
             v_dist_spct := 100;
             v_dist_tsi := p_dist_tsi;
             v_dist_prem := p_dist_prem;
             v_ann_dist_tsi := p_ann_dist_tsi;

             FOR c IN 1 .. 2
             LOOP
                INSERT INTO giuw_witemperilds_dtl
                            (dist_no, dist_seq_no, item_no, line_cd,
                             peril_cd, share_cd, dist_spct, dist_tsi,
                             dist_prem, ann_dist_spct, ann_dist_tsi, dist_grp
                            )
                     VALUES (p_dist_no, p_dist_seq_no, p_item_no, p_line_cd,
                             p_peril_cd, v_share_cd, v_dist_spct, v_dist_tsi,
                             v_dist_prem, v_dist_spct, v_ann_dist_tsi, 1
                            );
                            
                v_share_cd := 999;
                v_dist_spct := 0;
                v_dist_tsi := 0;
                v_dist_prem := 0;
                v_ann_dist_tsi := 0;
             END LOOP; 
         END IF;
      ELSIF p_par_type = 'E'
      THEN
         FOR c2 IN (SELECT DISTINCT share_cd, dist_spct
                               FROM giuw_itemperilds_dtl a -- modified to itemperilds_dtl from perilds_dtl edgar 06/11/2014
                              WHERE 1 = 1
                                AND a.peril_cd = p_peril_cd
                                AND a.item_no = p_item_no --added condition edgar 06/11/2014
                                AND a.dist_seq_no = p_dist_seq_no
                                AND dist_no =
                                       (SELECT MAX (dist_no)
                                          FROM giuw_pol_dist
                                         WHERE par_id =
                                                  (SELECT par_id
                                                     FROM gipi_polbasic
                                                    WHERE endt_seq_no = 0
                                                      AND (line_cd,
                                                           subline_cd,
                                                           iss_cd,
                                                           issue_yy,
                                                           pol_seq_no,
                                                           renew_no
                                                          ) =
                                                             (SELECT line_cd,
                                                                     subline_cd,
                                                                     iss_cd,
                                                                     issue_yy,
                                                                     pol_seq_no,
                                                                     renew_no
                                                                FROM gipi_wpolbas
                                                               WHERE par_id =
                                                                        p_par_id)))
                   /* UNION
                    SELECT DISTINCT share_cd, dist_spct
                               FROM giuw_wperilds_dtl a
                              WHERE 1 = 1
                                AND a.peril_cd = p_peril_cd
                                AND a.dist_seq_no = p_dist_seq_no
                                AND dist_no =
                                       (SELECT MAX (dist_no)
                                          FROM giuw_pol_dist
                                         WHERE par_id =
                                                  (SELECT par_id
                                                     FROM gipi_polbasic
                                                    WHERE endt_seq_no = 0
                                                      AND (line_cd,
                                                           subline_cd,
                                                           iss_cd,
                                                           issue_yy,
                                                           pol_seq_no,
                                                           renew_no
                                                          ) =
                                                             (SELECT line_cd,
                                                                     subline_cd,
                                                                     iss_cd,
                                                                     issue_yy,
                                                                     pol_seq_no,
                                                                     renew_no
                                                                FROM gipi_wpolbas
                                                               WHERE par_id =
                                                                        p_par_id)))*/)--commented out edgar 06/11/2014
         LOOP
            v_exist := 'Y';
            v_share_cd := c2.share_cd;
            v_dist_spct := c2.dist_spct;
            v_dist_tsi := ROUND (((p_dist_tsi * c2.dist_spct) / 100), 2);
            v_dist_prem := ROUND (((p_dist_prem * c2.dist_spct) / 100), 2);
            v_ann_dist_tsi :=
                          ROUND (((p_ann_dist_tsi * c2.dist_spct) / 100), 2);
            v_sum_dist_tsi := NVL (v_sum_dist_tsi, 0) + NVL (v_dist_tsi, 0);
            v_sum_dist_prem := NVL (v_sum_dist_prem, 0)
                               + NVL (v_dist_prem, 0);
            v_sum_ann_dist_tsi :=
                         NVL (v_sum_ann_dist_tsi, 0)
                         + NVL (v_ann_dist_tsi, 0);

            INSERT INTO giuw_witemperilds_dtl
                        (dist_no, dist_seq_no, item_no, line_cd,
                         peril_cd, share_cd, dist_spct, dist_tsi,
                         dist_prem, ann_dist_spct, ann_dist_tsi, dist_grp
                        )
                 VALUES (p_dist_no, p_dist_seq_no, p_item_no, p_line_cd,
                         p_peril_cd, c2.share_cd, c2.dist_spct, v_dist_tsi,
                         v_dist_prem, c2.dist_spct, v_ann_dist_tsi, 1
                        );
         END LOOP;
         
         IF v_exist = 'N' THEN
             v_share_cd := 1;
             v_dist_spct := 100;
             v_dist_tsi := p_dist_tsi;
             v_dist_prem := p_dist_prem;
             v_ann_dist_tsi := p_ann_dist_tsi;


             FOR c IN 1 .. 2
             LOOP
                INSERT INTO giuw_witemperilds_dtl
                            (dist_no, dist_seq_no, item_no, line_cd,
                             peril_cd, share_cd, dist_spct, dist_tsi,
                             dist_prem, ann_dist_spct, ann_dist_tsi, dist_grp
                            )
                     VALUES (p_dist_no, p_dist_seq_no, p_item_no, p_line_cd,
                             p_peril_cd, v_share_cd, v_dist_spct, v_dist_tsi,
                             v_dist_prem, v_dist_spct, v_ann_dist_tsi, 1
                            );
                            
                v_share_cd := 999;
                v_dist_spct := 0;
                v_dist_tsi := 0;
                v_dist_prem := 0;
                v_ann_dist_tsi := 0;
             END LOOP; 
      
         END IF;         
      ELSE
         v_share_cd := 1;
         v_dist_spct := 100;
         v_dist_tsi := p_dist_tsi;
         v_dist_prem := p_dist_prem;
         v_ann_dist_tsi := p_ann_dist_tsi;

        /* FOR c IN 1 .. 2
         LOOP
            INSERT INTO giuw_witemperilds_dtl
                        (dist_no, dist_seq_no, item_no, line_cd,
                         peril_cd, share_cd, dist_spct, dist_tsi,
                         dist_prem, ann_dist_spct, ann_dist_tsi, dist_grp
                        )
                 VALUES (p_dist_no, p_dist_seq_no, p_item_no, p_line_cd,
                         p_peril_cd, v_share_cd, v_dist_spct, v_dist_tsi,
                         v_dist_prem, v_dist_spct, v_ann_dist_tsi, 1
                        );

            v_share_cd := 999;
            v_dist_spct := 0;
            v_dist_tsi := 0;
            v_dist_prem := 0;
            v_ann_dist_tsi := 0;
         END LOOP;*/
          DELETE FROM giuw_witemperilds_dtl
            WHERE dist_no = p_dist_no;
          FOR c1 IN (SELECT dist_spct, ann_dist_spct, dist_grp, share_cd,
                            line_cd, dist_seq_no, peril_cd, dist_spct1
                       FROM giuw_wperilds_dtl
                      WHERE dist_no = p_dist_no)
          LOOP
             FOR c2 IN (SELECT tsi_amt, prem_amt, ann_tsi_amt, dist_no,
                               dist_seq_no, item_no, line_cd, peril_cd
                          FROM giuw_witemperilds
                         WHERE peril_cd = c1.peril_cd
                           AND line_cd = c1.line_cd
                           AND dist_seq_no = c1.dist_seq_no
                           AND dist_no = p_dist_no)
             LOOP
                v_dist_tsi := ROUND (c1.dist_spct / 100 * c2.tsi_amt, 2);

                v_dist_prem := ROUND (c1.dist_spct / 100 * c2.prem_amt, 2);
               
                v_ann_dist_tsi := ROUND (c1.ann_dist_spct / 100 * c2.ann_tsi_amt, 2);

                INSERT INTO giuw_witemperilds_dtl
                            (dist_no, dist_seq_no, item_no, line_cd,
                             peril_cd, share_cd, dist_spct, dist_tsi,
                             dist_prem, ann_dist_spct, ann_dist_tsi,
                             dist_grp, dist_spct1
                            )
                     VALUES (c2.dist_no, c2.dist_seq_no, c2.item_no, c2.line_cd,
                             c2.peril_cd, c1.share_cd, c1.dist_spct, v_dist_tsi,
                             v_dist_prem, c1.ann_dist_spct, v_ann_dist_tsi,
                             c1.dist_grp, c1.dist_spct1
                            );
             END LOOP;
          END LOOP;          
      END IF;
   END create_peril_dflt_witmperilds;

   /*
   **  Created by  : Emman
   **  Date Created  : 06.06.2010
   **  Reference By  : (GIUWS003 - Preliminary Peril Distribution)
   **  Description  : Create records in table GIUW_WPOLICYDS_DTL based on
   **        the values taken in by table GIUW_WITEMDS_DTL.
   */
   PROCEDURE create_peril_dflt_wpolicyds2 (
      p_dist_no        IN   giuw_pol_dist.dist_no%TYPE,
      p_dist_seq_no    IN   giuw_wpolicyds.dist_seq_no%TYPE,
      p_line_cd        IN   giuw_wpolicyds_dtl.line_cd%TYPE,
      p_dist_tsi       IN   giuw_wpolicyds_dtl.dist_tsi%TYPE,
      p_dist_prem      IN   giuw_wpolicyds_dtl.dist_prem%TYPE,
      p_ann_dist_tsi   IN   giuw_wpolicyds_dtl.ann_dist_tsi%TYPE,
      p_par_id         IN   gipi_parlist.par_id%TYPE,
      p_item_grp       IN   gipi_witem.item_grp%TYPE,
      p_pol_flag       IN   gipi_wpolbas.pol_flag%TYPE,
      p_par_type       IN   gipi_parlist.par_type%TYPE
   )
   IS
      v_dist_spct          giuw_wpolicyds_dtl.dist_spct%TYPE;
      v_dist_tsi           giuw_wpolicyds_dtl.dist_tsi%TYPE;
      v_dist_prem          giuw_wpolicyds_dtl.dist_prem%TYPE;
      v_ann_dist_spct      giuw_wpolicyds_dtl.ann_dist_spct%TYPE;
      v_ann_dist_tsi       giuw_wpolicyds_dtl.ann_dist_tsi%TYPE;
      v_tsi_amt            giuw_wpolicyds_dtl.dist_tsi%TYPE;
      v_prem_amt           giuw_wpolicyds_dtl.dist_prem%TYPE;
      v_ann_tsi_amt        giuw_wpolicyds_dtl.ann_dist_tsi%TYPE;
      v_share_cd           giis_dist_share.share_cd%TYPE;
      v_sum_dist_tsi       giuw_wpolicyds_dtl.dist_tsi%TYPE        := 0;
      v_sum_dist_spct      giuw_wpolicyds_dtl.dist_spct%TYPE       := 0;
      v_sum_dist_prem      giuw_wpolicyds_dtl.dist_prem%TYPE       := 0;
      v_sum_ann_dist_tsi   giuw_wpolicyds_dtl.ann_dist_tsi%TYPE    := 0;
   BEGIN
      
      IF p_pol_flag = '2' OR p_par_type = 'E'
      THEN         
         FOR c IN (SELECT   SUM (NVL (dist_tsi, 0)) dist_tsi,
                            SUM (NVL (dist_prem, 0)) dist_prem,
                            SUM (NVL (ann_dist_tsi, 0)) ann_dist_tsi,
                            a.share_cd
                       FROM giuw_witemds_dtl a
                      WHERE a.dist_seq_no = p_dist_seq_no
                        AND a.dist_no = p_dist_no
                   GROUP BY a.share_cd)
         LOOP
            v_share_cd := c.share_cd;
            /*         raise_application_error
                             (-20001,
                              'input TSI : '||p_dist_tsi||chr(10)
                              ||'cursor TSI : '||c.dist_tsi||chr(10)
                              ||'share code : '||c.share_cd
                             );*/
            IF c.dist_tsi = 0
            THEN
               v_dist_spct := 0;
            ELSE
                /*added if condition for handling tsi with zero amount edgar 05/31/2014*/
               IF p_dist_tsi = 0 THEN
                  v_dist_spct := 0;
               ELSE
                  v_dist_spct := ROUND ((c.dist_tsi / p_dist_tsi) * 100, 9);  
                END IF;
            END IF;

            v_dist_tsi := c.dist_tsi;
            v_dist_prem := c.dist_prem;
            v_ann_dist_tsi := c.ann_dist_tsi;
            v_sum_dist_tsi := NVL (v_sum_dist_tsi, 0) + NVL (v_dist_tsi, 0);
            v_sum_dist_prem := NVL (v_sum_dist_prem, 0) + NVL (v_dist_prem, 0);
            v_sum_ann_dist_tsi :=
                          NVL (v_sum_ann_dist_tsi, 0)
                          + NVL (v_ann_dist_tsi, 0);

            INSERT INTO giuw_wpolicyds_dtl
                        (dist_no, dist_seq_no, line_cd, share_cd,
                         dist_spct, dist_tsi, dist_prem, ann_dist_spct,
                         ann_dist_tsi, dist_grp, dist_spct1
                        )
                 VALUES (p_dist_no, p_dist_seq_no, p_line_cd, v_share_cd,
                         v_dist_spct, v_dist_tsi, v_dist_prem, v_dist_spct,
                         v_ann_dist_tsi, 1, v_dist_spct
                        );
         END LOOP;
      ELSE
         FOR c1 IN (SELECT   SUM (NVL (dist_tsi, 0)) dist_tsi,
                             SUM (NVL (dist_prem, 0)) dist_prem,
                             SUM (NVL (ann_dist_tsi, 0)) ann_dist_tsi,
                             line_cd line_cd, share_cd share_cd,
                             dist_grp dist_grp
                        FROM giuw_witemds_dtl
                       WHERE dist_no = p_dist_no
                         AND dist_seq_no = p_dist_seq_no
                    GROUP BY line_cd, share_cd, dist_grp)
         LOOP
            FOR c2 IN (SELECT tsi_amt, prem_amt, ann_tsi_amt
                         FROM giuw_wpolicyds
                        WHERE dist_seq_no = p_dist_seq_no
                          AND dist_no = p_dist_no)
            LOOP
               /* Divide the individual TSI with the total TSI and multiply
               ** it by 100 to arrive at the correct percentage for the
               ** breakdown. */
               IF c2.tsi_amt != 0
               THEN
                  v_dist_spct := ROUND (c1.dist_tsi / c2.tsi_amt, 14) * 100;
               ELSIF c2.prem_amt != 0
               THEN
                  v_dist_spct := ROUND (c1.dist_prem / c2.prem_amt, 14) * 100;
               ELSE
                  v_dist_spct := 0;
               END IF;

               /* Updated by Loth 050499
               ** To avoid the problem of Zero devide*/
               IF c2.ann_tsi_amt = 0
               THEN
                  v_ann_dist_spct := 0;
               ELSE
                  v_ann_dist_spct :=
                            ROUND (c1.ann_dist_tsi / c2.ann_tsi_amt, 14)
                            * 100;
               END IF;

               INSERT INTO giuw_wpolicyds_dtl
                           (dist_no, dist_seq_no, line_cd,
                            share_cd, dist_spct, dist_tsi,
                            dist_prem, ann_dist_spct, ann_dist_tsi,
                            dist_grp, dist_spct1    -- added dist_spct1 : shan 07.31.2014
                           )
                    VALUES (p_dist_no, p_dist_seq_no, c1.line_cd,
                            c1.share_cd, v_dist_spct, c1.dist_tsi,
                            c1.dist_prem, v_ann_dist_spct, c1.ann_dist_tsi,
                            c1.dist_grp, v_dist_spct    -- shan 07.31.2014    
                           );
            END LOOP;
         END LOOP;
      END IF;
   END create_peril_dflt_wpolicyds2;

   /*
   **  Created by  : Emman
   **  Date Created  : 06.06.2010
   **  Reference By  : (GIUWS003 - Preliminary Peril Distribution)
   **  Description  : Executes procedure ADJUST_PERIL_LEVEL_AMTS
   */
   PROCEDURE adjust_peril_level_amts2 (
      p_dist_no   IN   giuw_pol_dist.dist_no%TYPE
   )
   IS
      v_exist                   VARCHAR2 (1)                           := 'N';
      v_count                   NUMBER;
      v_tsi_amt                 giuw_wpolicyds.tsi_amt%TYPE;
      v_prem_amt                giuw_wpolicyds.prem_amt%TYPE;
      v_ann_tsi_amt             giuw_wpolicyds.ann_tsi_amt%TYPE;
      v_dist_spct               giuw_wpolicyds_dtl.dist_spct%TYPE;
      v_dist_tsi                giuw_wpolicyds_dtl.dist_tsi%TYPE;
      v_dist_prem               giuw_wpolicyds_dtl.dist_prem%TYPE;
      v_ann_dist_tsi            giuw_wpolicyds_dtl.ann_dist_tsi%TYPE;
      v_ann_dist_spct           giuw_wpolicyds_dtl.ann_dist_spct%TYPE;
      v_sum_dist_tsi            giuw_wpolicyds_dtl.dist_tsi%TYPE;
      v_sum_dist_prem           giuw_wpolicyds_dtl.dist_prem%TYPE;
      v_sum_dist_spct           giuw_wpolicyds_dtl.dist_spct%TYPE;
      v_sum_ann_dist_tsi        giuw_wpolicyds_dtl.ann_dist_tsi%TYPE;
      v_sum_ann_dist_spct       giuw_wpolicyds_dtl.ann_dist_spct%TYPE;
      v_correct_dist_tsi        giuw_wpolicyds_dtl.dist_tsi%TYPE;
      v_correct_dist_prem       giuw_wpolicyds_dtl.dist_prem%TYPE;
      v_correct_dist_spct       giuw_wpolicyds_dtl.dist_spct%TYPE;
      v_correct_ann_dist_tsi    giuw_wpolicyds_dtl.ann_dist_tsi%TYPE;
      v_correct_ann_dist_spct   giuw_wpolicyds_dtl.ann_dist_spct%TYPE;
   BEGIN
      /* Scan each combination of the DIST_SEQ_NO, LINE_CD and
      ** PERIL_CD for computational floats. */
      FOR c1 IN (SELECT dist_no, dist_seq_no, line_cd, peril_cd,
                        ROUND (NVL (tsi_amt, 0), 2) tsi_amt,
                        ROUND (NVL (prem_amt, 0), 2) prem_amt,
                        ROUND (NVL (ann_tsi_amt, 0), 2) ann_tsi_amt
                   FROM giuw_wperilds
                  WHERE dist_no = p_dist_no)
      LOOP
         BEGIN
            /* **************************** Section A **********************************
            ** Compare the amounts retrieved from the master table with the sum of its
            ** counterparts from the detail table.
            ************************************************************************* */
            v_tsi_amt := c1.tsi_amt;
            v_prem_amt := c1.prem_amt;
            v_ann_tsi_amt := c1.ann_tsi_amt;
            v_exist := 'N';

            FOR c10 IN (SELECT ROUND (SUM (NVL (dist_tsi, 0)), 2) dist_tsi,
                               ROUND (SUM (NVL (dist_prem, 0)), 2) dist_prem,
                               ROUND (SUM (NVL (dist_spct, 0)), 14)
                                                                   dist_spct,
                               ROUND (SUM (NVL (ann_dist_tsi, 0)),
                                      2
                                     ) ann_dist_tsi
                          FROM giuw_wperilds_dtl
                         WHERE peril_cd = c1.peril_cd
                           AND line_cd = c1.line_cd
                           AND dist_seq_no = c1.dist_seq_no
                           AND dist_no = c1.dist_no)
            LOOP
               v_exist := 'Y';
               v_dist_tsi := c10.dist_tsi;
               v_dist_prem := c10.dist_prem;
               v_dist_spct := c10.dist_spct;
               v_ann_dist_tsi := c10.ann_dist_tsi;
               EXIT;
            END LOOP;

            IF v_exist = 'N'
            THEN
               EXIT;
            END IF;

            /******************************** End of Section A ******************************/

            /* If the amounts retrieved from the master table
            ** are not equal to the amounts retrieved from the
            ** the detail table then the procedure below shall
            ** be executed. */
            IF    (100 != v_dist_spct)
               OR (v_tsi_amt != v_dist_tsi)
               OR (v_prem_amt != v_dist_prem)
               OR (v_ann_tsi_amt != v_ann_dist_tsi)
            THEN
               BEGIN
                  v_exist := 'N';

                  /*************************** Section B *******************************
                  ** Adjust the value of the fields belonging to the NET RETENTION share
                  ** (SHARE_CD = '1'). If by chance a NET RETENTION share does not exist,
                  ** then the NO_DATA_FOUND exception (Section F) shall handle the next
                  ** few steps.
                  *********************************************************************/

                  /* Get the ROWID of the NET RETENTION share
                  ** in preparation for update. */
                  FOR c10 IN (SELECT ROWID
                                FROM giuw_wperilds_dtl
                               WHERE share_cd = '1'
                                 AND peril_cd = c1.peril_cd
                                 AND line_cd = c1.line_cd
                                 AND dist_seq_no = c1.dist_seq_no
                                 AND dist_no = c1.dist_no)
                  LOOP
                     /* Get the sum of each field for all the shares excluding the NET
                     ** RETENTION share.  The result will serve as the SUBTRAHEND in
                     ** calculating for the values to be attained by the fields belonging
                     ** to NET RETENTION. */
                     FOR c20 IN
                        (SELECT ROUND (SUM (dist_tsi), 2) dist_tsi,
                                ROUND (SUM (dist_prem), 2) dist_prem,
                                ROUND (SUM (dist_spct), 14) dist_spct,
                                ROUND (SUM (NVL (ann_dist_tsi, 0)),
                                       2
                                      ) ann_dist_tsi,
                                ROUND
                                     (SUM (NVL (ann_dist_spct, 0)),
                                      14
                                     ) ann_dist_spct
                           FROM giuw_wperilds_dtl
                          WHERE share_cd != '1'
                            AND peril_cd = c1.peril_cd
                            AND line_cd = c1.line_cd
                            AND dist_seq_no = c1.dist_seq_no
                            AND dist_no = c1.dist_no)
                     LOOP
                        v_exist := 'Y';
                        v_sum_dist_tsi := c20.dist_tsi;
                        v_sum_dist_prem := c20.dist_prem;
                        v_sum_dist_spct := c20.dist_spct;
                        v_sum_ann_dist_tsi := c20.ann_dist_tsi;
                        v_sum_ann_dist_spct := c20.ann_dist_spct;
                        EXIT;
                     END LOOP;

                     IF v_exist = 'N'
                     THEN
                        EXIT;
                     END IF;

                     /* Calculate for the values to be attained by the fields
                     ** belonging to the NET RETENTION share by subtracting
                     ** the values attained from the master table with the
                     ** values attained above. */
                     v_correct_dist_tsi :=
                                         ABS (v_tsi_amt)
                                         - ABS (v_sum_dist_tsi);
                     v_correct_dist_prem :=
                                       ABS (v_prem_amt)
                                       - ABS (v_sum_dist_prem);
                     v_correct_dist_spct := 100 - v_sum_dist_spct;
                     v_correct_ann_dist_tsi :=
                                 ABS (v_ann_tsi_amt)
                                 - ABS (v_sum_ann_dist_tsi);
                     v_correct_ann_dist_spct := 100 - v_sum_ann_dist_spct;

                     IF SIGN (v_tsi_amt) = -1
                     THEN
                        v_correct_dist_tsi := v_correct_dist_tsi * -1;
                     END IF;

                     IF SIGN (v_prem_amt) = -1
                     THEN
                        v_correct_dist_prem := v_correct_dist_prem * -1;
                     END IF;

                     IF SIGN (v_ann_tsi_amt) = -1
                     THEN
                        v_correct_ann_dist_tsi := v_correct_ann_dist_tsi * -1;
                     END IF;

                     /* Update the values of the fields belonging to the NET
                     ** RETENTION share to equalize the amounts attained from
                     ** the detail table with the amounts attained from the
                     ** master table. */
                     UPDATE giuw_wperilds_dtl
                        SET dist_tsi = v_correct_dist_tsi,
                            dist_prem = v_correct_dist_prem,
                            dist_spct = v_correct_dist_spct,
                            ann_dist_tsi = v_correct_ann_dist_tsi,
                            ann_dist_spct = v_correct_ann_dist_spct
                      WHERE ROWID = c10.ROWID;

                     EXIT;
                  END LOOP;

                  IF v_exist = 'N'
                  THEN
                     RAISE NO_DATA_FOUND;
                  END IF;
               /*************************** End of Section B ***************************/
               EXCEPTION
                  WHEN NO_DATA_FOUND
                  THEN
                     BEGIN
                        /****************************** Section C ******************************
                        ** Adjust the value of the fields belonging to the share of the FIRST
                        ** RETRIEVED ROW.
                        ***********************************************************************/

                        /* Get the ROWID of the first retrieved
                        ** row in preparation for update. */
                        FOR c10 IN (SELECT ROWID
                                      FROM giuw_wperilds_dtl
                                     WHERE ROWNUM = 1
                                       AND peril_cd = c1.peril_cd
                                       AND line_cd = c1.line_cd
                                       AND dist_seq_no = c1.dist_seq_no
                                       AND dist_no = c1.dist_no)
                        LOOP
                           /* Get the sum of each field for all the shares excluding the share
                           ** of the FIRST RETRIEVED ROW.  The result will serve as the SUBTRAHEND
                           ** in calculating for the values to be attained by the fields belonging
                           ** to the FIRST ROW. */
                           FOR c20 IN
                              (SELECT ROUND (SUM (dist_tsi), 2) dist_tsi,
                                      ROUND (SUM (dist_prem), 2) dist_prem,
                                      ROUND (SUM (dist_spct), 14) dist_spct,
                                      ROUND
                                         (SUM (NVL (ann_dist_tsi, 0)),
                                          2
                                         ) ann_dist_tsi,
                                      ROUND
                                         (SUM (NVL (ann_dist_spct, 0)),
                                          14
                                         ) ann_dist_spct
                                 FROM giuw_wperilds_dtl
                                WHERE ROWID != c10.ROWID
                                  AND peril_cd = c1.peril_cd
                                  AND line_cd = c1.line_cd
                                  AND dist_seq_no = c1.dist_seq_no
                                  AND dist_no = c1.dist_no)
                           LOOP
                              v_sum_dist_tsi := c20.dist_tsi;
                              v_sum_dist_prem := c20.dist_prem;
                              v_sum_dist_spct := c20.dist_spct;
                              v_sum_ann_dist_tsi := c20.ann_dist_tsi;
                              v_sum_ann_dist_spct := c20.ann_dist_spct;
                              EXIT;
                           END LOOP;

                           /* Calculate for the values to be attained by the fields
                           ** belonging to the share of the FIRST ROW by subtracting
                           ** the values attained from the master table with the
                           ** values attained above. */
                           v_correct_dist_tsi :=
                                         ABS (v_tsi_amt)
                                         - ABS (v_sum_dist_tsi);
                           v_correct_dist_prem :=
                                       ABS (v_prem_amt)
                                       - ABS (v_sum_dist_prem);
                           v_correct_dist_spct := 100 - v_sum_dist_spct;
                           v_correct_ann_dist_tsi :=
                                 ABS (v_ann_tsi_amt)
                                 - ABS (v_sum_ann_dist_tsi);
                           v_correct_ann_dist_spct :=
                                                     100 - v_sum_ann_dist_spct;

                           IF SIGN (v_tsi_amt) = -1
                           THEN
                              v_correct_dist_tsi := v_correct_dist_tsi * -1;
                           END IF;

                           IF SIGN (v_prem_amt) = -1
                           THEN
                              v_correct_dist_prem := v_correct_dist_prem * -1;
                           END IF;

                           IF SIGN (v_ann_tsi_amt) = -1
                           THEN
                              v_correct_ann_dist_tsi :=
                                                   v_correct_ann_dist_tsi
                                                   * -1;
                           END IF;

                           /* Update the values of the fields belonging to the share
                           ** of the FIRST ROW to equalize the amounts attained from
                           ** the detail table with the amounts attained from the
                           ** master table. */
                           UPDATE giuw_wperilds_dtl
                              SET dist_tsi = v_correct_dist_tsi,
                                  dist_prem = v_correct_dist_prem,
                                  dist_spct = v_correct_dist_spct,
                                  ann_dist_tsi = v_correct_ann_dist_tsi,
                                  ann_dist_spct = v_correct_ann_dist_spct
                            WHERE ROWID = c10.ROWID;

                           EXIT;
                        END LOOP;
                     END;
               /**************************** End of Section C *************************/
               END;
            END IF;
         END;
      END LOOP;
   END adjust_peril_level_amts2;

   /*
   **  Created by  : Jerome Orio
   **  Date Created  : 06.07.2010
   **  Reference By  : Distribution Menu
   **  Description  : Validate before moving to Distribution modules
   */
   PROCEDURE check_dist_menu (
      p_par_id      IN       giuw_pol_dist.par_id%TYPE,
      p_module_id   IN       VARCHAR2,
      p_pack        IN       VARCHAR2,
      p_msg_alert   OUT      VARCHAR2,
      p_msg_icon    OUT      VARCHAR2
   )
   IS
      v_item_grp   VARCHAR2 (30) := '';
      v_count      NUMBER;
      v_count2     NUMBER        := 0;
      v_ri_cd      VARCHAR2 (30);
   BEGIN
      IF NVL (p_pack, 'N') = 'Y'
      THEN
         SELECT COUNT (*)
           INTO v_count
           FROM gipi_winvoice
          WHERE par_id IN (SELECT par_id
                             FROM gipi_parlist
                            WHERE pack_par_id = p_par_id);

         FOR y IN (SELECT   par_id, item_grp, SUM (share_percentage)
                                                                    share_per
                       FROM gipi_wcomm_invoices
                      WHERE par_id IN (SELECT par_id
                                         FROM gipi_parlist
                                        WHERE pack_par_id = p_par_id)
                   GROUP BY par_id, item_grp, takeup_seq_no)
         LOOP
            IF y.share_per = 100
            THEN
               v_count2 := v_count2 + 1;
            ELSIF y.share_per < 100
            THEN
               v_item_grp := v_item_grp || y.item_grp || ', ';
            END IF;
         END LOOP;
      ELSIF NVL (p_pack, 'N') = 'N'
      THEN
         SELECT COUNT (*)
           INTO v_count
           FROM gipi_winvoice
          WHERE par_id = p_par_id;

         FOR y IN (SELECT   par_id, item_grp, SUM (share_percentage)
                                                                    share_per
                       FROM gipi_wcomm_invoices
                      WHERE par_id = p_par_id
                   GROUP BY par_id, item_grp, takeup_seq_no)
         LOOP
            IF y.share_per = 100
            THEN
               v_count2 := v_count2 + 1;
            ELSIF y.share_per < 100
            THEN
               v_item_grp := v_item_grp || y.item_grp || ', ';
            END IF;
         END LOOP;
      END IF;

      IF (v_item_grp = '' OR v_item_grp IS NULL) AND v_count = v_count2
      THEN              -- IF no item_grp's share percentage is less than 100%
         NULL;                                    -- then go to desire module
      ELSIF v_count <> v_count2 AND v_item_grp IS NOT NULL
      THEN
         v_item_grp := RTRIM (v_item_grp, ', ');     -- trim extra characters
         p_msg_alert :=
               'Share percentage for the item group '
            || v_item_grp
            || ' not equal to 100%.';
         p_msg_icon := 'E';
      ELSIF v_count <> v_count2 AND (v_item_grp = '' OR v_item_grp IS NULL)
      THEN
         p_msg_alert := 'Item Group without Intermediary No. still exist.';
         p_msg_icon := 'I';
      END IF;
   END;

   PROCEDURE adjust_wpolicyds_dtl_giuws005 (
      p_dist_no       giuw_pol_dist.dist_no%TYPE,
      p_dist_seq_no   giuw_wpolicyds.dist_seq_no%TYPE
   )
   IS
      v_count                   NUMBER;
      v_exist                   VARCHAR2 (1)                           := 'N';
      v_dist_no                 giuw_wpolicyds.dist_no%TYPE;
      v_dist_seq_no             giuw_wpolicyds.dist_seq_no%TYPE;
      v_line_cd                 giuw_wpolicyds_dtl.line_cd%TYPE;
      v_tsi_amt                 giuw_wpolicyds.tsi_amt%TYPE;
      v_prem_amt                giuw_wpolicyds.prem_amt%TYPE;
      v_ann_tsi_amt             giuw_wpolicyds.ann_tsi_amt%TYPE;
      v_dist_tsi                giuw_wpolicyds_dtl.dist_tsi%TYPE;
      v_dist_prem               giuw_wpolicyds_dtl.dist_prem%TYPE;
      v_dist_spct               giuw_wpolicyds_dtl.dist_spct%TYPE;
      v_dist_spct1              giuw_wpolicyds_dtl.dist_spct%TYPE;
      -- ADDED BY TONIO 06/08/2011
      v_ann_dist_tsi            giuw_wpolicyds_dtl.ann_dist_tsi%TYPE;
      v_ann_dist_spct           giuw_wpolicyds_dtl.ann_dist_spct%TYPE;
      v_sum_dist_tsi            giuw_wpolicyds_dtl.dist_tsi%TYPE;
      v_sum_dist_prem           giuw_wpolicyds_dtl.dist_prem%TYPE;
      v_sum_dist_spct           giuw_wpolicyds_dtl.dist_spct%TYPE;
      v_sum_dist_spct1          giuw_wpolicyds_dtl.dist_spct1%TYPE;
      v_sum_ann_dist_tsi        giuw_wpolicyds_dtl.ann_dist_tsi%TYPE;
      v_sum_ann_dist_spct       giuw_wpolicyds_dtl.ann_dist_spct%TYPE;
      v_correct_dist_tsi        giuw_wpolicyds_dtl.dist_tsi%TYPE;
      v_correct_dist_prem       giuw_wpolicyds_dtl.dist_prem%TYPE;
      v_correct_dist_spct       giuw_wpolicyds_dtl.dist_spct%TYPE;
      v_correct_dist_spct1      giuw_wpolicyds_dtl.dist_spct1%TYPE;
      v_correct_ann_dist_tsi    giuw_wpolicyds_dtl.ann_dist_tsi%TYPE;
      v_correct_ann_dist_spct   giuw_wpolicyds_dtl.ann_dist_spct%TYPE;
   BEGIN
      v_dist_no := p_dist_no;
      v_dist_seq_no := p_dist_seq_no;

      /* Get the LINE_CD for the particular DIST_SEQ_NO
      ** for use in retrieving the correct data from
      ** GIUW_WPOLICYDS_DTL. */
      FOR c1 IN (SELECT line_cd
                   FROM giuw_wperilds
                  WHERE dist_seq_no = v_dist_seq_no AND dist_no = v_dist_no)
      LOOP
         v_line_cd := c1.line_cd;
         EXIT;
      END LOOP;

      /* ************************************ Start *********************************************
      ** Adjust computational floats between tables GIUW_WPOLICYDS and GIUW_WPOLICYDS_DTL.
      ***************************************************************************************** */
      BEGIN
         /* **************************** Section A **********************************
         ** Compare the amounts retrieved from the master table with the sum of its
         ** counterparts from the detail table.
         ************************************************************************* */
         FOR c10 IN (SELECT ROUND (NVL (tsi_amt, 0), 2) tsi_amt,
                            ROUND (NVL (prem_amt, 0), 2) prem_amt,
                            ROUND (NVL (ann_tsi_amt, 0), 2) ann_tsi_amt
                       FROM giuw_wpolicyds
                      WHERE dist_seq_no = v_dist_seq_no
                        AND dist_no = v_dist_no)
         LOOP
            v_exist := 'Y';
            v_tsi_amt := c10.tsi_amt;
            v_prem_amt := c10.prem_amt;
            v_ann_tsi_amt := c10.ann_tsi_amt;
            EXIT;
         END LOOP;

         IF v_exist = 'N'
         THEN
            RETURN;
         END IF;

         v_exist := 'N';

         FOR c10 IN (SELECT ROUND (SUM (NVL (dist_tsi, 0)), 2) dist_tsi,
                            ROUND (SUM (NVL (dist_prem, 0)), 2) dist_prem,
                            ROUND (SUM (NVL (dist_spct, 0)), 14) dist_spct,
                            ROUND (SUM (NVL (ann_dist_tsi, 0)),
                                   2
                                  ) ann_dist_tsi,
                            ROUND (SUM (NVL (dist_spct1, 0)), 14) dist_spct1
                       -- ADDED BY TONIO 06/08/2011
                     FROM   giuw_wpolicyds_dtl
                      WHERE dist_seq_no = v_dist_seq_no
                            AND dist_no = v_dist_no)
         LOOP
            v_exist := 'Y';
            v_dist_tsi := c10.dist_tsi;
            v_dist_prem := c10.dist_prem;
            v_dist_spct := c10.dist_spct;
            v_ann_dist_tsi := c10.ann_dist_tsi;
            v_dist_spct1 := c10.dist_spct1;      -- ADDED BY TONIO 06/08/2011
            EXIT;
         END LOOP;

         IF v_exist = 'N'
         THEN
            RETURN;
         END IF;

         /*************************** End of Section A ****************************/

         /* If the amounts retrieved from the master table
         ** are not equal to the amounts retrieved from the
         ** the detail table then the procedure below shall
         ** be executed. */
         IF    (100 != v_dist_spct)
          OR (100 != v_dist_spct1) --added by christian
            OR (v_tsi_amt != v_dist_tsi)
            OR (v_prem_amt != v_dist_prem)
            OR (v_ann_tsi_amt != v_ann_dist_tsi)
         THEN
            BEGIN
               v_exist := 'N';

               /*************************** Section B *******************************
               ** Adjust the value of the fields belonging to the NET RETENTION share
               ** (SHARE_CD = '1'). If by chance a NET RETENTION share does not exist,
               ** then the NO_DATA_FOUND exception (Section C) shall handle the next
               ** few steps.
               *********************************************************************/

               /* Get the ROWID of the NET RETENTION share
               ** in preparation for update. */
               FOR c10 IN (SELECT ROWID
                             FROM giuw_wpolicyds_dtl
                            WHERE share_cd = '1'
                              AND line_cd = v_line_cd
                              AND dist_seq_no = v_dist_seq_no
                              AND dist_no = v_dist_no)
               LOOP
                  /* Get the sum of each field for all the shares excluding the NET
                  ** RETENTION share.  The result will serve as the SUBTRAHEND in
                  ** calculating for the values to be attained by the fields belonging
                  ** to NET RETENTION. */
                  FOR c20 IN
                     (SELECT ROUND (SUM (dist_tsi), 2) dist_tsi,
                             ROUND (SUM (dist_prem), 2) dist_prem,
                             ROUND (SUM (dist_spct), 14) dist_spct,
                             ROUND (SUM (dist_spct1), 14) dist_spct1,
                             
                             -- ADDED BY TONIO 06/08/2011
                             ROUND (SUM (NVL (ann_dist_tsi, 0)),
                                    2
                                   ) ann_dist_tsi,
                             ROUND (SUM (NVL (ann_dist_spct, 0)),
                                    14
                                   ) ann_dist_spct
                        FROM giuw_wpolicyds_dtl
                       WHERE share_cd != '1'
                         AND line_cd = v_line_cd
                         AND dist_seq_no = v_dist_seq_no
                         AND dist_no = v_dist_no)
                  LOOP
                     v_exist := 'Y';
                     v_sum_dist_tsi := c20.dist_tsi;
                     v_sum_dist_prem := c20.dist_prem;
                     v_sum_dist_spct := c20.dist_spct;
                     v_sum_dist_spct1 := c20.dist_spct1;
                     -- ADDED BY TONIO 06/08/2011
                     v_sum_ann_dist_tsi := c20.ann_dist_tsi;
                     v_sum_ann_dist_spct := c20.ann_dist_spct;
                     EXIT;
                  END LOOP;

                  IF v_exist = 'N'
                  THEN
                     EXIT;
                  END IF;

                  /* Calculate for the values to be attained by the fields
                  ** belonging to the NET RETENTION share by subtracting
                  ** the values attained from the master table with the
                  ** values attained above. */
                  v_correct_dist_tsi := ABS (v_tsi_amt) - ABS (v_sum_dist_tsi);
                  v_correct_dist_prem :=
                                       ABS (v_prem_amt)
                                       - ABS (v_sum_dist_prem);
                  v_correct_dist_spct := 100 - v_sum_dist_spct;
                  v_correct_dist_spct1 := 100 - v_sum_dist_spct1;
                  -- ADDED BY TONIO 06/08/2011
                  v_correct_ann_dist_tsi :=
                                 ABS (v_ann_tsi_amt)
                                 - ABS (v_sum_ann_dist_tsi);
                  v_correct_ann_dist_spct := 100 - v_sum_ann_dist_spct;

                  IF SIGN (v_tsi_amt) = -1
                  THEN
                     v_correct_dist_tsi := v_correct_dist_tsi * -1;
                  END IF;

                  IF SIGN (v_prem_amt) = -1
                  THEN
                     v_correct_dist_prem := v_correct_dist_prem * -1;
                  END IF;

                  IF SIGN (v_ann_tsi_amt) = -1
                  THEN
                     v_correct_ann_dist_tsi := v_correct_ann_dist_tsi * -1;
                  END IF;

                  /* Update the values of the fields belonging to the NET
                  ** RETENTION share to equalize the amounts attained from
                  ** the detail table with the amounts attained from the
                  ** master table. */
                  UPDATE giuw_wpolicyds_dtl
                     SET dist_tsi = v_correct_dist_tsi,
                         dist_prem = v_correct_dist_prem,
                         dist_spct = v_correct_dist_spct,
                         dist_spct1 = v_correct_dist_spct1,
                         -- ADDED BY TONIO 06/08/2011
                         ann_dist_tsi = v_correct_ann_dist_tsi,
                         ann_dist_spct = v_correct_ann_dist_spct
                   WHERE ROWID = c10.ROWID;

                  EXIT;
               END LOOP;

               IF v_exist = 'N'
               THEN
                  RAISE NO_DATA_FOUND;
               END IF;
            /*************************** End of Section B ***************************/
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  BEGIN
                     /****************************** Section C ******************************
                     ** Adjust the value of the fields belonging to the share of the FIRST
                     ** RETRIEVED ROW.
                     ***********************************************************************/

                     /* Get the ROWID of the first retrieved
                     ** row in preparation for update. */
                     FOR c10 IN (SELECT ROWID
                                   FROM giuw_wpolicyds_dtl
                                  WHERE ROWNUM = '1'
                                    AND line_cd = v_line_cd
                                    AND dist_seq_no = v_dist_seq_no
                                    AND dist_no = v_dist_no)
                     LOOP
                        /* Get the sum of each field for all the shares excluding the share
                        ** of the FIRST RETRIEVED ROW.  The result will serve as the SUBTRAHEND
                        ** in calculating for the values to be attained by the fields belonging
                        ** to the FIRST ROW. */
                        FOR c20 IN
                           (SELECT ROUND (SUM (dist_tsi), 2) dist_tsi,
                                   ROUND (SUM (dist_prem), 2) dist_prem,
                                   ROUND (SUM (dist_spct), 14) dist_spct,
                                   ROUND (SUM (dist_spct1), 14) dist_spct1,
                                   
                                   -- ADDED BY TONIO 06/08/2011
                                   ROUND
                                       (SUM (NVL (ann_dist_tsi, 0)),
                                        2
                                       ) ann_dist_tsi,
                                   ROUND
                                      (SUM (NVL (ann_dist_spct, 0)),
                                       14
                                      ) ann_dist_spct
                              FROM giuw_wpolicyds_dtl
                             WHERE ROWID != c10.ROWID
                               AND line_cd = v_line_cd
                               AND dist_seq_no = v_dist_seq_no
                               AND dist_no = v_dist_no)
                        LOOP
                           v_sum_dist_tsi := c20.dist_tsi;
                           v_sum_dist_prem := c20.dist_prem;
                           v_sum_dist_spct := c20.dist_spct;
                           v_sum_dist_spct1 := c20.dist_spct1;
                           -- ADDED BY TONIO 06/08/2011
                           v_sum_ann_dist_tsi := c20.ann_dist_tsi;
                           v_sum_ann_dist_spct := c20.ann_dist_spct;
                           EXIT;
                        END LOOP;

                        /* Calculate for the values to be attained by the fields
                        ** belonging to the share of the FIRST ROW by subtracting
                        ** the values attained from the master table with the
                        ** values attained above. */
                        v_correct_dist_tsi :=
                                         ABS (v_tsi_amt)
                                         - ABS (v_sum_dist_tsi);
                        v_correct_dist_prem :=
                                       ABS (v_prem_amt)
                                       - ABS (v_sum_dist_prem);
                        v_correct_dist_spct := 100 - v_sum_dist_spct;
                        v_correct_dist_spct1 := 100 - v_sum_dist_spct1;
                        -- ADDED BY TONIO 06/08/2011
                        v_correct_ann_dist_tsi :=
                                 ABS (v_ann_tsi_amt)
                                 - ABS (v_sum_ann_dist_tsi);
                        v_correct_ann_dist_spct := 100 - v_sum_ann_dist_spct;

                        IF SIGN (v_tsi_amt) = -1
                        THEN
                           v_correct_dist_tsi := v_correct_dist_tsi * -1;
                        END IF;

                        IF SIGN (v_prem_amt) = -1
                        THEN
                           v_correct_dist_prem := v_correct_dist_prem * -1;
                        END IF;

                        IF SIGN (v_ann_tsi_amt) = -1
                        THEN
                           v_correct_ann_dist_tsi :=
                                                   v_correct_ann_dist_tsi
                                                   * -1;
                        END IF;

                        /* Update the values of the fields belonging to the share
                        ** of the FIRST ROW to equalize the amounts attained from
                        ** the detail table with the amounts attained from the
                        ** master table. */
                        UPDATE giuw_wpolicyds_dtl
                           SET dist_tsi = v_correct_dist_tsi,
                               dist_prem = v_correct_dist_prem,
                               dist_spct = v_correct_dist_spct,
                               dist_spct1 = v_correct_dist_spct1,
                               -- ADDED BY TONIO 06/08/2011
                               ann_dist_tsi = v_correct_ann_dist_tsi,
                               ann_dist_spct = v_correct_ann_dist_spct
                         WHERE ROWID = c10.ROWID;

                        EXIT;
                     END LOOP;
                  END;
            /**************************** End of Section C *************************/
            END;
         END IF;
      END;
/************************************** End ******************************************/
   END;

   PROCEDURE adjust_net_ret_imp_giuws005 (
      p_dist_no   IN   giuw_pol_dist.dist_no%TYPE
   )
   IS
   BEGIN
      /* Equalize the amounts of tables GIUW_WITEMDS
      ** and GIUW_WITEMDS_DTL. */
      adjust_itm_lvl_amts_giuws005 (p_dist_no);
      /* Equalize the amounts of tables GIUW_WITEMPERILDS
      ** and GIUW_WITEMPERILDS_DTL. */
      adjust_itm_pl_lv_amts_giuws005 (p_dist_no);
      /* Equalize the amounts of tables GIUW_WPERILDS
      ** and GIUW_WPERILDS_DTL. */
      adjust_peril_lvl_amts_giuws005 (p_dist_no);
      /*ASI 082099 equalize the amounts of tables GIUW_WITEMDS, GIUW_WITEMPERILDS
      **           GIUW_POLICYDS_DTL, GIUW_WPERILDS
      */
      giuw_pol_dist_pkg.adjust_final (p_dist_no);
   END;

   PROCEDURE create_ri_records_giuws005 (
      p_dist_no      IN   giuw_pol_dist.dist_no%TYPE,
      p_par_id       IN   gipi_parlist.par_id%TYPE,
      p_line_cd      IN   gipi_wpolbas.line_cd%TYPE,
      p_subline_cd   IN   gipi_wpolbas.subline_cd%TYPE
   )
   IS
      v_frps_exist            BOOLEAN;
      v_line_cd               giuw_wperilds.line_cd%TYPE;
      v_new_dist_tsi          giuw_wpolicyds_dtl.dist_tsi%TYPE;
      v_new_dist_prem         giuw_wpolicyds_dtl.dist_prem%TYPE;
      v_new_dist_spct         giuw_wpolicyds_dtl.dist_spct%TYPE;
      v_new_dist_spct1        giuw_wpolicyds_dtl.dist_spct1%TYPE;
      v_exist                 VARCHAR2 (1)                         := 'N';
      v_disallow_posting_sw   VARCHAR2 (1)                         := 'N';
   BEGIN
/* ************************************************************************************* */
/* Checks for the existence of a facultative share code in each of the DIST_SEQ_NO's of
** table GIUW_WPOLICYDS_DTL.  If the said share code exists for a particular DIST_SEQ_NO,
** then procedure will check for an existing record in RI table GIRI_WDISTFRPS and update
** such record in accordance with the values taken in by table GIUW_WPOLICYDS_DTL.  Should
** table GIRI_WDISTFRPS contain no entries with regards to the current DIST_SEQ_NO with the
** facultative share, then a record shall be created against the said table.
** On the other hand, if a facultative share does not exist for a particular DIST_SEQ_NO,
** then procedure will delete any related records in RI tables GIRI_WBINDER_PERIL,
** GIRI_WBINDER, GIRI_WFRPERIL, GIRI_WFRPS_RI, and GIRI_WDISTFRPS.
** NOTE:  A VALID facultative share must not have a zero DIST_TSI and a zero DIST_PREM.
** Modified by:  Crystal 12/28/1998  */
/* ************************************************************************************ */

      /* Disable the POST DISTRIBUTION button first.
      ** If a facultative share was found to be existing then
      ** that's the time to reenable it. */
      --SET_ITEM_PROPERTY('c1306.but_post_dist', ENABLED, PROPERTY_FALSE);
      FOR c1 IN (SELECT c1306.dist_seq_no, c1306.tsi_amt, c1306.prem_amt,
                        b450.currency_cd, b450.currency_rt, c080.user_id
                   FROM giuw_wpolicyds c1306,
                        giuw_pol_dist c080,
                        gipi_winvoice b450
                  WHERE b450.item_grp = c1306.item_grp
                    AND b450.par_id = c080.par_id
                    AND c080.dist_no = c1306.dist_no
                    AND c1306.dist_no = p_dist_no)
      LOOP
         BEGIN
            /* Get the LINE_CD for the particular DIST_SEQ_NO
            ** for use in retrieving the correct data from
            ** GIUW_WPOLICYDS_DTL. */
            FOR c100 IN (SELECT line_cd
                           FROM giuw_wperilds
                          WHERE dist_seq_no = c1.dist_seq_no
                            AND dist_no = p_dist_no)
            LOOP
               v_line_cd := c100.line_cd;
               EXIT;
            END LOOP;

            v_exist := 'N';

            FOR c200 IN (SELECT dist_prem, dist_spct, dist_tsi, dist_spct1
                           FROM giuw_wpolicyds_dtl
                          WHERE share_cd = '999'
                            AND line_cd = v_line_cd
                            AND dist_seq_no = c1.dist_seq_no
                            AND dist_no = p_dist_no)
            LOOP
               v_exist := 'Y';
               v_new_dist_prem := c200.dist_prem;
               v_new_dist_spct := c200.dist_spct;
               v_new_dist_spct1 := c200.dist_spct1;
               v_new_dist_tsi := c200.dist_tsi;
               EXIT;
            END LOOP;

            IF v_exist = 'N'
            THEN
               RAISE NO_DATA_FOUND;
            END IF;

            --A.R.C. 03.21.2007
            -- change checking to consider dist_spct instead of tsi and prem
            /*IF v_new_dist_tsi  = 0 AND
               v_new_dist_prem = 0 THEN*/
            IF v_new_dist_spct = 0 AND NVL(v_new_dist_spct1, 0) = 0 -- added AND condition based on 05.30.2014 08:45 PM version : shan 06.03.2014
            THEN
               /* Disable the POST DISTRIBUTION button first.
               ** If a facultative share was found to be existing then
               ** that's the time to reenable it. */
               --SET_ITEM_PROPERTY('c1306.but_post_dist', ENABLED, PROPERTY_FALSE);
               v_disallow_posting_sw := 'Y';

               /* Sets the distribution flag of table GIUW_WPOLICYDS to
               ** 1, signifying that the current DIST_SEQ_NO is not yet
               ** properly distributed. */
               UPDATE giuw_wpolicyds
                  SET dist_flag = '1'
                WHERE dist_seq_no = c1.dist_seq_no AND dist_no = p_dist_no;
            END IF;

            --A.R.C. 03.21.2007
            -- change checking to consider dist_spct instead of tsi and prem
            /*IF v_new_dist_tsi  != 0 OR
               v_new_dist_prem != 0 THEN*/
            IF v_new_dist_spct != 0 OR NVL(v_new_dist_spct1, 0) != 0    -- added OR condition based on 05.30.2014 08:45 PM version : shan 06.03.2014
            THEN
               IF v_disallow_posting_sw = 'N'
               THEN
                  /* Enable the POST DISTRIBUTION button because a facultative
                  ** share was found to be existing in table GIUW_WPOLICYDS_DTL. */
                  --IF GET_ITEM_PROPERTY('c1306.but_post_dist', ENABLED) = 'FALSE' THEN --nok
                  --   SET_ITEM_PROPERTY('c1306.but_post_dist', ENABLED, PROPERTY_TRUE);
                  --END IF;
                  NULL;
               END IF;

               /* Checks for an existing record corresponding to
               ** the given DIST_SEQ_NO in table GIRI_WDISTFRPS. */
               v_frps_exist :=
                           check_for_existing_frps (p_dist_no, c1.dist_seq_no);

               IF NOT v_frps_exist
               THEN
                  /* Creates a new record in table GIRI_WDISTFRPS in
                  ** accordance with the data taken in by table
                  ** GIUW_WPOLICYDS_DTL. */
                  create_ri_new_wdistfrps_giuws5 (p_dist_no,
                                                  c1.dist_seq_no,
                                                  c1.tsi_amt,
                                                  c1.prem_amt,
                                                  v_new_dist_tsi,
                                                  v_new_dist_prem,
                                                  v_new_dist_spct,
                                                  v_new_dist_spct1,
                                                  c1.currency_cd,
                                                  c1.currency_rt,
                                                  c1.user_id,
                                                  p_par_id,
                                                  NVL(p_line_cd,v_line_cd), -- added nvl by robert SR 5053 11.11.15
                                                  p_subline_cd
                                                 );
               ELSE
                  /* Updates the existing record of table
                  ** GIRI_WDISTFRPS in accordance with the
                  ** data taken in by table GIUW_WPOLICYDS_DTL. */
                  update_ri_wdistfrps_giuws005 (p_dist_no,
                                                c1.dist_seq_no,
                                                c1.tsi_amt,
                                                c1.prem_amt,
                                                v_new_dist_tsi,
                                                v_new_dist_prem,
                                                v_new_dist_spct,
                                                v_new_dist_spct1,
                                                c1.currency_cd,
                                                c1.currency_rt,
                                                c1.user_id
                                               );
               END IF;
            ELSE
               /* Delete related records in RI tables GIRI_WBINDER_PERIL,
               ** GIRI_WBINDER, GIRI_WFRPERIL, GIRI_WFRPS_RI, and
               ** GIRI_WDISTFRPS. */
               delete_ri_tables (p_dist_no, c1.dist_seq_no);
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               /* Delete related records in RI tables GIRI_WBINDER_PERIL,
               ** GIRI_WBINDER, GIRI_WFRPERIL, GIRI_WFRPS_RI, and
               ** GIRI_WDISTFRPS. */
               delete_ri_tables (p_dist_no, c1.dist_seq_no);
         END;
      END LOOP;
   END;

   PROCEDURE delete_dist_mster_tbl_giuws005 (
      p_dist_no   giuw_pol_dist.dist_no%TYPE
   )
   IS
      v_dist_no   giuw_pol_dist.dist_no%TYPE;
   BEGIN
      v_dist_no := p_dist_no;

      DELETE      giuw_perilds_dtl
            WHERE dist_no = v_dist_no;

      DELETE      giuw_perilds
            WHERE dist_no = v_dist_no;

      DELETE      giuw_itemperilds_dtl
            WHERE dist_no = v_dist_no;

      DELETE      giuw_itemperilds
            WHERE dist_no = v_dist_no;

      DELETE      giuw_itemds_dtl
            WHERE dist_no = v_dist_no;

      DELETE      giuw_itemds
            WHERE dist_no = v_dist_no;

      DELETE      giuw_policyds_dtl
            WHERE dist_no = v_dist_no;

      FOR c1 IN (SELECT frps_yy, frps_seq_no
                   FROM giri_distfrps
                  WHERE dist_no = v_dist_no)
      LOOP
         FOR c2 IN (SELECT fnl_binder_id
                      FROM giri_frps_ri
                     WHERE frps_yy = c1.frps_yy
                       AND frps_seq_no = c1.frps_seq_no)
         LOOP
            DELETE      giri_binder_peril
                  WHERE fnl_binder_id = c2.fnl_binder_id;

            DELETE      giri_binder
                  WHERE fnl_binder_id = c2.fnl_binder_id;
         END LOOP;

         DELETE      giri_frperil
               WHERE frps_yy = c1.frps_yy AND frps_seq_no = c1.frps_seq_no;

         DELETE      giri_frps_ri
               WHERE frps_yy = c1.frps_yy AND frps_seq_no = c1.frps_seq_no;
      END LOOP;

      DELETE      giri_distfrps
            WHERE dist_no = v_dist_no;

      DELETE      giuw_policyds
            WHERE dist_no = v_dist_no;
   END;

   /*
   **  Created by        : Jerome Orio
   **  Date Created     : 06.09.2011
   **  Reference By     : (GIUWS006- Preliminary  Peril Distribution by TSI/Prem)
   **  Description     :  Referenced in the following trigger/s:
   **                     POST-FORMS-COMMIT orm level
   **                     KEY-COMMIT form level */
   PROCEDURE populate_dist_and_ri_tables (
      p_par_id        gipi_wpolbas.par_id%TYPE,
      p_dist_no       giuw_pol_dist.dist_no%TYPE,
      p_dist_seq_no   giuw_wperilds.dist_seq_no%TYPE,
      p_line_cd       giuw_wperilds.line_cd%TYPE,
      p_peril_cd      giuw_wperilds.peril_cd%TYPE,
      p_subline_cd    gipi_wpolbas.subline_cd%TYPE,
      p_pol_flag      gipi_wpolbas.pol_flag%TYPE,
      p_par_type      gipi_parlist.par_type%TYPE
   )
   IS
      v_changes   VARCHAR2 (1) := 'Y'; 
      v_pol_test number;                --dahil updated na sya
   BEGIN
   
   
   
   
      /* Adjust computational floats to equalize the amounts
      ** attained by the master tables with that of its detail
      ** tables.
      ** Tables involved:  GIUW_WPERILDS - GIUW_WPERILDS_DTL */
      IF p_pol_flag != '2' AND p_par_type = 'P' OR NVL (v_changes, 'N') = 'Y'
      THEN
         /*giuw_pol_dist_pkg.adjust_wperilds_dtl2 (p_dist_no,
                                                 p_dist_seq_no,
                                                 p_line_cd,
                                                 p_peril_cd
                                                );*/
         NULL;
      END IF;

/* *************************** START OF FOR COMMIT ONLY ******************************** */
/*  PROCEDURE IS ONLY PERFORMED DURING COMMIT PROCESSING WHERE THE VALUE OF THE VARIABLE
**  VARIABLES.POST_SW IS EQUAL TO 'N'.                                                   */
/* ************************************************************************************* */

      /* Reset DIST_FLAG to undistributed as
      ** the current changes made were not yet
      ** posted to the master tables. */
      UPDATE giuw_pol_dist
         SET dist_flag = '1',
             post_flag = 'P'
       WHERE par_id = p_par_id AND dist_no = p_dist_no;

      IF p_pol_flag != '2' AND p_par_type = 'P' OR NVL (v_changes, 'N') = 'Y'
      THEN
         /* Remove existing records related to the
         ** current DIST_NO from certain distribution
         ** and RI master tables considering the fact
         ** that the current changes made were not yet
         ** posted to the master tables. */
         giuw_pol_dist_pkg.delete_dist_master_tables (p_dist_no);
         
         

         BEGIN
            /* Recreate records of table GIUW_WITEMPERILDS_DTL based
            ** on the data inserted to table GIUW_WPERILDS_DTL. */
            giuw_witemperilds_dtl_pkg.populate_witemperilds_dtl2 (p_dist_no);
            
            
            
            
            
         /* Adjust the computational floats of dist_tsi, dist_prem and dist_ann_tsi of table GIUW_WITEMPERILDS_DTL
           ** to equalize against their corresponding value in table GIUW_WPERILDS_DTL */
            --giuw_pol_dist_pkg.adjust_witmprlds_dtl(p_dist_no); --added by christian - based on GIUWS006 FMB; commented out by shan 06.09.2014
            /* Recreate records of table GIUW_WITEMDS_DTL based
            ** on the data inserted to table GIUW_WITEMPERILDS_DTL. */
            giuw_witemds_dtl_pkg.populate_witemds_dtl2 (p_dist_no);
            /* Recreate records of table GIUW_WPOLICYDS_DTL based
            ** on the data inserted to table GIUW_WITEMDS_DTL. */
            giuw_wpolicyds_dtl_pkg.populate_wpolicyds_dtl2 (p_dist_no);
            /* Adjust computational floats to equalize the amounts
            ** attained by the master tables with that of its detail
            ** tables.
            ** Tables involved:  GIUW_WPOLICYDS    - GIUW_WPOLICYDS_DTL
            **                   GIUW_WITEMDS      - GIUW_WITEMDS_DTL
            **                   GIUW_WITEMPERILDS - GIUW_WITEMPERILDS_DTL */
            giuw_pol_dist_pkg.adjust_net_ret_imperfection3 (p_dist_no);
            
            
            adjust_distribution_peril_pkg.adjust_distribution(p_dist_no);   -- shan 06.09.2014

            UPDATE giuw_wpolicyds
               SET dist_flag = '2'
             WHERE dist_no = p_dist_no;
         END;
      END IF;

      /* Create records in RI tables if a facultative
      ** share exists in any of the DIST_SEQ_NO in table
      ** GIUW_WPOLICYDS_DTL. */
      giuw_pol_dist_pkg.create_ri_records2 (p_dist_no,
                                            p_par_id,
                                            p_line_cd,
                                            p_subline_cd
                                           );
      /* ******************************** END OF FOR COMMIT ONLY ******************************** */
      v_changes := 'N';
      
      
      
      
   END;

   /*
   **  Created by        : Jerome Orio
   **  Date Created     : 06.09.2011
   **  Reference By     : (GIUWS006- Preliminary  Peril Distribution by TSI/Prem)
   **  Description     :  Checks for allied perils that were illegally distributed.
   */
   PROCEDURE check_peril_distribution_error (
      p_dist_no     IN       giuw_pol_dist.dist_no%TYPE,
      p_msg_alert   OUT      VARCHAR2
   )
   IS
      v_dist_no     giuw_pol_dist.dist_no%TYPE;
      v_exist       VARCHAR2 (1)                 := 'N';
      v_peril1      VARCHAR2 (50);
      v_peril2      VARCHAR2 (50);
      v_perils      VARCHAR2 (200);
      v_trty_type   VARCHAR2 (10);
      v_trty_name   VARCHAR2 (50);
      v_count       NUMBER                       := 0;
   BEGIN
      v_dist_no := p_dist_no;

      /* Checks for shares with a zero DIST_TSI
      ** from every item of the GIUW_WITEMDS_DTL table. */
      FOR c1 IN (SELECT dist_seq_no, item_no, line_cd, share_cd
                   FROM giuw_witemds_dtl
                  WHERE dist_tsi = 0 AND dist_no = v_dist_no)
      LOOP
         /* The share with a zero DIST_TSI from the WITEMDS_DTL
         ** table will only be valid if a basic peril with a zero
         ** DIST_TSI of the same item was found to have been
         ** distributed with the said share. */
         FOR c2 IN (SELECT 'A'
                      FROM giuw_witemperilds_dtl a, giis_peril b
                     WHERE a.peril_cd = b.peril_cd
                       AND a.line_cd = b.line_cd
                       AND b.peril_type = 'B'
                       AND a.dist_tsi = 0
                       AND a.share_cd = c1.share_cd
                       AND a.line_cd = c1.line_cd
                       AND a.item_no = c1.item_no
                       AND a.dist_seq_no = c1.dist_seq_no
                       AND a.dist_no = v_dist_no)
         LOOP
            v_exist := 'Y';
            EXIT;
         END LOOP;

         /* If a basic peril with a zero DIST_TSI was not found
         ** to have been distributed with the said share, then it
         ** is understood that the zero DIST_TSI in the WITEMDS_DTL
         ** table was caused by an allied peril which was distributed
         ** wrongfully.  Thus, the next procedure selects for the name
         ** of the allied perils that caused the error prior to displaying
         ** the error message on the screen notifying the user that the
         ** said perils were distributed illegally. */
         IF v_exist = 'N'
         THEN
            FOR c3 IN (SELECT b.peril_name, c.trty_name,
                              DECODE (c.share_type,
                                      '2', 'treaty',
                                      'share'
                                     ) TYPE
                         FROM giuw_witemperilds_dtl a,
                              giis_peril b,
                              giis_dist_share c
                        WHERE c.share_cd = a.share_cd
                          AND c.line_cd = a.line_cd
                          AND a.peril_cd = b.peril_cd
                          AND a.line_cd = b.line_cd
                          AND b.peril_type = 'A'
                          AND a.share_cd = c1.share_cd
                          AND a.line_cd = c1.line_cd
                          AND a.item_no = c1.item_no
                          AND a.dist_seq_no = c1.dist_seq_no
                          AND a.dist_no = v_dist_no)
            LOOP
               v_count := v_count + 1;
               v_trty_name := c3.trty_name;
               v_trty_type := c3.TYPE;

               IF v_count = 1
               THEN
                  v_peril1 := c3.peril_name;
                  v_perils := v_peril1;
               ELSIF v_count = 2
               THEN
                  v_peril2 := c3.peril_name;
                  v_perils := v_peril1 || ' and ' || v_peril2;
               ELSIF v_count = 3
               THEN
                  v_perils :=
                     v_peril1 || ', ' || v_peril2 || ', and '
                     || c3.peril_name;
                  p_msg_alert :=
                        'At least 3 of the allied perils: '
                     || v_perils
                     || ' were illegally distributed.  The '
                     || v_trty_name
                     || ' '
                     || v_trty_type
                     || ' cannot be a part of the said '
                     || ' perils'' distribution shares.';
               END IF;
            END LOOP;

            IF v_count = 1
            THEN
               p_msg_alert :=
                     'Allied peril '
                  || v_perils
                  || ' was illegally distributed. '
                  || 'The '
                  || v_trty_name
                  || ' '
                  || v_trty_type
                  || ' cannot be a '
                  || 'part of the said peril''s distribution shares.';
            ELSIF v_count = 2
            THEN
               p_msg_alert :=
                     'Allied perils: '
                  || v_perils
                  || ' were illegally distributed. '
                  || 'The '
                  || v_trty_name
                  || ' '
                  || v_trty_type
                  || ' cannot be a '
                  || 'part of the said perils'' distribution shares.';
            END IF;
         
         IF p_msg_alert IS NOT NULL THEN -- added by: Nica 10.24.2012 - to handle customize error message
                RAISE_APPLICATION_ERROR(-20001, 'Geniisys Exception#E#'||p_msg_alert);
            END IF;
         END IF;
      END LOOP;
   END;

   PROCEDURE create_par_dist_recs_giuws005 (
      p_dist_no         IN   giuw_pol_dist.dist_no%TYPE,
      p_par_id          IN   gipi_parlist.par_id%TYPE,
      p_line_cd         IN   gipi_parlist.line_cd%TYPE,
      p_subline_cd      IN   gipi_wpolbas.subline_cd%TYPE,
      p_iss_cd          IN   gipi_wpolbas.iss_cd%TYPE,
      p_pack_pol_flag   IN   gipi_wpolbas.pack_pol_flag%TYPE,
      p_pol_flag        IN   gipi_wpolbas.pol_flag%TYPE,
      p_par_type        IN   gipi_parlist.par_type%TYPE
   )
   IS
      v_line_cd             gipi_parlist.line_cd%TYPE;
      v_subline_cd          gipi_wpolbas.subline_cd%TYPE;
      v_dist_seq_no         giuw_wpolicyds.dist_seq_no%TYPE          := 0;
      --rg_id                    RECORDGROUP;
      rg_name               VARCHAR2 (20)               := 'DFLT_DIST_VALUES';
      rg_count              NUMBER                                   := 0;
      v_exist               VARCHAR2 (1);
      v_errors              NUMBER;
      v_default_no          giis_default_dist.default_no%TYPE;
      v_default_type        giis_default_dist.default_type%TYPE;
      v_dflt_netret_pct     giis_default_dist.dflt_netret_pct%TYPE;
      v_dist_type           giis_default_dist.dist_type%TYPE;
      v_post_flag           VARCHAR2 (1)                             := 'O';
      v_package_policy_sw   VARCHAR2 (1)                             := 'Y';
      v_dist_exists         VARCHAR2 (1)                             := 'N';
      v_item_grp            giuw_wpolicyds.item_grp%TYPE;
      v_currency_rt         gipi_winvoice.currency_rt%TYPE ;   --- jhing 12.19.2014 
   BEGIN
      FOR a IN (SELECT 1
                  FROM giuw_wpolicyds
                 WHERE dist_no = p_dist_no)
      LOOP
         v_dist_exists := 'Y';
         EXIT;
      END LOOP;

      FOR a IN (SELECT item_grp
                  FROM giuw_pol_dist
                 WHERE dist_no = p_dist_no)
      LOOP
         v_item_grp := a.item_grp;
         EXIT;
      END LOOP;

      /* Get the unique ITEM_GRP to produce a unique DIST_SEQ_NO for each. */
      IF NVL (v_dist_exists, 'N') = 'N'
      THEN
         FOR c1 IN (SELECT   NVL (item_grp, 1) item_grp,
                             pack_line_cd pack_line_cd,
                             pack_subline_cd pack_subline_cd,
                             currency_rt currency_rt,
                             SUM (NVL (tsi_amt, 0)) policy_tsi,
                             SUM (NVL (prem_amt, 0)) policy_premium,
                             SUM (NVL (ann_tsi_amt, 0)) policy_ann_tsi
                        FROM gipi_witem a
                       WHERE EXISTS (
                                SELECT 1
                                  FROM gipi_witmperl
                                 WHERE par_id = a.par_id
                                   AND item_no = a.item_no)
                         --(b.prem_amt != 0
                         --OR b.tsi_amt  != 0)
                         AND par_id = p_par_id
                         AND a.item_grp = NVL (v_item_grp, a.item_grp)
                    GROUP BY item_grp,
                             pack_line_cd,
                             pack_subline_cd,
                             currency_rt)
         LOOP
              /* If the PAR processed is a package policy
            ** then get the true LINE_CD and true SUBLINE_CD,
            ** that is, the PACK_LINE_CD and PACK_SUBLINE_CD
            ** from the GIPI_WITEM table.
            ** This will be used upon inserting to certain
            ** distribution tables requiring a value for
            ** the similar field. */
            IF p_pack_pol_flag = 'N'
            THEN
               v_line_cd := p_line_cd;
               v_subline_cd := p_subline_cd;
            ELSE
               v_line_cd := c1.pack_line_cd;
               v_subline_cd := c1.pack_subline_cd;
               v_package_policy_sw := 'Y';
            END IF;

            IF v_package_policy_sw = 'Y'
            THEN
               FOR c2 IN (SELECT ax.default_no, ax.default_type, ax.dist_type,
                                 ax.dflt_netret_pct
                            FROM giis_default_dist ax
                           WHERE ax.iss_cd = p_iss_cd
                             AND ax.subline_cd = v_subline_cd
                             AND ax.line_cd = v_line_cd
                             AND ax.dist_type = 1 /* By Group */ 
                             AND EXISTS (
                                    SELECT 1 FROM GIIS_DEFAULT_DIST_GROUP bx
                                        WHERE bx.default_no = ax.default_no
                             ))
               LOOP
                  v_default_no := c2.default_no;
                  v_default_type := c2.default_type;
                  v_dist_type := c2.dist_type;
                  v_dflt_netret_pct := c2.dflt_netret_pct;
                  EXIT;
               END LOOP;

               v_package_policy_sw := 'N';
            END IF;

            /* Generate a new DIST_SEQ_NO for the new
            ** item group. */
            v_dist_seq_no := v_dist_seq_no + 1;
            v_post_flag := 'O';

            giuw_pol_dist_pkg.create_grp_dflt_dist_giuws005
                                                           (p_dist_no,
                                                            v_dist_seq_no,
                                                            '2',
                                                            c1.policy_tsi,
                                                            c1.policy_premium,
                                                            c1.policy_ann_tsi,
                                                            c1.item_grp,
                                                            v_line_cd,
                                                            rg_count,
                                                            v_default_no,   -- shan 06.20.2014
                                                            v_default_type,
                                                            v_dflt_netret_pct,  -- shan 06.20.2014
                                                            c1.currency_rt,
                                                            p_par_id,
                                                            p_pol_flag,
                                                            p_par_type,
                                                            v_dist_exists
                                                           );
                                                           
            -- jhing 12.19.2014                                               
            giuw_pol_dist_pkg.ct_grp_dflt_wpolicyds_giuws005 (p_dist_no,
                                                              v_dist_seq_no,
                                                              p_line_cd,
                                                              c1.policy_tsi,
                                                              c1.policy_premium,
                                                              c1.policy_ann_tsi,
                                                              rg_count,
                                                              v_default_no,     
                                                              v_default_type,
                                                              v_dflt_netret_pct, 
                                                              c1.currency_rt,
                                                              p_par_id,
                                                              c1.item_grp,
                                                              p_pol_flag,
                                                              p_par_type
                                                             );                                                           
         END LOOP;
      ELSE
        -- shan 06.20.2014     --  jhing 12.12.2014 added checking for dist group and existence of record in distgroup
        FOR c2 IN (SELECT ax.default_no, ax.default_type, ax.dist_type, ax.dflt_netret_pct
                     FROM giis_default_dist ax
                    WHERE ax.iss_cd = p_iss_cd
                      AND ax.subline_cd = p_subline_cd
                      AND ax.line_cd = p_line_cd
                      AND ax.dist_type = '1' /* By Group */ 
                             AND EXISTS (
                                    SELECT 1 FROM GIIS_DEFAULT_DIST_GROUP bx
                                        WHERE bx.default_no = ax.default_no
                             ))
        LOOP
            v_default_no := c2.default_no;
            v_default_type := c2.default_type;
            v_dist_type := c2.dist_type;
            v_dflt_netret_pct := c2.dflt_netret_pct;
            EXIT;
        END LOOP;
            
         FOR a IN (SELECT dist_seq_no, tsi_amt, prem_amt, ann_tsi_amt,
                          item_grp
                     FROM giuw_wpolicyds
                    WHERE dist_no = p_dist_no
                      AND item_grp = NVL (v_item_grp, item_grp))
         LOOP              
            v_post_flag := 'O';
            giuw_pol_dist_pkg.create_grp_dflt_dist_giuws005 (p_dist_no,
                                                             a.dist_seq_no,
                                                             '2',
                                                             a.tsi_amt,
                                                             a.prem_amt,
                                                             a.ann_tsi_amt,
                                                             a.item_grp,
                                                             p_line_cd,
                                                             rg_count,
                                                             v_default_no,  -- shan 06.20.2014
                                                             v_default_type,
                                                             v_dflt_netret_pct, -- shan 06.20.2014
                                                             1,
                                                             p_par_id,
                                                             p_pol_flag,
                                                             p_par_type,
                                                             v_dist_exists
                                                            );

            FOR invoice IN (SELECT currency_rt
                                FROM gipi_winvoice
                                    WHERE par_id = p_par_id
                                    AND item_grp = a.item_grp )
            LOOP
                v_currency_rt := invoice.currency_rt;
                EXIT;
            END LOOP;
            
            -- jhing 12.19.2014 
            giuw_pol_dist_pkg.ct_grp_dflt_wpolicyds_giuws005 (p_dist_no,
                                                              a.dist_seq_no,
                                                              p_line_cd,
                                                              a.tsi_amt,
                                                              a.prem_amt,
                                                              a.ann_tsi_amt,
                                                              rg_count,
                                                              v_default_no,     
                                                              v_default_type,
                                                              v_dflt_netret_pct, 
                                                              v_currency_rt,
                                                              p_par_id,
                                                              a.item_grp,
                                                              p_pol_flag,
                                                              p_par_type
                                                             );

         END LOOP;
      END IF;

      /*IF NOT ID_NULL(rg_id) THEN
        DELETE_GROUP(rg_id);
      END IF;*/
      IF p_pol_flag != '2' AND p_par_type = 'P'
      THEN
         /* Equalize the amounts of tables GIUW_WPOLICYDS
         ** and GIUW_WPOLICYDS_DTL. */
         --adjust_pol_lvl_amts_giuws005 (p_dist_no);    -- commented out based on version 05.30.2014 08:45 PM: shan 06.03.2014
         /* Adjust computational floats to equalize the amounts
         ** attained by the master tables with that of its detail
         ** tables.
         ** Tables involved:  GIUW_WPERILDS     - GIUW_WPERILDS_DTL
         **                   GIUW_WITEMDS      - GIUW_WITEMDS_DTL
         **                   GIUW_WITEMPERILDS - GIUW_WITEMPERILDS_DTL */
         --giuw_pol_dist_pkg.adjust_net_ret_imp_giuws005 (p_dist_no);    -- commented out based on version 05.30.2014 08:45 PM: shan 06.03.2014
         null;
      END IF;

      /* Create records in RI tables if a facultative
      ** share exists in any of the DIST_SEQ_NO in table
      ** GIUW_WPOLICYDS_DTL. */

      --GIUW_POL_DIST_PKG.CREATE_RI_RECORDS(p_dist_no, p_par_id, p_line_cd, p_subline_cd);
      --giuw_pol_dist_pkg.ADJUST_ALL_WTABLES_GIUWS004(p_dist_no); -- shan 06.23.2014
      /*giuw_pol_dist_pkg.create_ri_records_giuws005 (p_dist_no,
                                                    p_par_id,
                                                    p_line_cd,
                                                    p_subline_cd
                                                   ); */ -- jhing 12.19.2014 commented out code which creates records in GIRI_WDISTFRPS. This table should only have value upon posting of dist with facul

      /* Set the value of the DIST_FLAG back
      ** to Undistributed after recreation. */

      --:c080.dist_flag      := '1';
      --:c080.mean_dist_flag := 'Undistributed';
      UPDATE giuw_pol_dist
         SET dist_flag = '1',
             post_flag = v_post_flag
       WHERE par_id = p_par_id AND dist_no = p_dist_no;

      --adjust_amts (p_dist_no);     -- commented out based on version 05.30.2014 08:45 PM: shan 06.03.2014      
     giuw_pol_dist_pkg.populate_witem_pl_dtl_giuws005 (p_dist_no);   -- jhing 12.12.2014 added code to repopulate other distribution tables based on giuw_wpolicyds_dtl;
     giuw_pol_dist_pkg.ADJUST_ALL_WTABLES_GIUWS004(p_dist_no);     -- shan 07.24.2014  
   END;

   PROCEDURE adjust_pol_lvl_amts_giuws005 (
      p_dist_no   IN   giuw_pol_dist.dist_no%TYPE
   )
   IS
      v_exist                   VARCHAR2 (1)                           := 'N';
      v_count                   NUMBER;
      v_line_cd                 gipi_parlist.line_cd%TYPE;
      v_tsi_amt                 giuw_wpolicyds.tsi_amt%TYPE;
      v_prem_amt                giuw_wpolicyds.prem_amt%TYPE;
      v_ann_tsi_amt             giuw_wpolicyds.ann_tsi_amt%TYPE;
      v_dist_spct               giuw_wpolicyds_dtl.dist_spct%TYPE;
      v_dist_spct1              giuw_wpolicyds_dtl.dist_spct1%TYPE;
      v_dist_tsi                giuw_wpolicyds_dtl.dist_tsi%TYPE;
      v_dist_prem               giuw_wpolicyds_dtl.dist_prem%TYPE;
      v_ann_dist_tsi            giuw_wpolicyds_dtl.ann_dist_tsi%TYPE;
      v_ann_dist_spct           giuw_wpolicyds_dtl.ann_dist_spct%TYPE;
      v_sum_dist_tsi            giuw_wpolicyds_dtl.dist_tsi%TYPE;
      v_sum_dist_prem           giuw_wpolicyds_dtl.dist_prem%TYPE;
      v_sum_dist_spct           giuw_wpolicyds_dtl.dist_spct%TYPE;
      v_sum_dist_spct1          giuw_wpolicyds_dtl.dist_spct1%TYPE;
      v_sum_ann_dist_tsi        giuw_wpolicyds_dtl.ann_dist_tsi%TYPE;
      v_sum_ann_dist_spct       giuw_wpolicyds_dtl.ann_dist_spct%TYPE;
      v_correct_dist_tsi        giuw_wpolicyds_dtl.dist_tsi%TYPE;
      v_correct_dist_prem       giuw_wpolicyds_dtl.dist_prem%TYPE;
      v_correct_dist_spct       giuw_wpolicyds_dtl.dist_spct%TYPE;
      v_correct_dist_spct1      giuw_wpolicyds_dtl.dist_spct1%TYPE;
      v_correct_ann_dist_tsi    giuw_wpolicyds_dtl.ann_dist_tsi%TYPE;
      v_correct_ann_dist_spct   giuw_wpolicyds_dtl.ann_dist_spct%TYPE;
   BEGIN
      /* Scan each DIST_SEQ_NO for computational floats. */
      FOR c1 IN (SELECT dist_no, dist_seq_no,
                        ROUND (NVL (tsi_amt, 0), 2) tsi_amt,
                        ROUND (NVL (prem_amt, 0), 2) prem_amt,
                        ROUND (NVL (ann_tsi_amt, 0), 2) ann_tsi_amt
                   FROM giuw_wpolicyds
                  WHERE dist_no = p_dist_no)
      LOOP
         BEGIN
            /* Get the LINE_CD for the particular DIST_SEQ_NO
            ** for use in retrieving the correct data from
            ** GIUW_WPOLICYDS_DTL. */
            FOR c2 IN (SELECT line_cd
                         FROM giuw_wperilds
                        WHERE dist_seq_no = c1.dist_seq_no
                          AND dist_no = c1.dist_no)
            LOOP
               v_line_cd := c2.line_cd;
               EXIT;
            END LOOP;

            /* **************************** Section A **********************************
            ** Compare the amounts retrieved from the master table with the sum of its
            ** counterparts from the detail table.
            ************************************************************************* */
            v_tsi_amt := c1.tsi_amt;
            v_prem_amt := c1.prem_amt;
            v_ann_tsi_amt := c1.ann_tsi_amt;
            v_exist := 'N';

            FOR c10 IN (SELECT ROUND (SUM (NVL (dist_tsi, 0)), 2) dist_tsi,
                               ROUND (SUM (NVL (dist_prem, 0)), 2) dist_prem,
                               ROUND (SUM (NVL (dist_spct, 0)), 14) dist_spct,
                               ROUND (SUM (NVL (dist_spct1, 0)),
                                      14
                                     ) dist_spct1,
                               ROUND (SUM (NVL (ann_dist_tsi, 0)),
                                      2
                                     ) ann_dist_tsi
                          FROM giuw_wpolicyds_dtl
                         WHERE dist_seq_no = c1.dist_seq_no
                           AND dist_no = c1.dist_no)
            LOOP
               v_exist := 'Y';
               v_dist_tsi := c10.dist_tsi;
               v_dist_prem := c10.dist_prem;
               v_dist_spct := c10.dist_spct;
               v_dist_spct1 := c10.dist_spct1;
               v_ann_dist_tsi := c10.ann_dist_tsi;
               EXIT;
            END LOOP;

            IF v_exist = 'N'
            THEN
               EXIT;
            END IF;

            /*************************** End of Section A ****************************/

            /* If the amounts retrieved from the master table
            ** are not equal to the amounts retrieved from the
            ** the detail table then the procedure below shall
            ** be executed. */
            IF    (100 != v_dist_spct)
               OR (v_tsi_amt != v_dist_tsi)
               OR (v_prem_amt != v_dist_prem)
               OR (v_ann_tsi_amt != v_ann_dist_tsi)
            THEN
               BEGIN
                  v_exist := 'N';

                  /*************************** Section B *******************************
                  ** Adjust the value of the fields belonging to the NET RETENTION share
                  ** (SHARE_CD = '1'). If by chance a NET RETENTION share does not exist,
                  ** then the NO_DATA_FOUND exception (Section C) shall handle the next
                  ** few steps.
                  *********************************************************************/

                  /* Get the ROWID of the NET RETENTION share
                  ** in preparation for update. */
                  FOR c10 IN (SELECT ROWID
                                FROM giuw_wpolicyds_dtl
                               WHERE share_cd = '1'
                                 AND line_cd = v_line_cd
                                 AND dist_seq_no = c1.dist_seq_no
                                 AND dist_no = c1.dist_no)
                  LOOP
                     /* Get the sum of each field for all the shares excluding the NET
                     ** RETENTION share.  The result will serve as the SUBTRAHEND in
                     ** calculating for the values to be attained by the fields belonging
                     ** to NET RETENTION. */
                     FOR c20 IN
                        (SELECT ROUND (SUM (dist_tsi), 2) dist_tsi,
                                ROUND (SUM (dist_prem), 2) dist_prem,
                                ROUND (SUM (dist_spct), 14) dist_spct,
                                ROUND (SUM (dist_spct1), 14) dist_spct1,
                                ROUND (SUM (NVL (ann_dist_tsi, 0)),
                                       2
                                      ) ann_dist_tsi,
                                ROUND
                                     (SUM (NVL (ann_dist_spct, 0)),
                                      14
                                     ) ann_dist_spct
                           FROM giuw_wpolicyds_dtl
                          WHERE share_cd != '1'
                            AND line_cd = v_line_cd
                            AND dist_seq_no = c1.dist_seq_no
                            AND dist_no = c1.dist_no)
                     LOOP
                        v_exist := 'Y';
                        v_sum_dist_tsi := c20.dist_tsi;
                        v_sum_dist_prem := c20.dist_prem;
                        v_sum_dist_spct := c20.dist_spct;
                        v_sum_dist_spct1 := c20.dist_spct1;
                        v_sum_ann_dist_tsi := c20.ann_dist_tsi;
                        v_sum_ann_dist_spct := c20.ann_dist_spct;
                        EXIT;
                     END LOOP;

                     IF v_exist = 'N'
                     THEN
                        EXIT;
                     END IF;

                     /* Calculate for the values to be attained by the fields
                     ** belonging to the NET RETENTION share by subtracting
                     ** the values attained from the master table with the
                     ** values attained above. */
                     v_correct_dist_tsi :=
                          ABS (NVL (v_tsi_amt, 0))
                        - ABS (NVL (v_sum_dist_tsi, 0));
                     v_correct_dist_prem :=
                          ABS (NVL (v_prem_amt, 0))
                        - ABS (NVL (v_sum_dist_prem, 0));
                     v_correct_dist_spct := 100 - NVL (v_sum_dist_spct, 0);
                     v_correct_dist_spct1 := 100 - NVL (v_sum_dist_spct1, 0);
                     v_correct_ann_dist_tsi :=
                          ABS (NVL (v_ann_tsi_amt, 0))
                        - ABS (NVL (v_sum_ann_dist_tsi, 0));
                     v_correct_ann_dist_spct :=
                                            100 - NVL (v_sum_ann_dist_spct, 0);

                     IF SIGN (v_tsi_amt) = -1
                     THEN
                        v_correct_dist_tsi := v_correct_dist_tsi * -1;
                     END IF;

                     IF SIGN (v_prem_amt) = -1
                     THEN
                        v_correct_dist_prem := v_correct_dist_prem * -1;
                     END IF;

                     IF SIGN (v_ann_tsi_amt) = -1
                     THEN
                        v_correct_ann_dist_tsi := v_correct_ann_dist_tsi * -1;
                     END IF;

                     /* Update the values of the fields belonging to the NET
                     ** RETENTION share to equalize the amounts attained from
                     ** the detail table with the amounts attained from the
                     ** master table. */
                     UPDATE giuw_wpolicyds_dtl
                        SET dist_tsi = v_correct_dist_tsi,
                            dist_prem = v_correct_dist_prem,
                            dist_spct = v_correct_dist_spct,
                            dist_spct1 = v_correct_dist_spct1,
                            ann_dist_tsi = v_correct_ann_dist_tsi,
                            ann_dist_spct = v_correct_ann_dist_spct
                      WHERE ROWID = c10.ROWID;

                     EXIT;
                  END LOOP;

                  IF v_exist = 'N'
                  THEN
                     RAISE NO_DATA_FOUND;
                  END IF;
               /*************************** End of Section B ***************************/
               EXCEPTION
                  WHEN NO_DATA_FOUND
                  THEN
                     BEGIN
                        /****************************** Section C ******************************
                        ** Adjust the value of the fields belonging to the share of the FIRST
                        ** RETRIEVED ROW.
                        ***********************************************************************/

                        /* Get the ROWID of the first retrieved
                        ** row in preparation for update. */
                        FOR c10 IN (SELECT ROWID
                                      FROM giuw_wpolicyds_dtl
                                     WHERE ROWNUM = '1'
                                       AND dist_seq_no = c1.dist_seq_no
                                       AND dist_no = c1.dist_no)
                        LOOP
                           /* Get the sum of each field for all the shares excluding the share
                           ** of the FIRST RETRIEVED ROW.  The result will serve as the SUBTRAHEND
                           ** in calculating for the values to be attained by the fields belonging
                           ** to the FIRST ROW. */
                           FOR c20 IN
                              (SELECT ROUND (SUM (dist_tsi), 2) dist_tsi,
                                      ROUND (SUM (dist_prem), 2) dist_prem,
                                      ROUND (SUM (dist_spct), 14) dist_spct,
                                      ROUND (SUM (dist_spct1), 14)
                                                                  dist_spct1,
                                      ROUND
                                         (SUM (NVL (ann_dist_tsi, 0)),
                                          2
                                         ) ann_dist_tsi,
                                      ROUND
                                         (SUM (NVL (ann_dist_spct, 0)),
                                          14
                                         ) ann_dist_spct
                                 FROM giuw_wpolicyds_dtl
                                WHERE ROWID != c10.ROWID
                                  AND dist_seq_no = c1.dist_seq_no
                                  AND dist_no = c1.dist_no)
                           LOOP
                              v_sum_dist_tsi := c20.dist_tsi;
                              v_sum_dist_prem := c20.dist_prem;
                              v_sum_dist_spct := c20.dist_spct;
                              v_sum_dist_spct1 := c20.dist_spct1;
                              v_sum_ann_dist_tsi := c20.ann_dist_tsi;
                              v_sum_ann_dist_spct := c20.ann_dist_spct;
                              EXIT;
                           END LOOP;

                           /* Calculate for the values to be attained by the fields
                           ** belonging to the share of the FIRST ROW by subtracting
                           ** the values attained from the master table with the
                           ** values attained above. */
                           v_correct_dist_tsi :=
                                         ABS (v_tsi_amt)
                                         - ABS (v_sum_dist_tsi);
                           v_correct_dist_prem :=
                                       ABS (v_prem_amt)
                                       - ABS (v_sum_dist_prem);
                           v_correct_dist_spct := 100 - v_sum_dist_spct;
                           v_correct_dist_spct1 := 100 - v_sum_dist_spct1;
                           v_correct_ann_dist_tsi :=
                                 ABS (v_ann_tsi_amt)
                                 - ABS (v_sum_ann_dist_tsi);
                           v_correct_ann_dist_spct :=
                                                     100 - v_sum_ann_dist_spct;

                           IF SIGN (v_tsi_amt) = -1
                           THEN
                              v_correct_dist_tsi := v_correct_dist_tsi * -1;
                           END IF;

                           IF SIGN (v_prem_amt) = -1
                           THEN
                              v_correct_dist_prem := v_correct_dist_prem * -1;
                           END IF;

                           IF SIGN (v_ann_tsi_amt) = -1
                           THEN
                              v_correct_ann_dist_tsi :=
                                                   v_correct_ann_dist_tsi
                                                   * -1;
                           END IF;

                           /* Update the values of the fields belonging to the share
                           ** of the FIRST ROW to equalize the amounts attained from
                           ** the detail table with the amounts attained from the
                           ** master table. */
                           UPDATE giuw_wpolicyds_dtl
                              SET dist_tsi = v_correct_dist_tsi,
                                  dist_prem = v_correct_dist_prem,
                                  dist_spct = v_correct_dist_spct,
                                  dist_spct1 = v_correct_dist_spct1,
                                  ann_dist_tsi = v_correct_ann_dist_tsi,
                                  ann_dist_spct = v_correct_ann_dist_spct
                            WHERE ROWID = c10.ROWID;

                           EXIT;
                        END LOOP;
                     END;
               /**************************** End of Section C *************************/
               END;
            END IF;
         END;
      END LOOP;
   END adjust_pol_lvl_amts_giuws005;

   /* NOTE:  default_type 1 - Use AMOUNTS to create the default distribution records
   **                     2 - Use PERCENTAGE to create the default distribution records. */
   PROCEDURE create_peril_dflt_wperilds3 (
      p_dist_no           IN   giuw_wperilds_dtl.dist_no%TYPE,
      p_dist_seq_no       IN   giuw_wperilds_dtl.dist_seq_no%TYPE,
      p_line_cd           IN   giuw_wperilds_dtl.line_cd%TYPE,
      p_peril_cd          IN   giuw_wperilds_dtl.peril_cd%TYPE,
      p_dist_tsi          IN   giuw_wperilds_dtl.dist_tsi%TYPE,
      p_dist_prem         IN   giuw_wperilds_dtl.dist_prem%TYPE,
      p_ann_dist_tsi      IN   giuw_wperilds_dtl.ann_dist_tsi%TYPE,
      p_currency_rt       IN   gipi_winvoice.currency_rt%TYPE,
      p_default_no        IN   giis_default_dist.default_no%TYPE,
      p_default_type      IN   giis_default_dist.default_type%TYPE,
      p_dflt_netret_pct   IN   giis_default_dist.dflt_netret_pct%TYPE,
      p_pol_flag          IN   gipi_wpolbas.pol_flag%TYPE,
      p_par_id            IN   gipi_wpolbas.par_id%TYPE,
      p_par_type          IN   gipi_parlist.par_type%TYPE
   )
   IS
      v_dflt_dist_exist    VARCHAR2 (1)                          := 'N';
      v_dist_spct          giuw_wperilds_dtl.dist_spct%TYPE;
      v_dist_tsi           giuw_wperilds_dtl.dist_tsi%TYPE;
      v_dist_prem          giuw_wperilds_dtl.dist_prem%TYPE;
      v_ann_dist_tsi       giuw_wperilds_dtl.ann_dist_tsi%TYPE;
      v_share_cd           giis_dist_share.share_cd%TYPE;
      v_sum_dist_tsi       giuw_wperilds_dtl.dist_tsi%TYPE       := 0;
      v_sum_dist_spct      giuw_wperilds_dtl.dist_spct%TYPE      := 0;
      v_sum_dist_prem      giuw_wperilds_dtl.dist_prem%TYPE      := 0;
      v_sum_ann_dist_tsi   giuw_wperilds_dtl.ann_dist_tsi%TYPE   := 0;
      v_dist_spct_limit    NUMBER;
      v_remaining_tsi      NUMBER               := p_dist_tsi * p_currency_rt;
      v_item_no            NUMBER;
      v_default            VARCHAR2 (1)                          := 'Y';
      v_peril_cd           giuw_wperilds_dtl.peril_cd%TYPE      := p_peril_cd;
      v_dist_spct1         giuw_wperilds_dtl.dist_spct1%TYPE;
      v_sum_dist_spct1     giuw_wperilds_dtl.dist_spct1%TYPE     := 0;
      v_existing           VARCHAR2(1) := 'N';  -- shan 06.13.2014

      CURSOR dist_peril_cur
      IS
         SELECT   a.share_cd, a.share_pct, a.share_amt1
             FROM giis_default_dist_peril a
            WHERE a.default_no = p_default_no
              AND a.line_cd = p_line_cd
              AND a.peril_cd = p_peril_cd
              AND a.share_cd <> 999
         ORDER BY a.SEQUENCE ASC;

      PROCEDURE insert_to_wperilds_dtl
      IS
      BEGIN
         --aaron added dist_spct1
         INSERT INTO giuw_wperilds_dtl
                     (dist_no, dist_seq_no, line_cd, share_cd,
                      dist_spct, dist_tsi, dist_prem, ann_dist_spct,
                      ann_dist_tsi, dist_grp, peril_cd, dist_spct1
                     )                               -- aaron added dist_spct1
              VALUES (p_dist_no, p_dist_seq_no, p_line_cd, v_share_cd,
                      v_dist_spct, v_dist_tsi, v_dist_prem, v_dist_spct,
                      v_ann_dist_tsi, 1, p_peril_cd, v_dist_spct1
                     );
      END;
   BEGIN   
      IF p_pol_flag = '2'
      THEN                                                         -- renewal
         FOR c IN (SELECT DISTINCT share_cd, dist_spct,
                                   dist_spct1        --aaron added dist_spct1
                              FROM giuw_perilds_dtl a
                             WHERE 1 = 1
                               AND a.peril_cd = p_peril_cd
                               AND a.dist_seq_no = p_dist_seq_no
                               AND dist_no =
                                      (SELECT MAX (dist_no)
                                         FROM giuw_pol_dist
                                        WHERE policy_id =
                                                    (SELECT MAX(a.old_policy_id)
                                                       FROM gipi_wpolnrep a
                                                           ,gipi_parlist b
                                                      WHERE a.par_id = p_par_id
                                                        AND a.ren_rep_sw = '1'
                                                        AND b.par_id = a.par_id
                                                        AND b.par_status NOT IN(98,99)))
                   /*UNION
                   SELECT DISTINCT share_cd, dist_spct,
                                   dist_spct1        -- aaron added dist_spct1
                              FROM giuw_wperilds_dtl a
                             WHERE 1 = 1
                               AND a.peril_cd = p_peril_cd
                               AND a.dist_seq_no = p_dist_seq_no
                               AND dist_no =
                                      (SELECT MAX (dist_no)
                                         FROM giuw_pol_dist
                                        WHERE policy_id =
                                                    (SELECT old_policy_id
                                                       FROM gipi_wpolnrep
                                                      WHERE par_id = p_par_id))-- commented out by shan 06.13.2014 */)
         LOOP
            --message(v_share_cd||' - '||v_dist_spct||' - '||v_dist_tsi||' - '||v_dist_prem||' - '||p_peril_cd);pause;
            v_existing := 'Y';  -- shan 06.13.2014
            v_share_cd := c.share_cd;
            v_dist_spct := c.dist_spct;
            v_dist_spct1 := c.dist_spct1;
            v_dist_tsi := ROUND (((p_dist_tsi * c.dist_spct) / 100), 2);
            v_dist_prem := ROUND(((p_dist_prem    * NVL(c.dist_spct1,c.dist_spct))/ 100), 2); -- added nvl : shan 06.09.2014
            v_ann_dist_tsi :=
                           ROUND (((p_ann_dist_tsi * c.dist_spct) / 100), 2);
            v_sum_dist_tsi := NVL (v_sum_dist_tsi, 0) + NVL (v_dist_tsi, 0);
            v_sum_dist_prem := NVL (v_sum_dist_prem, 0)
                               + NVL (v_dist_prem, 0);
            v_sum_ann_dist_tsi :=
                         NVL (v_sum_ann_dist_tsi, 0)
                         + NVL (v_ann_dist_tsi, 0);
            --msg_alert(v_share_cd||' - '||v_dist_spct||' - '||v_dist_tsi||' - '||v_dist_prem||' - '||v_ann_dist_tsi||' - '||p_ann_dist_tsi,'I',FALSE);
            insert_to_wperilds_dtl;
         END LOOP;
         /** added by shan 06.13.2014 **/
         IF v_existing = 'N' THEN
            IF p_default_type = 1
             THEN
                FOR c1 IN dist_peril_cur
                LOOP
                   v_dflt_dist_exist := 'Y';

                   IF v_remaining_tsi >= c1.share_amt1
                   THEN
                      v_dist_tsi := c1.share_amt1 / p_currency_rt;
                      v_remaining_tsi := v_remaining_tsi - c1.share_amt1;
                   ELSE
                      v_remaining_tsi := 0;
                   END IF;

                   IF v_remaining_tsi != 0
                   THEN
                      IF p_dist_tsi = 0
                      THEN
                         v_dist_spct := 0;
                      ELSE
                         v_dist_spct := ROUND (v_dist_tsi / p_dist_tsi * 100, 14);
                      END IF;

                      /*
                      ** added by aaron
                      */
                      IF p_dist_prem = 0
                      THEN
                         v_dist_spct1 := 0;
                      ELSE
                         v_dist_spct1 :=
                                      ROUND (v_dist_prem / p_dist_prem * 100, 14);
                      END IF;

                      /*
                      ** added by aaron
                      */
                      v_dist_tsi := ROUND (p_dist_tsi * v_dist_spct / 100, 2);
                      v_dist_prem := ROUND (p_dist_prem * v_dist_spct / 100, 2);
                      v_ann_dist_tsi :=
                                     ROUND (p_ann_dist_tsi * v_dist_spct / 100, 2);
                      v_sum_dist_spct := v_sum_dist_spct + v_dist_spct;
                      v_sum_dist_spct1 := v_sum_dist_spct1 + v_dist_spct1;
                      v_sum_dist_tsi := v_sum_dist_tsi + v_dist_tsi;
                      v_sum_dist_prem := v_sum_dist_prem + v_dist_prem;
                      v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
                   ELSIF v_remaining_tsi = 0
                   THEN
                      v_dist_spct := 100 - v_sum_dist_spct;
                      v_dist_prem := p_dist_prem - v_sum_dist_prem;
                      v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                      v_dist_tsi := p_dist_tsi - v_sum_dist_tsi;
                   END IF;

                   v_share_cd := c1.share_cd;
                   insert_to_wperilds_dtl;

                   IF v_remaining_tsi = 0
                   THEN
                      EXIT;
                   END IF;
                END LOOP;

                IF v_remaining_tsi != 0 AND v_dflt_dist_exist = 'Y'
                THEN
                   v_dist_spct := 100 - v_sum_dist_spct;
                   v_dist_prem := p_dist_prem - v_sum_dist_prem;
                   v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                   v_dist_tsi := p_dist_tsi - v_sum_dist_tsi;
                   v_share_cd := '999';
                   insert_to_wperilds_dtl;
                END IF;
             /* Use PERCENTAGES to create the default distribution records. */
             ELSIF p_default_type = 2
             THEN
                FOR c1 IN dist_peril_cur
                LOOP
                   v_dflt_dist_exist := 'Y';
                   v_dist_spct := c1.share_pct;
                   v_dist_spct1 := c1.share_pct;                          --aaron

                   IF c1.share_amt1 IS NOT NULL
                   THEN
                      v_dist_tsi := c1.share_amt1 / p_currency_rt;

                      IF p_dist_tsi != 0
                      THEN
                         v_dist_spct_limit :=
                                        ROUND (v_dist_tsi / p_dist_tsi * 100, 14);
                      ELSE
                         v_dist_spct_limit := 0;
                      END IF;

                      /* Modified by Loth 050499
                      ** this statement is only true if v_dist_spct_limit
                      ** is greater than or equal to zero.
                      */
                      IF v_dist_spct_limit >= 0
                      THEN
                         IF v_dist_spct > v_dist_spct_limit
                         THEN
                            v_dist_spct := v_dist_spct_limit;
                         END IF;
                      END IF;
                   END IF;

                   v_sum_dist_spct := v_sum_dist_spct + v_dist_spct;
                   v_sum_dist_spct1 := v_sum_dist_spct1 + v_dist_spct1;    --aaron

                   IF v_sum_dist_spct != 100
                   THEN
                      v_dist_tsi := ROUND (p_dist_tsi * v_dist_spct / 100, 2);
                      v_dist_prem := ROUND (p_dist_prem * v_dist_spct / 100, 2);
                      v_ann_dist_tsi :=
                                    ROUND (p_ann_dist_tsi * v_dist_spct / 100, 2);
                      v_sum_dist_tsi := v_sum_dist_tsi + v_dist_tsi;
                      v_sum_dist_prem := v_sum_dist_prem + v_dist_prem;
                      v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
                   ELSE
                      v_dist_tsi := p_dist_tsi - v_sum_dist_tsi;
                      v_dist_prem := p_dist_prem - v_sum_dist_prem;
                      v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                   END IF;

                   v_share_cd := c1.share_cd;
                   insert_to_wperilds_dtl;
                END LOOP;

                IF v_sum_dist_spct != 100 AND v_dflt_dist_exist = 'Y'
                THEN
                   v_dist_spct := 100 - v_sum_dist_spct;
                   v_dist_spct1 := 100 - v_sum_dist_spct1; -- apollo cruz 6.27.2014
                   v_dist_tsi := p_dist_tsi - v_sum_dist_tsi;
                   v_dist_prem := p_dist_prem - v_sum_dist_prem;
                   v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                   v_share_cd := '999';
                   insert_to_wperilds_dtl;
                END IF;
             END IF;

             /* If GIIS_DEFAULT_DIST_PERIL does not contain a record that
             ** corresponds to the particular peril being distributed,
             ** then use the value of the DFLT_NETRET_PCT column retrieved
             ** from table GIIS_DEFAULT_DIST. */
             IF v_dflt_dist_exist = 'N' AND p_dflt_netret_pct IS NOT NULL
             THEN
                IF p_dflt_netret_pct != 100
                THEN
                   v_dist_spct := p_dflt_netret_pct;
                   v_dist_tsi := ROUND (p_dist_tsi * p_dflt_netret_pct / 100, 2);
                   v_dist_prem :=
                                 ROUND (p_dist_prem * p_dflt_netret_pct / 100, 2);
                   v_ann_dist_tsi :=
                              ROUND (p_ann_dist_tsi * p_dflt_netret_pct / 100, 2);
                   v_sum_dist_tsi := v_sum_dist_tsi + v_dist_tsi;
                   v_sum_dist_prem := v_sum_dist_prem + v_dist_prem;
                   v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
                ELSE
                   v_dist_spct := p_dflt_netret_pct;
                   v_dist_tsi := p_dist_tsi;
                   v_dist_prem := p_dist_prem;
                   v_ann_dist_tsi := p_ann_dist_tsi;
                END IF;

                v_share_cd := 1;
                insert_to_wperilds_dtl;

                IF p_dflt_netret_pct != 100
                THEN
                   v_dist_spct := 100 - p_dflt_netret_pct;
                   v_dist_tsi := p_dist_tsi - v_sum_dist_tsi;
                   v_dist_prem := p_dist_prem - v_sum_dist_prem;
                   v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                   v_share_cd := '999';
                   insert_to_wperilds_dtl;
                END IF;
             /* If no default distribution record was found in table
             ** GIIS_DEFAULT_DIST, then create the record using
             ** the traditional 100% NET RETENTION, 0% FACULTATIVE
             ** default. */
             ELSIF v_dflt_dist_exist = 'N'
             THEN
                /* Create the default distribution records based on the 100%
                ** NET RETENTION and 0% FACULTATIVE hard code defaults. */
                v_share_cd := 1;
                v_dist_spct := 100;
                v_dist_tsi := p_dist_tsi;
                v_dist_prem := p_dist_prem;
                v_ann_dist_tsi := p_ann_dist_tsi;
                insert_to_wperilds_dtl;
                
                --apollo cruz 6.27.2014 - to show facul with 0% share and amounts when creating items in endorsement without default peril setup
                v_share_cd := 999;
                v_dist_spct := 0;
                v_dist_tsi := 0;
                v_dist_prem := 0;
                v_ann_dist_tsi := 0;
                insert_to_wperilds_dtl;
             END IF;
         END IF;
         /** ended shan 06.13.2014 **/
      ELSIF p_par_type = 'E'
      THEN
         --message ('insert');pause;
         FOR c IN (SELECT DISTINCT share_cd, dist_spct,
                                   dist_spct1     --added by aaron dist_spct1
                              FROM giuw_perilds_dtl a
                             WHERE 1 = 1
                               AND a.peril_cd = p_peril_cd
                               AND a.dist_seq_no = p_dist_seq_no
                               AND dist_no =
                                      (SELECT MAX (dist_no)
                                         FROM giuw_pol_dist
                                        WHERE par_id =
                                                 (SELECT par_id
                                                    FROM gipi_polbasic
                                                   WHERE endt_seq_no = 0
                                                     AND (line_cd,
                                                          subline_cd,
                                                          iss_cd,
                                                          issue_yy,
                                                          pol_seq_no,
                                                          renew_no
                                                         ) =
                                                            (SELECT line_cd,
                                                                    subline_cd,
                                                                    iss_cd,
                                                                    issue_yy,
                                                                    pol_seq_no,
                                                                    renew_no
                                                               FROM gipi_wpolbas
                                                              WHERE par_id =
                                                                       p_par_id)))
                   /*UNION
                   SELECT DISTINCT share_cd, dist_spct,
                                   dist_spct1      --added by aaron dist_spct1
                              FROM giuw_wperilds_dtl a
                             WHERE 1 = 1
                               AND a.peril_cd = p_peril_cd
                               AND a.dist_seq_no = p_dist_seq_no
                               AND dist_no =
                                      (SELECT MAX (dist_no)
                                         FROM giuw_pol_dist
                                        WHERE par_id =
                                                 (SELECT par_id
                                                    FROM gipi_polbasic
                                                   WHERE endt_seq_no = 0
                                                     AND (line_cd,
                                                          subline_cd,
                                                          iss_cd,
                                                          issue_yy,
                                                          pol_seq_no,
                                                          renew_no
                                                         ) =
                                                            (SELECT line_cd,
                                                                    subline_cd,
                                                                    iss_cd,
                                                                    issue_yy,
                                                                    pol_seq_no,
                                                                    renew_no
                                                               FROM gipi_wpolbas
                                                              WHERE par_id =
                                                                       p_par_id))) -- commented out by shan 06.13.2014*/ )
         LOOP
            --message(p_DIST_NO||' - '||p_DIST_SEQ_NO||' - '||p_PERIL_CD||' - '||p_LINE_CD||' - '||v_SHARE_CD||' - '||v_dist_spct||' - '||v_dist_tsi||' - '||v_dist_prem);pause;
            v_existing := 'Y';  -- shan 06.13.2014
            v_share_cd := c.share_cd;
            v_dist_spct := c.dist_spct;
            v_dist_spct1 := c.dist_spct1;
            v_dist_tsi := ROUND (((p_dist_tsi * c.dist_spct) / 100), 2);
            v_dist_prem := ROUND(((p_dist_prem    * NVL(c.dist_spct1,c.dist_spct))/ 100), 2); -- added nvl : shan 06.09.2014
            v_ann_dist_tsi :=
                           ROUND (((p_ann_dist_tsi * c.dist_spct) / 100), 2);
            v_sum_dist_tsi := NVL (v_sum_dist_tsi, 0) + NVL (v_dist_tsi, 0);
            v_sum_dist_prem := NVL (v_sum_dist_prem, 0)
                               + NVL (v_dist_prem, 0);
            v_sum_ann_dist_tsi :=
                         NVL (v_sum_ann_dist_tsi, 0)
                         + NVL (v_ann_dist_tsi, 0);
            insert_to_wperilds_dtl;
         END LOOP;
         /** added by shan 06.13.2014 **/
         
         IF v_existing = 'N' THEN
            IF p_default_type = 1
             THEN
                FOR c1 IN dist_peril_cur
                LOOP
                   v_dflt_dist_exist := 'Y';

                   IF v_remaining_tsi >= c1.share_amt1
                   THEN
                      v_dist_tsi := c1.share_amt1 / p_currency_rt;
                      v_remaining_tsi := v_remaining_tsi - c1.share_amt1;
                   ELSE
                      v_remaining_tsi := 0;
                   END IF;

                   IF v_remaining_tsi != 0
                   THEN
                      IF p_dist_tsi = 0
                      THEN
                         v_dist_spct := 0;
                      ELSE
                         v_dist_spct := ROUND (v_dist_tsi / p_dist_tsi * 100, 14);
                      END IF;

                      /*
                      ** added by aaron
                      */
                      IF p_dist_prem = 0
                      THEN
                         v_dist_spct1 := 0;
                      ELSE
                         v_dist_spct1 :=
                                      ROUND (v_dist_prem / p_dist_prem * 100, 14);
                      END IF;

                      /*
                      ** added by aaron
                      */
                      v_dist_tsi := ROUND (p_dist_tsi * v_dist_spct / 100, 2);
                      v_dist_prem := ROUND (p_dist_prem * v_dist_spct / 100, 2);
                      v_ann_dist_tsi :=
                                     ROUND (p_ann_dist_tsi * v_dist_spct / 100, 2);
                      v_sum_dist_spct := v_sum_dist_spct + v_dist_spct;
                      v_sum_dist_spct1 := v_sum_dist_spct1 + v_dist_spct1;
                      v_sum_dist_tsi := v_sum_dist_tsi + v_dist_tsi;
                      v_sum_dist_prem := v_sum_dist_prem + v_dist_prem;
                      v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
                   ELSIF v_remaining_tsi = 0
                   THEN
                      v_dist_spct := 100 - v_sum_dist_spct;
                      v_dist_prem := p_dist_prem - v_sum_dist_prem;
                      v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                      v_dist_tsi := p_dist_tsi - v_sum_dist_tsi;
                   END IF;

                   v_share_cd := c1.share_cd;
                   insert_to_wperilds_dtl;

                   IF v_remaining_tsi = 0
                   THEN
                      EXIT;
                   END IF;
                END LOOP;

                IF v_remaining_tsi != 0 AND v_dflt_dist_exist = 'Y'
                THEN
                   v_dist_spct := 100 - v_sum_dist_spct;
                   v_dist_prem := p_dist_prem - v_sum_dist_prem;
                   v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                   v_dist_tsi := p_dist_tsi - v_sum_dist_tsi;
                   v_share_cd := '999';
                   insert_to_wperilds_dtl;
                END IF;
             /* Use PERCENTAGES to create the default distribution records. */
             ELSIF p_default_type = 2
             THEN
                FOR c1 IN dist_peril_cur
                LOOP
                   v_dflt_dist_exist := 'Y';
                   v_dist_spct := c1.share_pct;
                   v_dist_spct1 := c1.share_pct;                          --aaron

                   IF c1.share_amt1 IS NOT NULL
                   THEN
                      v_dist_tsi := c1.share_amt1 / p_currency_rt;

                      IF p_dist_tsi != 0
                      THEN
                         v_dist_spct_limit :=
                                        ROUND (v_dist_tsi / p_dist_tsi * 100, 14);
                      ELSE
                         v_dist_spct_limit := 0;
                      END IF;

                      /* Modified by Loth 050499
                      ** this statement is only true if v_dist_spct_limit
                      ** is greater than or equal to zero.
                      */
                      IF v_dist_spct_limit >= 0
                      THEN
                         IF v_dist_spct > v_dist_spct_limit
                         THEN
                            v_dist_spct := v_dist_spct_limit;
                         END IF;
                      END IF;
                   END IF;

                   v_sum_dist_spct := v_sum_dist_spct + v_dist_spct;
                   v_sum_dist_spct1 := v_sum_dist_spct1 + v_dist_spct1;    --aaron

                   IF v_sum_dist_spct != 100
                   THEN
                      v_dist_tsi := ROUND (p_dist_tsi * v_dist_spct / 100, 2);
                      v_dist_prem := ROUND (p_dist_prem * v_dist_spct / 100, 2);
                      v_ann_dist_tsi :=
                                    ROUND (p_ann_dist_tsi * v_dist_spct / 100, 2);
                      v_sum_dist_tsi := v_sum_dist_tsi + v_dist_tsi;
                      v_sum_dist_prem := v_sum_dist_prem + v_dist_prem;
                      v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
                   ELSE
                      v_dist_tsi := p_dist_tsi - v_sum_dist_tsi;
                      v_dist_prem := p_dist_prem - v_sum_dist_prem;
                      v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                   END IF;

                   v_share_cd := c1.share_cd;
                   insert_to_wperilds_dtl;
                END LOOP;

                IF v_sum_dist_spct != 100 AND v_dflt_dist_exist = 'Y'
                THEN
                   v_dist_spct := 100 - v_sum_dist_spct;
                   v_dist_spct1 := 100 - v_sum_dist_spct1; -- apollo cruz 6.27.2014
                   v_dist_tsi := p_dist_tsi - v_sum_dist_tsi;
                   v_dist_prem := p_dist_prem - v_sum_dist_prem;
                   v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                   v_share_cd := '999';
                   insert_to_wperilds_dtl;
                END IF;
             END IF;
             

             /* If GIIS_DEFAULT_DIST_PERIL does not contain a record that
             ** corresponds to the particular peril being distributed,
             ** then use the value of the DFLT_NETRET_PCT column retrieved
             ** from table GIIS_DEFAULT_DIST. */
             IF v_dflt_dist_exist = 'N' AND p_dflt_netret_pct IS NOT NULL
             THEN
                IF p_dflt_netret_pct != 100
                THEN
                   v_dist_spct := p_dflt_netret_pct;
                   v_dist_tsi := ROUND (p_dist_tsi * p_dflt_netret_pct / 100, 2);
                   v_dist_prem :=
                                 ROUND (p_dist_prem * p_dflt_netret_pct / 100, 2);
                   v_ann_dist_tsi :=
                              ROUND (p_ann_dist_tsi * p_dflt_netret_pct / 100, 2);
                   v_sum_dist_tsi := v_sum_dist_tsi + v_dist_tsi;
                   v_sum_dist_prem := v_sum_dist_prem + v_dist_prem;
                   v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
                ELSE
                   v_dist_spct := p_dflt_netret_pct;
                   v_dist_tsi := p_dist_tsi;
                   v_dist_prem := p_dist_prem;
                   v_ann_dist_tsi := p_ann_dist_tsi;
                END IF;

                v_share_cd := 1;
                insert_to_wperilds_dtl;

                IF p_dflt_netret_pct != 100
                THEN
                   v_dist_spct := 100 - p_dflt_netret_pct;
                   v_dist_tsi := p_dist_tsi - v_sum_dist_tsi;
                   v_dist_prem := p_dist_prem - v_sum_dist_prem;
                   v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                   v_share_cd := '999';
                   insert_to_wperilds_dtl;
                END IF;
             /* If no default distribution record was found in table
             ** GIIS_DEFAULT_DIST, then create the record using
             ** the traditional 100% NET RETENTION, 0% FACULTATIVE
             ** default. */
             ELSIF v_dflt_dist_exist = 'N'
             THEN
                /* Create the default distribution records based on the 100%
                ** NET RETENTION and 0% FACULTATIVE hard code defaults. */
                v_share_cd := 1;
                v_dist_spct := 100;
                v_dist_tsi := p_dist_tsi;
                v_dist_prem := p_dist_prem;
                v_ann_dist_tsi := p_ann_dist_tsi;                
                insert_to_wperilds_dtl;
                
                --apollo cruz 6.24.2014 - to show facul with 0% share and amounts when creating items in endorsement without default peril setup
                v_share_cd := 999;
                v_dist_spct := 0;
                v_dist_tsi := 0;
                v_dist_prem := 0;
                v_ann_dist_tsi := 0;
                insert_to_wperilds_dtl;
             END IF;
         END IF;
         /** ended shan 06.13.2014 **/
      ELSE                      /* rollie 08august2005 old default will use */
         /* Use AMOUNTS to create the default distribution records. */
                  
         IF p_default_type = 1
         THEN
            FOR c1 IN dist_peril_cur
            LOOP
               v_dflt_dist_exist := 'Y';

               IF v_remaining_tsi >= c1.share_amt1
               THEN
                  v_dist_tsi := c1.share_amt1 / p_currency_rt;
                  v_remaining_tsi := v_remaining_tsi - c1.share_amt1;
               ELSE
                  v_remaining_tsi := 0;
               END IF;

               IF v_remaining_tsi != 0
               THEN
                  IF p_dist_tsi = 0
                  THEN
                     v_dist_spct := 0;
                  ELSE
                     v_dist_spct := ROUND (v_dist_tsi / p_dist_tsi * 100, 9); --14);    -- shan 07.24.2014
                  END IF;

                  /*
                  ** added by aaron
                  */
                  IF p_dist_prem = 0
                  THEN
                     v_dist_spct1 := 0;
                  ELSE
                     v_dist_spct1 :=
                                  ROUND (v_dist_prem / p_dist_prem * 100, 9); --14);    -- shan 07.24.2014
                  END IF;

                  /*
                  ** added by aaron
                  */
                  v_dist_tsi := ROUND (p_dist_tsi * v_dist_spct / 100, 2);
                  v_dist_prem := ROUND (p_dist_prem * v_dist_spct1 /*v_dist_spct*// 100, 2); -- shan 07.25.2014
                  v_ann_dist_tsi :=
                                 ROUND (p_ann_dist_tsi * v_dist_spct / 100, 2);
                  v_sum_dist_spct := v_sum_dist_spct + v_dist_spct;
                  v_sum_dist_spct1 := v_sum_dist_spct1 + v_dist_spct1;
                  v_sum_dist_tsi := v_sum_dist_tsi + v_dist_tsi;
                  v_sum_dist_prem := v_sum_dist_prem + v_dist_prem;
                  v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
               ELSIF v_remaining_tsi = 0
               THEN
                  v_dist_spct := 100 - v_sum_dist_spct;
                  v_dist_spct1 := 100 - v_sum_dist_spct1;   -- shan 07.25.2014
                  v_dist_prem := p_dist_prem - v_sum_dist_prem;
                  v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                  v_dist_tsi := p_dist_tsi - v_sum_dist_tsi;
               END IF;

               v_share_cd := c1.share_cd;
               insert_to_wperilds_dtl;

               IF v_remaining_tsi = 0
               THEN
                  EXIT;
               END IF;
            END LOOP;

            IF v_remaining_tsi != 0 AND v_dflt_dist_exist = 'Y'
            THEN
               v_dist_spct := 100 - v_sum_dist_spct;
               v_dist_spct1 := 100 - v_sum_dist_spct1;   -- shan 07.25.2014
               v_dist_prem := p_dist_prem - v_sum_dist_prem;
               v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
               v_dist_tsi := p_dist_tsi - v_sum_dist_tsi;
               v_share_cd := '999';
               insert_to_wperilds_dtl;
            END IF;
         /* Use PERCENTAGES to create the default distribution records. */
         ELSIF p_default_type = 2
         THEN
            
         
            FOR c1 IN dist_peril_cur
            LOOP
               v_dflt_dist_exist := 'Y';
               v_dist_spct := c1.share_pct;
               v_dist_spct1 := c1.share_pct;                          --aaron

               IF c1.share_amt1 IS NOT NULL
               THEN
                  v_dist_tsi := c1.share_amt1 / p_currency_rt;

                  IF p_dist_tsi != 0
                  THEN
                     v_dist_spct_limit :=
                                    ROUND (v_dist_tsi / p_dist_tsi * 100, 9); --14);    -- shan 07.24.2014
                  ELSE
                     v_dist_spct_limit := 0;
                  END IF;

                  /* Modified by Loth 050499
                  ** this statement is only true if v_dist_spct_limit
                  ** is greater than or equal to zero.
                  */
                  IF v_dist_spct_limit >= 0
                  THEN
                     IF v_dist_spct > v_dist_spct_limit
                     THEN
                        v_dist_spct := v_dist_spct_limit;
                     END IF;
                  END IF;
               END IF;

               v_sum_dist_spct := v_sum_dist_spct + v_dist_spct;
               v_sum_dist_spct1 := v_sum_dist_spct1 + v_dist_spct1;    --aaron

               IF v_sum_dist_spct != 100
               THEN
                  v_dist_tsi := ROUND (p_dist_tsi * v_dist_spct / 100, 2);
                  v_dist_prem := ROUND (p_dist_prem * v_dist_spct / 100, 2);
                  v_ann_dist_tsi :=
                                ROUND (p_ann_dist_tsi * v_dist_spct / 100, 2);
                  v_sum_dist_tsi := v_sum_dist_tsi + v_dist_tsi;
                  v_sum_dist_prem := v_sum_dist_prem + v_dist_prem;
                  v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
               ELSE
                  v_dist_tsi := p_dist_tsi - v_sum_dist_tsi;
                  v_dist_prem := p_dist_prem - v_sum_dist_prem;
                  v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
               END IF;

               v_share_cd := c1.share_cd;
               insert_to_wperilds_dtl;
            END LOOP;

            IF v_sum_dist_spct != 100 AND v_dflt_dist_exist = 'Y'
            THEN
               v_dist_spct := 100 - v_sum_dist_spct;
               v_dist_spct1 := 100 - v_sum_dist_spct1; -- apollo cruz 6.27.2014
               v_dist_tsi := p_dist_tsi - v_sum_dist_tsi;
               v_dist_prem := p_dist_prem - v_sum_dist_prem;
               v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
               v_share_cd := '999';
               insert_to_wperilds_dtl;
            END IF;
         END IF;

         /* If GIIS_DEFAULT_DIST_PERIL does not contain a record that
         ** corresponds to the particular peril being distributed,
         ** then use the value of the DFLT_NETRET_PCT column retrieved
         ** from table GIIS_DEFAULT_DIST. */
         IF v_dflt_dist_exist = 'N' AND p_dflt_netret_pct IS NOT NULL
         THEN
            IF p_dflt_netret_pct != 100
            THEN
               v_dist_spct := p_dflt_netret_pct;
               v_dist_tsi := ROUND (p_dist_tsi * p_dflt_netret_pct / 100, 2);
               v_dist_prem :=
                             ROUND (p_dist_prem * p_dflt_netret_pct / 100, 2);
               v_ann_dist_tsi :=
                          ROUND (p_ann_dist_tsi * p_dflt_netret_pct / 100, 2);
               v_sum_dist_tsi := v_sum_dist_tsi + v_dist_tsi;
               v_sum_dist_prem := v_sum_dist_prem + v_dist_prem;
               v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
            ELSE
               v_dist_spct := p_dflt_netret_pct;
               v_dist_tsi := p_dist_tsi;
               v_dist_prem := p_dist_prem;
               v_ann_dist_tsi := p_ann_dist_tsi;
            END IF;

            v_share_cd := 1;
            insert_to_wperilds_dtl;

            IF p_dflt_netret_pct != 100
            THEN
               v_dist_spct := 100 - p_dflt_netret_pct;
               v_dist_tsi := p_dist_tsi - v_sum_dist_tsi;
               v_dist_prem := p_dist_prem - v_sum_dist_prem;
               v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
               v_share_cd := '999';
               insert_to_wperilds_dtl;
            END IF;
         /* If no default distribution record was found in table
         ** GIIS_DEFAULT_DIST, then create the record using
         ** the traditional 100% NET RETENTION, 0% FACULTATIVE
         ** default. */
         ELSIF v_dflt_dist_exist = 'N'
         THEN
            /* Create the default distribution records based on the 100%
            ** NET RETENTION and 0% FACULTATIVE hard code defaults. */
            v_share_cd := 1;
            v_dist_spct := 100;
            v_dist_spct1 := 100;    -- shan 07.31.2014
            v_dist_tsi := p_dist_tsi;
            v_dist_prem := p_dist_prem;
            v_ann_dist_tsi := p_ann_dist_tsi;

            FOR c IN 1 .. 2
            LOOP
               insert_to_wperilds_dtl;
               v_share_cd := 999;
               v_dist_spct := 0;
               v_dist_spct1 := 0;    -- shan 07.31.2014
               v_dist_tsi := 0;
               v_dist_prem := 0;
               v_ann_dist_tsi := 0;
            END LOOP;
         END IF;
      END IF;
   END;

   /* Create records in table GIUW_WITEMDS_DTL based on
   ** the values taken in by table GIUW_WITEMPERILDS_DTL. */
   PROCEDURE create_peril_dflt_witemds3 (
      p_dist_no       IN   giuw_pol_dist.dist_no%TYPE,
      p_dist_seq_no   IN   giuw_wpolicyds.dist_seq_no%TYPE,
      p_item_no       IN   giuw_witemperilds.item_no%TYPE,
      p_line_cd       IN   giuw_wperilds.line_cd%TYPE,
      p_tsi_amt       IN   giuw_wperilds.tsi_amt%TYPE,
      p_prem_amt      IN   giuw_wperilds.prem_amt%TYPE,
      p_ann_tsi_amt   IN   giuw_wperilds.ann_tsi_amt%TYPE,
      p_pol_flag      IN   gipi_wpolbas.pol_flag%TYPE,
      p_par_id        IN   gipi_wpolbas.par_id%TYPE,
      p_par_type      IN   gipi_parlist.par_type%TYPE
   )
   IS
      v_dist_spct          giuw_witemds_dtl.dist_spct%TYPE;
      v_dist_spct1         giuw_witemds_dtl.dist_spct1%TYPE;          --aaron
      v_ann_dist_spct      giuw_witemds_dtl.ann_dist_spct%TYPE;
      v_allied_dist_prem   giuw_witemds_dtl.dist_prem%TYPE;
      v_dist_prem          giuw_witemds_dtl.dist_prem%TYPE;
      v_insert             VARCHAR2 (1)                           := 'Y';
      v_tsi_amt            giuw_wpolicyds_dtl.dist_tsi%TYPE;
      v_prem_amt           giuw_wpolicyds_dtl.dist_prem%TYPE;
      v_ann_tsi_amt        giuw_wpolicyds_dtl.ann_dist_tsi%TYPE;
      v_share_cd           giis_dist_share.share_cd%TYPE;
   BEGIN
      IF p_pol_flag = '2' OR p_par_type = 'E'
      THEN
         FOR a1 IN (SELECT   c.share_cd,
                             SUM (DECODE (b.peril_type,
                                          'B', tsi_amt * (dist_spct / 100),
                                          0
                                         )
                                 ) dist_tsi,
                             SUM (a.prem_amt) dist_prem,
                             SUM (DECODE (b.peril_type,
                                          'B', ann_tsi_amt
                                           * (dist_spct / 100),
                                          0
                                         )
                                 ) ann_dist_tsi
                        FROM gipi_witmperl a,
                             giis_peril b,
                             giuw_wperilds_dtl c
                       WHERE b.peril_cd = a.peril_cd
                         AND b.line_cd = a.line_cd
                         AND c.peril_cd = a.peril_cd
                         AND c.line_cd = a.line_cd
                         AND b.line_cd = p_line_cd
                         AND a.par_id = p_par_id
                         AND a.item_no = p_item_no
                         AND c.dist_seq_no = p_dist_seq_no
                         AND c.dist_no = p_dist_no
                    GROUP BY c.share_cd)
         LOOP
            v_share_cd := a1.share_cd;

            IF p_tsi_amt = 0
            THEN
               v_dist_spct := 0;
            ELSE
               v_dist_spct := ROUND ((a1.dist_tsi / p_tsi_amt) * 100, 14);
            END IF;

            v_tsi_amt := ROUND (((a1.dist_tsi * v_dist_spct) / 100), 2);
            v_prem_amt := ROUND (((a1.dist_prem * v_dist_spct) / 100), 2);
            v_ann_tsi_amt :=
                           ROUND (((a1.ann_dist_tsi * v_dist_spct) / 100), 2);

            --msg_alert('insert into giuw_witemds_dtl renewal '||p_dist_no||' - '||p_dist_seq_no||' - '||a1.item_no||' - '||a1.line_cd||' - '||a1.share_cd,'I',FALSE);
            INSERT INTO giuw_witemds_dtl
                        (dist_no, dist_seq_no, item_no, line_cd,
                         share_cd, dist_spct, dist_tsi, dist_prem,
                         ann_dist_spct, ann_dist_tsi, dist_grp
                        )
                 VALUES (p_dist_no, p_dist_seq_no, p_item_no, p_line_cd,
                         a1.share_cd, v_dist_spct, v_tsi_amt, v_prem_amt,
                         v_dist_spct, v_ann_tsi_amt, 1
                        );
         END LOOP;
      ELSE                                                  /* default code */
         FOR c1 IN (SELECT   line_cd line_cd, item_no item_no,
                             share_cd share_cd, dist_grp dist_grp
                        FROM giuw_witemperilds_dtl
                       WHERE dist_no = p_dist_no
                         AND dist_seq_no = p_dist_seq_no
                    GROUP BY item_no, line_cd, share_cd, dist_grp)
         LOOP
            FOR c2 IN (SELECT SUM (DECODE (a170.peril_type,
                                           'B', a.dist_tsi,
                                           0
                                          )
                                  ) dist_tsi,
                              SUM (a.dist_prem) dist_prem,
                              SUM (DECODE (a170.peril_type,
                                           'B', a.ann_dist_tsi,
                                           0
                                          )
                                  ) ann_dist_tsi
                         FROM giuw_witemperilds_dtl a, giis_peril a170
                        WHERE a170.peril_cd = a.peril_cd
                          AND a170.line_cd = a.line_cd
                          AND a.dist_grp = c1.dist_grp
                          AND a.share_cd = c1.share_cd
                          AND a.line_cd = c1.line_cd
                          AND a.item_no = c1.item_no
                          AND a.dist_seq_no = p_dist_seq_no
                          AND a.dist_no = p_dist_no)
            LOOP
               FOR c3 IN (SELECT tsi_amt, prem_amt, ann_tsi_amt,
                                 item_no                     --> giuw_itemds?
                            FROM giuw_witemds
                           WHERE item_no = c1.item_no
                             AND dist_seq_no = p_dist_seq_no
                             AND dist_no = p_dist_no)
               LOOP
                  /*  This portion was edited by aaron
                  **  to include dist_spct1 when inserting into giuw_witemds_dtl.
                  **  Dist_spct1 is the percent share of premium.
                  */
                  IF c3.tsi_amt != 0
                  THEN
                     v_dist_spct := ROUND (c2.dist_tsi / c3.tsi_amt, 2) * 100;
                  --ELSIF c3.prem_amt != 0 THEN
                  --   v_dist_spct1  := ROUND(c2.dist_prem/c3.prem_amt, 2) * 100;  --aaron
                  ELSE
                     v_dist_spct := 0;
                  END IF;

                  IF c3.prem_amt != 0
                  THEN
                     v_dist_spct1 :=
                                   ROUND (c2.dist_prem / c3.prem_amt, 2)
                                   * 100;                             --aaron
                  ELSE
                     v_dist_spct1 := 0;
                  END IF;

                  IF c3.ann_tsi_amt = 0
                  THEN
                     v_ann_dist_spct := 0;
                  ELSE
                     v_ann_dist_spct :=
                             ROUND (c2.ann_dist_tsi / c3.ann_tsi_amt, 2)
                             * 100;
                  END IF;

                  INSERT INTO giuw_witemds_dtl
                              (dist_no, dist_seq_no, item_no,
                               line_cd, share_cd, dist_spct,
                               dist_tsi, dist_prem, ann_dist_spct,
                               ann_dist_tsi, dist_grp, dist_spct1
                              )                                        --aaron
                       VALUES (p_dist_no, p_dist_seq_no, c3.item_no,
                               c1.line_cd, c1.share_cd, v_dist_spct,
                               c2.dist_tsi, c2.dist_prem, v_dist_spct,
                               c2.ann_dist_tsi, c1.dist_grp, v_dist_spct1
                              );                                       --aaron
               END LOOP;

               EXIT;
            END LOOP;
         END LOOP;
      /* end of default code */
      END IF;
   END;

   PROCEDURE create_peril_dflt_dist3 (
      p_dist_no             IN   giuw_wpolicyds.dist_no%TYPE,
      p_dist_seq_no         IN   giuw_wpolicyds.dist_seq_no%TYPE,
      p_dist_flag           IN   giuw_wpolicyds.dist_flag%TYPE,
      p_policy_tsi          IN   giuw_wpolicyds.tsi_amt%TYPE,
      p_policy_premium      IN   giuw_wpolicyds.prem_amt%TYPE,
      p_policy_ann_tsi      IN   giuw_wpolicyds.ann_tsi_amt%TYPE,
      p_item_grp            IN   giuw_wpolicyds.item_grp%TYPE,
      p_line_cd             IN   giis_line.line_cd%TYPE,
      p_default_no          IN   giis_default_dist.default_no%TYPE,
      p_default_type        IN   giis_default_dist.default_type%TYPE,
      p_dflt_netret_pct     IN   giis_default_dist.dflt_netret_pct%TYPE,
      p_currency_rt         IN   gipi_witem.currency_rt%TYPE,
      p_par_id              IN   gipi_parlist.par_id%TYPE,
      p_pol_dist_item_grp   IN   giuw_pol_dist.item_grp%TYPE,
      p_dist_exists         IN   VARCHAR2,
      p_pol_flag            IN   gipi_wpolbas.pol_flag%TYPE,
      p_par_type            IN   gipi_parlist.par_type%TYPE
   )
   IS
      v_peril_cd        giis_peril.peril_cd%TYPE;
      v_peril_tsi       giuw_wperilds.tsi_amt%TYPE       := 0;
      v_peril_premium   giuw_wperilds.prem_amt%TYPE      := 0;
      v_peril_ann_tsi   giuw_wperilds.ann_tsi_amt%TYPE   := 0;
      v_exist           VARCHAR2 (1)                     := 'N';
      v_insert_sw       VARCHAR2 (1)                     := 'N';
      dist_cnt          NUMBER                           := 0;
      dist_max          giuw_pol_dist.dist_no%TYPE;
      -----------------------------------------------added by glyza 04.17.08
      v_tsi_amt         gipi_witmperl.tsi_amt%TYPE;
      v_prem_amt        gipi_witmperl.prem_amt%TYPE;
      v_ann_tsi_amt     gipi_witmperl.ann_tsi_amt%TYPE;

-----------------------------------------------

      /* Updates the amounts of the previously processed PERIL_CD
      ** while looping inside cursor C3.  After which, the records
      ** for table GIUW_WPERILDS_DTL are also created.
      ** NOTE:  This is a LOCAL PROCEDURE BODY called below. */
      PROCEDURE upd_create_wperil_dtl_data
      IS
      BEGIN
         giuw_pol_dist_pkg.create_peril_dflt_wperilds3 (p_dist_no,
                                                        p_dist_seq_no,
                                                        p_line_cd,
                                                        v_peril_cd,
                                                        v_peril_tsi,
                                                        v_peril_premium,
                                                        v_peril_ann_tsi,
                                                        p_currency_rt,
                                                        p_default_no,
                                                        p_default_type,
                                                        p_dflt_netret_pct,
                                                        p_pol_flag,
                                                        p_par_id,
                                                        p_par_type
                                                       );
      END;
   BEGIN
      
      SELECT COUNT (dist_no), MAX (dist_no)
        INTO dist_cnt, dist_max
        FROM giuw_pol_dist
       WHERE par_id = p_par_id
         AND item_grp = NVL (p_pol_dist_item_grp, item_grp);

      /*added by glyza 04.22.08 to handle error divisor equal to zero*/
      IF dist_cnt = 0 AND dist_max IS NULL
      THEN
         BEGIN
            SELECT COUNT (dist_no), MAX (dist_no)
              INTO dist_cnt, dist_max
              FROM giuw_pol_dist
             WHERE par_id = p_par_id AND item_grp IS NULL;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               NULL;
         END;
      END IF;
      
      
/************************************/
  /* Create records in table GIUW_WPOLICYDS and GIUW_WPOLICYDS_DTL
** for the specified DIST_SEQ_NO. */
      IF NVL (p_dist_exists, 'N') = 'N'
      THEN
         IF p_dist_no = dist_max
         THEN
            -----------------------------------------------added by glyza 04.17.08
            FOR x IN
               (SELECT SUM
                          (NVL
                              (DECODE (c.peril_type, 'B', a.tsi_amt, 0), 0)
/*beth- (ROUND((NVL(DECODE(c.peril_type,'B',a.tsi_amt,0),0)/dist_cnt),2) * (dist_cnt - 1))*/
                          ) tsi_amt,
                       SUM (  NVL (a.prem_amt, 0)
                            - (  ROUND ((NVL (a.prem_amt, 0) / dist_cnt), 2)
                               * (dist_cnt - 1)
                              )
                           ) prem_amt,
                       SUM
                          (NVL
                              (DECODE (c.peril_type, 'B', a.ann_tsi_amt, 0),
                               0)
/*beth- (ROUND((NVL(DECODE(c.peril_type,'B',a.ann_tsi_amt,0),0)/dist_cnt),2) * (dist_cnt - 1))*/
                          ) ann_tsi_amt
                  FROM gipi_witmperl a, gipi_witem b, giis_peril c
                 WHERE a.par_id = b.par_id
                   AND a.item_no = b.item_no
                   AND a.par_id = p_par_id
                   AND b.item_grp = p_item_grp
                   AND a.peril_cd = c.peril_cd
                   AND c.line_cd = p_line_cd)
            LOOP
               v_tsi_amt := x.tsi_amt;
               v_prem_amt := x.prem_amt;
               v_ann_tsi_amt := x.ann_tsi_amt;
            END LOOP;
            
-----------------------------------------------
            INSERT INTO giuw_wpolicyds
                        (dist_no, dist_seq_no, dist_flag, tsi_amt,
                         prem_amt, ann_tsi_amt, item_grp
                        )
                 VALUES (p_dist_no, p_dist_seq_no, p_dist_flag, v_tsi_amt,
--NVL(p_policy_tsi,0) - (ROUND((NVL(p_policy_tsi,0)/dist_cnt),2) * (dist_cnt - 1)),
                         v_prem_amt,
--NVL(p_policy_premium,0) - (ROUND((NVL(p_policy_premium,0)/dist_cnt),2) * (dist_cnt - 1)),
                                    v_ann_tsi_amt,
--NVL(p_policy_ann_tsi,0) - (ROUND((NVL(p_policy_ann_tsi,0)/dist_cnt),2) * (dist_cnt - 1)),
                                                  p_item_grp
                        );
         ELSE
            -----------------------------------------------p_dist_no <> dist_max
            -------------------------------------------------added by glyza 04.17.08
            FOR x IN
               (SELECT SUM
                          (ROUND
                               ((NVL (DECODE (c.peril_type,
                                              'B', a.tsi_amt,
                                              0
                                             ),
                                      0
                                     )                       /*beth/dist_cnt*/
                                ),
                                2
                               )
                          ) tsi_amt,
                       SUM (ROUND ((NVL (a.prem_amt, 0) / dist_cnt), 2)
                           ) prem_amt,
                       SUM
                          (ROUND
                              ((NVL (DECODE (c.peril_type,
                                             'B', a.ann_tsi_amt,
                                             0
                                            ),
                                     0
                                    )                        /*beth/dist_cnt*/
                               ),
                               2
                              )
                          ) ann_tsi_amt
                  FROM gipi_witmperl a, gipi_witem b, giis_peril c
                 WHERE a.par_id = b.par_id
                   AND a.item_no = b.item_no
                   AND a.par_id = p_par_id
                   AND b.item_grp = p_item_grp
                   AND a.peril_cd = c.peril_cd
                   AND c.line_cd = p_line_cd)
            LOOP
               v_tsi_amt := x.tsi_amt;
               v_prem_amt := x.prem_amt;
               v_ann_tsi_amt := x.ann_tsi_amt;
            END LOOP;

--------------------------------------------------
            INSERT INTO giuw_wpolicyds
                        (dist_no, dist_seq_no, dist_flag, tsi_amt,
                         prem_amt, ann_tsi_amt, item_grp
                        )
                 VALUES (p_dist_no, p_dist_seq_no, p_dist_flag,
                                                               --p_policy_tsi/dist_cnt, p_policy_premium/dist_cnt, p_policy_ann_tsi/dist_cnt,
                                                               v_tsi_amt,
                         v_prem_amt, v_ann_tsi_amt, p_item_grp
                        );
         END IF;
      ELSE
---------------------------------------------------variables.v_dist_exist = 'Y'
         IF p_dist_no = dist_max
         THEN
            ---------------------------------------------------added by glyza 04.17.08
            FOR x IN
               (SELECT SUM
                          (NVL
                              (DECODE (c.peril_type, 'B', b490.tsi_amt, 0), 0)
/*beth- (ROUND((NVL(DECODE(c.peril_type,'B',b490.tsi_amt,0),0)/dist_cnt),2) * (dist_cnt - 1))*/
                          ) tsi_amt,
                       SUM (  NVL (b490.prem_amt, 0)
                            - (  ROUND ((NVL (b490.prem_amt, 0) / dist_cnt),
                                        2)
                               * (dist_cnt - 1)
                              )
                           ) prem_amt,
                       SUM
                          (NVL
                              (DECODE (c.peril_type,
                                       'B', b490.ann_tsi_amt,
                                       0
                                      ),
                               0
                              )
/*beth- (ROUND((NVL(DECODE(c.peril_type,'B',b490.ann_tsi_amt,0),0)/dist_cnt),2) * (dist_cnt - 1))*/
                          ) ann_tsi_amt
                  FROM gipi_witmperl b490, gipi_witem b480, giis_peril c
                 WHERE b490.item_no = b480.item_no
                   AND b490.par_id = b480.par_id
                   AND b480.item_grp = p_item_grp
                   AND b480.par_id = p_par_id
                   AND b490.peril_cd = c.peril_cd
                   AND c.line_cd = p_line_cd
                   AND EXISTS (
                          SELECT 1
                            FROM giuw_wpolicyds c
                           WHERE 1 = 1
                             AND c.dist_no = p_dist_no
                             AND c.dist_seq_no = p_dist_seq_no
                             AND c.item_grp = p_item_grp
                             AND c.item_grp = b480.item_grp)
                   AND EXISTS (
                          SELECT 1
                            FROM giuw_witemds c
                           WHERE 1 = 1
                             AND c.dist_no = p_dist_no
                             AND c.dist_seq_no = p_dist_seq_no
                             AND c.item_no = b480.item_no))
            LOOP
               v_tsi_amt := x.tsi_amt;
               v_prem_amt := x.prem_amt;
               v_ann_tsi_amt := x.ann_tsi_amt;

---------------------------------------------------
               UPDATE giuw_wpolicyds
                  SET tsi_amt = v_tsi_amt,
--NVL(p_policy_tsi,0),--NVL(p_policy_tsi,0) - (ROUND((NVL(p_policy_tsi,0)/dist_cnt),2) * (dist_cnt - 1)),
                      prem_amt = v_prem_amt,
--NVL(p_policy_premium,0),--NVL(p_policy_premium,0) - (ROUND((NVL(p_policy_premium,0)/dist_cnt),2) * (dist_cnt - 1)),
                      ann_tsi_amt = v_ann_tsi_amt
--NVL(p_policy_ann_tsi,0)--NVL(p_policy_ann_tsi,0) - (ROUND((NVL(p_policy_ann_tsi,0)/dist_cnt),2) * (dist_cnt - 1))
               WHERE  dist_no = p_dist_no AND dist_seq_no = p_dist_seq_no;
            END LOOP;
         ELSE
            -------------------------------------------p_dist_no <> dist_max
            ---------------------------------------------added by glyza 04.17.08
            FOR x IN
               (SELECT SUM
                          (ROUND
                               ((NVL (DECODE (c.peril_type,
                                              'B', b490.tsi_amt,
                                              0
                                             ),
                                      0
                                     )                       /*beth/dist_cnt*/
                                ),
                                2
                               )
                          ) tsi_amt,
                       SUM (ROUND ((NVL (b490.prem_amt, 0) / dist_cnt), 2)
                           ) prem_amt,
                       SUM
                          (ROUND
                              ((NVL
                                   (DECODE (c.peril_type,
                                            'B', b490.ann_tsi_amt,
                                            0
                                           ),
                                    0
                                   )                         /*beth/dist_cnt*/
                               ),
                               2
                              )
                          ) ann_tsi_amt
                  FROM gipi_witmperl b490, gipi_witem b480, giis_peril c
                 WHERE b490.item_no = b480.item_no
                   AND b490.par_id = b480.par_id
                   AND b480.item_grp = p_item_grp
                   AND b480.par_id = p_par_id
                   AND b490.peril_cd = c.peril_cd
                   AND c.line_cd = p_line_cd
                   AND EXISTS (
                          SELECT 1
                            FROM giuw_wpolicyds c
                           WHERE 1 = 1
                             AND c.dist_no = p_dist_no
                             AND c.dist_seq_no = p_dist_seq_no
                             AND c.item_grp = p_item_grp
                             AND c.item_grp = b480.item_grp)
                   AND EXISTS (
                          SELECT 1
                            FROM giuw_witemds c
                           WHERE 1 = 1
                             AND c.dist_no = p_dist_no
                             AND c.dist_seq_no = p_dist_seq_no
                             AND c.item_no = b480.item_no))
            LOOP
               v_tsi_amt := x.tsi_amt;
               v_prem_amt := x.prem_amt;
               v_ann_tsi_amt := x.ann_tsi_amt;

------------------------------------------------
               UPDATE giuw_wpolicyds
                  SET tsi_amt = v_tsi_amt,
                      --p_policy_tsi,--p_policy_tsi / dist_cnt,
                      prem_amt = v_prem_amt,
                      --p_policy_premium,--p_policy_premium / dist_cnt,
                      ann_tsi_amt = v_ann_tsi_amt
                --p_policy_ann_tsi--p_policy_ann_tsi / dist_cnt
               WHERE  dist_no = p_dist_no AND dist_seq_no = p_dist_seq_no;
            END LOOP;
         END IF;
      END IF;

      --msg_alert('p_item_grp '||p_item_grp||' p_par_id '||p_par_id||' p_dist_no '||p_dist_no||' pdist_seq_no '||p_dist_seq_no,'I',FALSE);
      IF NVL (p_dist_exists, 'N') = 'N'
      THEN
         FOR c4 IN (SELECT   SUM (b490.tsi_amt) itmperil_tsi,
                             SUM (b490.prem_amt) itmperil_premium,
                             SUM (b490.ann_tsi_amt) itmperil_ann_tsi,
                             b490.peril_cd peril_cd, c.peril_type peril_type
                        FROM gipi_witmperl b490,
                             gipi_witem b480,
                             giis_peril c
                       WHERE b490.item_no = b480.item_no
                         AND b490.par_id = b480.par_id
                         AND b480.item_grp = p_item_grp
                         AND b480.par_id = p_par_id
                         AND b490.peril_cd = c.peril_cd
                         AND c.line_cd = p_line_cd
                    GROUP BY b490.peril_cd, c.peril_type)
         LOOP
            IF p_dist_no = dist_max
            THEN
               c4.itmperil_tsi :=
                  NVL
                     (c4.itmperil_tsi, 0) /*beth- (ROUND((NVL(c4.itmperil_tsi,0)/dist_cnt),2) * (dist_cnt - 1)))*/;
               c4.itmperil_premium :=
                    NVL (c4.itmperil_premium, 0)
                  - (  ROUND ((NVL (c4.itmperil_premium, 0) / dist_cnt), 2)
                     * (dist_cnt - 1)
                    );
               c4.itmperil_ann_tsi :=
                  NVL
                     (c4.itmperil_ann_tsi, 0) /*beth- (ROUND((NVL(c4.itmperil_ann_tsi,0)/dist_cnt),2) * (dist_cnt - 1))*/;
            ELSE
               c4.itmperil_tsi := c4.itmperil_tsi /*beth/ dist_cnt*/;
               c4.itmperil_premium := c4.itmperil_premium / dist_cnt;
               c4.itmperil_ann_tsi := c4.itmperil_ann_tsi /*beth/ dist_cnt*/;
            END IF;
            
            INSERT INTO giuw_wperilds
                        (dist_no, dist_seq_no, peril_cd, line_cd,
                         tsi_amt, prem_amt,
                         ann_tsi_amt
                        )
                 VALUES (p_dist_no, p_dist_seq_no, c4.peril_cd, p_line_cd,
                         c4.itmperil_tsi, c4.itmperil_premium,
                         c4.itmperil_ann_tsi
                        );

            v_peril_cd := c4.peril_cd;
            v_peril_tsi := c4.itmperil_tsi;
            v_peril_premium := c4.itmperil_premium;
            v_peril_ann_tsi := c4.itmperil_ann_tsi;
            upd_create_wperil_dtl_data;
         END LOOP;
      ELSE
         FOR c4 IN (SELECT   SUM (b490.tsi_amt) itmperil_tsi,
                             SUM (b490.prem_amt) itmperil_premium,
                             SUM (b490.ann_tsi_amt) itmperil_ann_tsi,
                             b490.peril_cd peril_cd, c.peril_type peril_type
                        FROM gipi_witmperl b490,
                             gipi_witem b480,
                             giis_peril c
                       WHERE b490.item_no = b480.item_no
                         AND b490.par_id = b480.par_id
                         AND b480.item_grp = p_item_grp
                         AND b480.par_id = p_par_id
                         AND b490.peril_cd = c.peril_cd
                         AND c.line_cd = p_line_cd
                         AND EXISTS (
                                SELECT 1
                                  FROM giuw_witemds c
                                 WHERE 1 = 1
                                   AND c.dist_no = p_dist_no
                                   AND c.dist_seq_no = p_dist_seq_no
                                   AND c.item_no = b480.item_no)
                    GROUP BY b490.peril_cd, c.peril_type)
         LOOP
            IF p_dist_no = dist_max
            THEN
               c4.itmperil_tsi :=
                  NVL
                     (c4.itmperil_tsi, 0) /*beth- (ROUND((NVL(c4.itmperil_tsi,0)/dist_cnt),2) * (dist_cnt - 1))*/;
               c4.itmperil_premium :=
                    NVL (c4.itmperil_premium, 0)
                  - (  ROUND ((NVL (c4.itmperil_premium, 0) / dist_cnt), 2)
                     * (dist_cnt - 1)
                    );
               c4.itmperil_ann_tsi :=
                  NVL
                     (c4.itmperil_ann_tsi, 0) /*beth- (ROUND((NVL(c4.itmperil_ann_tsi,0)/dist_cnt),2) * (dist_cnt - 1))*/;
            ELSE
               c4.itmperil_tsi := c4.itmperil_tsi /*beth/ dist_cnt*/;
               c4.itmperil_premium := c4.itmperil_premium / dist_cnt;
               c4.itmperil_ann_tsi := c4.itmperil_ann_tsi /*beth/ dist_cnt*/;
            END IF;
            
            INSERT INTO giuw_wperilds
                        (dist_no, dist_seq_no, peril_cd, line_cd,
                         tsi_amt, prem_amt,
                         ann_tsi_amt
                        )
                 VALUES (p_dist_no, p_dist_seq_no, c4.peril_cd, p_line_cd,
                         c4.itmperil_tsi, c4.itmperil_premium,
                         c4.itmperil_ann_tsi
                        );
                        
            
            v_peril_cd := c4.peril_cd;
            v_peril_tsi := c4.itmperil_tsi;
            v_peril_premium := c4.itmperil_premium;
            v_peril_ann_tsi := c4.itmperil_ann_tsi;
            upd_create_wperil_dtl_data;
         END LOOP;
      END IF;

      
      giuw_pol_dist_pkg.update_dtls_no_share_cd (p_dist_no,
                                                 p_dist_seq_no,
                                                 'PERIL',
                                                 p_line_cd
                                                );                                                

      IF NVL (p_dist_exists, 'N') = 'N'
      THEN
         /* Get the amounts for each item in table GIPI_WITEM in preparation
         ** for data insertion to its corresponding distribution tables. */
         FOR c2 IN (SELECT a.item_no, a.tsi_amt, a.prem_amt, a.ann_tsi_amt
                      FROM gipi_witem a
                     WHERE EXISTS (
                              SELECT '1'
                                FROM gipi_witmperl b
                               WHERE b.par_id = a.par_id
                                 AND b.item_no = a.item_no)
                       AND a.item_grp = p_item_grp
                       AND a.par_id = p_par_id)
         LOOP
            /* Create records in table GIUW_WITEMDS and GIUW_WITEMDS_DTL
            ** for the specified DIST_SEQ_NO. */
            IF p_dist_no = dist_max
            THEN
               ---------------------------------------------------added by glyza 04.17.08
               FOR x IN
                  (SELECT SUM
                             (NVL
                                 (DECODE (c.peril_type, 'B', a.tsi_amt, 0), 0)
/*beth- (ROUND((NVL(DECODE(c.peril_type,'B',a.tsi_amt,0),0)/dist_cnt),2) * (dist_cnt - 1))*/
                             ) tsi_amt,
                          SUM (  NVL (a.prem_amt, 0)
                               - (  ROUND ((NVL (a.prem_amt, 0) / dist_cnt),
                                           2)
                                  * (dist_cnt - 1)
                                 )
                              ) prem_amt,
                          SUM
                             (NVL
                                 (DECODE (c.peril_type,
                                          'B', a.ann_tsi_amt,
                                          0
                                         ),
                                  0
                                 )
/*beth- (ROUND((NVL(DECODE(c.peril_type,'B',a.ann_tsi_amt,0),0)/dist_cnt),2) * (dist_cnt - 1)))*/
                             ) ann_tsi_amt
                     FROM gipi_witmperl a, gipi_witem b, giis_peril c
                    WHERE a.par_id = b.par_id
                      AND a.item_no = b.item_no
                      AND a.par_id = p_par_id
                      --AND b.item_grp = p_item_grp)
                      AND a.item_no = c2.item_no
                      AND a.peril_cd = c.peril_cd
                      AND c.line_cd = p_line_cd)
               LOOP
                  v_tsi_amt := x.tsi_amt;
                  v_prem_amt := x.prem_amt;
                  v_ann_tsi_amt := x.ann_tsi_amt;
               END LOOP;

---------------------------------------------------
               INSERT INTO giuw_witemds
                           (dist_no, dist_seq_no, item_no, tsi_amt,
                            prem_amt, ann_tsi_amt
                           )
                    VALUES (p_dist_no, p_dist_seq_no, c2.item_no, v_tsi_amt,
--NVL(c2.tsi_amt,0) - (ROUND((NVL(c2.tsi_amt,0)/dist_cnt),2) * (dist_cnt - 1)),
                            v_prem_amt,
--NVL(c2.prem_amt,0) - (ROUND((NVL(c2.prem_amt,0)/dist_cnt),2) * (dist_cnt - 1)),
                                       v_ann_tsi_amt
                           );

--NVL(c2.ann_tsi_amt,0) - (ROUND((NVL(c2.ann_tsi_amt,0)/dist_cnt),2) * (dist_cnt - 1)));
               giuw_pol_dist_pkg.create_peril_dflt_witemds3 (p_dist_no,
                                                             p_dist_seq_no,
                                                             c2.item_no,
                                                             p_line_cd,
                                                             v_tsi_amt,
--NVL(c2.tsi_amt,0) - (ROUND((NVL(c2.tsi_amt,0)/dist_cnt),2) * (dist_cnt - 1)),
                                                             v_prem_amt,
--NVL(c2.prem_amt,0) - (ROUND((NVL(c2.prem_amt,0)/dist_cnt),2) * (dist_cnt - 1)),
                                                             v_ann_tsi_amt,
                                                             p_pol_flag,
                                                             p_par_id,
                                                             p_par_type
                                                            );
--NVL(c2.ann_tsi_amt,0) - (ROUND((NVL(c2.ann_tsi_amt,0)/dist_cnt),2) * (dist_cnt - 1)) );
            ELSE
               ---------------------------------------------------added by glyza 04.17.08
               FOR x IN
                  (SELECT SUM
                             (ROUND
                                 ((NVL
                                      (DECODE (c.peril_type,
                                               'B', a.tsi_amt,
                                               0
                                              ),
                                       0
                                      )                      /*beth/dist_cnt*/
                                  ),
                                  2
                                 )
                             ) tsi_amt,
                          SUM (ROUND ((NVL (a.prem_amt, 0) / dist_cnt), 2)
                              ) prem_amt,
                          SUM
                             (ROUND
                                 ((NVL
                                      (DECODE (c.peril_type,
                                               'B', a.ann_tsi_amt,
                                               0
                                              ),
                                       0
                                      )                      /*beth/dist_cnt*/
                                  ),
                                  2
                                 )
                             ) ann_tsi_amt
                     FROM gipi_witmperl a, gipi_witem b, giis_peril c
                    WHERE a.par_id = b.par_id
                      AND a.item_no = b.item_no
                      AND a.par_id = p_par_id
                      --AND b.item_grp = p_item_grp
                      AND a.item_no = c2.item_no
                      AND a.peril_cd = c.peril_cd
                      AND c.line_cd = p_line_cd)
               LOOP
                  v_tsi_amt := x.tsi_amt;
                  v_prem_amt := x.prem_amt;
                  v_ann_tsi_amt := x.ann_tsi_amt;
               END LOOP;

---------------------------------------------------
               INSERT INTO giuw_witemds
                           (dist_no, dist_seq_no, item_no, tsi_amt,
                            prem_amt, ann_tsi_amt
                           )
                    VALUES (p_dist_no, p_dist_seq_no, c2.item_no,
                                                                 --c2.tsi_amt / dist_cnt, c2.prem_amt / dist_cnt, c2.ann_tsi_amt / dist_cnt);
                                                                 v_tsi_amt,
                            v_prem_amt, v_ann_tsi_amt
                           );

               giuw_pol_dist_pkg.create_peril_dflt_witemds3
                                           (p_dist_no,
                                            p_dist_seq_no,
                                            c2.item_no,
                                            p_line_cd,
                                            v_tsi_amt,
                                                      --c2.tsi_amt / dist_cnt,
                                            v_prem_amt,
                                            --c2.prem_amt / dist_cnt,
                                            v_ann_tsi_amt,
                                            p_pol_flag,
                                            p_par_id,
                                            p_par_type
                                           );    --c2.ann_tsi_amt / dist_cnt);
            END IF;
         END LOOP;
      ELSE
         FOR c2 IN (SELECT a.item_no, b.tsi_amt, b.prem_amt, b.ann_tsi_amt
                      FROM giuw_witemds a, gipi_witem b
                     WHERE a.dist_no = p_dist_no
                       AND a.dist_seq_no = p_dist_seq_no
                       AND a.item_no = b.item_no
                       AND b.par_id = p_par_id
                       AND EXISTS (
                              SELECT 1
                                FROM gipi_witmperl c
                               WHERE b.par_id = c.par_id
                                 AND b.item_no = c.item_no))
         LOOP
            IF p_dist_no = dist_max
            THEN
               ---------------------------------------------------added by glyza 04.17.08
               FOR x IN
                  (SELECT SUM
                             (NVL
                                 (DECODE (c.peril_type, 'B', a.tsi_amt, 0), 0)
/*beth- (ROUND((NVL(DECODE(c.peril_type,'B',a.tsi_amt,0),0)/dist_cnt),2) * (dist_cnt - 1))*/
                             ) tsi_amt,
                          SUM (  NVL (a.prem_amt, 0)
                               - (  ROUND ((NVL (a.prem_amt, 0) / dist_cnt),
                                           2)
                                  * (dist_cnt - 1)
                                 )
                              ) prem_amt,
                          SUM
                             (NVL
                                 (DECODE (c.peril_type,
                                          'B', a.ann_tsi_amt,
                                          0
                                         ),
                                  0
                                 )
/*beth- (ROUND((NVL(DECODE(c.peril_type,'B',a.ann_tsi_amt,0),0)/dist_cnt),2) * (dist_cnt - 1))*/
                             ) ann_tsi_amt
                     FROM gipi_witmperl a, gipi_witem b, giis_peril c
                    WHERE a.par_id = b.par_id
                      AND a.item_no = b.item_no
                      AND a.par_id = p_par_id
                      --AND b.item_grp = p_item_grp)
                      AND a.item_no = c2.item_no
                      AND a.peril_cd = c.peril_cd
                      AND c.line_cd = p_line_cd)
               LOOP
                  v_tsi_amt := x.tsi_amt;
                  v_prem_amt := x.prem_amt;
                  v_ann_tsi_amt := x.ann_tsi_amt;
               END LOOP;

---------------------------------------------------
               UPDATE giuw_witemds
                  SET tsi_amt = v_tsi_amt,
--NVL(c2.tsi_amt,0) - (ROUND((NVL(c2.tsi_amt,0)/dist_cnt),2) * (dist_cnt - 1)),
                      prem_amt = v_prem_amt,
--NVL(c2.prem_amt,0) - (ROUND((NVL(c2.prem_amt,0)/dist_cnt),2) * (dist_cnt - 1)),
                      ann_tsi_amt = v_ann_tsi_amt
--NVL(c2.ann_tsi_amt,0) - (ROUND((NVL(c2.ann_tsi_amt,0)/dist_cnt),2) * (dist_cnt - 1))
               WHERE  dist_no = p_dist_no
                  AND item_no = c2.item_no
                  AND dist_seq_no = p_dist_seq_no;

               giuw_pol_dist_pkg.create_peril_dflt_witemds3 (p_dist_no,
                                                             p_dist_seq_no,
                                                             c2.item_no,
                                                             p_line_cd,
                                                             v_tsi_amt,
--NVL(c2.tsi_amt,0) - (ROUND((NVL(c2.tsi_amt,0)/dist_cnt),2) * (dist_cnt - 1)),
                                                             v_prem_amt,
--NVL(c2.prem_amt,0) - (ROUND((NVL(c2.prem_amt,0)/dist_cnt),2) * (dist_cnt - 1)),
                                                             v_ann_tsi_amt,
                                                             p_pol_flag,
                                                             p_par_id,
                                                             p_par_type
                                                            );
--NVL(c2.ann_tsi_amt,0) - (ROUND((NVL(c2.ann_tsi_amt,0)/dist_cnt),2) * (dist_cnt - 1)));
            ELSE
               ---------------------------------------------------added by glyza 04.17.08
               FOR x IN
                  (SELECT SUM
                             (ROUND
                                 ((NVL
                                      (DECODE (c.peril_type,
                                               'B', a.tsi_amt,
                                               0
                                              ),
                                       0
                                      )                      /*beth/dist_cnt*/
                                  ),
                                  2
                                 )
                             ) tsi_amt,
                          SUM (ROUND ((NVL (a.prem_amt, 0) / dist_cnt), 2)
                              ) prem_amt,
                          SUM
                             (ROUND
                                 ((NVL
                                      (DECODE (c.peril_type,
                                               'B', a.ann_tsi_amt,
                                               0
                                              ),
                                       0
                                      )                      /*beth/dist_cnt*/
                                  ),
                                  2
                                 )
                             ) ann_tsi_amt
                     FROM gipi_witmperl a, gipi_witem b, giis_peril c
                    WHERE a.par_id = b.par_id
                      AND a.item_no = b.item_no
                      AND a.par_id = p_par_id
                      --AND b.item_grp = p_item_grp)
                      AND a.item_no = c2.item_no
                      AND a.peril_cd = c.peril_cd
                      AND c.line_cd = p_line_cd)
               LOOP
                  v_tsi_amt := x.tsi_amt;
                  v_prem_amt := x.prem_amt;
                  v_ann_tsi_amt := x.ann_tsi_amt;
               END LOOP;

---------------------------------------------------
               UPDATE giuw_witemds
                  SET tsi_amt = v_tsi_amt,            --c2.tsi_amt / dist_cnt,
                      prem_amt = v_prem_amt,         --c2.prem_amt / dist_cnt,
                      ann_tsi_amt = v_ann_tsi_amt  --c2.ann_tsi_amt / dist_cnt
                WHERE dist_no = p_dist_no
                  AND item_no = c2.item_no
                  AND dist_seq_no = p_dist_seq_no;

               giuw_pol_dist_pkg.create_peril_dflt_witemds3
                                           (p_dist_no,
                                            p_dist_seq_no,
                                            c2.item_no,
                                            p_line_cd,
                                            v_tsi_amt,
                                                      --c2.tsi_amt / dist_cnt,
                                            v_prem_amt,
                                            --c2.prem_amt / dist_cnt,
                                            v_ann_tsi_amt,
                                            p_pol_flag,
                                            p_par_id,
                                            p_par_type
                                           );    --c2.ann_tsi_amt / dist_cnt);
            END IF;
         END LOOP;
      END IF;

      
      giuw_pol_dist_pkg.update_dtls_no_share_cd (p_dist_no,
                                                 p_dist_seq_no,
                                                 'ITEM',
                                                 p_line_cd
                                                );
                                                      
                                                
      /* Initialize the value of the variables
      ** in preparation for processing the new
      ** DIST_SEQ_NO. */
      v_peril_cd := NULL;
      v_peril_tsi := 0;
      v_peril_premium := 0;
      v_peril_ann_tsi := 0;
      v_exist := 'N';

      /* Get the amounts for each combination of the ITEM_NO and the PERIL_CD
      ** in table GIPI_WITMPERL in preparation for data insertion to
      ** distribution tables GIUW_WITEMPERILDS, GIUW_WITEMPERILDS_DTL,
      ** GIUW_WPERILDS and GIUW_WPERILDS_DTL. */

      /* rollie 09august2005
      ** recoded inserting of data in table giuw_wperilds and giuw_witemperilds
      */
      IF NVL (p_dist_exists, 'N') = 'N'
      THEN
         FOR c3 IN (SELECT   b490.tsi_amt itmperil_tsi,
                             b490.prem_amt itmperil_premium,
                             b490.ann_tsi_amt itmperil_ann_tsi,
                             b490.item_no item_no, b490.peril_cd peril_cd
                        FROM gipi_witmperl b490, gipi_witem b480
                       WHERE b490.item_no = b480.item_no
                         AND b490.par_id = b480.par_id
                         AND b480.item_grp = p_item_grp
                         AND b480.par_id = p_par_id
                    ORDER BY b490.peril_cd)
         LOOP
            /* Create records in table GIUW_WITEMPERILDS and GIUW_WITEMPERILDS_DTL
            ** for the specified DIST_SEQ_NO. */
            v_exist := 'Y';

            IF p_dist_no = dist_max
            THEN
               c3.itmperil_tsi :=
                  NVL
                     (c3.itmperil_tsi, 0) /*beth- (ROUND((NVL(c3.itmperil_tsi,0)/dist_cnt),2) * (dist_cnt - 1))*/;
               c3.itmperil_premium :=
                    NVL (c3.itmperil_premium, 0)
                  - (  ROUND ((NVL (c3.itmperil_premium, 0) / dist_cnt), 2)
                     * (dist_cnt - 1)
                    );
               c3.itmperil_ann_tsi :=
                  NVL
                     (c3.itmperil_ann_tsi, 0) /*beth- (ROUND((NVL(c3.itmperil_ann_tsi,0)/dist_cnt),2) * (dist_cnt - 1))*/;
            ELSE
               c3.itmperil_tsi := c3.itmperil_tsi /*beth/ dist_cnt*/;
               c3.itmperil_premium := c3.itmperil_premium / dist_cnt;
               c3.itmperil_ann_tsi := c3.itmperil_ann_tsi /*beth/ dist_cnt*/;
            END IF;

            INSERT INTO giuw_witemperilds
                        (dist_no, dist_seq_no, item_no, peril_cd,
                         line_cd, tsi_amt, prem_amt,
                         ann_tsi_amt
                        )
                 VALUES (p_dist_no, p_dist_seq_no, c3.item_no, c3.peril_cd,
                         p_line_cd, c3.itmperil_tsi, c3.itmperil_premium,
                         c3.itmperil_ann_tsi
                        );

            giuw_pol_dist_pkg.create_peril_dflt_witmperilds2
                                                         (p_dist_no,
                                                          p_dist_seq_no,
                                                          c3.item_no,
                                                          p_line_cd,
                                                          c3.peril_cd,
                                                          c3.itmperil_tsi,
                                                          c3.itmperil_premium,
                                                          c3.itmperil_ann_tsi,
                                                          p_default_no,
                                                          p_par_id,
                                                          p_pol_flag,
                                                          p_par_type
                                                         );
         END LOOP;
      ELSE
         FOR c3 IN (SELECT   b490.tsi_amt itmperil_tsi,
                             b490.prem_amt itmperil_premium,
                             b490.ann_tsi_amt itmperil_ann_tsi,
                             b490.item_no item_no, b490.peril_cd peril_cd
                        FROM gipi_witmperl b490, gipi_witem b480
                       WHERE b490.item_no = b480.item_no
                         AND b490.par_id = b480.par_id
                         AND b480.item_grp = p_item_grp
                         AND b480.par_id = p_par_id
                         AND EXISTS (
                                SELECT 1
                                  FROM giuw_wpolicyds c
                                 WHERE 1 = 1
                                   AND c.dist_no = p_dist_no
                                   AND c.dist_seq_no = p_dist_seq_no
                                   AND c.item_grp = p_item_grp
                                   AND c.item_grp = b480.item_grp)
                         AND EXISTS (
                                SELECT 1
                                  FROM giuw_witemds c
                                 WHERE 1 = 1
                                   AND c.dist_no = p_dist_no
                                   AND c.dist_seq_no = p_dist_seq_no
                                   AND c.item_no = b480.item_no)
                    ORDER BY b490.peril_cd)
         LOOP
            /* Create records in table GIUW_WITEMPERILDS and GIUW_WITEMPERILDS_DTL
            ** for the specified DIST_SEQ_NO. */
            v_exist := 'Y';

            IF p_dist_no = dist_max
            THEN
               c3.itmperil_tsi :=
                  NVL
                     (c3.itmperil_tsi, 0) /*beth- (ROUND((NVL(c3.itmperil_tsi,0)/dist_cnt),2) * (dist_cnt - 1))*/;
               c3.itmperil_premium :=
                    NVL (c3.itmperil_premium, 0)
                  - (  ROUND ((NVL (c3.itmperil_premium, 0) / dist_cnt), 2)
                     * (dist_cnt - 1)
                    );
               c3.itmperil_ann_tsi :=
                  NVL
                     (c3.itmperil_ann_tsi, 0) /*beth- (ROUND((NVL(c3.itmperil_ann_tsi,0)/dist_cnt),2) * (dist_cnt - 1))*/;
            ELSE
               c3.itmperil_tsi := c3.itmperil_tsi /*beth/ dist_cnt*/;
               c3.itmperil_premium := c3.itmperil_premium / dist_cnt;
               c3.itmperil_ann_tsi := c3.itmperil_ann_tsi /*beth/ dist_cnt*/;
            END IF;

            INSERT INTO giuw_witemperilds
                        (dist_no, dist_seq_no, item_no, peril_cd,
                         line_cd, tsi_amt, prem_amt,
                         ann_tsi_amt
                        )
                 VALUES (p_dist_no, p_dist_seq_no, c3.item_no, c3.peril_cd,
                         p_line_cd, c3.itmperil_tsi, c3.itmperil_premium,
                         c3.itmperil_ann_tsi
                        );

            giuw_pol_dist_pkg.create_peril_dflt_witmperilds2
                                                         (p_dist_no,
                                                          p_dist_seq_no,
                                                          c3.item_no,
                                                          p_line_cd,
                                                          c3.peril_cd,
                                                          c3.itmperil_tsi,
                                                          c3.itmperil_premium,
                                                          c3.itmperil_ann_tsi,
                                                          p_default_no,
                                                          p_par_id,
                                                          p_pol_flag,
                                                          p_par_type
                                                         );
         END LOOP;
      END IF;

      
      
      giuw_pol_dist_pkg.update_dtls_no_share_cd (p_dist_no,
                                                 p_dist_seq_no,
                                                 'ITEMPERIL',
                                                 p_line_cd
                                                );                                                
                                                
      giuw_pol_dist_pkg.update_witemds (p_dist_no, p_dist_seq_no);   
      
      --apollo cruz 6.23.2014- to correct the value of the paramters used in create_peril_dflt_wpolicyds2
      FOR a IN (SELECT dist_seq_no, tsi_amt, prem_amt, ann_tsi_amt,
                       item_grp
                  FROM giuw_wpolicyds
                 WHERE dist_no = p_dist_no
                   AND dist_seq_no = p_dist_seq_no)
      LOOP
         giuw_pol_dist_pkg.create_peril_dflt_wpolicyds2 (p_dist_no,
                                                         p_dist_seq_no,
                                                         p_line_cd,
                                                         a.tsi_amt,
                                                         a.prem_amt,
                                                         a.ann_tsi_amt,
                                                         p_par_id,
                                                         p_item_grp,
                                                         p_pol_flag,
                                                         p_par_type
                                                         );
      END LOOP;                                                     
                                                     
      giuw_pol_dist_pkg.update_dtls_no_share_cd (p_dist_no,
                                                 p_dist_seq_no,
                                                 'POLICY',
                                                 p_line_cd
                                                );

      IF p_pol_flag = '2' OR p_par_type = 'E'
      THEN
         giuw_pol_dist_pkg.inherit_dist_pct (p_dist_no, p_par_type, p_par_id);
      END IF;
   END;

   /*
   **  Created by        : Jerome Orio
   **  Date Created     : 06.09.2011
   **  Reference By     : (GIUWS006- Preliminary  Peril Distribution by TSI/Prem)
   **  Description     :  CREATE_PAR_DISTRIBUTION_RECS program unit
   */
   PROCEDURE create_par_distribution_recs4 (
      p_dist_no         IN   giuw_pol_dist.dist_no%TYPE,
      p_par_id          IN   gipi_parlist.par_id%TYPE,
      p_line_cd         IN   gipi_parlist.line_cd%TYPE,
      p_subline_cd      IN   gipi_wpolbas.subline_cd%TYPE,
      p_iss_cd          IN   gipi_wpolbas.iss_cd%TYPE,
      p_pack_pol_flag   IN   gipi_wpolbas.pack_pol_flag%TYPE,
      p_pol_flag        IN   gipi_wpolbas.pol_flag%TYPE,
      p_par_type        IN   gipi_parlist.par_type%TYPE,
      p_item_grp        IN   giuw_wpolicyds.item_grp%TYPE
   )
   IS
      v_line_cd               gipi_parlist.line_cd%TYPE;
      v_subline_cd            gipi_wpolbas.subline_cd%TYPE;
      v_dist_seq_no           giuw_wpolicyds.dist_seq_no%TYPE          := 0;
      --rg_id                            RECORDGROUP;
      rg_name                 VARCHAR2 (20)             := 'DFLT_DIST_VALUES';
      rg_count                NUMBER;
      v_exist                 VARCHAR2 (1);
      v_errors                NUMBER;
      v_default_no            giis_default_dist.default_no%TYPE;
      v_default_type          giis_default_dist.default_type%TYPE;
      v_dist_type             giis_default_dist.dist_type%TYPE;
      v_dflt_netret_pct       giis_default_dist.dflt_netret_pct%TYPE;
      v_wpolicyds_dist_flag   giuw_wpolicyds.dist_flag%TYPE;
      v_post_flag             VARCHAR2 (1)                             := 'O';
      v_package_policy_sw     VARCHAR2 (1)                             := 'Y';
      v_dist_exist            VARCHAR2 (1)                             := 'N';
      v_dist_exists           VARCHAR2 (1)                             := 'N';
   BEGIN
      --raise_application_error(-20001, 'Geniisys Exception#E#pol test');
      FOR a IN (SELECT 1
                  FROM giuw_wpolicyds
                 WHERE dist_no = p_dist_no)
      LOOP
         v_dist_exists := 'Y';
         EXIT;
      END LOOP;

      IF NVL (v_dist_exists, 'N') = 'N'
      THEN
         --msg_alert('ROLLIE','I',FALSE);
         /* Get the unique ITEM_GRP to produce a unique DIST_SEQ_NO for each. */
         FOR c1 IN (SELECT   NVL (item_grp, 1) item_grp,
                             pack_line_cd pack_line_cd,
                             pack_subline_cd pack_subline_cd,
                             currency_rt currency_rt,
                             SUM (tsi_amt) policy_tsi,
                             SUM (prem_amt) policy_premium,
                             SUM (ann_tsi_amt) policy_ann_tsi
                        FROM gipi_witem a
                       WHERE EXISTS (
                                SELECT 1
                                  FROM gipi_witmperl
                                 WHERE par_id = a.par_id
                                   AND item_no = a.item_no)
                         --(prem_amt != 0 -- gracey 01.20.05 causes no data to be retieved if
                         --OR  tsi_amt  != 0)-- endt is an increase or decrease in TSI amt of allied perils
                         AND item_grp = NVL (p_item_grp, item_grp)
                         --added by glyza 04.16.08
                         AND par_id = p_par_id
                    GROUP BY item_grp,
                             pack_line_cd,
                             pack_subline_cd,
                             currency_rt)
         LOOP
            /* If the PAR processed is a package policy
            ** then get the true LINE_CD and true SUBLINE_CD,
            ** that is, the PACK_LINE_CD and PACK_SUBLINE_CD
            ** from the GIPI_WITEM table.
            ** This will be used upon inserting to certain
            ** distribution tables requiring a value for
            ** the similar field. */
            IF p_pack_pol_flag = 'N'
            THEN
               v_line_cd := p_line_cd;
               v_subline_cd := p_subline_cd;
            ELSE
               v_line_cd := c1.pack_line_cd;
               v_subline_cd := c1.pack_subline_cd;
               v_package_policy_sw := 'Y';
            END IF;


            IF v_package_policy_sw = 'Y'
            THEN
               FOR c2 IN (SELECT default_no, default_type, dist_type,
                                 dflt_netret_pct
                            FROM giis_default_dist
                           WHERE iss_cd = p_iss_cd
                             AND subline_cd = v_subline_cd
                             AND line_cd = v_line_cd
                             AND dist_type = '2' /* By peril -- jhing 12.12.2014 */)
               LOOP
                  v_default_no := c2.default_no;
                  v_default_type := c2.default_type;
                  v_dist_type := c2.dist_type;
                  v_dflt_netret_pct := c2.dflt_netret_pct;
                  EXIT;
               END LOOP;

               v_package_policy_sw := 'N';
            ELSE
               --apollo cruz - 6.24.2014 - to fetch value for the parameters that will be used in populating default perils
               FOR c2 IN (SELECT default_no, default_type, dist_type,
                                 dflt_netret_pct
                            FROM giis_default_dist
                           WHERE iss_cd = p_iss_cd
                             AND subline_cd = p_subline_cd
                             AND line_cd = p_line_cd
                             AND dist_type = '2' /* By peril -- jhing 12.12.2014  */)
               LOOP
                  v_default_no := c2.default_no;
                  v_default_type := c2.default_type;
                  v_dist_type := c2.dist_type;
                  v_dflt_netret_pct := c2.dflt_netret_pct;
                  EXIT;
               END LOOP;   
            END IF;

            /* Generate a new DIST_SEQ_NO for the new item group. */
            v_dist_seq_no := v_dist_seq_no + 1;
            v_post_flag := 'P';
            --msg_alert('CREATE_PERIL_DFLT_DIST '||'-'||p_dist_no||'-'||v_dist_seq_no||'-'||'2'||'-'||c1.policy_tsi||'-'||c1.policy_premium||'-'||c1.policy_ann_tsi||'-'||c1.item_grp||'-'||v_line_cd||'-'||v_default_no||'-'||v_default_type||'-'||v_dflt_netret_pct||'-'||c1.currency_rt||'-'||p_par_id,'I',FALSE);
            
            
            
            giuw_pol_dist_pkg.create_peril_dflt_dist3 (p_dist_no,
                                                       v_dist_seq_no,
                                                       '2',
                                                       c1.policy_tsi,
                                                       c1.policy_premium,
                                                       c1.policy_ann_tsi,
                                                       c1.item_grp,
                                                       v_line_cd,
                                                       v_default_no,
                                                       v_default_type,
                                                       v_dflt_netret_pct,
                                                       c1.currency_rt,
                                                       p_par_id,
                                                       p_item_grp,
                                                       v_dist_exists,
                                                       p_pol_flag,
                                                       p_par_type
                                                      );
         END LOOP;
         
         recompute_dist_peril_pkg.RECOMPUTE_DTL_TABLES(p_dist_no); --shan 07.24.2014   
      ELSE
         FOR a IN (SELECT dist_seq_no, tsi_amt, prem_amt, ann_tsi_amt,
                          item_grp
                     FROM giuw_wpolicyds
                    WHERE dist_no = p_dist_no
                      AND item_grp = NVL (p_item_grp, item_grp))
         -- added by glyza 04.16.08
         LOOP
            v_post_flag := 'P';

            --apollo cruz - 6.24.2014 - to fetch value for the parameters that will be used in populating default perils
            FOR c2 IN (SELECT default_no, default_type, dist_type,
                              dflt_netret_pct
                         FROM giis_default_dist
                        WHERE iss_cd = p_iss_cd
                          AND subline_cd = p_subline_cd
                          AND line_cd = p_line_cd
                          AND dist_type = '2' /* By peril -- jhing 12.12.2014 */)
            LOOP
               v_default_no := c2.default_no;
               v_default_type := c2.default_type;
               v_dist_type := c2.dist_type;
               v_dflt_netret_pct := c2.dflt_netret_pct;
               EXIT;
            END LOOP;
            
            --msg_alert('CREATE_PERIL_DFLT_DIST '||'-'||p_dist_no||'-'||v_dist_seq_no||'-'||'2'||'-'||c1.policy_tsi||'-'||c1.policy_premium||'-'||c1.policy_ann_tsi||'-'||c1.item_grp||'-'||v_line_cd||'-'||v_default_no||'-'||v_default_type||'-'||v_dflt_netret_pct||'-'||c1.currency_rt||'-'||p_par_id,'I',FALSE);
            giuw_pol_dist_pkg.create_peril_dflt_dist3 (p_dist_no,
                                                       a.dist_seq_no,
                                                       '2',
                                                       a.tsi_amt,
                                                       a.prem_amt,
                                                       a.ann_tsi_amt,
                                                       a.item_grp,
                                                       p_line_cd,
                                                       v_default_no,
                                                       v_default_type,
                                                       v_dflt_netret_pct,
                                                       1,
                                                       p_par_id,
                                                       p_item_grp,
                                                       v_dist_exists,
                                                       p_pol_flag,
                                                       p_par_type
                                                      );
            recompute_dist_peril_pkg.RECOMPUTE_DTL_TABLES(p_dist_no); --shan 07.24.2014
         END LOOP;
      END IF;
      
      /* Adjust computational floats to equalize the amounts
      ** attained by the master tables with that of its detail
      ** tables.
      ** Tables involved:  GIUW_WPOLICYDS    - GIUW_WPOLICYDS_DTL
      **                   GIUW_WITEMDS      - GIUW_WITEMDS_DTL
      **                   GIUW_WITEMPERILDS - GIUW_WITEMPERILDS_DTL */
      IF p_par_type = 'P' AND p_pol_flag != '2'
      THEN
         --msg_alert('adjust','I',FALSE);
         giuw_pol_dist_pkg.adjust_net_ret_imperfection3 (p_dist_no);
         /* Equalize the amounts of tables GIUW_WPERILDS
         ** and GIUW_WPERILDS_DTL. */
         --giuw_pol_dist_pkg.adjust_peril_level_amts2 (p_dist_no); --commented out by shan 06.09.2014
      /* Create records in RI tables if a facultative
      ** share exists in any of the DIST_SEQ_NO in table
      ** GIUW_WPOLICYDS_DTL. */
      ELSE
         NULL;                                      --ADJUST_AMTS(p_dist_no);
      END IF;

      /*giuw_pol_dist_pkg.create_ri_records2 (p_dist_no,
                                            p_par_id,
                                            p_line_cd,
                                            p_subline_cd
                                           ); */ -- jhing commented out 12.19.2014 

      /* Set the value of the DIST_FLAG back
      ** to Undistributed after recreation. */
      UPDATE giuw_pol_dist
         SET dist_flag = '1',
             post_flag = v_post_flag
       WHERE par_id = p_par_id AND dist_no = p_dist_no;
   --ADJUST_DTL_AMTS;
   END;

   /*
   **  Created by        : Jerome Orio
   **  Date Created     : 06.09.2011
   **  Reference By     : (GIUWS006- Preliminary  Peril Distribution by TSI/Prem)
   **  Description     :  post button trigger
   */
   PROCEDURE post_dist_giuws006 (
      p_par_id              IN       gipi_wpolbas.par_id%TYPE,
      p_dist_no             IN       giuw_pol_dist.dist_no%TYPE,
      p_dist_seq_no         IN       giuw_wpolicyds.dist_seq_no%TYPE,
      p_module              IN       VARCHAR2,
      p_user_id             IN       giis_users.user_id%TYPE,
      p_current_form_name   IN       VARCHAR2,
      p_net_msg             OUT      VARCHAR2,
      p_treaty_msg          OUT      VARCHAR2,
      p_override_msg        OUT      VARCHAR2,
      p_net_override        OUT      VARCHAR2,
      p_treaty_override     OUT      VARCHAR2,
      p_msg_alert           OUT      VARCHAR2,
      p_dist_flag           OUT      VARCHAR2,
      p_mean_dist_flag      OUT      VARCHAR2,
      p_workflow_msgr       OUT      VARCHAR2,
      p_param_function      OUT      VARCHAR2
   )
   IS
        v_menu_line                  giis_line.line_cd%type;--Melvin John O. Ostia 05212014
        v_loc_block                  VARCHAR2(50);--Melvin John O Ostia 05212014   
        v_counteralert                  VARCHAR2(1) := 'N'; 
   BEGIN
      /* Post records retrieved from the working tables to their
      ** corresponding master tables.
      ** IMPORTANT:  This button can only be pressed upon complete distribution
      **             of a specified DIST_NO, that is, GIUW_WPOLICYDS.DIST_FLAG = '2'.
      **             AND if the said distribution involves one or more reinsurers,
      **             that is, if a facultative share, relative to the DIST_NO being
      **             processed, was found to be existing in any of the records in
      **             tables GIUW_WPOLICYDS_DTL, GIUW_WITEMDS_DTL, GIUW_WPERILDS_DTL
      **             and GIUW_WITEMPERILDS_DTL.
      ** NOTE:  For more info on VARIABLES.POST_SW, see package spec VARIABLES. */
      DECLARE
         v_message                VARCHAR2 (2000)
                                               := 'W   o   r   k   i   n   g';
         v_share                  VARCHAR2 (2000)                := 'N';
         --rose11112009
         --alert_id             alert;
         alert_button             NUMBER;
         p_type_exceed            VARCHAR2 (7);
         p_block                  VARCHAR2 (5000);
         v_param_value_v          VARCHAR2 (1);
         v_exist                  VARCHAR2 (1);
         v_share_type             VARCHAR2 (1);
         /*03312010 rose*/
         v_prev_type_exceed       VARCHAR2 (10);
         v_auto_dist              VARCHAR2 (1);
         v_menu_line              giis_line.line_cd%TYPE;
         var_v_prev_type_exceed   VARCHAR2 (5000);
         v_par_type               gipi_parlist.par_type%TYPE;
         v_nbt_eff_date           gipi_wpolbas.eff_date%TYPE;
         p_line_cd                gipi_wpolbas.line_cd%TYPE;
         v_nbt_subline_cd         gipi_wpolbas.subline_cd%TYPE;
         v_loc_count              NUMBER := 0;          -- shan 06.24.2014
      BEGIN
         BEGIN
            SELECT NVL (b.menu_line_cd, b.line_cd), par_type
              INTO v_menu_line, v_par_type
              FROM gipi_parlist a, giis_line b
             WHERE a.line_cd = b.line_cd AND a.par_id = p_par_id;
         END;

        IF v_menu_line ='FI' THEN   -- shan 06.10.2014
            V_LOC_BLOCK   := 'block';
        ELSIF v_menu_line = 'CA' THEN
            V_LOC_BLOCK   := 'location';
        END IF;
        
         FOR pol IN (SELECT eff_date, line_cd, subline_cd
                       FROM gipi_wpolbas
                      WHERE par_id = p_par_id)
         LOOP
            v_nbt_eff_date := pol.eff_date;
            p_line_cd := pol.line_cd;
            v_nbt_subline_cd := pol.subline_cd;
         END LOOP;

         --rose 11112009--
         FOR chk_type IN (SELECT   d.share_type,
                                   SUM (ROUND (dist_spct, 14)) dist_spct,
                                   a.eff_date
                              FROM giuw_pol_dist a,
                                   giuw_wpolicyds b,
                                   giuw_wpolicyds_dtl c,
                                   giis_dist_share d
                             WHERE a.dist_no = b.dist_no
                               AND a.dist_no = c.dist_no
                               AND b.dist_seq_no = c.dist_seq_no
                               AND c.line_cd = d.line_cd
                               AND c.share_cd = d.share_cd
                               AND a.par_id = p_par_id
                               AND a.dist_no = p_dist_no
                               AND b.dist_seq_no = p_dist_seq_no
                          --and c.share_cd != 999 --rose 11/11/2009 to avoid the double display of the alert if the sharing is facul and ret only commented out 06162010 for cases that facul is 100%
                          GROUP BY d.share_type, a.eff_date
                      order by d.share_type)  -- shan 06.10.2014
         LOOP
            v_share_type := chk_type.share_type;
            /*validate_block_limit.limit_validation (p_par_id,
                                                   p_line_cd,
                                                   p_block,
                                                   p_type_exceed,
                                                   v_share_type,
                                                   chk_type.eff_date,
                                                   chk_type.dist_spct
                                                  );*/ -- shan 06.10.2014
            IF v_menu_line = 'FI' THEN  -- shan 06.10.2014
                --validate_block_limit.limit_validation(p_par_id, p_line_cd,p_block, p_type_exceed, v_share_type,   -- replaced by codes below shan : 06.24.2014 
                giuw_pol_dist_pkg.limit_validation2(p_par_id, p_line_cd, p_block, p_type_exceed, v_share_type,
                                                    chk_type.eff_date, chk_type.dist_spct,
                                                    v_loc_count);   -- shan 06.24.2014
            ELSIF v_menu_line = 'CA' AND v_nbt_subline_cd = NVL(Giisp.v('CA_SUBLINE_PFL'),'PFL') THEN
                --ca_limit_validation(p_par_id, p_line_cd, p_block, p_type_exceed, v_share_type,        -- replaced by codes below shan : 06.24.2014 
                giuw_pol_dist_pkg.ca_limit_validation2(p_par_id, p_line_cd, p_block, p_type_exceed, v_share_type, 
                                  chk_type.eff_date, chk_type.dist_spct,
                                  v_loc_count);                     -- shan 06.24.2014  
            END IF  ;                                                                  
            
            IF p_type_exceed = 'NET'
            THEN
               --function--check parameter in giis_parameter
               v_param_value_v :=
                  validate_block_limit.check_override_function ('PARAMETER',
                                                                p_module,
                                                                'RO',
                                                                p_user_id
                                                               );
            ELSIF p_type_exceed = 'TREATY'
            THEN
               v_param_value_v :=
                  validate_block_limit.check_override_function ('PARAMETER',
                                                                p_module,
                                                                'TO',
                                                                p_user_id
                                                               );
            END IF;

            /*added by rose 02182010 para twice lalabas ung override canvas pag both treaty and ret ang lumagpas sa limit*/
            IF    (p_type_exceed = 'NET' )   -- (p_type_exceed = 'NET' AND v_prev_type_exceed IS NULL) REMOVED- IRWIN
               OR (p_type_exceed = 'TREATY' ) --(p_type_exceed = 'TREATY' AND v_prev_type_exceed IS NULL)
               OR p_type_exceed IS NULL
            THEN
               IF p_type_exceed = 'NET'
               THEN
                  v_prev_type_exceed := 'RO';
                  var_v_prev_type_exceed := 'RO';
               END IF;

               IF p_type_exceed = 'NET'
               THEN
                  p_param_function := 'RO';
               ELSIF p_type_exceed = 'TREATY'
               THEN
                  p_param_function := 'TO';
               END IF;

               --function--check user still under the function check_override_function--
               v_exist :=
                  validate_block_limit.check_override_function
                                                            ('USER',
                                                             p_module,
                                                             p_param_function,
                                                             p_user_id
                                                            );

               IF v_exist = 'N'
               THEN
                  IF p_type_exceed = 'NET'
                  THEN
                     /*p_net_msg :=     -- replaced by codes below  :shan 06.24.2014
                           'Net retention limit for block '
                        || p_block
                        || ' has been exceeded.'
                        || ' Would you like to continue?';*/
                       IF v_loc_count > 1 THEN
                         p_net_msg :=
                            'Net retention limit for '
                            || p_block
                            || ' '
                            || v_loc_block
                            || 's has been exceeded.'
                            || ' Would you like to continue?';                     
                       ELSE
                         p_net_msg :=
                               'Net retention limit for '
                            || v_loc_block
                            || ' '
                            || p_block
                            || ' has been exceeded.'
                            || ' Would you like to continue?';                     
                       END IF;
                  ELSIF p_type_exceed = 'TREATY'
                  THEN
                     /*p_treaty_msg :=          -- replaced by codes below : shan 06.24.2014
                           'Treaty limit for block '
                        || p_block
                        || ' has been exceeded.'
                        || ' Would you like to continue?';*/
                       IF v_loc_count > 1 THEN
                         p_treaty_msg :=
                               'Treaty limit for '
                            || p_block
                            || ' '
                            || v_loc_block
                            || 's has been exceeded.'
                            || ' Would you like to continue?';                     
                       ELSE
                         p_treaty_msg :=
                               'Treaty limit for '
                            || v_loc_block
                            || ' '
                            || p_block
                            || ' has been exceeded.'
                            || ' Would you like to continue?';                     
                       END IF;
                  END IF;
               -----03192010 ROSE V EXIST Y
               ELSIF v_exist = 'Y'
               THEN
                  IF p_type_exceed = 'NET'
                  THEN
                     /*p_net_msg :=         -- replaced by codes below : shan 06.24.2014
                           'Net retention limit for block '
                        || p_block
                        || ' has been exceeded.'
                        || ' Would you like to continue?';*/
                        
                       IF v_loc_count > 1 THEN
                         p_net_msg :=
                            'Net retention limit for '
                            || p_block
                            || ' '
                            || v_loc_block
                            || 's has been exceeded.'
                            || ' Would you like to continue?';                     
                       ELSE
                         p_net_msg :=
                               'Net retention limit for '
                            || v_loc_block
                            || ' '
                            || p_block
                            || ' has been exceeded.'
                            || ' Would you like to continue?';                     
                       END IF;

                     FOR chk_type IN
                        (SELECT   d.share_type,
                                  SUM (ROUND (dist_spct, 14)) dist_spct,
                                  a.eff_date
                             FROM giuw_pol_dist a,
                                  giuw_wpolicyds b,
                                  giuw_wpolicyds_dtl c,
                                  giis_dist_share d
                            WHERE a.dist_no = b.dist_no
                              AND a.dist_no = c.dist_no
                              AND b.dist_seq_no = c.dist_seq_no
                              AND c.line_cd = d.line_cd
                              AND c.share_cd = d.share_cd
                              AND a.par_id = p_par_id
                              AND a.dist_no = p_dist_no
                              AND b.dist_seq_no = p_dist_seq_no
                              AND c.share_cd NOT IN (999, 1)
                         GROUP BY d.share_type, a.eff_date)
                     LOOP
                        v_share_type := chk_type.share_type;
                        /*validate_block_limit.limit_validation
                                                          (p_par_id,
                                                           p_line_cd,
                                                           p_block,
                                                           p_type_exceed,
                                                           v_share_type,
                                                           chk_type.eff_date,
                                                           chk_type.dist_spct
                                                          );*/ --shan 06.10.2014
                        IF v_menu_line = 'FI' THEN  -- shan 06.10.2014
                            --validate_block_limit.limit_validation(p_par_id, p_line_cd,p_block, p_type_exceed, v_share_type,   -- replaced by code below : shan 06.24.2014
                              giuw_pol_dist_pkg.limit_validation2(p_par_id, p_line_cd,p_block, p_type_exceed, v_share_type, 
                                                                  chk_type.eff_date, chk_type.dist_spct,
                                                                  v_loc_count); -- shan 06.24.2014   
                        ELSIF v_menu_line = 'CA' AND v_nbt_subline_cd = NVL(Giisp.v('CA_SUBLINE_PFL'),'PFL') THEN
                            --ca_limit_validation(p_par_id, p_line_cd, p_block, p_type_exceed, v_share_type,       -- replaced by code below : shan 06.24.2014
                            giuw_pol_dist_pkg.ca_limit_validation2(p_par_id, p_line_cd,p_block, p_type_exceed, v_share_type, 
                                                chk_type.eff_date, chk_type.dist_spct,
                                                v_loc_count);   -- shan 06.24.2014                                         
                        END IF  ;
                     END LOOP;
                  END IF;

                  IF p_type_exceed = 'TREATY'
                  THEN
                     /*p_treaty_msg :=      -- replaced by codes below : shan 06.24.2014
                           'Treaty limit for block '
                        || p_block
                        || ' has been exceeded.'
                        || ' Would you like to continue';*/
                        
                     IF v_loc_count > 1 THEN
                         p_treaty_msg :=
                               'Treaty limit for '
                            || p_block
                            || ' '
                            || v_loc_block
                            || 's has been exceeded.'
                            || ' Would you like to continue?';                     
                     ELSE
                         p_treaty_msg :=
                               'Treaty limit for '
                            || v_loc_block
                            || ' '
                            || p_block
                            || ' has been exceeded.'
                            || ' Would you like to continue?';                     
                     END IF; 
                v_counteralert := 'Y'; --Melvin John O. Ostia 05212014
                  END IF;
               -----
               END IF;

               IF alert_button = 0
               THEN
                  NULL;
               ELSE
                  IF v_param_value_v = 'Y' AND p_type_exceed IS NOT NULL
                  THEN
                     --IF v_exist = 'N' -- replaced by code below : shan 06.10.2014
                     IF ( 'N' = validate_block_limit.check_override_function('USER', 'GIUWS006', 'TO', p_user_id) AND
                               'TREATY' = p_type_exceed) OR
                            ( 'N' = validate_block_limit.check_override_function('USER', 'GIUWS006', 'RO', p_user_id) AND
                                'NET' = p_type_exceed) 
                     THEN
                        p_override_msg :=
                              'User has no authority to process distribution limit. '
                           || 'Please ask for override or Reassign the PAR to another user.';

                        IF alert_button = 0
                        THEN
                           NULL;
                        ELSE
                           --call override canvas--
                           IF p_type_exceed = 'NET'
                           THEN
                              p_net_override := 'Net Retention Override';
                           ELSIF p_type_exceed = 'TREATY'
                           THEN
                              p_treaty_override :=
                                                  'Treaty Retention Override';
                           END IF;
                        END IF;
                     END IF;
                  ELSIF v_param_value_v = 'N' AND v_prev_type_exceed = 'RO'
                  THEN
                     FOR chk_type IN
                        (SELECT   d.share_type,
                                  SUM (ROUND (dist_spct, 14)) dist_spct,
                                  a.eff_date
                             FROM giuw_pol_dist a,
                                  giuw_wpolicyds b,
                                  giuw_wpolicyds_dtl c,
                                  giis_dist_share d
                            WHERE a.dist_no = b.dist_no
                              AND a.dist_no = c.dist_no
                              AND b.dist_seq_no = c.dist_seq_no
                              AND c.line_cd = d.line_cd
                              AND c.share_cd = d.share_cd
                              AND a.par_id = p_par_id
                              AND a.dist_no = p_dist_no
                              AND b.dist_seq_no = p_dist_seq_no
                              AND c.share_cd NOT IN (999, 1)
                         GROUP BY d.share_type, a.eff_date)
                     LOOP
                        v_share_type := chk_type.share_type;
                        /*validate_block_limit.limit_validation
                                                          (p_par_id,
                                                           p_line_cd,
                                                           p_block,
                                                           p_type_exceed,
                                                           v_share_type,
                                                           chk_type.eff_date,
                                                           chk_type.dist_spct
                                                          );*/--shan 06.10.2014
                        IF v_menu_line = 'FI' THEN  -- shan 06.10.2014
                            --validate_block_limit.limit_validation(p_par_id, p_line_cd,p_block, p_type_exceed, v_share_type,   -- replaced by code below : shan 06.24.2014
                            giuw_pol_dist_pkg.limit_validation2(p_par_id, p_line_cd,p_block, p_type_exceed, v_share_type, 
                                                                  chk_type.eff_date, chk_type.dist_spct,
                                                                  v_loc_count);         -- shan 06.24.2014   
                        ELSIF v_menu_line = 'CA' AND v_nbt_subline_cd = NVL(Giisp.v('CA_SUBLINE_PFL'),'PFL') THEN
                            --ca_limit_validation(p_par_id, p_line_cd, p_block, p_type_exceed, v_share_type,    -- replaced by code below : shan 06.24.2014
                            giuw_pol_dist_pkg.ca_limit_validation2(p_par_id, p_line_cd,p_block, p_type_exceed, v_share_type, 
                                                chk_type.eff_date, chk_type.dist_spct,
                                                                  v_loc_count);         -- shan 06.24.2014                                         
                        END IF ;
                     END LOOP;

                    IF v_counteralert <> 'Y' THEN   -- shan 06.10.2014
                         IF p_type_exceed = 'TREATY'
                         THEN
                            /*p_treaty_msg :=       -- replaced by codes below : shan 06.24.2014
                                  'Treaty limit for block '
                               || p_block
                               || ' has been exceeded.'
                               || ' Would you like to continue?';*/
                              IF v_loc_count > 1 THEN
                                 p_treaty_msg :=
                                       'Treaty limit for '
                                    || p_block
                                    || ' '
                                    || v_loc_block
                                    || 's has been exceeded.'
                                    || ' Would you like to continue?';                     
                              ELSE
                                 p_treaty_msg :=
                                       'Treaty limit for '
                                    || v_loc_block
                                    || ' '
                                    || p_block
                                    || ' has been exceeded.'
                                    || ' Would you like to continue?';                     
                              END IF; 
                         END IF;
                    END IF;
                  END IF;

                 /* commented out codes below and transfered to post_dist_giuws003_final to separate validation and posting : shan 06.13.2014 */
                 /*--end of rose 08062009--
                  IF    (v_param_value_v = 'N' AND v_exist IN ('Y', 'N'))
                     OR (    v_param_value_v = 'Y'
                         AND (   p_line_cd NOT IN ('FI')
                              OR (    p_type_exceed IS NULL
                                  AND v_prev_type_exceed IS NULL
                                 )
                              OR v_exist = 'Y'
                             )
                        )
                     OR (    p_type_exceed IS NULL
                         AND v_prev_type_exceed IS NULL
                         AND p_param_function IS NULL
                        )
                     OR (    p_type_exceed IS NOT NULL
                         AND v_exist = 'Y'
                         AND v_prev_type_exceed IS NOT NULL
                        )
                  THEN
                     /* Remove existing records related to the
                     ** current DIST_NO from certain distribution
                     ** and RI master tables considering the fact
                     ** that the current changes made were not yet
                     ** posted to the master tables. * /
                     giuw_pol_dist_pkg.delete_dist_master_tables (p_dist_no);
                     /* Post records retrieved from GIUW_WPOLICYDS
                     ** and GIUW_WPOLICYDS_DTL to tables GIUW_POLICYDS
                     ** and GIUW_POLICYDS_DTL. * /
                     giuw_pol_dist_pkg.post_wpolicyds_dtl_giuws006 (p_dist_no,  -- changed from post_wpolicyds_dtl :  shan 06.10.2014
                                                           v_par_type,
                                                           v_nbt_eff_date,
                                                           p_msg_alert
                                                          );
                     /* Post records retrieved from GIUW_WITEMDS
                     ** and GIUW_WITEMDS_DTL to tables GIUW_ITEMDS
                     ** and GIUW_ITEMDS_DTL. * /
                     giuw_pol_dist_pkg.post_witemds_dtl_giuws006 (p_dist_no);   -- changed from post_witemds_dtl :  shan 06.10.2014
                     /* Post records retrieved from GIUW_WITEMPERILDS and
                     ** GIUW_WITEMPERILDS_DTL to tables GIUW_ITEMPERILDS
                     ** and GIUW_ITEMPERILDS_DTL. * /
                     giuw_pol_dist_pkg.post_witemperilds_dtl_giuws006 (p_dist_no);       -- changed from post_witemperilds_dtl :  shan 06.10.2014
                     /* Post records retrieved from GIUW_WPERILDS
                     ** and GIUW_WPERILDS_DTL to tables GIUW_PERILDS
                     ** and GIUW_PERILDS_DTL. * /
                     giuw_pol_dist_pkg.post_wperilds_dtl (p_dist_no);

                      /* Since records in the working tables have
                      ** already been copied to the master tables,
                      ** the DIST_FLAG of table GIUW_POL_DIST
                      ** must then be updated to '2'(With Facultative),
                      ** meaning that the distribution record has already
                      ** been posted but the data in the working tables
                      ** have not yet been deleted because a final posting
                      ** by the RI department is still required. */
                     /*added the if condition para inde paulit ulit ang
                            pagtawag sa check auto dist para inde magulo ang
                            update ng autodist 03012010* /
                     IF    (    var_v_prev_type_exceed IS NOT NULL
                            AND v_param_value_v = 'Y'
                           )
                        OR (    v_prev_type_exceed IS NOT NULL
                            AND v_param_value_v = 'Y'
                           )
                        OR (p_type_exceed IS NOT NULL
                            AND v_param_value_v = 'Y'
                           )
                        OR (    p_param_function IS NOT NULL
                            AND v_param_value_v = 'Y'
                           )
                     THEN
                        --check_auto_dist1;
                        NULL;
                     END IF;

                     FOR v IN (SELECT share_type
                                 FROM giis_dist_share
                                WHERE line_cd = p_line_cd
                                  AND share_type = 3
                                  AND share_cd IN (
                                         SELECT share_cd
                                           FROM giuw_wperilds_dtl
                                          WHERE dist_no = p_dist_no
                                            AND line_cd = p_line_cd))
                     LOOP
                        IF v.share_type = '3'
                        THEN
                           v_share := 'Y';
                        END IF;
                     END LOOP;

                     IF v_share = 'Y'
                     THEN
                        UPDATE giuw_pol_dist
                           SET dist_flag = '2',
                               post_flag = 'P',
                               auto_dist = 'N',
                               special_dist_sw = 'N'
                         --auto_dist = 'N'
                        WHERE  par_id = p_par_id AND dist_no = p_dist_no;

                        p_dist_flag := '2';
                        p_mean_dist_flag := 'With Facultative';

                                  /* A.R.C. 08.13.2004
                        ** to create workflow records of Facultative Placement * /
                        FOR c1 IN (SELECT b.userid, d.event_desc
                                     FROM giis_events_column c,
                                          giis_event_mod_users b,
                                          giis_event_modules a,
                                          giis_events d
                                    WHERE 1 = 1
                                      AND c.event_cd = a.event_cd
                                      AND c.event_mod_cd = a.event_mod_cd
                                      AND b.event_mod_cd = a.event_mod_cd
                                      --AND b.userid <> USER  --A.R.C. 01.23.2006
                                      AND b.passing_userid = USER
                                      --A.R.C. 01.23.2006
                                      AND a.module_id = 'GIUWS003'
                                      AND a.event_cd = d.event_cd
                                      AND UPPER (d.event_desc) =
                                                       'FACULTATIVE PLACEMENT')
                        LOOP
                           create_transfer_workflow_rec
                                                    (c1.event_desc,
                                                     p_current_form_name,
                                                     --GET_APPLICATION_PROPERTY (current_form_name),
                                                     c1.userid,
                                                     p_par_id,
                                                        c1.event_desc
                                                     || ' '
                                                     || get_policy_no
                                                                     (p_par_id),
                                                     p_msg_alert,
                                                     p_workflow_msgr,
                                                     p_user_id
                                                    );
                        END LOOP;
                     ELSE
                        UPDATE giuw_pol_dist
                           SET dist_flag = '1',
                               post_flag = 'P',
                               auto_dist = 'Y',
                               special_dist_sw = 'N'
                         --auto_dist = 'N'
                        WHERE  par_id = p_par_id AND dist_no = p_dist_no;

                        p_dist_flag := '1';
                        p_mean_dist_flag := 'Undistributed';
                        --A.R.C. 02.07.2007
                             --added to delete the workflow facultative placement of GIUWS003 if not facul
                        delete_workflow_rec ('Facultative Placement',
                                             'GIUWS003',
                                             USER,
                                             p_par_id
                                            );
                     END IF;
                                 /*v_message := v_message || '   >';
                                 synchronize_message (v_message);
                                 FORMS_DDL ('COMMIT');
                                 MESSAGE ('Post Distribution Complete.');*/
                                 /* Closes the warning canvas and
                                 ** sets the cursor style to default. * /
                                 --cursor_normal;
                  --END;
                  END IF;*/
               END IF;
            ELSIF v_prev_type_exceed IS NOT NULL
            THEN
               /*variables.v_param_value := v_param_value_v;
               variables.v_block := p_block;
               variables.v_type_exceed := p_type_exceed;
               variables.v_share_type := v_share_type;
               variables.v_eff_date := chk_type.eff_date;
               variables.v_dist_spct := chk_type.dist_spct;*/
               NULL;
            END IF;
         --
         END LOOP;

         /*added by rose 03012010*/
         IF     var_v_prev_type_exceed IS NULL
            AND v_prev_type_exceed IS NULL
            AND p_type_exceed IS NULL
            AND p_param_function IS NULL
         THEN
            --check_auto_dist1;
            NULL;
         END IF;

         /*for param = N changing of button label*/
         IF    (var_v_prev_type_exceed IS NOT NULL AND v_param_value_v = 'N'
               )
            OR (v_prev_type_exceed IS NOT NULL AND v_param_value_v = 'N')
            OR (p_type_exceed IS NOT NULL AND v_param_value_v = 'N')
            OR (p_param_function IS NOT NULL AND v_param_value_v = 'N')
         THEN
            --check_auto_dist1;
            NULL;
         END IF;
      END;
   END;

   PROCEDURE create_grp_dflt_dist_giuws005 (
      p_dist_no          IN       giuw_wpolicyds.dist_no%TYPE,
      p_dist_seq_no      IN       giuw_wpolicyds.dist_seq_no%TYPE,
      p_dist_flag        IN       giuw_wpolicyds.dist_flag%TYPE,
      p_policy_tsi       IN       giuw_wpolicyds.tsi_amt%TYPE,
      p_policy_premium   IN       giuw_wpolicyds.prem_amt%TYPE,
      p_policy_ann_tsi   IN       giuw_wpolicyds.ann_tsi_amt%TYPE,
      p_item_grp         IN       giuw_wpolicyds.item_grp%TYPE,
      p_line_cd          IN       giis_line.line_cd%TYPE,
      p_rg_count         IN OUT   NUMBER,
      p_default_no       IN       giis_default_dist.default_no%TYPE,   -- shan 06.20.2014
      p_default_type     IN       giis_default_dist.default_type%TYPE,
      p_dflt_netret_pct IN        giis_default_dist.dflt_netret_pct%TYPE,  -- shan 06.20.2014
      p_currency_rt      IN       gipi_witem.currency_rt%TYPE,
      p_par_id           IN       gipi_parlist.par_id%TYPE,
      p_pol_flag         IN       gipi_wpolbas.pol_flag%TYPE,
      p_par_type         IN       gipi_parlist.par_type%TYPE,
      p_dist_exists      IN       VARCHAR2
   )
   IS
      v_peril_cd        giis_peril.peril_cd%TYPE;
      v_peril_tsi       giuw_wperilds.tsi_amt%TYPE       := 0;
      v_peril_premium   giuw_wperilds.prem_amt%TYPE      := 0;
      v_peril_ann_tsi   giuw_wperilds.ann_tsi_amt%TYPE   := 0;
      v_exist           VARCHAR2 (1)                     := 'N';
      v_insert_sw       VARCHAR2 (1)                     := 'N';
      dist_cnt          NUMBER                           := 0;
      dist_max          giuw_pol_dist.dist_no%TYPE;
      dist_item         giuw_pol_dist.item_grp%TYPE;
----------------------------
      v_prem_amt        gipi_witmperl.prem_amt%TYPE;
      v_tsi_amt         gipi_witmperl.tsi_amt%TYPE;
      --gipi_witmperl.prem_amt%type;--vj 080409
      v_ann_tsi_amt     gipi_witmperl.ann_tsi_amt%TYPE;
                               --gipi_witmperl.prem_amt%type;     --vj 080409
----------------------------
      v_item_grp        giuw_pol_dist.item_grp%TYPE;

      /* Updates the amounts of the previously processed PERIL_CD
      ** while looping inside cursor C3.  After which, the records
      ** for table GIUW_WPERILDS_DTL are also created.
      ** NOTE:  This is a LOCAL PROCEDURE BODY called below. */
      PROCEDURE upd_create_wperil_dtl_data
      IS
      BEGIN
         crt_grp_dflt_wperilds_giuws005 (p_dist_no,
                                         p_dist_seq_no,
                                         p_line_cd,
                                         v_peril_cd,
                                         v_peril_tsi,
                                         v_peril_premium,
                                         v_peril_ann_tsi,
                                         p_rg_count,
                                          p_default_no,     -- shan 06.20.2014
                                          p_default_type,   -- shan 06.20.2014
                                          p_dflt_netret_pct, -- shan 06.20.2014
                                          p_item_grp, -- shan 06.20.2014
                                          p_currency_rt, -- shan 06.20.2014
                                         p_pol_flag,
                                         p_par_id,
                                         p_par_type
                                        );
      END;
   BEGIN
      FOR a IN (SELECT item_grp
                  FROM giuw_pol_dist
                 WHERE dist_no = p_dist_no)
      LOOP
         v_item_grp := a.item_grp;
         EXIT;
      END LOOP;

      SELECT COUNT (dist_no), MAX (dist_no)
        INTO dist_cnt, dist_max
        FROM giuw_pol_dist
       WHERE par_id = p_par_id AND item_grp = NVL (v_item_grp, item_grp);

      /*added by glyza 03.18.08 to handle error divisor equal to zero*/
      IF dist_cnt = 0 AND dist_max IS NULL
      THEN
         BEGIN
            SELECT COUNT (dist_no), MAX (dist_no)
              INTO dist_cnt, dist_max
              FROM giuw_pol_dist
             WHERE par_id = p_par_id AND item_grp IS NULL;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               NULL;
         END;
      END IF;

/************************************/
/* Create records in table GIUW_WPOLICYDS and GIUW_WPOLICYDS_DTL
** for the specified DIST_SEQ_NO. */
      IF NVL (p_dist_exists, 'N') = 'N'
      THEN
         IF p_dist_no = dist_max
         THEN
            /* added by glyza 04.15.08 */
            FOR x IN
               (SELECT SUM
                          (NVL
                              (DECODE (c.peril_type, 'B', a.tsi_amt, 0), 0)
/*beth- (ROUND((NVL(DECODE(c.peril_type,'B',a.tsi_amt,0),0)/dist_cnt),2) * (dist_cnt - 1))*/
                          ) tsi_amt,
                       SUM (  NVL (a.prem_amt, 0)
                            - (  ROUND ((NVL (a.prem_amt, 0) / dist_cnt), 2)
                               * (dist_cnt - 1)
                              )
                           ) prem_amt,
                       SUM
                          (NVL
                              (DECODE (c.peril_type, 'B', a.ann_tsi_amt, 0),
                               0)
/*beth- (ROUND((NVL(DECODE(c.peril_type,'B',a.ann_tsi_amt,0),0)/dist_cnt),2) * (dist_cnt - 1))*/
                          ) ann_tsi_amt
                  FROM gipi_witmperl a, gipi_witem b, giis_peril c
                 WHERE a.par_id = b.par_id
                   AND a.item_no = b.item_no
                   AND a.par_id = p_par_id
                   AND b.item_grp = NVL (v_item_grp, p_item_grp)
                   AND a.peril_cd = c.peril_cd                --glyza 06.04.08
                   AND c.line_cd = p_line_cd)                 --glyza 06.04.08
            LOOP
               v_tsi_amt := x.tsi_amt;
               v_prem_amt := x.prem_amt;
               v_ann_tsi_amt := x.ann_tsi_amt;
            END LOOP;

/***********************************/
            INSERT INTO giuw_wpolicyds
                        (dist_no, dist_seq_no, dist_flag, tsi_amt,
                         prem_amt, ann_tsi_amt, item_grp
                        )
                 VALUES (p_dist_no, p_dist_seq_no, p_dist_flag, v_tsi_amt,
--NVL(p_policy_tsi,0) - (ROUND((NVL(p_policy_tsi,0)/dist_cnt),2) * (dist_cnt - 1)),
                         v_prem_amt,
--NVL(p_policy_premium,0) - (ROUND((NVL(p_policy_premium,0)/dist_cnt),2) * (dist_cnt - 1)),
                                    v_ann_tsi_amt,
--NVL(p_policy_ann_tsi,0) - (ROUND((NVL(p_policy_ann_tsi,0)/dist_cnt),2) * (dist_cnt - 1)),
                                                  p_item_grp
                        );
         ELSE
            /* added by glyza 04.15.08 */
            FOR x IN
               (SELECT SUM
                          (ROUND
                               ((NVL (DECODE (c.peril_type,
                                              'B', a.tsi_amt,
                                              0
                                             ),
                                      0
                                     )                       /*beth/dist_cnt*/
                                ),
                                2
                               )
                          ) tsi_amt,
                       SUM (ROUND ((NVL (a.prem_amt, 0) / dist_cnt), 2)
                           ) prem_amt,
                       SUM
                          (ROUND
                              ((NVL (DECODE (c.peril_type,
                                             'B', a.ann_tsi_amt,
                                             0
                                            ),
                                     0
                                    )                        /*beth/dist_cnt*/
                               ),
                               2
                              )
                          ) ann_tsi_amt
                  FROM gipi_witmperl a, gipi_witem b, giis_peril c
                 WHERE a.par_id = b.par_id
                   AND a.item_no = b.item_no
                   AND a.par_id = p_par_id
                   AND b.item_grp = NVL (v_item_grp, p_item_grp)
                   AND a.peril_cd = c.peril_cd              --glyza 06.04.2008
                   AND c.line_cd = p_line_cd)
            LOOP
               v_tsi_amt := x.tsi_amt;
               v_prem_amt := x.prem_amt;
               v_ann_tsi_amt := x.ann_tsi_amt;
            END LOOP;

/****************************/
            INSERT INTO giuw_wpolicyds
                        (dist_no, dist_seq_no, dist_flag, tsi_amt,
                         prem_amt, ann_tsi_amt, item_grp
                        )
                 VALUES (p_dist_no, p_dist_seq_no, p_dist_flag,
                                                               --p_policy_tsi/dist_cnt, p_policy_premium/dist_cnt, p_policy_ann_tsi/dist_cnt,
                                                               v_tsi_amt,
                         v_prem_amt, v_ann_tsi_amt, p_item_grp
                        );
         END IF;
      ELSE
         IF p_dist_no = dist_max
         THEN
            /* added by glyza 04.18.08 */
            FOR x IN
               (SELECT SUM
                          (NVL
                              (DECODE (c.peril_type, 'B', b490.tsi_amt, 0), 0)
/*beth- (ROUND((NVL(DECODE(c.peril_type,'B',b490.tsi_amt,0),0)/dist_cnt),2) * (dist_cnt - 1))*/
                          ) tsi_amt,
                       SUM (  NVL (b490.prem_amt, 0)
                            - (  ROUND ((NVL (b490.prem_amt, 0) / dist_cnt),
                                        2)
                               * (dist_cnt - 1)
                              )
                           ) prem_amt,
                       SUM
                          (NVL
                              (DECODE (c.peril_type,
                                       'B', b490.ann_tsi_amt,
                                       0
                                      ),
                               0
                              )
/*beth- (ROUND((NVL(DECODE(c.peril_type,'B',b490.ann_tsi_amt,0),0)/dist_cnt),2) * (dist_cnt - 1))*/
                          ) ann_tsi_amt
                  FROM gipi_witmperl b490, gipi_witem b480, giis_peril c
                 WHERE b490.item_no = b480.item_no
                   AND b490.par_id = b480.par_id
                   AND b480.item_grp = p_item_grp
                   AND b480.par_id = p_par_id
                   AND b490.peril_cd = c.peril_cd                        --gly
                   AND c.line_cd = p_line_cd                             --gly
                   AND EXISTS (
                          SELECT 1
                            FROM giuw_wpolicyds c
                           WHERE 1 = 1
                             AND c.dist_no = p_dist_no
                             AND c.dist_seq_no = p_dist_seq_no
                             AND c.item_grp = p_item_grp
                             AND c.item_grp = b480.item_grp)
                   AND EXISTS (
                          SELECT 1
                            FROM giuw_witemds c
                           WHERE 1 = 1
                             AND c.dist_no = p_dist_no
                             AND c.dist_seq_no = p_dist_seq_no
                             AND c.item_no = b480.item_no))
            LOOP
               v_tsi_amt := x.tsi_amt;
               v_prem_amt := x.prem_amt;
               v_ann_tsi_amt := x.ann_tsi_amt;

/***************************/
               UPDATE giuw_wpolicyds
                  SET tsi_amt = v_tsi_amt,
--NVL(p_policy_tsi,0),--NVL(p_policy_tsi,0) - (ROUND((NVL(p_policy_tsi,0)/dist_cnt),2) * (dist_cnt - 1)),
                      prem_amt = v_prem_amt,
--NVL(p_policy_premium,0),--NVL(p_policy_premium,0) - (ROUND((NVL(p_policy_premium,0)/dist_cnt),2) * (dist_cnt - 1)),
                      ann_tsi_amt = v_ann_tsi_amt
--NVL(p_policy_ann_tsi,0)--NVL(p_policy_ann_tsi,0) - (ROUND((NVL(p_policy_ann_tsi,0)/dist_cnt),2) * (dist_cnt - 1))
               WHERE  dist_no = p_dist_no AND dist_seq_no = p_dist_seq_no;
            END LOOP;
         ELSE
            /* added by glyza 04.15.08 */
            FOR x IN
               (SELECT SUM
                          (ROUND
                               ((NVL (DECODE (c.peril_type,
                                              'B', b490.tsi_amt,
                                              0
                                             ),
                                      0
                                     )                       /*beth/dist_cnt*/
                                ),
                                2
                               )
                          ) tsi_amt,
                       SUM (ROUND ((NVL (b490.prem_amt, 0) / dist_cnt), 2)
                           ) prem_amt,
                       SUM
                          (ROUND
                              ((NVL
                                   (DECODE (c.peril_type,
                                            'B', b490.ann_tsi_amt,
                                            0
                                           ),
                                    0
                                   )                         /*beth/dist_cnt*/
                               ),
                               2
                              )
                          ) ann_tsi_amt
                  FROM gipi_witmperl b490, gipi_witem b480, giis_peril c
                 WHERE b490.item_no = b480.item_no
                   AND b490.par_id = b480.par_id
                   AND b480.item_grp = p_item_grp
                   AND b480.par_id = p_par_id
                   AND b490.peril_cd = c.peril_cd                      --glyza
                   AND c.line_cd = p_line_cd                           --glyza
                   AND EXISTS (
                          SELECT 1
                            FROM giuw_wpolicyds c
                           WHERE 1 = 1
                             AND c.dist_no = p_dist_no
                             AND c.dist_seq_no = p_dist_seq_no
                             AND c.item_grp = p_item_grp
                             AND c.item_grp = b480.item_grp)
                   AND EXISTS (
                          SELECT 1
                            FROM giuw_witemds c
                           WHERE 1 = 1
                             AND c.dist_no = p_dist_no
                             AND c.dist_seq_no = p_dist_seq_no
                             AND c.item_no = b480.item_no))
            LOOP
               v_tsi_amt := x.tsi_amt;
               v_prem_amt := x.prem_amt;
               v_ann_tsi_amt := x.ann_tsi_amt;

/****************************/
               UPDATE giuw_wpolicyds
                  SET tsi_amt = v_tsi_amt,
                      --variables.v_tsi_amt,--p_policy_tsi,--p_policy_tsi / dist_cnt,
                      prem_amt = v_prem_amt,
                      --p_policy_premium,--p_policy_premium / dist_cnt,
                      ann_tsi_amt = v_ann_tsi_amt
                --p_policy_ann_tsi--p_policy_ann_tsi / dist_cnt
               WHERE  dist_no = p_dist_no AND dist_seq_no = p_dist_seq_no;
            END LOOP;
         END IF;
      END IF;

      /*CREATE_GRP_DFLT_WPOLICYDS
                    (p_dist_no    , p_dist_seq_no    , p_line_cd        ,
                     p_policy_tsi , p_policy_premium , p_policy_ann_tsi ,
                     p_rg_count   , p_default_type   , p_currency_rt    ,
                     p_par_id     , p_item_grp);*/    ---GRACE

      /* Get the amounts for each item in table GIPI_WITEM in preparation
      ** for data insertion to its corresponding distribution tables. */
      --msg_alert('itemds','I',FALSE);
      IF NVL (p_dist_exists, 'N') = 'N'
      THEN
         FOR c2 IN (SELECT a.item_no, a.tsi_amt, a.prem_amt, a.ann_tsi_amt
                      FROM gipi_witem a
                     WHERE EXISTS (
                              SELECT 1
                                FROM gipi_witmperl b
                               WHERE b.par_id = a.par_id
                                 AND b.item_no = a.item_no)
                       AND a.item_grp = p_item_grp
                       AND a.par_id = p_par_id)
         LOOP
            /* Create records in table GIUW_WITEMDS and GIUW_WITEMDS_DTL
            ** for the specified DIST_SEQ_NO. */
            IF p_dist_no = dist_max
            THEN
               /* added by glyza 04.15.08 */
               FOR xyz IN
                  (SELECT SUM
                             (NVL
                                 (DECODE (c.peril_type, 'B', tsi_amt, 0), 0)
/*beth- (ROUND((NVL(DECODE(c.peril_type,'B',tsi_amt,0),0)/dist_cnt),2) * (dist_cnt - 1))*/
                             ) tsi_amt,
                          SUM (  NVL (prem_amt, 0)
                               - (  ROUND ((NVL (prem_amt, 0) / dist_cnt), 2)
                                  * (dist_cnt - 1)
                                 )
                              ) prem_amt,
                          SUM
                             (NVL
                                 (DECODE (c.peril_type, 'B', ann_tsi_amt, 0),
                                  0
                                 )
/*beth- (ROUND((NVL(DECODE(c.peril_type,'B',ann_tsi_amt,0),0)/dist_cnt),2) * (dist_cnt - 1))*/
                             ) ann_tsi_amt
                     FROM gipi_witmperl a, giis_peril c
                    WHERE par_id = p_par_id
                      AND item_no = c2.item_no
                      AND a.peril_cd = c.peril_cd
                      AND c.line_cd = p_line_cd)
               LOOP
                  v_tsi_amt := xyz.tsi_amt;
                  v_prem_amt := xyz.prem_amt;
                  v_ann_tsi_amt := xyz.ann_tsi_amt;
               END LOOP;

/***********************************/
               INSERT INTO giuw_witemds
                           (dist_no, dist_seq_no, item_no, tsi_amt,
                            prem_amt, ann_tsi_amt
                           )
                    VALUES (p_dist_no, p_dist_seq_no, c2.item_no, v_tsi_amt,
--NVL(c2.tsi_amt,0) - (ROUND((NVL(c2.tsi_amt,0)/dist_cnt),2) * (dist_cnt - 1)),
                            v_prem_amt,
--NVL(c2.prem_amt,0) - (ROUND((NVL(c2.prem_amt,0)/dist_cnt),2) * (dist_cnt - 1)),
                                       v_ann_tsi_amt
                           );

--NVL(c2.ann_tsi_amt,0) - (ROUND((NVL(c2.ann_tsi_amt,0)/dist_cnt),2) * (dist_cnt - 1)));

              -- jhing 12.12.2014 commented out. Distribution in other dist tables will be created based on GIUW_WPOLICYDS_DTL 
              -- to prevent erroneous data on default dist especially when using default dist by amount 
             /*  crt_grp_dflt_witemds_giuws005 (p_dist_no,
                                              p_dist_seq_no,
                                              c2.item_no,
                                              p_line_cd,
                                              v_tsi_amt,
--NVL(c2.tsi_amt,0) - (ROUND((NVL(c2.tsi_amt,0)/dist_cnt),2) * (dist_cnt - 1)),
                                              v_prem_amt,
--NVL(c2.prem_amt,0) - (ROUND((NVL(c2.prem_amt,0)/dist_cnt),2) * (dist_cnt - 1)),
                                              v_ann_tsi_amt,
--NVL(c2.ann_tsi_amt,0) - (ROUND((NVL(c2.ann_tsi_amt,0)/dist_cnt),2) * (dist_cnt - 1)),
                                              p_rg_count,
                                              p_default_no,     -- shan 06.20.2014
                                              p_default_type,   -- shan 06.20.2014
                                              p_dflt_netret_pct, -- shan 06.20.2014
                                              p_item_grp, -- shan 06.20.2014
                                              p_currency_rt, -- shan 06.20.2014
                                              p_pol_flag,
                                              p_par_id,
                                              p_par_type
                                             );  */ 
            ELSE
               /* added by glyza 04.15.08 */
               FOR xyz IN
                  (SELECT SUM
                             (ROUND
                                 ((NVL
                                      (DECODE (c.peril_type, 'B', tsi_amt, 0),
                                       0
                                      )                      /*beth/dist_cnt*/
                                  ),
                                  2
                                 )
                             ) tsi_amt,
                          SUM (ROUND ((NVL (prem_amt, 0) / dist_cnt), 2)
                              ) prem_amt,
                          SUM
                             (ROUND
                                 ((NVL
                                      (DECODE (c.peril_type,
                                               'B', ann_tsi_amt,
                                               0
                                              ),
                                       0
                                      )                      /*beth/dist_cnt*/
                                  ),
                                  2
                                 )
                             ) ann_tsi_amt
                     FROM gipi_witmperl a, giis_peril c
                    WHERE par_id = p_par_id
                      AND item_no = c2.item_no
                      AND a.peril_cd = c.peril_cd
                      AND c.line_cd = p_line_cd)
               LOOP
                  v_tsi_amt := xyz.tsi_amt;
                  v_prem_amt := xyz.prem_amt;
                  v_ann_tsi_amt := xyz.ann_tsi_amt;
               END LOOP;

/****************************/
               INSERT INTO giuw_witemds
                           (dist_no, dist_seq_no, item_no, tsi_amt,
                            prem_amt, ann_tsi_amt
                           )
                    VALUES (p_dist_no, p_dist_seq_no, c2.item_no,
                                                                 --c2.tsi_amt / dist_cnt, c2.prem_amt / dist_cnt, c2.ann_tsi_amt / dist_cnt);
                                                                 v_tsi_amt,
                            v_prem_amt, v_ann_tsi_amt
                           );

              -- jhing 12.12.2014 commented out. Distribution in other dist tables will be created based on GIUW_WPOLICYDS_DTL 
              -- to prevent erroneous data on default dist especially when using default dist by amount 
              /* crt_grp_dflt_witemds_giuws005
                                   (p_dist_no,
                                    p_dist_seq_no,
                                    c2.item_no,
                                    p_line_cd,
                                    v_tsi_amt,
                                    v_prem_amt,
                                    --c2.tsi_amt / dist_cnt, c2.prem_amt / dist_cnt,
                                    v_ann_tsi_amt,
                                                  --c2.ann_tsi_amt / dist_cnt,
                                    p_rg_count,
                                    p_default_no,     -- shan 06.20.2014
                                    p_default_type,   -- shan 06.20.2014
                                    p_dflt_netret_pct, -- shan 06.20.2014
                                    p_item_grp, -- shan 06.20.2014
                                    p_currency_rt, -- shan 06.20.2014
                                    p_pol_flag,
                                    p_par_id,
                                    p_par_type
                                   );  */
            END IF;
         END LOOP;
      ELSE
         FOR c2 IN (SELECT a.item_no, b.tsi_amt, b.prem_amt, b.ann_tsi_amt
                      FROM giuw_witemds a, gipi_witem b
                     WHERE a.dist_no = p_dist_no
                       AND a.dist_seq_no = p_dist_seq_no
                       AND a.item_no = b.item_no
                       AND b.par_id = p_par_id
                       AND EXISTS (
                              SELECT 1
                                FROM gipi_witmperl c
                               WHERE b.par_id = c.par_id
                                 AND b.item_no = c.item_no))
         LOOP
            IF p_dist_no = dist_max
            THEN
               /* added by glyza 04.15.08 */
               FOR xyz IN
                  (SELECT SUM
                             (NVL
                                 (DECODE (c.peril_type, 'B', tsi_amt, 0), 0)
/*beth- (ROUND((NVL(DECODE(c.peril_type,'B',tsi_amt,0),0)/dist_cnt),2) * (dist_cnt - 1))*/
                             ) tsi_amt,
                          SUM (  NVL (prem_amt, 0)
                               - (  ROUND ((NVL (prem_amt, 0) / dist_cnt), 2)
                                  * (dist_cnt - 1)
                                 )
                              ) prem_amt,
                          SUM
                             (NVL
                                 (DECODE (c.peril_type, 'B', ann_tsi_amt, 0),
                                  0
                                 )
/*beth- (ROUND((NVL(DECODE(c.peril_type,'B',ann_tsi_amt,0),0)/dist_cnt),2) * (dist_cnt - 1))*/
                             ) ann_tsi_amt
                     FROM gipi_witmperl a, giis_peril c
                    WHERE par_id = p_par_id
                      AND item_no = c2.item_no
                      AND a.peril_cd = c.peril_cd
                      AND c.line_cd = p_line_cd)
               LOOP
                  v_tsi_amt := xyz.tsi_amt;
                  v_prem_amt := xyz.prem_amt;
                  v_ann_tsi_amt := xyz.ann_tsi_amt;
               END LOOP;

/***********************************/
               UPDATE giuw_witemds
                  SET tsi_amt = v_tsi_amt,
--NVL(c2.tsi_amt,0) - (ROUND((NVL(c2.tsi_amt,0)/dist_cnt),2) * (dist_cnt - 1)),
                      prem_amt = v_prem_amt,
--NVL(c2.prem_amt,0) - (ROUND((NVL(c2.prem_amt,0)/dist_cnt),2) * (dist_cnt - 1)),
                      ann_tsi_amt = v_ann_tsi_amt
--NVL(c2.ann_tsi_amt,0) - (ROUND((NVL(c2.ann_tsi_amt,0)/dist_cnt),2) * (dist_cnt - 1))
               WHERE  dist_no = p_dist_no
                  AND item_no = c2.item_no
                  AND dist_seq_no = p_dist_seq_no;

              -- jhing 12.12.2014 commented out. Distribution in other dist tables will be created based on GIUW_WPOLICYDS_DTL 
              -- to prevent erroneous data on default dist especially when using default dist by amount
              /* crt_grp_dflt_witemds_giuws005 (p_dist_no,
                                              p_dist_seq_no,
                                              c2.item_no,
                                              p_line_cd,
                                              v_tsi_amt,
--NVL(c2.tsi_amt,0) - (ROUND((NVL(c2.tsi_amt,0)/dist_cnt),2) * (dist_cnt - 1)),
                                              v_prem_amt,
--NVL(c2.prem_amt,0) - (ROUND((NVL(c2.prem_amt,0)/dist_cnt),2) * (dist_cnt - 1)),
                                              v_ann_tsi_amt,
--NVL(c2.ann_tsi_amt,0) - (ROUND((NVL(c2.ann_tsi_amt,0)/dist_cnt),2) * (dist_cnt - 1)),
                                              p_rg_count,
                                              p_default_no,     -- shan 06.20.2014
                                              p_default_type,   -- shan 06.20.2014
                                              p_dflt_netret_pct, -- shan 06.20.2014
                                              p_item_grp, -- shan 06.20.2014
                                              p_currency_rt, -- shan 06.20.2014
                                              p_pol_flag,
                                              p_par_id,
                                              p_par_type
                                             ); */
            ELSE
               /* added by glyza 04.15.08 */
               FOR xyz IN
                  (SELECT SUM
                             (ROUND
                                 ((NVL
                                      (DECODE (c.peril_type, 'B', tsi_amt, 0),
                                       0
                                      )                      /*beth/dist_cnt*/
                                  ),
                                  2
                                 )
                             ) tsi_amt,
                          SUM (ROUND ((NVL (prem_amt, 0) / dist_cnt), 2)
                              ) prem_amt,
                          SUM
                             (ROUND
                                 ((NVL
                                      (DECODE (c.peril_type,
                                               'B', ann_tsi_amt,
                                               0
                                              ),
                                       0
                                      )                     /*beth/dist_cnt)*/
                                  ),
                                  2
                                 )
                             ) ann_tsi_amt
                     FROM gipi_witmperl a, giis_peril c
                    WHERE par_id = p_par_id
                      AND item_no = c2.item_no
                      AND a.peril_cd = c.peril_cd
                      AND c.line_cd = p_line_cd)
               LOOP
                  v_tsi_amt := xyz.tsi_amt;
                  v_prem_amt := xyz.prem_amt;
                  v_ann_tsi_amt := xyz.ann_tsi_amt;
               END LOOP;

/****************************/
               UPDATE giuw_witemds
                  SET tsi_amt = v_tsi_amt,            --c2.tsi_amt / dist_cnt,
                      prem_amt = v_prem_amt,         --c2.prem_amt / dist_cnt,
                      ann_tsi_amt = v_ann_tsi_amt  --c2.ann_tsi_amt / dist_cnt
                WHERE dist_no = p_dist_no
                  AND item_no = c2.item_no
                  AND dist_seq_no = p_dist_seq_no;

              -- jhing 12.12.2014 commented out. Distribution in other dist tables will be created based on GIUW_WPOLICYDS_DTL 
              -- to prevent erroneous data on default dist especially when using default dist by amount
            /*   crt_grp_dflt_witemds_giuws005
                                   (p_dist_no,
                                    p_dist_seq_no,
                                    c2.item_no,
                                    p_line_cd,
                                    v_tsi_amt,
                                    v_prem_amt,
                                    --c2.tsi_amt / dist_cnt, c2.prem_amt / dist_cnt,
                                    v_ann_tsi_amt,
                                                  --c2.ann_tsi_amt / dist_cnt,
                                    p_rg_count,
                                    p_default_no,     -- shan 06.20.2014
                                    p_default_type,   -- shan 06.20.2014
                                    p_dflt_netret_pct, -- shan 06.20.2014
                                    p_item_grp, -- shan 06.20.2014
                                    p_currency_rt, -- shan 06.20.2014
                                    p_pol_flag,
                                    p_par_id,
                                    p_par_type
                                   ); */
            END IF;
         END LOOP;
      END IF;

      --update_dtls_no_share_cd (p_dist_no, p_dist_seq_no, 'ITEM', p_line_cd);  -- jhing 12.12.2014 commented out 
        /* Initialize the value of the variables
      ** in preparation for processing the new
      ** DIST_SEQ_NO. */
      v_peril_cd := NULL;
      v_peril_tsi := 0;
      v_peril_premium := 0;
      v_peril_ann_tsi := 0;
      v_exist := 'N';

      --msg_alert('itemperilds','I',FALSE);
      /* Get the amounts for each combination of the ITEM_NO and the PERIL_CD
      ** in table GIPI_WITMPERL in preparation for data insertion to
      ** distribution tables GIUW_WITEMPERILDS, GIUW_WITEMPERILDS_DTL,
      ** GIUW_WPERILDS and GIUW_WPERILDS_DTL. */
      IF NVL (p_dist_exists, 'N') = 'N'
      THEN
         FOR c3 IN (SELECT b490.tsi_amt itmperil_tsi,
                           b490.prem_amt itmperil_premium,
                           b490.ann_tsi_amt itmperil_ann_tsi,
                           b490.item_no item_no, b490.peril_cd peril_cd,
                           c.peril_type peril_type
                      FROM gipi_witmperl b490, gipi_witem b480, giis_peril c
                     WHERE b490.item_no = b480.item_no
                       AND b490.par_id = b480.par_id
                       AND b480.item_grp = p_item_grp
                       AND b480.par_id = p_par_id
                       AND b490.peril_cd = c.peril_cd
                       AND c.line_cd = p_line_cd)
         LOOP
            v_exist := 'Y';

            --msg_alert('START main item no '||c3.item_no||' peril cd '||c3.peril_cd,'I',FALSE);

            /* Create records in table GIUW_WITEMPERILDS and GIUW_WITEMPERILDS_DTL
            ** for the specified DIST_SEQ_NO. */
            IF p_dist_no = dist_max
            THEN
               c3.itmperil_tsi :=
                  NVL
                     (c3.itmperil_tsi, 0) /*beth- (ROUND((NVL(c3.itmperil_tsi,0)/dist_cnt),2) * (dist_cnt - 1))*/;
               c3.itmperil_premium :=
                    NVL (c3.itmperil_premium, 0)
                  - (  ROUND ((NVL (c3.itmperil_premium, 0) / dist_cnt), 2)
                     * (dist_cnt - 1)
                    );
               c3.itmperil_ann_tsi :=
                  NVL
                     (c3.itmperil_ann_tsi, 0) /*beth- (ROUND((NVL(c3.itmperil_ann_tsi,0)/dist_cnt),2) * (dist_cnt - 1))*/;
            ELSE
               c3.itmperil_tsi := c3.itmperil_tsi /*beth/ dist_cnt*/;
               c3.itmperil_premium := c3.itmperil_premium / dist_cnt;
               c3.itmperil_ann_tsi := c3.itmperil_ann_tsi /*beth/ dist_cnt*/;
            END IF;

            INSERT INTO giuw_witemperilds
                        (dist_no, dist_seq_no, item_no, peril_cd,
                         line_cd, tsi_amt, prem_amt,
                         ann_tsi_amt
                        )
                 VALUES (p_dist_no, p_dist_seq_no, c3.item_no, c3.peril_cd,
                         p_line_cd, c3.itmperil_tsi, c3.itmperil_premium,
                         c3.itmperil_ann_tsi
                        );

            --msg_alert('END main item no '||c3.item_no||' peril cd '||c3.peril_cd,'I',FALSE);
            --msg_alert(p_dist_no||'-'||p_dist_seq_no||'-'||c3.item_no||'-'||p_line_cd||'-'||c3.peril_cd,'I',FALSE);
            
            -- jhing 12.12.2014 commented out. Distribution in other dist tables will be created based on GIUW_WPOLICYDS_DTL 
            -- to prevent erroneous data on default dist especially when using default dist by amount
          /*  giuw_pol_dist_pkg.ct_grp_dflt_witmperld_giuws005
                                                         (p_dist_no,
                                                          p_dist_seq_no,
                                                          c3.item_no,
                                                          p_line_cd,
                                                          c3.peril_cd,
                                                          c3.itmperil_tsi,
                                                          c3.itmperil_premium,
                                                          c3.itmperil_ann_tsi,
                                                          p_rg_count,
                                                          p_default_no,     -- shan 06.20.2014
                                                          p_default_type,   -- shan 06.20.2014
                                                          p_dflt_netret_pct, -- shan 06.20.2014
                                                          p_item_grp, -- shan 06.20.2014
                                                          p_currency_rt, -- shan 06.20.2014
                                                          p_pol_flag,
                                                          p_par_id,
                                                          p_par_type
                                                         ); */
         END LOOP;
      ELSE
         FOR c3 IN (SELECT b490.tsi_amt itmperil_tsi,
                           b490.prem_amt itmperil_premium,
                           b490.ann_tsi_amt itmperil_ann_tsi,
                           b490.item_no item_no, b490.peril_cd peril_cd,
                           c.peril_type peril_type
                      FROM gipi_witmperl b490, gipi_witem b480, giis_peril c
                     WHERE b490.item_no = b480.item_no
                       AND b490.par_id = b480.par_id
                       AND b480.item_grp = p_item_grp
                       AND b480.par_id = p_par_id
                       AND b490.peril_cd = c.peril_cd
                       AND c.line_cd = p_line_cd
                       AND EXISTS (
                              SELECT 1
                                FROM giuw_wpolicyds c
                               WHERE 1 = 1
                                 AND c.dist_no = p_dist_no
                                 AND c.dist_seq_no = p_dist_seq_no
                                 AND c.item_grp = p_item_grp
                                 AND c.item_grp = b480.item_grp)
                       AND EXISTS (
                              SELECT 1
                                FROM giuw_witemds c
                               WHERE 1 = 1
                                 AND c.dist_no = p_dist_no
                                 AND c.dist_seq_no = p_dist_seq_no
                                 AND c.item_no = b480.item_no))
         LOOP
            v_exist := 'Y';

            IF p_dist_no = dist_max
            THEN
               c3.itmperil_tsi :=
                  NVL
                     (c3.itmperil_tsi, 0) /*beth- (ROUND((NVL(c3.itmperil_tsi,0)/dist_cnt),2) * (dist_cnt - 1))*/;
               c3.itmperil_premium :=
                    NVL (c3.itmperil_premium, 0)
                  - (  ROUND ((NVL (c3.itmperil_premium, 0) / dist_cnt), 2)
                     * (dist_cnt - 1)
                    );
               c3.itmperil_ann_tsi :=
                  NVL
                     (c3.itmperil_ann_tsi, 0) /*beth- (ROUND((NVL(c3.itmperil_ann_tsi,0)/dist_cnt),2) * (dist_cnt - 1))*/;
            ELSE
               c3.itmperil_tsi := c3.itmperil_tsi /*beth/ dist_cnt*/;
               c3.itmperil_premium := c3.itmperil_premium / dist_cnt;
               c3.itmperil_ann_tsi := c3.itmperil_ann_tsi /*beth/ dist_cnt*/;
            END IF;

            --msg_alert('START main item no '||c3.item_no||' peril cd '||c3.peril_cd,'I',FALSE);
            /* Create records in table GIUW_WITEMPERILDS and GIUW_WITEMPERILDS_DTL
            ** for the specified DIST_SEQ_NO. */
            INSERT INTO giuw_witemperilds
                        (dist_no, dist_seq_no, item_no, peril_cd,
                         line_cd, tsi_amt, prem_amt,
                         ann_tsi_amt
                        )
                 VALUES (p_dist_no, p_dist_seq_no, c3.item_no, c3.peril_cd,
                         p_line_cd, c3.itmperil_tsi, c3.itmperil_premium,
                         c3.itmperil_ann_tsi
                        );

            --msg_alert('END main item no '||c3.item_no||' peril cd '||c3.peril_cd,'I',FALSE);
            --msg_alert(p_dist_no||'-'||p_dist_seq_no||'-'||c3.item_no||'-'||p_line_cd||'-'||c3.peril_cd,'I',FALSE);
            
            -- jhing 12.12.2014 commented out. Distribution in other dist tables will be created based on GIUW_WPOLICYDS_DTL 
            -- to prevent erroneous data on default dist especially when using default dist by amount
           /* giuw_pol_dist_pkg.ct_grp_dflt_witmperld_giuws005
                                                         (p_dist_no,
                                                          p_dist_seq_no,
                                                          c3.item_no,
                                                          p_line_cd,
                                                          c3.peril_cd,
                                                          c3.itmperil_tsi,
                                                          c3.itmperil_premium,
                                                          c3.itmperil_ann_tsi,
                                                          p_rg_count,
                                                          p_default_no,     -- shan 06.20.2014
                                                          p_default_type,   -- shan 06.20.2014
                                                          p_dflt_netret_pct, -- shan 06.20.2014
                                                          p_item_grp, -- shan 06.20.2014
                                                          p_currency_rt, -- shan 06.20.2014
                                                          p_pol_flag,
                                                          p_par_id,
                                                          p_par_type
                                                         ); */
         END LOOP;
      END IF;

     /* giuw_pol_dist_pkg.upd_dtls_no_share_cd_giuws005 (p_dist_no,
                                                       p_dist_seq_no,
                                                       'ITEMPERIL',
                                                       p_line_cd
                                                      );  */ -- jhing 12.12.2014 commented out 

      --msg_alert('perilds','I',FALSE);
      IF NVL (p_dist_exists, 'N') = 'N'
      THEN
         FOR c4 IN (SELECT   SUM (b490.tsi_amt) itmperil_tsi,
                             SUM (b490.prem_amt) itmperil_premium,
                             SUM (b490.ann_tsi_amt) itmperil_ann_tsi,
                             
                             --B490.item_no          item_no          ,
                             b490.peril_cd peril_cd, c.peril_type peril_type
                        FROM gipi_witmperl b490,
                             gipi_witem b480,
                             giis_peril c
                       WHERE b490.item_no = b480.item_no
                         AND b490.par_id = b480.par_id
                         AND b480.item_grp = p_item_grp
                         AND b480.par_id = p_par_id
                         AND b490.peril_cd = c.peril_cd
                         AND c.line_cd = p_line_cd
                    GROUP BY b490.peril_cd, c.peril_type)
         LOOP
            --msg_alert('giuw_wperilds','I',FALSE);
            IF p_dist_no = dist_max
            THEN
               c4.itmperil_tsi :=
                  NVL
                     (c4.itmperil_tsi, 0) /*beth- (ROUND((NVL(c4.itmperil_tsi,0)/dist_cnt),2) * (dist_cnt - 1))*/;
               c4.itmperil_premium :=
                    NVL (c4.itmperil_premium, 0)
                  - (  ROUND ((NVL (c4.itmperil_premium, 0) / dist_cnt), 2)
                     * (dist_cnt - 1)
                    );
               c4.itmperil_ann_tsi :=
                  NVL
                     (c4.itmperil_ann_tsi, 0) /*beth- (ROUND((NVL(c4.itmperil_ann_tsi,0)/dist_cnt),2) * (dist_cnt - 1))*/;
            ELSE
               c4.itmperil_tsi := c4.itmperil_tsi /*beth/ dist_cnt*/;
               c4.itmperil_premium := c4.itmperil_premium / dist_cnt;
               c4.itmperil_ann_tsi := c4.itmperil_ann_tsi /*beth/ dist_cnt*/;
            END IF;

            INSERT INTO giuw_wperilds
                        (dist_no, dist_seq_no, peril_cd, line_cd,
                         tsi_amt, prem_amt,
                         ann_tsi_amt
                        )
                 VALUES (p_dist_no, p_dist_seq_no, c4.peril_cd, p_line_cd,
                         c4.itmperil_tsi, c4.itmperil_premium,
                         c4.itmperil_ann_tsi
                        );

            v_peril_cd := c4.peril_cd;
            v_peril_tsi := c4.itmperil_tsi;
            v_peril_premium := c4.itmperil_premium;
            v_peril_ann_tsi := c4.itmperil_ann_tsi;
            /*msg_alert('giuw_witemperilds_dtl'||' - '||p_dist_no||' - '||p_dist_seq_no||' - '||p_line_cd||' - '||
              v_peril_cd||' - '||v_peril_tsi||' - '||v_peril_premium||' - '||v_peril_ann_tsi||' - '||p_currency_rt
              ||' - '||p_default_no||' - '||p_default_type||' - '||p_dflt_netret_pct,'I',FALSE);      */
           -- upd_create_wperil_dtl_data;  -- jhing 12.12.2014 commented out 
         END LOOP;
      ELSE
         FOR c4 IN (SELECT   SUM (b490.tsi_amt) itmperil_tsi,
                             SUM (b490.prem_amt) itmperil_premium,
                             SUM (b490.ann_tsi_amt) itmperil_ann_tsi,
                             
                             --B490.item_no          item_no          ,
                             b490.peril_cd peril_cd, c.peril_type peril_type
                        FROM gipi_witmperl b490,
                             gipi_witem b480,
                             giis_peril c
                       WHERE b490.item_no = b480.item_no
                         AND b490.par_id = b480.par_id
                         AND b480.item_grp = p_item_grp
                         AND b480.par_id = p_par_id
                         AND b490.peril_cd = c.peril_cd
                         AND c.line_cd = p_line_cd
                         AND EXISTS (
                                SELECT 1
                                  FROM giuw_witemds c
                                 WHERE 1 = 1
                                   AND c.dist_no = p_dist_no
                                   AND c.dist_seq_no = p_dist_seq_no
                                   AND c.item_no = b480.item_no)
                    GROUP BY b490.peril_cd, c.peril_type)
         LOOP
            --msg_alert('giuw_wperilds','I',FALSE);
            IF p_dist_no = dist_max
            THEN
               c4.itmperil_tsi :=
                  NVL
                     (c4.itmperil_tsi, 0) /*beth- (ROUND((NVL(c4.itmperil_tsi,0)/dist_cnt),2) * (dist_cnt - 1))*/;
               c4.itmperil_premium :=
                    NVL (c4.itmperil_premium, 0)
                  - (  ROUND ((NVL (c4.itmperil_premium, 0) / dist_cnt), 2)
                     * (dist_cnt - 1)
                    );
               c4.itmperil_ann_tsi :=
                  NVL
                     (c4.itmperil_ann_tsi, 0) /*beth- (ROUND((NVL(c4.itmperil_ann_tsi,0)/dist_cnt),2) * (dist_cnt - 1))*/;
            ELSE
               c4.itmperil_tsi := c4.itmperil_tsi /*beth/ dist_cnt*/;
               c4.itmperil_premium := c4.itmperil_premium / dist_cnt;
               c4.itmperil_ann_tsi := c4.itmperil_ann_tsi /*beth/ dist_cnt*/;
            END IF;

            INSERT INTO giuw_wperilds
                        (dist_no, dist_seq_no, peril_cd, line_cd,
                         tsi_amt, prem_amt,
                         ann_tsi_amt
                        )
                 VALUES (p_dist_no, p_dist_seq_no, c4.peril_cd, p_line_cd,
                         c4.itmperil_tsi, c4.itmperil_premium,
                         c4.itmperil_ann_tsi
                        );

            v_peril_cd := c4.peril_cd;
            v_peril_tsi := c4.itmperil_tsi;
            v_peril_premium := c4.itmperil_premium;
            v_peril_ann_tsi := c4.itmperil_ann_tsi;
            /*msg_alert('giuw_witemperilds_dtl'||' - '||p_dist_no||' - '||p_dist_seq_no||' - '||p_line_cd||' - '||
            v_peril_cd||' - '||v_peril_tsi||' - '||v_peril_premium||' - '||v_peril_ann_tsi||' - '||p_currency_rt
            ||' - '||p_default_no||' - '||p_default_type||' - '||p_dflt_netret_pct,'I',FALSE);      */
           -- upd_create_wperil_dtl_data;  -- jhing 12.12.2014 commented out 
         END LOOP;
      END IF;

     /* giuw_pol_dist_pkg.upd_dtls_no_share_cd_giuws005 (p_dist_no,
                                                       p_dist_seq_no,
                                                       'PERIL',
                                                       p_line_cd
                                                      );  */ -- jhing 12.12.2014 commented out 
      --A.R.C. 05.22.2007
      --giuw_pol_dist_pkg.update_witemds (p_dist_no, p_dist_seq_no);--commented out by edgar base on aldren's modification on GIUWS004

      --msg_alert('policyds','I',FALSE);
      -- jhing 12.19.2014 commented out. Transfer creation of records in GIUW_WPOLICYDS_DTL after all DS tables has been populated. There are
      -- scenarios wherein incomplete DTLs are created. 
     /* IF NVL (p_dist_exists, 'N') = 'N'
      THEN
         IF p_dist_no = dist_max
         THEN
            /* added by glyza 04.15.08 */
     /*       FOR x IN
               (SELECT SUM
                          (NVL
                              (DECODE (c.peril_type, 'B', a.tsi_amt, 0), 0)
/*beth- (ROUND((NVL(DECODE(c.peril_type,'B',a.tsi_amt,0),0)/dist_cnt),2) * (dist_cnt - 1))*/
    /*                        ) tsi_amt,
                     SUM (  NVL (a.prem_amt, 0)
                            - (  ROUND ((NVL (a.prem_amt, 0) / dist_cnt), 2)
                               * (dist_cnt - 1)
                              )
                           ) prem_amt,
                       SUM
                          (NVL
                              (DECODE (c.peril_type, 'B', a.ann_tsi_amt, 0),
                               0)
/*beth- (ROUND((NVL(DECODE(c.peril_type,'B',a.ann_tsi_amt,0),0)/dist_cnt),2) * (dist_cnt - 1))*/
     /*                     ) ann_tsi_amt
                  FROM gipi_witmperl a, gipi_witem b, giis_peril c
                 WHERE a.par_id = b.par_id
                   AND a.item_no = b.item_no
                   AND a.par_id = p_par_id
                   AND b.item_grp = NVL (v_item_grp, p_item_grp)
                   AND a.peril_cd = c.peril_cd
                   AND c.line_cd = p_line_cd)
            LOOP
               v_tsi_amt := x.tsi_amt;
               v_prem_amt := x.prem_amt;
               v_ann_tsi_amt := x.ann_tsi_amt;
            END LOOP;

/***********************************/
     /*       giuw_pol_dist_pkg.ct_grp_dflt_wpolicyds_giuws005 (p_dist_no,
                                                              p_dist_seq_no,
                                                              p_line_cd,
                                                              --p_policy_tsi/dist_cnt, p_policy_premium/dist_cnt, p_policy_ann_tsi/dist_cnt,
                                                              v_tsi_amt,
                                                              v_prem_amt,
                                                              v_ann_tsi_amt,
                                                              p_rg_count,
                                                              p_default_no,     -- shan 06.20.2014
                                                              p_default_type,
                                                              p_dflt_netret_pct, -- shan 06.20.2014
                                                              p_currency_rt,
                                                              p_par_id,
                                                              p_item_grp,
                                                              p_pol_flag,
                                                              p_par_type
                                                             );
         ELSE
            /* added by glyza 04.15.08 */
        /*    FOR x IN
               (SELECT SUM
                          (ROUND
                               ((NVL (DECODE (c.peril_type,
                                              'B', a.tsi_amt,
                                              0
                                             ),
                                      0
                                     )                       /*beth/dist_cnt*/
         /*                        ),
                                2
                               )
                          ) tsi_amt,
                      SUM (ROUND ((NVL (a.prem_amt, 0) / dist_cnt), 2)
                           ) prem_amt,
                       SUM
                          (ROUND
                              ((NVL (DECODE (c.peril_type,
                                             'B', a.ann_tsi_amt,
                                             0
                                            ),
                                     0
                                    )                        /*beth/dist_cnt*/
            /*                   ),
                               2
                              )
                          ) ann_tsi_amt
                  FROM gipi_witmperl a, gipi_witem b, giis_peril c
                 WHERE a.par_id = b.par_id
                   AND a.item_no = b.item_no
                   AND a.par_id = p_par_id
                   AND b.item_grp = NVL (v_item_grp, p_item_grp)
                   AND a.peril_cd = c.peril_cd
                   AND c.line_cd = p_line_cd)
            LOOP
               v_tsi_amt := x.tsi_amt;
               v_prem_amt := x.prem_amt;
               v_ann_tsi_amt := x.ann_tsi_amt;
            END LOOP;

/****************************/
       /*     giuw_pol_dist_pkg.ct_grp_dflt_wpolicyds_giuws005 (p_dist_no,
                                                              p_dist_seq_no,
                                                              p_line_cd,
                                                              --p_policy_tsi/dist_cnt, p_policy_premium/dist_cnt, p_policy_ann_tsi/dist_cnt,
                                                              v_tsi_amt,
                                                              v_prem_amt,
                                                              v_ann_tsi_amt,
                                                              p_rg_count,
                                                              p_default_no,     -- shan 06.20.2014
                                                              p_default_type,
                                                              p_dflt_netret_pct, -- shan 06.20.2014
                                                              p_currency_rt,
                                                              p_par_id,
                                                              p_item_grp,
                                                              p_pol_flag,
                                                              p_par_type
                                                             );
         --END LOOP;
         END IF;
      ELSE
         IF p_dist_no = dist_max
         THEN
            /* added by glyza 04.18.08 */
     /*       FOR x IN
               (SELECT SUM
                          (NVL
                              (DECODE (c.peril_type, 'B', b490.tsi_amt, 0), 0)
/*beth- (ROUND((NVL(DECODE(c.peril_type,'B',b490.tsi_amt,0),0)/dist_cnt),2) * (dist_cnt - 1))*/
      /*                    ) tsi_amt,
                       SUM (  NVL (b490.prem_amt, 0)
                            - (  ROUND ((NVL (b490.prem_amt, 0) / dist_cnt),
                                        2)
                               * (dist_cnt - 1)
                              )
                           ) prem_amt,
                       SUM
                          (NVL
                              (DECODE (c.peril_type,
                                       'B', b490.ann_tsi_amt,
                                       0
                                      ),
                               0
                              )
/*beth- (ROUND((NVL(DECODE(c.peril_type,'B',b490.ann_tsi_amt,0),0)/dist_cnt),2) * (dist_cnt - 1))*/
       /*                   ) ann_tsi_amt
                  FROM gipi_witmperl b490, gipi_witem b480, giis_peril c
                 WHERE b490.item_no = b480.item_no
                   AND b490.par_id = b480.par_id
                   AND b480.item_grp = p_item_grp
                   AND b480.par_id = p_par_id
                   AND b490.peril_cd = c.peril_cd
                   AND c.line_cd = p_line_cd
                   AND EXISTS (
                          SELECT 1
                            FROM giuw_wpolicyds c
                           WHERE 1 = 1
                             AND c.dist_no = p_dist_no
                             AND c.dist_seq_no = p_dist_seq_no
                             AND c.item_grp = p_item_grp
                             AND c.item_grp = b480.item_grp)
                   AND EXISTS (
                          SELECT 1
                            FROM giuw_witemds c
                           WHERE 1 = 1
                             AND c.dist_no = p_dist_no
                             AND c.dist_seq_no = p_dist_seq_no
                             AND c.item_no = b480.item_no))
            LOOP
               v_tsi_amt := x.tsi_amt;
               v_prem_amt := x.prem_amt;
               v_ann_tsi_amt := x.ann_tsi_amt;
/***************************/
       /*        giuw_pol_dist_pkg.ct_grp_dflt_wpolicyds_giuws005
                                                             (p_dist_no,
                                                              p_dist_seq_no,
                                                              p_line_cd,
                                                              --p_policy_tsi/dist_cnt, p_policy_premium/dist_cnt, p_policy_ann_tsi/dist_cnt,
                                                              v_tsi_amt,
                                                              v_prem_amt,
                                                              v_ann_tsi_amt,
                                                              p_rg_count,
                                                              p_default_no,     -- shan 06.20.2014
                                                              p_default_type,
                                                              p_dflt_netret_pct, -- shan 06.20.2014
                                                              p_currency_rt,
                                                              p_par_id,
                                                              p_item_grp,
                                                              p_pol_flag,
                                                              p_par_type
                                                             );
            END LOOP;
         ELSE
            /* added by glyza 04.15.08 */
         /*   FOR x IN
               (SELECT SUM
                          (ROUND
                               ((NVL (DECODE (c.peril_type,
                                              'B', b490.tsi_amt,
                                              0
                                             ),
                                      0
                                     )                       /*beth/dist_cnt*/
           /*                     ),
                                2
                               )
                          ) tsi_amt,
                       SUM (ROUND ((NVL (b490.prem_amt, 0) / dist_cnt), 2)
                           ) prem_amt,
                       SUM
                          (ROUND
                              ((NVL
                                   (DECODE (c.peril_type,
                                            'B', b490.ann_tsi_amt,
                                            0
                                           ),
                                    0
                                   )                         /*beth/dist_cnt*/
          /*                     ),
                               2
                              )
                          ) ann_tsi_amt
                  FROM gipi_witmperl b490, gipi_witem b480, giis_peril c
                 WHERE b490.item_no = b480.item_no
                   AND b490.par_id = b480.par_id
                   AND b480.item_grp = p_item_grp
                   AND b480.par_id = p_par_id
                   AND b490.peril_cd = c.peril_cd
                   AND c.line_cd = p_line_cd
                   AND EXISTS (
                          SELECT 1
                            FROM giuw_wpolicyds c
                           WHERE 1 = 1
                             AND c.dist_no = p_dist_no
                             AND c.dist_seq_no = p_dist_seq_no
                             AND c.item_grp = p_item_grp
                             AND c.item_grp = b480.item_grp)
                   AND EXISTS (
                          SELECT 1
                            FROM giuw_witemds c
                           WHERE 1 = 1
                             AND c.dist_no = p_dist_no
                             AND c.dist_seq_no = p_dist_seq_no
                             AND c.item_no = b480.item_no))
            LOOP
               v_tsi_amt := x.tsi_amt;
               v_prem_amt := x.prem_amt;
               v_ann_tsi_amt := x.ann_tsi_amt;
/****************************/
          /*     giuw_pol_dist_pkg.ct_grp_dflt_wpolicyds_giuws005
                                                             (p_dist_no,
                                                              p_dist_seq_no,
                                                              p_line_cd,
                                                              --p_policy_tsi/dist_cnt, p_policy_premium/dist_cnt, p_policy_ann_tsi/dist_cnt,
                                                              v_tsi_amt,
                                                              v_prem_amt,
                                                              v_ann_tsi_amt,
                                                              p_rg_count,
                                                              p_default_no,     -- shan 06.20.2014
                                                              p_default_type,
                                                              p_dflt_netret_pct, -- shan 06.20.2014
                                                              p_currency_rt,
                                                              p_par_id,
                                                              p_item_grp,
                                                              p_pol_flag,
                                                              p_par_type
                                                             );
            END LOOP;
         END IF;
      END IF;
      */
    /*  giuw_pol_dist_pkg.upd_dtls_no_share_cd_giuws005 (p_dist_no,
                                                       p_dist_seq_no,
                                                       'POLICY',
                                                       p_line_cd
                                                      );  */ -- jhing 12.12.2014 commented out 
      --A.R.C. 05.22.2007
      --giuw_pol_dist_pkg.update_wpolicyds (p_dist_no, p_dist_seq_no);--commented out by edgar base on aldren's modification on GIUWS004
      
   END;

   PROCEDURE crt_grp_dflt_witemds_giuws005 (
      p_dist_no        IN   giuw_witemds_dtl.dist_no%TYPE,
      p_dist_seq_no    IN   giuw_witemds_dtl.dist_seq_no%TYPE,
      p_item_no        IN   giuw_witemds_dtl.item_no%TYPE,
      p_line_cd        IN   giuw_witemds_dtl.line_cd%TYPE,
      p_dist_tsi       IN   giuw_witemds_dtl.dist_tsi%TYPE,
      p_dist_prem      IN   giuw_witemds_dtl.dist_prem%TYPE,
      p_ann_dist_tsi   IN   giuw_witemds_dtl.ann_dist_tsi%TYPE,
      p_rg_count       IN   NUMBER,
      p_default_no      IN       giis_default_dist.default_no%TYPE,   -- shan 06.20.2014
      p_default_type    IN       giis_default_dist.default_type%TYPE,   -- shan 06.20.2014
      p_dflt_netret_pct IN       giis_default_dist.dflt_netret_pct%TYPE,  -- shan 06.20.2014
      p_item_grp        IN       gipi_witem.item_grp%TYPE,              -- shan 06.20.2014
      p_currency_rt      IN       gipi_witem.currency_rt%TYPE,      -- shan 06.20.2014
      p_pol_flag       IN   gipi_wpolbas.pol_flag%TYPE,
      p_par_id         IN   gipi_wpolbas.par_id%TYPE,
      p_par_type       IN   gipi_parlist.par_type%TYPE
   )
   IS
      --rg_id            RECORDGROUP;
      rg_name              VARCHAR2 (20)                := 'DFLT_DIST_VALUES';
      rg_col2              VARCHAR2 (40)            := rg_name || '.share_cd';
      rg_col7              VARCHAR2 (40)            := rg_name || '.true_pct';
      v_remaining_tsi      NUMBER               := p_dist_tsi * p_currency_rt;
      v_share_amt          giis_default_dist_group.share_amt1%TYPE;
      v_peril_cd           giis_default_dist_group.peril_cd%TYPE;
      v_prev_peril_cd      giis_default_dist_group.peril_cd%TYPE;
      v_selection_count    NUMBER;
      v_row                NUMBER;
      v_dist_spct          giuw_witemds_dtl.dist_spct%TYPE;
      v_dist_spct1         giuw_witemds_dtl.dist_spct1%TYPE;
      v_dist_tsi           giuw_witemds_dtl.dist_tsi%TYPE;
      v_dist_prem          giuw_witemds_dtl.dist_prem%TYPE;
      v_ann_dist_tsi       giuw_witemds_dtl.ann_dist_tsi%TYPE;
      v_share_cd           giis_dist_share.share_cd%TYPE;
      v_sum_dist_tsi       giuw_witemds_dtl.dist_tsi%TYPE       := 0;
      v_sum_dist_spct      giuw_witemds_dtl.dist_spct%TYPE      := 0;
      v_sum_dist_spct1     giuw_witemds_dtl.dist_spct1%TYPE     := 0;
      v_sum_dist_prem      giuw_witemds_dtl.dist_prem%TYPE      := 0;
      v_sum_ann_dist_tsi   giuw_witemds_dtl.ann_dist_tsi%TYPE   := 0;
      v_use_share_amt2     VARCHAR2 (1)                              := 'N';
      v_dist_spct_limit    NUMBER;
      v_exist               VARCHAR2(1) := 'N'; -- shan 06.18.2014
      v_dflt_dist_exist    VARCHAR2 (1) := 'N'; -- shan 06.20.2014
      
      CURSOR dist_grp_cur -- shan 06.20.2014
      IS
         SELECT   a.share_cd, a.peril_cd, a.share_pct, a.share_amt1, a.SHARE_AMT2
             FROM giis_default_dist_group a
            WHERE a.default_no = p_default_no
              AND a.line_cd = p_line_cd
              AND a.share_cd <> 999
         ORDER BY a.SEQUENCE ASC;

      PROCEDURE insert_to_witemds_dtl
      IS
      BEGIN
         -- message('insert_to');pause;
         -- msg_alert(p_dist_no||'-'||p_dist_seq_no||'-'||p_line_cd||'-'||v_share_cd||'-'||p_item_no,'I',FALSE);
         INSERT INTO giuw_witemds_dtl
                     (dist_no, dist_seq_no, line_cd, share_cd,
                      dist_spct, dist_tsi, dist_spct1, dist_prem,
                      ann_dist_spct, ann_dist_tsi, dist_grp, item_no
                     )
              VALUES (p_dist_no, p_dist_seq_no, p_line_cd, v_share_cd,
                      v_dist_spct, v_dist_tsi, v_dist_spct1, v_dist_prem,
                      v_dist_spct, v_ann_dist_tsi, 1, p_item_no
                     );
      END;
      
      -- added by shan 06.20.2014
      PROCEDURE get_dflt_values
      IS
      BEGIN
            -- Use AMOUNTS to create the default distribution records. --
            /*IF p_default_type = 1 THEN    -- commented out code for the meantime : shan 06.23.2014
                FOR c IN dist_grp_cur
                LOOP
                    v_dflt_dist_exist := 'Y';
                    v_peril_cd    := c.peril_cd;
                    IF v_peril_cd IS NOT NULL THEN
                        IF NVL(v_prev_peril_cd, 0) = v_peril_cd THEN
                            NULL;
                        ELSE
                            v_use_share_amt2 := 'N';
                            FOR c1 IN (SELECT 'a'
                                      FROM gipi_witmperl B490, gipi_witem B480
                                     WHERE B490.peril_cd = v_peril_cd
                                       AND B490.line_cd  = p_line_cd
                                       AND B490.item_no  = B480.item_no
                                       AND B490.par_id   = B480.par_id
                                       AND B480.item_grp = p_item_grp
                                       AND B480.par_id   = p_par_id)
                            LOOP
                                v_use_share_amt2 := 'Y';
                                EXIT;
                            END LOOP;
                            v_prev_peril_cd := v_peril_cd;
                        END IF;
                    END IF;
                    
                    IF v_use_share_amt2 = 'N' THEN
                        v_share_amt  := c.share_amt1;
                    ELSE
                        v_share_amt  := c.share_amt2;
                    END IF;
                    
                    IF v_remaining_tsi >= v_share_amt THEN
                        v_dist_tsi      := v_share_amt / p_currency_rt;
                        v_remaining_tsi := v_remaining_tsi - v_share_amt;
                    ELSE
                        v_remaining_tsi := 0;
                    END IF;
                    
                    IF v_remaining_tsi != 0 THEN
                        v_dist_spct        := ROUND(v_dist_tsi / p_dist_tsi * 100, 9);
                        v_dist_spct1       := ROUND(v_dist_prem / p_dist_prem * 100, 9); -- shan 06.20.2014
                        v_dist_tsi         := ROUND(p_dist_tsi     * v_dist_spct / 100, 2);
                        v_dist_prem        := ROUND(p_dist_prem    * v_dist_spct1 / 100, 2);
                        v_ann_dist_tsi     := ROUND(p_ann_dist_tsi * v_dist_spct / 100, 2);
                        v_sum_dist_spct    := v_sum_dist_spct    + v_dist_spct;
                        v_sum_dist_spct1   := v_sum_dist_spct1    + v_dist_spct1;
                        v_sum_dist_tsi     := v_sum_dist_tsi     + v_dist_tsi;
                        v_sum_dist_prem    := v_sum_dist_prem    + v_dist_prem;
                        v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
                    ELSIF v_remaining_tsi = 0 THEN
                        v_dist_spct    := 100            - v_sum_dist_spct;
                        v_dist_spct1   := 100            - v_sum_dist_spct1;
                        v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
                        v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                        v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
                    END IF;
                                       
                    v_share_cd := c.share_cd;           
                    INSERT_TO_WITEMDS_DTL;
                                       
                    IF v_remaining_tsi = 0 THEN
                      EXIT;
                    END IF;
                END LOOP;
                
                IF v_remaining_tsi != 0  THEN
                    v_dist_spct    := 100            - v_sum_dist_spct;
                    v_dist_spct1   := 100            - v_sum_dist_spct1;
                    v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
                    v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                    v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
                    v_share_cd     := '999';
                    --p_rg_count     := p_rg_count + 1;

                    INSERT_TO_WITEMDS_DTL;
                END IF;

            -- Use PERCENTAGES to create the default distribution records. --
            ELSIF p_default_type = 2 THEN
                FOR c IN dist_grp_cur
                LOOP
                    v_dflt_dist_exist := 'Y';
                    v_dist_spct     := c.share_pct;
                    v_dist_spct1    := c.share_pct; -- shan 06.20.2014
                    v_share_amt     := c.share_amt1;
                    IF v_share_amt IS NOT NULL THEN
                        v_dist_tsi        := v_share_amt / p_currency_rt;
                        v_dist_spct_limit := ROUND(v_dist_tsi / p_dist_tsi * 100, 14);
                        IF v_dist_spct > v_dist_spct_limit THEN
                            v_dist_spct := v_dist_spct_limit;
                        END IF;
                    END IF;
                    
                    v_sum_dist_spct := NVL(v_sum_dist_spct, 0) + v_dist_spct;
                    v_sum_dist_spct1 := NVL(v_sum_dist_spct1, 0) + v_dist_spct1;    -- shan 06.20.2014
                    
                    IF v_sum_dist_spct != 100 THEN
                        v_dist_tsi         := ROUND(p_dist_tsi     * v_dist_spct / 100, 2);
                        v_dist_prem        := ROUND(p_dist_prem    * v_dist_spct1 / 100, 2);
                        v_ann_dist_tsi     := ROUND(p_ann_dist_tsi * v_dist_spct / 100, 2);
                        v_sum_dist_tsi     := v_sum_dist_tsi     + v_dist_tsi;
                        v_sum_dist_prem    := v_sum_dist_prem    + v_dist_prem;
                        v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
                    ELSE
                        v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
                        v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
                        v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                    END IF;
                    
                    v_share_cd      := c.share_cd;
                    INSERT_TO_WITEMDS_DTL;
                END LOOP;
                
                IF v_sum_dist_spct != 100 THEN
                    v_dist_spct    := 100            - v_sum_dist_spct;
                    v_dist_spct1   := 100            - v_sum_dist_spct1;
                    v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
                    v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
                    v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                    v_share_cd     := '999';
                    --p_rg_count     := p_rg_count + 1;
                    INSERT_TO_WITEMDS_DTL;
                END IF;
            END IF;
          
            /* If GIIS_DEFAULT_DIST_PERIL does not contain a record that
            ** corresponds to the particular peril being distributed,
            ** then use the value of the DFLT_NETRET_PCT column retrieved
            ** from table GIIS_DEFAULT_DIST. * /
            IF v_dflt_dist_exist = 'N' AND p_dflt_netret_pct IS NOT NULL
                THEN
                IF p_dflt_netret_pct != 100
                THEN
                   v_dist_spct := p_dflt_netret_pct;
                   v_dist_spct1 := p_dflt_netret_pct;
                   v_dist_tsi := ROUND (p_dist_tsi * p_dflt_netret_pct / 100, 2);
                   v_dist_prem := ROUND (p_dist_prem * p_dflt_netret_pct / 100, 2);
                   v_ann_dist_tsi := ROUND (p_ann_dist_tsi * p_dflt_netret_pct / 100, 2);
                   v_sum_dist_tsi := v_sum_dist_tsi + v_dist_tsi;
                   v_sum_dist_prem := v_sum_dist_prem + v_dist_prem;
                   v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
                ELSE
                   v_dist_spct := p_dflt_netret_pct;
                   v_dist_spct1 := p_dflt_netret_pct;
                   v_dist_tsi := p_dist_tsi;
                   v_dist_prem := p_dist_prem;
                   v_ann_dist_tsi := p_ann_dist_tsi;
                END IF;

                v_share_cd := 1;
                insert_to_witemds_dtl;

                IF p_dflt_netret_pct != 100
                THEN
                   v_dist_spct := 100 - p_dflt_netret_pct;
                   v_dist_spct1 := 100 - p_dflt_netret_pct;
                   v_dist_tsi := p_dist_tsi - v_sum_dist_tsi;
                   v_dist_prem := p_dist_prem - v_sum_dist_prem;
                   v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                   v_share_cd := '999';
                   insert_to_witemds_dtl;
                END IF;
            /* If no default distribution record was found in table
            ** GIIS_DEFAULT_DIST, then create the record using
            ** the traditional 100% NET RETENTION, 0% FACULTATIVE
            ** default. * /
            ELSIF v_dflt_dist_exist = 'N'
            THEN
                /* Create the default distribution records based on the 100%
                ** NET RETENTION and 0% FACULTATIVE hard code defaults. */
                v_share_cd := 1;
                v_dist_spct := 100;
                v_dist_spct1 := 100;
                v_dist_tsi := p_dist_tsi;
                v_dist_prem := p_dist_prem;
                v_ann_dist_tsi := p_ann_dist_tsi;

                FOR c IN 1 .. 2
                LOOP
                   insert_to_witemds_dtl;
                   v_share_cd := 999;
                   v_dist_spct := 0;
                   v_dist_spct1 := 0;
                   v_dist_tsi := 0;
                   v_dist_prem := 0;
                   v_ann_dist_tsi := 0;
                END LOOP;
           -- END IF;
      END; 
   BEGIN
      --msg_alert('item no '||p_item_no,'I',FALSE);
      IF p_rg_count = 0
      THEN
         --msg_alert('item default 2','I',FALSE);
         -- rollie 27may2005 vincent's birthday
         -- see procedure create_items for other info
         IF p_pol_flag = '2'
         THEN                                                      -- renewal
            --message('pol flag 2');pause;
            FOR c IN (SELECT share_cd, dist_spct, dist_spct1
                        FROM giuw_policyds_dtl a
                       WHERE a.dist_seq_no = p_dist_seq_no
                         AND dist_no =
                                (SELECT MAX (dist_no)
                                   FROM giuw_pol_dist
                                  WHERE policy_id = (SELECT MAX(a.old_policy_id)
                                                       FROM gipi_wpolnrep a
                                                           ,gipi_parlist b
                                                      WHERE a.par_id = p_par_id
                                                        AND a.ren_rep_sw = '1'
                                                        AND a.par_id = b.par_id
                                                        AND b.par_status NOT IN(98,99))))
            LOOP
               v_exist      := 'Y';
               v_share_cd := c.share_cd;
               v_dist_spct := c.dist_spct;
               v_dist_spct1 := c.dist_spct1;
               v_dist_tsi := ROUND (((p_dist_tsi * c.dist_spct) / 100), 2);
               v_dist_prem := ROUND (((p_dist_prem * NVL(c.dist_spct1, c.dist_spct)) / 100), 2);
               v_ann_dist_tsi :=
                           ROUND (((p_ann_dist_tsi * c.dist_spct) / 100), 2);
               v_sum_dist_tsi := NVL (v_sum_dist_tsi, 0)
                                 + NVL (v_dist_tsi, 0);
               v_sum_dist_prem :=
                               NVL (v_sum_dist_prem, 0)
                               + NVL (v_dist_prem, 0);
               v_sum_ann_dist_tsi :=
                         NVL (v_sum_ann_dist_tsi, 0)
                         + NVL (v_ann_dist_tsi, 0);
               insert_to_witemds_dtl;
            END LOOP;                  
            
            IF v_exist = 'N' THEN   -- shan 06.20.2014
                get_dflt_values;
            END IF;      
         ELSIF p_par_type = 'E'
         THEN
            --message ('insert');pause;
            FOR c IN (SELECT share_cd, dist_spct, dist_spct1
                        FROM giuw_policyds_dtl a
                       WHERE a.dist_seq_no = p_dist_seq_no
                         AND dist_no =
                                (SELECT MAX (dist_no)
                                   FROM giuw_pol_dist
                                  WHERE par_id =
                                           (SELECT par_id
                                              FROM gipi_polbasic
                                             WHERE endt_seq_no = 0
                                               AND (line_cd,
                                                    subline_cd,
                                                    iss_cd,
                                                    issue_yy,
                                                    pol_seq_no,
                                                    renew_no
                                                   ) =
                                                      (SELECT line_cd,
                                                              subline_cd,
                                                              iss_cd,
                                                              issue_yy,
                                                              pol_seq_no,
                                                              renew_no
                                                         FROM gipi_wpolbas
                                                        WHERE par_id =
                                                                      p_par_id))))
            LOOP
               v_exist      := 'Y';
               v_share_cd := c.share_cd;
               v_dist_spct := c.dist_spct;
               v_dist_spct1 := c.dist_spct1;
               v_dist_tsi := ROUND (((p_dist_tsi * c.dist_spct) / 100), 2);
               v_dist_prem := ROUND (((p_dist_prem * NVL(c.dist_spct1, c.dist_spct)) / 100), 2);
               v_ann_dist_tsi :=
                           ROUND (((p_ann_dist_tsi * c.dist_spct) / 100), 2);
               v_sum_dist_tsi := NVL (v_sum_dist_tsi, 0)
                                 + NVL (v_dist_tsi, 0);
               v_sum_dist_prem :=
                               NVL (v_sum_dist_prem, 0)
                               + NVL (v_dist_prem, 0);
               v_sum_ann_dist_tsi :=
                         NVL (v_sum_ann_dist_tsi, 0)
                         + NVL (v_ann_dist_tsi, 0);
               insert_to_witemds_dtl;
            END LOOP;
            
            IF v_exist = 'N' THEN   -- shan 06.20.2014
                get_dflt_values;
            END IF;   
         ELSE
               /* Create the default distribution records based on the 100%
            ** NET RETENTION and 0% FACULTATIVE hard code defaults. * / -- replaced with codes below : shan 06.20.2014
            v_share_cd := 1;
            v_dist_spct := 100;
            v_dist_spct1 := 100;
            v_dist_tsi := p_dist_tsi;
            v_dist_prem := p_dist_prem;
            v_ann_dist_tsi := p_ann_dist_tsi;

            FOR c IN 1 .. 2
            LOOP
               insert_to_witemds_dtl;
               v_share_cd := 999;
               v_dist_spct := 0;
               v_dist_spct1 := 0;
               v_dist_tsi := 0;
               v_dist_prem := 0;
               v_ann_dist_tsi := 0;
            END LOOP;*/            
            
            IF v_exist = 'N' THEN   -- shan 06.20.2014
                get_dflt_values;
            END IF;   
         END IF;
      ELSE
         NULL;
      /* comment ko muna kasi si p_rg_count ay laging 0
      ** so never sya papasok sa else condition
      ** Niknok 03-29-2011
      */

      /*rg_id             := FIND_GROUP(rg_name);
      IF NOT id_null(rg_id) THEN
         v_selection_count := GET_GROUP_SELECTION_COUNT(rg_id);
      END IF;

      FOR c IN 1..v_selection_count
      LOOP
        v_row           := GET_GROUP_SELECTION(rg_id, c);
        v_dist_spct     := GET_GROUP_NUMBER_CELL(rg_col7, v_row);
        v_sum_dist_spct := v_sum_dist_spct + v_dist_spct;
        IF v_sum_dist_spct != 100 THEN
           v_dist_tsi         := ROUND(((p_dist_tsi     * v_dist_spct)/ 100), 2);
           v_dist_prem        := ROUND(((p_dist_prem    * v_dist_spct)/ 100), 2);
           v_ann_dist_tsi     := ROUND(((p_ann_dist_tsi * v_dist_spct)/ 100), 2);
           v_sum_dist_tsi     := v_sum_dist_tsi     + v_dist_tsi;
           v_sum_dist_prem    := v_sum_dist_prem    + v_dist_prem;
           v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
        ELSE
           v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
           v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
           v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
        END IF;
        v_share_cd     := GET_GROUP_NUMBER_CELL(rg_col2, v_row);
        INSERT_TO_WITEMDS_DTL;
      END LOOP;*/
      END IF;
   END;

   PROCEDURE crt_grp_dflt_wperilds_giuws005 (
      p_dist_no        IN   giuw_wperilds_dtl.dist_no%TYPE,
      p_dist_seq_no    IN   giuw_wperilds_dtl.dist_seq_no%TYPE,
      p_line_cd        IN   giuw_wperilds_dtl.line_cd%TYPE,
      p_peril_cd       IN   giuw_wperilds_dtl.peril_cd%TYPE,
      p_dist_tsi       IN   giuw_wperilds_dtl.dist_tsi%TYPE,
      p_dist_prem      IN   giuw_wperilds_dtl.dist_prem%TYPE,
      p_ann_dist_tsi   IN   giuw_wperilds_dtl.ann_dist_tsi%TYPE,
      p_rg_count       IN   NUMBER,
      p_default_no      IN       giis_default_dist.default_no%TYPE,   -- shan 06.20.2014
      p_default_type    IN       giis_default_dist.default_type%TYPE,   -- shan 06.20.2014
      p_dflt_netret_pct IN       giis_default_dist.dflt_netret_pct%TYPE,  -- shan 06.20.2014
      p_item_grp        IN       gipi_witem.item_grp%TYPE,              -- shan 06.20.2014
      p_currency_rt      IN       gipi_witem.currency_rt%TYPE,      -- shan 06.20.2014
      p_pol_flag       IN   gipi_wpolbas.pol_flag%TYPE,
      p_par_id         IN   gipi_wpolbas.par_id%TYPE,
      p_par_type       IN   gipi_parlist.par_type%TYPE
   )
   IS
      --rg_id        RECORDGROUP;
      rg_name              VARCHAR2 (20)                := 'DFLT_DIST_VALUES';
      rg_col2              VARCHAR2 (40)            := rg_name || '.share_cd';
      rg_col7              VARCHAR2 (40)            := rg_name || '.true_pct';
      v_selection_count    NUMBER;
      v_row                NUMBER;
      v_dist_spct          giuw_wperilds_dtl.dist_spct%TYPE;
      v_dist_spct1         giuw_wperilds_dtl.dist_spct1%TYPE;
      v_dist_tsi           giuw_wperilds_dtl.dist_tsi%TYPE;
      v_dist_prem          giuw_wperilds_dtl.dist_prem%TYPE;
      v_ann_dist_tsi       giuw_wperilds_dtl.ann_dist_tsi%TYPE;
      v_share_cd           giis_dist_share.share_cd%TYPE;
      v_sum_dist_tsi       giuw_wperilds_dtl.dist_tsi%TYPE       := 0;
      v_sum_dist_spct      giuw_wperilds_dtl.dist_spct%TYPE      := 0;
      v_sum_dist_spct1     giuw_wperilds_dtl.dist_spct1%TYPE     := 0;
      v_sum_dist_prem      giuw_wperilds_dtl.dist_prem%TYPE      := 0;
      v_sum_ann_dist_tsi   giuw_wperilds_dtl.ann_dist_tsi%TYPE   := 0;
      -- shan 06.20.2014
      v_remaining_tsi      NUMBER               := p_dist_tsi * p_currency_rt;
      v_share_amt          giis_default_dist_group.share_amt1%TYPE;
      v_peril_cd           giis_default_dist_group.peril_cd%TYPE;
      v_prev_peril_cd      giis_default_dist_group.peril_cd%TYPE;
      v_use_share_amt2     VARCHAR2 (1)                              := 'N';
      v_dist_spct_limit    NUMBER;
      v_exist               VARCHAR2(1) := 'N'; 
      v_dflt_dist_exist    VARCHAR2 (1) := 'N'; 
      
      CURSOR dist_grp_cur -- shan 06.20.2014
      IS
         SELECT   a.share_cd, a.peril_cd, a.share_pct, a.share_amt1, a.SHARE_AMT2
             FROM giis_default_dist_group a
            WHERE a.default_no = p_default_no
              AND a.line_cd = p_line_cd
              AND a.share_cd <> 999
         ORDER BY a.SEQUENCE ASC;

      PROCEDURE insert_to_wperilds_dtl
      IS
      BEGIN
         INSERT INTO giuw_wperilds_dtl
                     (dist_no, dist_seq_no, line_cd, share_cd,
                      dist_spct, dist_tsi, dist_spct1, dist_prem,
                      ann_dist_spct, ann_dist_tsi, dist_grp, peril_cd
                     )
              VALUES (p_dist_no, p_dist_seq_no, p_line_cd, v_share_cd,
                      v_dist_spct, v_dist_tsi, v_dist_spct1, v_dist_prem,
                      v_dist_spct, v_ann_dist_tsi, 1, p_peril_cd
                     );
      END;
      
      -- added by shan 06.20.2014
      PROCEDURE get_dflt_values
      IS
      BEGIN
            -- Use AMOUNTS to create the default distribution records. --
            /*IF p_default_type = 1 THEN        -- commented out code for the meantime : shan 06.23.2014
                FOR c IN dist_grp_cur
                LOOP
                    v_dflt_dist_exist := 'Y';
                    v_peril_cd    := c.peril_cd;
                    IF v_peril_cd IS NOT NULL THEN
                        IF NVL(v_prev_peril_cd, 0) = v_peril_cd THEN
                            NULL;
                        ELSE
                            v_use_share_amt2 := 'N';
                            FOR c1 IN (SELECT 'a'
                                      FROM gipi_witmperl B490, gipi_witem B480
                                     WHERE B490.peril_cd = v_peril_cd
                                       AND B490.line_cd  = p_line_cd
                                       AND B490.item_no  = B480.item_no
                                       AND B490.par_id   = B480.par_id
                                       AND B480.item_grp = p_item_grp
                                       AND B480.par_id   = p_par_id)
                            LOOP
                                v_use_share_amt2 := 'Y';
                                EXIT;
                            END LOOP;
                            v_prev_peril_cd := v_peril_cd;
                        END IF;
                    END IF;
                    
                    IF v_use_share_amt2 = 'N' THEN
                        v_share_amt  := c.share_amt1;
                    ELSE
                        v_share_amt  := c.share_amt2;
                    END IF;
                    
                    IF v_remaining_tsi >= v_share_amt THEN
                        v_dist_tsi      := v_share_amt / p_currency_rt;
                        v_remaining_tsi := v_remaining_tsi - v_share_amt;
                    ELSE
                        v_remaining_tsi := 0;
                    END IF;
                    
                    IF v_remaining_tsi != 0 THEN
                        v_dist_spct        := ROUND(v_dist_tsi / p_dist_tsi * 100, 9);
                        v_dist_spct1       := ROUND(v_dist_prem / p_dist_prem * 100, 9); -- shan 06.20.2014
                        v_dist_tsi         := ROUND(p_dist_tsi     * v_dist_spct / 100, 2);
                        v_dist_prem        := ROUND(p_dist_prem    * v_dist_spct1 / 100, 2);
                        v_ann_dist_tsi     := ROUND(p_ann_dist_tsi * v_dist_spct / 100, 2);
                        v_sum_dist_spct    := v_sum_dist_spct    + v_dist_spct;
                        v_sum_dist_spct1   := v_sum_dist_spct1    + v_dist_spct1;
                        v_sum_dist_tsi     := v_sum_dist_tsi     + v_dist_tsi;
                        v_sum_dist_prem    := v_sum_dist_prem    + v_dist_prem;
                        v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
                    ELSIF v_remaining_tsi = 0 THEN
                        v_dist_spct    := 100            - v_sum_dist_spct;
                        v_dist_spct1   := 100            - v_sum_dist_spct1;
                        v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
                        v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                        v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
                    END IF;
                                       
                    v_share_cd := c.share_cd;           
                    INSERT_TO_WPERILDS_DTL;
                                       
                    IF v_remaining_tsi = 0 THEN
                      EXIT;
                    END IF;
                END LOOP;
                
                IF v_remaining_tsi != 0  THEN
                    v_dist_spct    := 100            - v_sum_dist_spct;
                    v_dist_spct1   := 100            - v_sum_dist_spct1;
                    v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
                    v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                    v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
                    v_share_cd     := '999';
                    --p_rg_count     := p_rg_count + 1;

                    INSERT_TO_WPERILDS_DTL;
                END IF;

            -- Use PERCENTAGES to create the default distribution records. --
            ELSIF p_default_type = 2 THEN
                FOR c IN dist_grp_cur
                LOOP
                    v_dflt_dist_exist := 'Y';
                    v_dist_spct     := c.share_pct;
                    v_dist_spct1    := c.share_pct; -- shan 06.20.2014
                    v_share_amt     := c.share_amt1;
                    IF v_share_amt IS NOT NULL THEN
                        v_dist_tsi        := v_share_amt / p_currency_rt;
                        v_dist_spct_limit := ROUND(v_dist_tsi / p_dist_tsi * 100, 14);
                        IF v_dist_spct > v_dist_spct_limit THEN
                            v_dist_spct := v_dist_spct_limit;
                        END IF;
                    END IF;
                    
                    v_sum_dist_spct := NVL(v_sum_dist_spct, 0) + v_dist_spct;
                    v_sum_dist_spct1 := NVL(v_sum_dist_spct1, 0) + v_dist_spct1;    -- shan 06.20.2014
                    
                    IF v_sum_dist_spct != 100 THEN
                        v_dist_tsi         := ROUND(p_dist_tsi     * v_dist_spct / 100, 2);
                        v_dist_prem        := ROUND(p_dist_prem    * v_dist_spct1 / 100, 2);
                        v_ann_dist_tsi     := ROUND(p_ann_dist_tsi * v_dist_spct / 100, 2);
                        v_sum_dist_tsi     := v_sum_dist_tsi     + v_dist_tsi;
                        v_sum_dist_prem    := v_sum_dist_prem    + v_dist_prem;
                        v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
                    ELSE
                        v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
                        v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
                        v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                    END IF;
                    
                    v_share_cd      := c.share_cd;
                    INSERT_TO_WPERILDS_DTL;
                END LOOP;
                
                IF v_sum_dist_spct != 100 THEN
                    v_dist_spct    := 100            - v_sum_dist_spct;
                    v_dist_spct1   := 100            - v_sum_dist_spct1;
                    v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
                    v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
                    v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                    v_share_cd     := '999';
                    --p_rg_count     := p_rg_count + 1;
                    INSERT_TO_WPERILDS_DTL;
                END IF;
            END IF;
          
            /* If GIIS_DEFAULT_DIST_PERIL does not contain a record that
            ** corresponds to the particular peril being distributed,
            ** then use the value of the DFLT_NETRET_PCT column retrieved
            ** from table GIIS_DEFAULT_DIST. * /
            IF v_dflt_dist_exist = 'N' AND p_dflt_netret_pct IS NOT NULL
                THEN
                IF p_dflt_netret_pct != 100
                THEN
                   v_dist_spct := p_dflt_netret_pct;
                   v_dist_spct1 := p_dflt_netret_pct;
                   v_dist_tsi := ROUND (p_dist_tsi * p_dflt_netret_pct / 100, 2);
                   v_dist_prem := ROUND (p_dist_prem * p_dflt_netret_pct / 100, 2);
                   v_ann_dist_tsi := ROUND (p_ann_dist_tsi * p_dflt_netret_pct / 100, 2);
                   v_sum_dist_tsi := v_sum_dist_tsi + v_dist_tsi;
                   v_sum_dist_prem := v_sum_dist_prem + v_dist_prem;
                   v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
                ELSE
                   v_dist_spct := p_dflt_netret_pct;
                   v_dist_spct1 := p_dflt_netret_pct;
                   v_dist_tsi := p_dist_tsi;
                   v_dist_prem := p_dist_prem;
                   v_ann_dist_tsi := p_ann_dist_tsi;
                END IF;

                v_share_cd := 1;
                insert_to_wperilds_dtl;

                IF p_dflt_netret_pct != 100
                THEN
                   v_dist_spct := 100 - p_dflt_netret_pct;
                   v_dist_spct1 := 100 - p_dflt_netret_pct;
                   v_dist_tsi := p_dist_tsi - v_sum_dist_tsi;
                   v_dist_prem := p_dist_prem - v_sum_dist_prem;
                   v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                   v_share_cd := '999';
                   insert_to_wperilds_dtl;
                END IF;
            /* If no default distribution record was found in table
            ** GIIS_DEFAULT_DIST, then create the record using
            ** the traditional 100% NET RETENTION, 0% FACULTATIVE
            ** default. * /
            ELSIF v_dflt_dist_exist = 'N'
            THEN
                /* Create the default distribution records based on the 100%
                ** NET RETENTION and 0% FACULTATIVE hard code defaults. */
                v_share_cd := 1;
                v_dist_spct := 100;
                v_dist_spct1 := 100;
                v_dist_tsi := p_dist_tsi;
                v_dist_prem := p_dist_prem;
                v_ann_dist_tsi := p_ann_dist_tsi;

                FOR c IN 1 .. 2
                LOOP
                   insert_to_wperilds_dtl;
                   v_share_cd := 999;
                   v_dist_spct := 0;
                   v_dist_spct1 := 0;
                   v_dist_tsi := 0;
                   v_dist_prem := 0;
                   v_ann_dist_tsi := 0;
                END LOOP;
            --END IF;
      END; 
   BEGIN
      IF p_rg_count = 0
      THEN
                 -- rollie 27may2005 vincent's birthday
         -- see procedure create_items for other info
         IF p_pol_flag = '2'
         THEN                                                      -- renewal
            ---message('pol flag 2');pause;
            FOR c IN (SELECT share_cd, dist_spct, dist_spct1
                        FROM giuw_policyds_dtl a
                       WHERE a.dist_seq_no = p_dist_seq_no
                         AND dist_no =
                                (SELECT MAX (dist_no)
                                   FROM giuw_pol_dist
                                  WHERE policy_id = (SELECT MAX(a.old_policy_id)
                                                       FROM gipi_wpolnrep a
                                                           ,gipi_parlist b
                                                      WHERE a.par_id = p_par_id
                                                        AND a.ren_rep_sw = '1'
                                                        AND a.par_id = b.par_id
                                                        AND b.par_status NOT IN (98, 99))))
            LOOP
               --message(v_share_cd||' - '||v_dist_spct||' - '||v_dist_tsi||' - '||v_dist_prem||' - '||p_peril_cd);pause;
               v_exist      := 'Y';
               v_share_cd := c.share_cd;
               v_dist_spct := c.dist_spct;
               v_dist_spct1 := c.dist_spct1;
               v_dist_tsi := ROUND (((p_dist_tsi * c.dist_spct) / 100), 2);
               v_dist_prem := ROUND (((p_dist_prem * NVL(c.dist_spct1, c.dist_spct)) / 100), 2);
               v_ann_dist_tsi :=
                           ROUND (((p_ann_dist_tsi * c.dist_spct) / 100), 2);
               v_sum_dist_tsi := NVL (v_sum_dist_tsi, 0)
                                 + NVL (v_dist_tsi, 0);
               v_sum_dist_prem :=
                               NVL (v_sum_dist_prem, 0)
                               + NVL (v_dist_prem, 0);
               v_sum_ann_dist_tsi :=
                         NVL (v_sum_ann_dist_tsi, 0)
                         + NVL (v_ann_dist_tsi, 0);
               --message(v_share_cd||' - '||v_dist_spct||' - '||v_dist_tsi||' - '||v_dist_prem||' - '||p_peril_cd);pause;
               insert_to_wperilds_dtl;
            END LOOP;
            
            IF v_exist = 'N' THEN   -- shan 06.18.2014
                get_dflt_values;
            END IF;
         ELSIF p_par_type = 'E'
         THEN
            --message ('insert');pause;
            FOR c IN (SELECT share_cd, dist_spct, dist_spct1
                        FROM giuw_policyds_dtl a
                       WHERE a.dist_seq_no = p_dist_seq_no
                         AND dist_no =
                                (SELECT MAX (dist_no)
                                   FROM giuw_pol_dist
                                  WHERE par_id =
                                           (SELECT par_id
                                              FROM gipi_polbasic
                                             WHERE endt_seq_no = 0
                                               AND (line_cd,
                                                    subline_cd,
                                                    iss_cd,
                                                    issue_yy,
                                                    pol_seq_no,
                                                    renew_no
                                                   ) =
                                                      (SELECT line_cd,
                                                              subline_cd,
                                                              iss_cd,
                                                              issue_yy,
                                                              pol_seq_no,
                                                              renew_no
                                                         FROM gipi_wpolbas
                                                        WHERE par_id =
                                                                      p_par_id))))
            LOOP
               v_exist      := 'Y';
               v_share_cd := c.share_cd;
               v_dist_spct := c.dist_spct;
               v_dist_spct1 := c.dist_spct1;
               v_dist_tsi := ROUND (((p_dist_tsi * c.dist_spct) / 100), 2);
               v_dist_prem := ROUND (((p_dist_prem * NVL(c.dist_spct1, c.dist_spct)) / 100), 2);
               v_ann_dist_tsi :=
                           ROUND (((p_ann_dist_tsi * c.dist_spct) / 100), 2);
               v_sum_dist_tsi := NVL (v_sum_dist_tsi, 0)
                                 + NVL (v_dist_tsi, 0);
               v_sum_dist_prem :=
                               NVL (v_sum_dist_prem, 0)
                               + NVL (v_dist_prem, 0);
               v_sum_ann_dist_tsi :=
                         NVL (v_sum_ann_dist_tsi, 0)
                         + NVL (v_ann_dist_tsi, 0);
               insert_to_wperilds_dtl;
            END LOOP;
            
            IF v_exist = 'N' THEN   -- shan 06.18.2014
                get_dflt_values;
            END IF;
         ELSE
               /* Create the default distribution records based on the 100%
            ** NET RETENTION and 0% FACULTATIVE hard code defaults. * / -- replaced with codes below : shan 06.20.2014
            v_share_cd := 1;
            v_dist_spct := 100;
            v_dist_spct1 := 100;
            v_dist_tsi := p_dist_tsi;
            v_dist_prem := p_dist_prem;
            v_ann_dist_tsi := p_ann_dist_tsi;

            FOR c IN 1 .. 2
            LOOP
               insert_to_wperilds_dtl;
               v_share_cd := 999;
               v_dist_spct := 0;
               v_dist_spct1 := 0;
               v_dist_tsi := 0;
               v_dist_prem := 0;
               v_ann_dist_tsi := 0;
            END LOOP;*/
            
            IF v_exist = 'N' THEN   -- shan 06.18.2014
                get_dflt_values;
            END IF;
         END IF;
      ELSE
         NULL;
      /* comment ko muna kasi si p_rg_count ay laging 0
      ** so never sya papasok sa else condition
      ** Niknok 03-29-2011
      */

      /*rg_id             := FIND_GROUP(rg_name);
      IF NOT id_null(rg_id) THEN
         v_selection_count := GET_GROUP_SELECTION_COUNT(rg_id);
      END IF;

      FOR c IN 1..v_selection_count
      LOOP
        v_row           := GET_GROUP_SELECTION(rg_id, c);
        v_dist_spct     := GET_GROUP_NUMBER_CELL(rg_col7, v_row);
        v_sum_dist_spct := v_sum_dist_spct + v_dist_spct;

        IF v_sum_dist_spct != 100 THEN
           v_dist_tsi         := ROUND(p_dist_tsi         * v_dist_spct / 100, 2);
           v_dist_prem        := ROUND(p_dist_prem        * v_dist_spct / 100, 2);
           v_ann_dist_tsi     := ROUND(p_ann_dist_tsi     * v_dist_spct / 100, 2);
           v_sum_dist_tsi     := v_sum_dist_tsi     + v_dist_tsi;
           v_sum_dist_prem    := v_sum_dist_prem    + v_dist_prem;
           v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
        ELSE
           v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
           v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
           v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
        END IF;
        v_share_cd     := GET_GROUP_NUMBER_CELL(rg_col2, v_row);
        INSERT_TO_WPERILDS_DTL;
      END LOOP; */
      END IF;
   END;

   PROCEDURE ct_grp_dflt_witmperld_giuws005 (
      p_dist_no        IN   giuw_witemperilds_dtl.dist_no%TYPE,
      p_dist_seq_no    IN   giuw_witemperilds_dtl.dist_seq_no%TYPE,
      p_item_no        IN   giuw_witemperilds_dtl.item_no%TYPE,
      p_line_cd        IN   giuw_witemperilds_dtl.line_cd%TYPE,
      p_peril_cd       IN   giuw_witemperilds_dtl.peril_cd%TYPE,
      p_dist_tsi       IN   giuw_witemperilds_dtl.dist_tsi%TYPE,
      p_dist_prem      IN   giuw_witemperilds_dtl.dist_prem%TYPE,
      p_ann_dist_tsi   IN   giuw_witemperilds_dtl.ann_dist_tsi%TYPE,
      p_rg_count       IN   NUMBER,
      p_default_no      IN       giis_default_dist.default_no%TYPE,   -- shan 06.20.2014
      p_default_type    IN       giis_default_dist.default_type%TYPE,   -- shan 06.20.2014
      p_dflt_netret_pct IN       giis_default_dist.dflt_netret_pct%TYPE,  -- shan 06.20.2014
      p_item_grp        IN       gipi_witem.item_grp%TYPE,              -- shan 06.20.2014
      p_currency_rt      IN       gipi_witem.currency_rt%TYPE,      -- shan 06.20.2014
      p_pol_flag       IN   gipi_wpolbas.pol_flag%TYPE,
      p_par_id         IN   gipi_wpolbas.par_id%TYPE,
      p_par_type       IN   gipi_parlist.par_type%TYPE
   )
   IS
      --rg_id        RECORDGROUP;
      rg_name              VARCHAR2 (20)                := 'DFLT_DIST_VALUES';
      rg_col2              VARCHAR2 (40)            := rg_name || '.share_cd';
      rg_col7              VARCHAR2 (40)            := rg_name || '.true_pct';
      v_selection_count    NUMBER;
      v_row                NUMBER;
      v_dist_spct          giuw_witemperilds_dtl.dist_spct%TYPE;
      v_dist_spct1         giuw_witemperilds_dtl.dist_spct1%TYPE;
      v_dist_tsi           giuw_witemperilds_dtl.dist_tsi%TYPE;
      v_dist_prem          giuw_witemperilds_dtl.dist_prem%TYPE;
      v_ann_dist_tsi       giuw_witemperilds_dtl.ann_dist_tsi%TYPE;
      v_share_cd           giis_dist_share.share_cd%TYPE;
      v_peril_type         giis_peril.peril_type%TYPE;
      v_sum_dist_tsi       giuw_witemperilds_dtl.dist_tsi%TYPE       := 0;
      v_sum_dist_spct      giuw_witemperilds_dtl.dist_spct%TYPE      := 0;
      v_sum_dist_spct1     giuw_witemperilds_dtl.dist_spct1%TYPE     := 0;
      v_sum_dist_prem      giuw_witemperilds_dtl.dist_prem%TYPE      := 0;
      v_sum_ann_dist_tsi   giuw_witemperilds_dtl.ann_dist_tsi%TYPE   := 0;
      -- shan 06.20.2014
      v_remaining_tsi      NUMBER               := p_dist_tsi * p_currency_rt;
      v_share_amt          giis_default_dist_group.share_amt1%TYPE;
      v_peril_cd           giis_default_dist_group.peril_cd%TYPE;
      v_prev_peril_cd      giis_default_dist_group.peril_cd%TYPE;
      v_use_share_amt2     VARCHAR2 (1)                              := 'N';
      v_dist_spct_limit    NUMBER;
      v_exist               VARCHAR2(1) := 'N'; -- shan 06.18.2014
      v_dflt_dist_exist    VARCHAR2 (1) := 'N'; -- shan 06.20.2014

      CURSOR dist_grp_cur -- shan 06.20.2014
      IS
         SELECT   a.share_cd, a.peril_cd, a.share_pct, a.share_amt1, a.SHARE_AMT2
             FROM giis_default_dist_group a
            WHERE a.default_no = p_default_no
              AND a.line_cd = p_line_cd
              AND a.share_cd <> 999
         ORDER BY a.SEQUENCE ASC;
         
      PROCEDURE insert_to_witemperilds_dtl
      IS
      BEGIN
         INSERT INTO giuw_witemperilds_dtl
                     (dist_no, dist_seq_no, line_cd, share_cd,
                      dist_spct, dist_tsi, dist_spct1, dist_prem,
                      ann_dist_spct, ann_dist_tsi, dist_grp, item_no,
                      peril_cd
                     )
              VALUES (p_dist_no, p_dist_seq_no, p_line_cd, v_share_cd,
                      v_dist_spct, v_dist_tsi, v_dist_spct1, v_dist_prem,
                      v_dist_spct, v_ann_dist_tsi, 1, p_item_no,
                      p_peril_cd
                     );
      END;
      
      -- added by shan 06.20.2014
      PROCEDURE get_dflt_values
      IS
      BEGIN
            -- Use AMOUNTS to create the default distribution records. --
            /*IF p_default_type = 1 THEN    -- commented out code for the meantime : shan 06.23.2014
                FOR c IN dist_grp_cur
                LOOP
                    v_dflt_dist_exist := 'Y';
                    v_peril_cd    := c.peril_cd;
                    IF v_peril_cd IS NOT NULL THEN
                        IF NVL(v_prev_peril_cd, 0) = v_peril_cd THEN
                            NULL;
                        ELSE
                            v_use_share_amt2 := 'N';
                            FOR c1 IN (SELECT 'a'
                                      FROM gipi_witmperl B490, gipi_witem B480
                                     WHERE B490.peril_cd = v_peril_cd
                                       AND B490.line_cd  = p_line_cd
                                       AND B490.item_no  = B480.item_no
                                       AND B490.par_id   = B480.par_id
                                       AND B480.item_grp = p_item_grp
                                       AND B480.par_id   = p_par_id)
                            LOOP
                                v_use_share_amt2 := 'Y';
                                EXIT;
                            END LOOP;
                            v_prev_peril_cd := v_peril_cd;
                        END IF;
                    END IF;
                    
                    IF v_use_share_amt2 = 'N' THEN
                        v_share_amt  := c.share_amt1;
                    ELSE
                        v_share_amt  := c.share_amt2;
                    END IF;
                    
                    IF v_remaining_tsi >= v_share_amt THEN
                        v_dist_tsi      := v_share_amt / p_currency_rt;
                        v_remaining_tsi := v_remaining_tsi - v_share_amt;
                    ELSE
                        v_remaining_tsi := 0;
                    END IF;
                    
                    IF v_remaining_tsi != 0 THEN
                        v_dist_spct        := ROUND(v_dist_tsi / p_dist_tsi * 100, 9);
                        v_dist_spct1       := ROUND(v_dist_prem / p_dist_prem * 100, 9); -- shan 06.20.2014
                        v_dist_tsi         := ROUND(p_dist_tsi     * v_dist_spct / 100, 2);
                        v_dist_prem        := ROUND(p_dist_prem    * v_dist_spct1 / 100, 2);
                        v_ann_dist_tsi     := ROUND(p_ann_dist_tsi * v_dist_spct / 100, 2);
                        v_sum_dist_spct    := v_sum_dist_spct    + v_dist_spct;
                        v_sum_dist_spct1   := v_sum_dist_spct1    + v_dist_spct1;
                        v_sum_dist_tsi     := v_sum_dist_tsi     + v_dist_tsi;
                        v_sum_dist_prem    := v_sum_dist_prem    + v_dist_prem;
                        v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
                    ELSIF v_remaining_tsi = 0 THEN
                        v_dist_spct    := 100            - v_sum_dist_spct;
                        v_dist_spct1   := 100            - v_sum_dist_spct1;
                        v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
                        v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                        v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
                    END IF;
                                       
                    v_share_cd := c.share_cd;           
                    INSERT_TO_WITEMPERILDS_DTL;
                                       
                    IF v_remaining_tsi = 0 THEN
                      EXIT;
                    END IF;
                END LOOP;
                
                IF v_remaining_tsi != 0  THEN
                    v_dist_spct    := 100            - v_sum_dist_spct;
                    v_dist_spct1   := 100            - v_sum_dist_spct1;
                    v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
                    v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                    v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
                    v_share_cd     := '999';
                    --p_rg_count     := p_rg_count + 1;

                    INSERT_TO_WITEMPERILDS_DTL;
                END IF;

            -- Use PERCENTAGES to create the default distribution records. --
            ELSIF p_default_type = 2 THEN
                FOR c IN dist_grp_cur
                LOOP
                    v_dflt_dist_exist := 'Y';
                    v_dist_spct     := c.share_pct;
                    v_dist_spct1    := c.share_pct; -- shan 06.20.2014
                    v_share_amt     := c.share_amt1;
                    IF v_share_amt IS NOT NULL THEN
                        v_dist_tsi        := v_share_amt / p_currency_rt;
                        v_dist_spct_limit := ROUND(v_dist_tsi / p_dist_tsi * 100, 14);
                        IF v_dist_spct > v_dist_spct_limit THEN
                            v_dist_spct := v_dist_spct_limit;
                        END IF;
                    END IF;
                    
                    v_sum_dist_spct := NVL(v_sum_dist_spct, 0) + v_dist_spct;
                    v_sum_dist_spct1 := NVL(v_sum_dist_spct1, 0) + v_dist_spct1;    -- shan 06.20.2014
                    
                    IF v_sum_dist_spct != 100 THEN
                        v_dist_tsi         := ROUND(p_dist_tsi     * v_dist_spct / 100, 2);
                        v_dist_prem        := ROUND(p_dist_prem    * v_dist_spct1 / 100, 2);
                        v_ann_dist_tsi     := ROUND(p_ann_dist_tsi * v_dist_spct / 100, 2);
                        v_sum_dist_tsi     := v_sum_dist_tsi     + v_dist_tsi;
                        v_sum_dist_prem    := v_sum_dist_prem    + v_dist_prem;
                        v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
                    ELSE
                        v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
                        v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
                        v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                    END IF;
                    
                    v_share_cd      := c.share_cd;
                    INSERT_TO_WITEMPERILDS_DTL;
                END LOOP;
                
                IF v_sum_dist_spct != 100 THEN
                    v_dist_spct    := 100            - v_sum_dist_spct;
                    v_dist_spct1   := 100            - v_sum_dist_spct1;
                    v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
                    v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
                    v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                    v_share_cd     := '999';
                    --p_rg_count     := p_rg_count + 1;
                    INSERT_TO_WITEMPERILDS_DTL;
                END IF;
            END IF;
          
            /* If GIIS_DEFAULT_DIST_PERIL does not contain a record that
            ** corresponds to the particular peril being distributed,
            ** then use the value of the DFLT_NETRET_PCT column retrieved
            ** from table GIIS_DEFAULT_DIST. * /
            IF v_dflt_dist_exist = 'N' AND p_dflt_netret_pct IS NOT NULL
                THEN
                IF p_dflt_netret_pct != 100
                THEN
                   v_dist_spct := p_dflt_netret_pct;
                   v_dist_spct1 := p_dflt_netret_pct;
                   v_dist_tsi := ROUND (p_dist_tsi * p_dflt_netret_pct / 100, 2);
                   v_dist_prem := ROUND (p_dist_prem * p_dflt_netret_pct / 100, 2);
                   v_ann_dist_tsi := ROUND (p_ann_dist_tsi * p_dflt_netret_pct / 100, 2);
                   v_sum_dist_tsi := v_sum_dist_tsi + v_dist_tsi;
                   v_sum_dist_prem := v_sum_dist_prem + v_dist_prem;
                   v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
                ELSE
                   v_dist_spct := p_dflt_netret_pct;
                   v_dist_spct1 := p_dflt_netret_pct;
                   v_dist_tsi := p_dist_tsi;
                   v_dist_prem := p_dist_prem;
                   v_ann_dist_tsi := p_ann_dist_tsi;
                END IF;

                v_share_cd := 1;
                insert_to_witemperilds_dtl;

                IF p_dflt_netret_pct != 100
                THEN
                   v_dist_spct := 100 - p_dflt_netret_pct;
                   v_dist_spct1 := 100 - p_dflt_netret_pct;
                   v_dist_tsi := p_dist_tsi - v_sum_dist_tsi;
                   v_dist_prem := p_dist_prem - v_sum_dist_prem;
                   v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                   v_share_cd := '999';
                   insert_to_witemperilds_dtl;
                END IF;
            /* If no default distribution record was found in table
            ** GIIS_DEFAULT_DIST, then create the record using
            ** the traditional 100% NET RETENTION, 0% FACULTATIVE
            ** default. * /
            ELSIF v_dflt_dist_exist = 'N'
            THEN
                /* Create the default distribution records based on the 100%
                ** NET RETENTION and 0% FACULTATIVE hard code defaults. */
                v_share_cd := 1;
                v_dist_spct := 100;
                v_dist_spct1 := 100;
                v_dist_tsi := p_dist_tsi;
                v_dist_prem := p_dist_prem;
                v_ann_dist_tsi := p_ann_dist_tsi;

                FOR c IN 1 .. 2
                LOOP
                   insert_to_witemperilds_dtl;
                   v_share_cd := 999;
                   v_dist_spct := 0;
                   v_dist_spct1 := 0;
                   v_dist_tsi := 0;
                   v_dist_prem := 0;
                   v_ann_dist_tsi := 0;
                END LOOP;
           -- END IF;
      END; 
   BEGIN
      --msg_alert('item no '||p_item_no||' peril cd '||p_peril_cd,'I',FALSE);
      IF p_rg_count = 0
      THEN
         -- rollie 27may2005 vincent's birthday
         -- see procedure create_items for other info
         IF p_pol_flag = '2'
         THEN                                                      -- renewal
            --message('pol flag 2');pause;
            FOR c IN (SELECT share_cd, dist_spct, dist_spct1
                        FROM giuw_policyds_dtl a
                       WHERE a.dist_seq_no = p_dist_seq_no
                         AND dist_no =
                                (SELECT MAX (dist_no)
                                   FROM giuw_pol_dist
                                  WHERE policy_id = (SELECT MAX(a.old_policy_id)
                                                       FROM gipi_wpolnrep a
                                                           ,gipi_parlist b
                                                      WHERE a.par_id = p_par_id
                                                        AND a.ren_rep_sw = '1'
                                                        AND b.par_id = a.par_id
                                                        AND b.par_status NOT IN (98,99))))
            LOOP
               v_exist      := 'Y';
               v_share_cd := c.share_cd;
               v_dist_spct := c.dist_spct;
               v_dist_spct1 := c.dist_spct1;
               v_dist_tsi := ROUND (((p_dist_tsi * c.dist_spct) / 100), 2);
               v_dist_prem := ROUND (((p_dist_prem * NVL(c.dist_spct1, c.dist_spct)) / 100), 2);
               v_ann_dist_tsi :=
                           ROUND (((p_ann_dist_tsi * c.dist_spct) / 100), 2);
               v_sum_dist_tsi := NVL (v_sum_dist_tsi, 0)
                                 + NVL (v_dist_tsi, 0);
               v_sum_dist_prem :=
                               NVL (v_sum_dist_prem, 0)
                               + NVL (v_dist_prem, 0);
               v_sum_ann_dist_tsi :=
                         NVL (v_sum_ann_dist_tsi, 0)
                         + NVL (v_ann_dist_tsi, 0);
               insert_to_witemperilds_dtl;
            END LOOP;
            
            IF v_exist = 'N' THEN   -- shan 06.18.2014
                get_dflt_values;
            END IF;
         ELSIF p_par_type = 'E'
         THEN
            --message ('insert');pause;
            FOR c IN (SELECT share_cd, dist_spct, dist_spct1
                        FROM giuw_policyds_dtl a
                       WHERE a.dist_seq_no = p_dist_seq_no
                         AND dist_no =
                                (SELECT MAX (dist_no)
                                   FROM giuw_pol_dist
                                  WHERE par_id =
                                           (SELECT par_id
                                              FROM gipi_polbasic
                                             WHERE endt_seq_no = 0
                                               AND (line_cd,
                                                    subline_cd,
                                                    iss_cd,
                                                    issue_yy,
                                                    pol_seq_no,
                                                    renew_no
                                                   ) =
                                                      (SELECT line_cd,
                                                              subline_cd,
                                                              iss_cd,
                                                              issue_yy,
                                                              pol_seq_no,
                                                              renew_no
                                                         FROM gipi_wpolbas
                                                        WHERE par_id =
                                                                      p_par_id))))
            LOOP
               v_exist      := 'Y';
               v_share_cd := c.share_cd;
               v_dist_spct := c.dist_spct;
               v_dist_spct1 := c.dist_spct1;
               v_dist_tsi := ROUND (((p_dist_tsi * c.dist_spct) / 100), 2);
               v_ann_dist_tsi :=
                           ROUND (((p_ann_dist_tsi * c.dist_spct) / 100), 2);
               v_dist_prem := ROUND (((p_dist_prem * NVL(c.dist_spct1, c.dist_spct)) / 100), 2);
               v_sum_dist_tsi := NVL (v_sum_dist_tsi, 0)
                                 + NVL (v_dist_tsi, 0);
               v_sum_dist_prem :=
                               NVL (v_sum_dist_prem, 0)
                               + NVL (v_dist_prem, 0);
               v_sum_ann_dist_tsi :=
                         NVL (v_sum_ann_dist_tsi, 0)
                         + NVL (v_ann_dist_tsi, 0);
               insert_to_witemperilds_dtl;
            END LOOP;
            
            IF v_exist = 'N' THEN   -- shan 06.18.2014
                get_dflt_values;
            END IF;
         ELSE
               /* Create the default distribution records based on the 100%
            ** NET RETENTION and 0% FACULTATIVE hard code defaults. * / -- replaced by codes below : shan 06.20.2014
            v_share_cd := 1;
            v_dist_spct := 100;
            v_dist_spct1 := 100;
            v_dist_tsi := p_dist_tsi;
            v_dist_prem := p_dist_prem;
            v_ann_dist_tsi := p_ann_dist_tsi;

            FOR c IN 1 .. 2
            LOOP
               insert_to_witemperilds_dtl;
               v_share_cd := 999;
               v_dist_spct := 0;
               v_dist_spct1 := 0;
               v_dist_tsi := 0;
               v_dist_prem := 0;
               v_ann_dist_tsi := 0;
            END LOOP;*/            
            
            IF v_exist = 'N' THEN   -- shan 06.18.2014
                get_dflt_values;
            END IF;
         END IF;
      ELSE
         NULL;
      /* comment ko muna kasi si p_rg_count ay laging 0
      ** so never sya papasok sa else condition
      ** Niknok 03-29-2011
      */

      /*rg_id             := FIND_GROUP(rg_name);
      IF NOT id_null(rg_id) THEN
         v_selection_count := GET_GROUP_SELECTION_COUNT(rg_id);
      END IF;

      FOR c IN 1..v_selection_count
      LOOP
        v_row           := GET_GROUP_SELECTION(rg_id, c);
        v_dist_spct     := GET_GROUP_NUMBER_CELL(rg_col7, v_row);
        v_sum_dist_spct := v_sum_dist_spct + v_dist_spct;
        IF v_sum_dist_spct != 100 THEN
           v_dist_tsi         := ROUND(p_dist_tsi         * v_dist_spct / 100, 2);
           v_dist_prem        := ROUND(p_dist_prem        * v_dist_spct / 100, 2);
           v_ann_dist_tsi     := ROUND(p_ann_dist_tsi     * v_dist_spct / 100, 2);
           v_sum_dist_tsi     := v_sum_dist_tsi     + v_dist_tsi;
           v_sum_dist_prem    := v_sum_dist_prem    + v_dist_prem;
           v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
        ELSE
           v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
           v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
           v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
        END IF;
        v_share_cd     := GET_GROUP_NUMBER_CELL(rg_col2, v_row);
        INSERT_TO_WITEMPERILDS_DTL;
      END LOOP;*/
      END IF;
   END;

   PROCEDURE upd_dtls_no_share_cd_giuws005 (
      p_dist_no       IN   giuw_pol_dist.dist_no%TYPE,
      p_dist_seq_no   IN   giuw_wpolicyds.dist_seq_no%TYPE,
      p_type          IN   VARCHAR2,
      p_line_cd       IN   gipi_wpolbas.line_cd%TYPE
   )
   IS
      v_share_cd      giuw_witemds_dtl.share_cd%TYPE;
      v_dist_spct     giuw_witemds_dtl.dist_spct%TYPE;
      v_dist_spct1    giuw_witemds_dtl.dist_spct1%TYPE;
      v_dist_tsi      giuw_witemds_dtl.dist_tsi%TYPE;
      --giuw_witemds_dtl.dist_prem%TYPE;    --vj 080409
      v_dist_prem     giuw_witemds_dtl.dist_prem%TYPE;
      v_ann_tsi_amt   giuw_witemds_dtl.ann_dist_tsi%TYPE;
   BEGIN
      /* rollie 25aug2005
      ** populating peril, item, itemperil data to default values
      ** if perils or items are newly created
      */
      IF p_type = 'ITEM'
      THEN
         /*  giuw_witemds_dtl b */
         FOR a1 IN (SELECT a.item_no, a.tsi_amt, a.prem_amt, a.ann_tsi_amt
                      FROM giuw_witemds a
                     WHERE a.dist_no = p_dist_no
                       AND a.dist_seq_no = p_dist_seq_no
                       AND a.item_no NOT IN (
                              SELECT b.item_no
                                FROM giuw_witemds_dtl b
                               WHERE b.dist_no = a.dist_no
                                 AND b.dist_seq_no = a.dist_seq_no))
         LOOP
            --msg_alert('giuw_witemds_dtl excess','I',FALSE);
            v_share_cd := 1;
            v_dist_spct := 100;
            v_dist_spct1 := 100;
            v_dist_tsi := a1.tsi_amt;
            v_dist_prem := a1.prem_amt;
            v_ann_tsi_amt := a1.ann_tsi_amt;

            INSERT INTO giuw_witemds_dtl
                        (dist_no, dist_seq_no, item_no, line_cd,
                         share_cd, dist_spct, dist_tsi, dist_prem,
                         ann_dist_spct, ann_dist_tsi, dist_grp, dist_spct1
                        )
                 VALUES (p_dist_no, p_dist_seq_no, a1.item_no, p_line_cd,
                         v_share_cd, v_dist_spct, a1.tsi_amt, a1.prem_amt,
                         v_dist_spct, a1.ann_tsi_amt, 1, v_dist_spct1
                        );
         END LOOP;

         v_dist_spct := 0;
         v_dist_spct1 := 0;
         v_dist_tsi := 0;
         v_dist_prem := 0;
         v_ann_tsi_amt := 0;
      ELSIF p_type = 'ITEMPERIL'
      THEN
         /*  giuw_witemperilds_dtl b */
         FOR a1 IN (SELECT a.item_no, a.tsi_amt, a.prem_amt, a.ann_tsi_amt,
                           a.peril_cd
                      FROM giuw_witemperilds a
                     WHERE a.dist_no = p_dist_no
                       AND a.dist_seq_no = p_dist_seq_no
                       AND (a.item_no, a.peril_cd) NOT IN (
                              SELECT b.item_no, b.peril_cd
                                FROM giuw_witemperilds_dtl b
                               WHERE b.dist_no = a.dist_no
                                 AND b.dist_seq_no = a.dist_seq_no))
         LOOP
            --msg_alert('giuw_witemperilds_dtl excess','I',FALSE);
            v_share_cd := 1;
            v_dist_spct := 100;
            v_dist_spct1 := 100;
            v_dist_tsi := a1.tsi_amt;
            v_dist_prem := a1.prem_amt;
            v_ann_tsi_amt := a1.ann_tsi_amt;

            INSERT INTO giuw_witemperilds_dtl
                        (dist_no, dist_seq_no, item_no, line_cd,
                         peril_cd, share_cd, dist_spct, dist_tsi,
                         dist_prem, ann_dist_spct, ann_dist_tsi, dist_grp,
                         dist_spct1
                        )
                 VALUES (p_dist_no, p_dist_seq_no, a1.item_no, p_line_cd,
                         a1.peril_cd, v_share_cd, v_dist_spct, v_dist_tsi,
                         v_dist_prem, v_dist_spct, v_ann_tsi_amt, 1,
                         v_dist_spct1
                        );
         END LOOP;

         v_dist_spct := 0;
         v_dist_spct1 := 0;
         v_dist_tsi := 0;
         v_dist_prem := 0;
         v_ann_tsi_amt := 0;
      ELSIF p_type = 'PERIL'
      THEN
         /*  giuw_wperilds_dtl b */
         FOR a1 IN (SELECT a.tsi_amt, a.prem_amt, a.ann_tsi_amt, a.peril_cd
                      FROM giuw_wperilds a
                     WHERE a.dist_no = p_dist_no
                       AND a.dist_seq_no = p_dist_seq_no
                       AND a.peril_cd NOT IN (
                              SELECT b.peril_cd
                                FROM giuw_wperilds_dtl b
                               WHERE b.dist_no = a.dist_no
                                 AND b.dist_seq_no = a.dist_seq_no))
         LOOP
            --msg_alert('giuw_wperilds_dtl excess'||a1.tsi_amt||'-'||a1.prem_amt,'I',FALSE);
            v_share_cd := 1;
            v_dist_spct := 100;
            v_dist_spct1 := 100;
            v_dist_tsi := a1.tsi_amt;
            v_dist_prem := a1.prem_amt;
            v_ann_tsi_amt := a1.ann_tsi_amt;

            INSERT INTO giuw_wperilds_dtl
                        (dist_no, dist_seq_no, line_cd, share_cd,
                         dist_spct, dist_tsi, dist_prem, ann_dist_spct,
                         ann_dist_tsi, dist_grp, peril_cd, dist_spct1
                        )
                 VALUES (p_dist_no, p_dist_seq_no, p_line_cd, v_share_cd,
                         v_dist_spct, v_dist_tsi, v_dist_prem, v_dist_spct,
                         v_ann_tsi_amt, 1, a1.peril_cd, v_dist_spct1
                        );
         END LOOP;
      ELSIF p_type = 'POLICY'
      THEN
         /*  giuw_wperilds_dtl b */
         FOR a1 IN (SELECT a.tsi_amt, a.prem_amt, a.ann_tsi_amt
                      FROM giuw_wpolicyds a
                     WHERE a.dist_no = p_dist_no
                       AND a.dist_seq_no = p_dist_seq_no
                       AND (a.dist_no, a.dist_seq_no) NOT IN (
                              SELECT b.dist_no, b.dist_seq_no
                                FROM giuw_wpolicyds_dtl b
                               WHERE b.dist_no = a.dist_no
                                 AND b.dist_seq_no = a.dist_seq_no))
         LOOP
            --msg_alert('giuw_wperilds_dtl excess'||a1.tsi_amt||'-'||a1.prem_amt,'I',FALSE);
            v_share_cd := 1;
            v_dist_spct := 100;
            v_dist_spct1 := 100;
            v_dist_tsi := a1.tsi_amt;
            v_dist_prem := a1.prem_amt;
            v_ann_tsi_amt := a1.ann_tsi_amt;

            INSERT INTO giuw_wpolicyds_dtl
                        (dist_no, dist_seq_no, line_cd, share_cd,
                         dist_spct, dist_tsi, dist_prem, ann_dist_spct,
                         ann_dist_tsi, dist_grp, dist_spct1
                        )
                 VALUES (p_dist_no, p_dist_seq_no, p_line_cd, v_share_cd,
                         v_dist_spct, v_dist_tsi, v_dist_prem, v_dist_spct,
                         v_ann_tsi_amt, 1, v_dist_spct1
                        );
         END LOOP;
      END IF;
   END;

   PROCEDURE ct_grp_dflt_wpolicyds_giuws005 (
      p_dist_no         IN       giuw_wpolicyds_dtl.dist_no%TYPE,
      p_dist_seq_no     IN       giuw_wpolicyds_dtl.dist_seq_no%TYPE,
      p_line_cd         IN       giuw_wpolicyds_dtl.line_cd%TYPE,
      p_dist_tsi        IN       giuw_wpolicyds_dtl.dist_tsi%TYPE,
      p_dist_prem       IN       giuw_wpolicyds_dtl.dist_prem%TYPE,
      p_ann_dist_tsi    IN       giuw_wpolicyds_dtl.ann_dist_tsi%TYPE,
      p_rg_count        IN OUT   NUMBER,
      p_default_no      IN       giis_default_dist.default_no%TYPE,   -- shan 06.20.2014
      p_default_type    IN       giis_default_dist.default_type%TYPE,
      p_dflt_netret_pct IN       giis_default_dist.dflt_netret_pct%TYPE,  -- shan 06.20.2014
      p_currency_rt     IN       gipi_witem.currency_rt%TYPE,
      p_par_id          IN       gipi_parlist.par_id%TYPE,
      p_item_grp        IN       gipi_witem.item_grp%TYPE,
      p_pol_flag        IN       gipi_wpolbas.pol_flag%TYPE,
      p_par_type        IN       gipi_parlist.par_type%TYPE
   )
   IS
      --rg_id        RECORDGROUP;
      rg_name              VARCHAR2 (20)                := 'DFLT_DIST_VALUES';
      rg_col1              VARCHAR2 (40)             := rg_name || '.line_cd';
      rg_col2              VARCHAR2 (40)            := rg_name || '.share_cd';
      rg_col3              VARCHAR2 (40)           := rg_name || '.share_pct';
      rg_col4              VARCHAR2 (40)          := rg_name || '.share_amt1';
      rg_col5              VARCHAR2 (40)            := rg_name || '.peril_cd';
      rg_col6              VARCHAR2 (40)          := rg_name || '.share_amt2';
      rg_col7              VARCHAR2 (40)            := rg_name || '.true_pct';
      v_remaining_tsi      NUMBER               := p_dist_tsi * p_currency_rt;
      v_share_amt          giis_default_dist_group.share_amt1%TYPE;
      v_peril_cd           giis_default_dist_group.peril_cd%TYPE;
      v_prev_peril_cd      giis_default_dist_group.peril_cd%TYPE;
      v_dist_spct          giuw_wpolicyds_dtl.dist_spct%TYPE;
      v_dist_spct1         giuw_wpolicyds_dtl.dist_spct1%TYPE;
      v_dist_tsi           giuw_wpolicyds_dtl.dist_tsi%TYPE;
      v_dist_prem          giuw_wpolicyds_dtl.dist_prem%TYPE;
      v_ann_dist_tsi       giuw_wpolicyds_dtl.ann_dist_tsi%TYPE;
      v_sum_dist_tsi       giuw_wpolicyds_dtl.dist_tsi%TYPE          := 0;
      v_sum_dist_spct      giuw_wpolicyds_dtl.dist_spct%TYPE         := 0;
      v_sum_dist_spct1     giuw_wpolicyds_dtl.dist_spct1%TYPE        := 0;
      v_sum_dist_prem      giuw_wpolicyds_dtl.dist_prem%TYPE         := 0;
      v_sum_ann_dist_tsi   giuw_wpolicyds_dtl.ann_dist_tsi%TYPE      := 0;
      v_share_cd           giis_dist_share.share_cd%TYPE;
      v_use_share_amt2     VARCHAR2 (1)                              := 'N';
      v_dist_spct_limit    NUMBER;
      v_exist               VARCHAR2(1) := 'N'; -- shan 06.18.2014
      v_dflt_dist_exist    VARCHAR2 (1) := 'N'; -- shan 06.20.2014
      
      CURSOR dist_grp_cur -- shan 06.20.2014
      IS
         SELECT   a.share_cd, a.peril_cd, a.share_pct, a.share_amt1, a.SHARE_AMT2
             FROM giis_default_dist_group a
            WHERE a.default_no = p_default_no
              AND a.line_cd = p_line_cd
              AND a.share_cd <> 999
         ORDER BY a.SEQUENCE ASC;

      PROCEDURE insert_to_wpolicyds_dtl
      IS
      BEGIN
      
         INSERT INTO giuw_wpolicyds_dtl
                     (dist_no, dist_seq_no, line_cd, share_cd,
                      dist_spct, dist_tsi, dist_spct1, dist_prem,
                      ann_dist_spct, ann_dist_tsi, dist_grp
                     )
              VALUES (p_dist_no, p_dist_seq_no, p_line_cd, v_share_cd,
                      v_dist_spct, v_dist_tsi, v_dist_spct1, v_dist_prem,
                      v_dist_spct, v_ann_dist_tsi, 1
                     );
      END;
      
      -- added by shan 06.20.2014
      PROCEDURE get_dflt_values
      IS
      BEGIN
            -- jhing 12.12.2014 uncommented out. Default distribution from maintenance will now be reconsidered.
            -- Use AMOUNTS to create the default distribution records. --
            IF p_default_type = 1 THEN        -- commented out code for the meantime : shan 06.23.2014
                FOR c IN dist_grp_cur
                LOOP
                    v_dflt_dist_exist := 'Y';
                    v_peril_cd    := c.peril_cd;
                    IF v_peril_cd IS NOT NULL THEN
                        IF NVL(v_prev_peril_cd, 0) = v_peril_cd THEN
                            NULL;
                        ELSE
                            v_use_share_amt2 := 'N';
                            FOR c1 IN (SELECT 'a'
                                      FROM gipi_witmperl B490, gipi_witem B480
                                     WHERE B490.peril_cd = v_peril_cd
                                       AND B490.line_cd  = p_line_cd
                                       AND B490.item_no  = B480.item_no
                                       AND B490.par_id   = B480.par_id
                                       AND B480.item_grp = p_item_grp
                                       AND B480.par_id   = p_par_id)
                            LOOP
                                v_use_share_amt2 := 'Y';
                                EXIT;
                            END LOOP;
                            v_prev_peril_cd := v_peril_cd;
                        END IF;
                    END IF;
                    
                    IF v_use_share_amt2 = 'N' THEN
                        v_share_amt  := c.share_amt1;
                    ELSE
                        v_share_amt  := c.share_amt2;
                    END IF;
                    
                    IF v_remaining_tsi >= v_share_amt THEN
                        v_dist_tsi      := v_share_amt / p_currency_rt;
                        v_remaining_tsi := v_remaining_tsi - v_share_amt;
                    ELSE
                        v_remaining_tsi := 0;
                    END IF;                    
                    
                    IF v_remaining_tsi != 0 THEN
                        v_dist_spct        := ROUND(v_dist_tsi / p_dist_tsi * 100, 9);
                        --v_dist_spct1       := ROUND(v_dist_prem / p_dist_prem * 100, 9); -- shan 06.20.2014  -- jhing 12.12.2014 amount should only refer to the TSI so basically whatever the value of the TSI will be checked agaist the default dist 
                        v_dist_spct1       := v_dist_spct;   -- jhing 12.12.2014
                        v_dist_tsi         := ROUND(p_dist_tsi     * v_dist_spct / 100, 2);
                        v_dist_prem        := ROUND(p_dist_prem    * v_dist_spct1 / 100, 2);
                        v_ann_dist_tsi     := ROUND(p_ann_dist_tsi * v_dist_spct / 100, 2);
                        v_sum_dist_spct    := v_sum_dist_spct    + v_dist_spct;
                        v_sum_dist_spct1   := v_sum_dist_spct1    + v_dist_spct1;
                        v_sum_dist_tsi     := v_sum_dist_tsi     + v_dist_tsi;
                        v_sum_dist_prem    := v_sum_dist_prem    + v_dist_prem;
                        v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
                    ELSIF v_remaining_tsi = 0 THEN
                        v_dist_spct    := 100            - v_sum_dist_spct;
                        v_dist_spct1   := 100            - v_sum_dist_spct1;
                        v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
                        v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                        v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
                    END IF;
                                       
                    v_share_cd := c.share_cd;           
                    INSERT_TO_WPOLICYDS_DTL;
                                       
                    IF v_remaining_tsi = 0 THEN
                      EXIT;
                    END IF;
                END LOOP;
                
                IF v_remaining_tsi != 0  THEN
                    v_dist_spct    := 100            - v_sum_dist_spct;
                    v_dist_spct1   := 100            - v_sum_dist_spct1;
                    v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
                    v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                    v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
                    v_share_cd     := '999';
                    p_rg_count     := p_rg_count + 1;

                    INSERT_TO_WPOLICYDS_DTL;
                END IF;       

            -- Use PERCENTAGES to create the default distribution records. --
            ELSIF p_default_type = 2 THEN
                FOR c IN dist_grp_cur
                LOOP
                    v_dflt_dist_exist := 'Y';
                    v_dist_spct     := c.share_pct;
                    v_dist_spct1    := c.share_pct; -- shan 06.20.2014
                    v_share_amt     := c.share_amt1;
                    IF v_share_amt IS NOT NULL THEN
                        v_dist_tsi        := v_share_amt / p_currency_rt;
                        v_dist_spct_limit := ROUND(v_dist_tsi / p_dist_tsi * 100, 14);
                        IF v_dist_spct > v_dist_spct_limit THEN
                            v_dist_spct := v_dist_spct_limit;
                        END IF;
                    END IF;
                    
                    v_sum_dist_spct := NVL(v_sum_dist_spct, 0) + v_dist_spct;
                    v_sum_dist_spct1 := NVL(v_sum_dist_spct1, 0) + v_dist_spct1;    -- shan 06.20.2014
                    
                    IF v_sum_dist_spct != 100 THEN
                        v_dist_tsi         := ROUND(p_dist_tsi     * v_dist_spct / 100, 2);
                        v_dist_prem        := ROUND(p_dist_prem    * v_dist_spct1 / 100, 2);
                        v_ann_dist_tsi     := ROUND(p_ann_dist_tsi * v_dist_spct / 100, 2);
                        v_sum_dist_tsi     := v_sum_dist_tsi     + v_dist_tsi;
                        v_sum_dist_prem    := v_sum_dist_prem    + v_dist_prem;
                        v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
                    ELSE
                        v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
                        v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
                        v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                    END IF;
                    
                    v_share_cd      := c.share_cd;
                    INSERT_TO_WPOLICYDS_DTL;
                END LOOP;
                
                IF v_sum_dist_spct != 100 THEN
                    v_dist_spct    := 100            - v_sum_dist_spct;
                    v_dist_spct1   := 100            - v_sum_dist_spct1;
                    v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
                    v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
                    v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                    v_share_cd     := '999';
                    p_rg_count     := p_rg_count + 1;
                    INSERT_TO_WPOLICYDS_DTL;
                END IF;
          --  END IF;  -- jhing 12.12.2014 commented out
           ELSE
          
            /* If GIIS_DEFAULT_DIST_PERIL does not contain a record that
            ** corresponds to the particular peril being distributed,
            ** then use the value of the DFLT_NETRET_PCT column retrieved
            ** from table GIIS_DEFAULT_DIST. * /
            IF v_dflt_dist_exist = 'N' AND p_dflt_netret_pct IS NOT NULL
                THEN
                IF p_dflt_netret_pct != 100
                THEN
                   v_dist_spct := p_dflt_netret_pct;
                   v_dist_spct1 := p_dflt_netret_pct;
                   v_dist_tsi := ROUND (p_dist_tsi * p_dflt_netret_pct / 100, 2);
                   v_dist_prem := ROUND (p_dist_prem * p_dflt_netret_pct / 100, 2);
                   v_ann_dist_tsi := ROUND (p_ann_dist_tsi * p_dflt_netret_pct / 100, 2);
                   v_sum_dist_tsi := v_sum_dist_tsi + v_dist_tsi;
                   v_sum_dist_prem := v_sum_dist_prem + v_dist_prem;
                   v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
                ELSE
                   v_dist_spct := p_dflt_netret_pct;
                   v_dist_spct1 := p_dflt_netret_pct;
                   v_dist_tsi := p_dist_tsi;
                   v_dist_prem := p_dist_prem;
                   v_ann_dist_tsi := p_ann_dist_tsi;
                END IF;

                v_share_cd := 1;
                insert_to_wpolicyds_dtl;

                IF p_dflt_netret_pct != 100
                THEN
                   v_dist_spct := 100 - p_dflt_netret_pct;
                   v_dist_spct1 := 100 - p_dflt_netret_pct;
                   v_dist_tsi := p_dist_tsi - v_sum_dist_tsi;
                   v_dist_prem := p_dist_prem - v_sum_dist_prem;
                   v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
                   v_share_cd := '999';
                   insert_to_wpolicyds_dtl;
                END IF;
            /* If no default distribution record was found in table
            ** GIIS_DEFAULT_DIST, then create the record using
            ** the traditional 100% NET RETENTION, 0% FACULTATIVE
            ** default. * /
            ELSIF v_dflt_dist_exist = 'N'
            THEN
                /* Create the default distribution records based on the 100%
                ** NET RETENTION and 0% FACULTATIVE hard code defaults. */
                v_share_cd := 1;
                v_dist_spct := 100;
                v_dist_spct1 := 100;
                v_dist_tsi := p_dist_tsi;
                v_dist_prem := p_dist_prem;
                v_ann_dist_tsi := p_ann_dist_tsi;

                FOR c IN 1 .. 2
                LOOP
                   insert_to_wpolicyds_dtl;
                   v_share_cd := 999;
                   v_dist_spct := 0;
                   v_dist_spct1 := 0;
                   v_dist_tsi := 0;
                   v_dist_prem := 0;
                   v_ann_dist_tsi := 0;
                END LOOP;
            END IF;  -- jhing 12.12.2014 uncommented out 
      END; 
      
   BEGIN
   
      --msg_alert('policy','I',FALSE);
  --    IF p_rg_count = 0  -- jhing 12.19.2014 commented out 
  --    THEN
         -- rollie 27may2005 vincent's birthday
         -- see procedure create_items for other info
         IF p_pol_flag = '2'
         THEN                                                      -- renewal
            --message('pol flag 2');pause;
            FOR c IN (SELECT share_cd, dist_spct, dist_spct1 
                        FROM giuw_policyds_dtl a
                       WHERE a.dist_seq_no = p_dist_seq_no
                         AND dist_no =
                                (SELECT MAX (dist_no)
                                   FROM giuw_pol_dist
                                  WHERE policy_id = (SELECT MAX(a.old_policy_id)
                                                       FROM gipi_wpolnrep a
                                                           ,gipi_parlist b
                                                      WHERE a.par_id = p_par_id
                                                        AND a.ren_rep_sw = '1'
                                                        AND a.par_id = b.par_id
                                                        AND b.par_status NOT IN (98,99))))
            LOOP
                v_exist := 'Y';     -- shan 06.18.2014
               v_share_cd := c.share_cd;
               v_dist_spct := c.dist_spct;
               v_dist_spct1 := NVL(c.dist_spct1, c.dist_spct) /* jhing 12.12.2014 added NVL */;
               v_dist_tsi := ROUND (((p_dist_tsi * c.dist_spct) / 100), 2);
               v_dist_prem := ROUND (((p_dist_prem * NVL(c.dist_spct1, c.dist_spct)) / 100), 2);
               v_ann_dist_tsi :=
                           ROUND (((p_ann_dist_tsi * c.dist_spct) / 100), 2);
               v_sum_dist_tsi := NVL (v_sum_dist_tsi, 0)
                                 + NVL (v_dist_tsi, 0);
               v_sum_dist_prem :=
                               NVL (v_sum_dist_prem, 0)
                               + NVL (v_dist_prem, 0);
               v_sum_ann_dist_tsi :=
                         NVL (v_sum_ann_dist_tsi, 0)
                         + NVL (v_ann_dist_tsi, 0);
               insert_to_wpolicyds_dtl;
            END LOOP;
            
            IF v_exist = 'N' THEN   -- shan 06.18.2014
                get_dflt_values;
            END IF;
         ELSIF p_par_type = 'E'
         THEN
            --message ('insert');pause;
            FOR c IN (SELECT share_cd, dist_spct, dist_spct1
                        FROM giuw_policyds_dtl a
                       WHERE a.dist_seq_no = p_dist_seq_no
                         AND dist_no =
                                (SELECT MAX (dist_no)
                                   FROM giuw_pol_dist
                                  WHERE par_id =
                                           (SELECT par_id
                                              FROM gipi_polbasic
                                             WHERE endt_seq_no = 0
                                               AND (line_cd,
                                                    subline_cd,
                                                    iss_cd,
                                                    issue_yy,
                                                    pol_seq_no,
                                                    renew_no
                                                   ) =
                                                      (SELECT line_cd,
                                                              subline_cd,
                                                              iss_cd,
                                                              issue_yy,
                                                              pol_seq_no,
                                                              renew_no
                                                         FROM gipi_wpolbas
                                                        WHERE par_id =
                                                                      p_par_id))))
            LOOP
                v_exist := 'Y';     -- shan 06.18.2014
               v_share_cd := c.share_cd;
               v_dist_spct := c.dist_spct;
               v_dist_spct1 := NVL(c.dist_spct1, c.dist_spct) /* jhing 12.12.2014 added nvl*/ ;
               v_dist_tsi := ROUND (((p_dist_tsi * c.dist_spct) / 100), 2);
               v_dist_prem := ROUND (((p_dist_prem * NVL(c.dist_spct1, c.dist_spct)) / 100), 2);
               v_ann_dist_tsi :=
                           ROUND (((p_ann_dist_tsi * c.dist_spct) / 100), 2);
               v_sum_dist_tsi := NVL (v_sum_dist_tsi, 0)
                                 + NVL (v_dist_tsi, 0);
               v_sum_dist_prem :=
                               NVL (v_sum_dist_prem, 0)
                               + NVL (v_dist_prem, 0);
               v_sum_ann_dist_tsi :=
                         NVL (v_sum_ann_dist_tsi, 0)
                         + NVL (v_ann_dist_tsi, 0);
               insert_to_wpolicyds_dtl;
            END LOOP;
            
            IF v_exist = 'N' THEN   -- shan 06.18.2014
                get_dflt_values;
            END IF;
         ELSE
               /* Create the default distribution records based on the 100%
            ** NET RETENTION and 0% FACULTATIVE hard code defaults. * / -- replaced by codes below : shan 06.20.2014
            v_share_cd := 1;
            v_dist_spct := 100;
            v_dist_spct1 := 100;
            v_dist_tsi := p_dist_tsi;
            v_dist_prem := p_dist_prem;
            v_ann_dist_tsi := p_ann_dist_tsi;

            FOR c IN 1 .. 2
            LOOP
               insert_to_wpolicyds_dtl;
               v_share_cd := 999;
               v_dist_spct := 0;
               v_dist_spct1 := 0;
               v_dist_tsi := 0;
               v_dist_prem := 0;
               v_ann_dist_tsi := 0;
            END LOOP;*/
            
            get_dflt_values;
         END IF;
    --  ELSE       -- jhing 12.19.2014 commented out 
    --     NULL;
      /* comment ko muna kasi si p_rg_count ay laging 0
      ** so never sya papasok sa else condition
      ** Niknok 03-29-2011
      */

      /*rg_id := FIND_GROUP(rg_name);
      RESET_GROUP_SELECTION(rg_id);
      IF GET_GROUP_NUMBER_CELL(rg_col2, p_rg_count) = 999 THEN
         DELETE_GROUP_ROW(rg_id, p_rg_count);
         p_rg_count := p_rg_count - 1;
      END IF;

      -- Use AMOUNTS to create the default distribution records. --
      IF p_default_type = 1 THEN
         FOR c IN 1..p_rg_count
         LOOP
           v_peril_cd    := GET_GROUP_NUMBER_CELL(rg_col5, c);
           IF v_peril_cd IS NOT NULL THEN
              IF NVL(v_prev_peril_cd, 0) = v_peril_cd THEN
                 NULL;
              ELSE
                 v_use_share_amt2 := 'N';
                 FOR c1 IN (SELECT 'a'
                              FROM gipi_witmperl B490, gipi_witem B480
                             WHERE B490.peril_cd = v_peril_cd
                               AND B490.line_cd  = p_line_cd
                               AND B490.item_no  = B480.item_no
                               AND B490.par_id   = B480.par_id
                               AND B480.item_grp = p_item_grp
                               AND B480.par_id   = p_par_id)
                 LOOP
                   v_use_share_amt2 := 'Y';
                   EXIT;
                 END LOOP;
                 v_prev_peril_cd := v_peril_cd;
              END IF;
           END IF;
           IF v_use_share_amt2 = 'N' THEN
              v_share_amt  := GET_GROUP_NUMBER_CELL(rg_col4, c);
           ELSE
              v_share_amt  := GET_GROUP_NUMBER_CELL(rg_col6, c);
           END IF;
           IF v_remaining_tsi >= v_share_amt THEN
              v_dist_tsi      := v_share_amt / p_currency_rt;
              v_remaining_tsi := v_remaining_tsi - v_share_amt;
           ELSE
              v_remaining_tsi := 0;
           END IF;
           IF v_remaining_tsi != 0 THEN
              v_dist_spct        := ROUND(v_dist_tsi / p_dist_tsi * 100, 14);
              v_dist_tsi         := ROUND(p_dist_tsi     * v_dist_spct / 100, 2);
              v_dist_prem        := ROUND(p_dist_prem    * v_dist_spct / 100, 2);
              v_ann_dist_tsi     := ROUND(p_ann_dist_tsi * v_dist_spct / 100, 2);
              v_sum_dist_spct    := v_sum_dist_spct    + v_dist_spct;
              v_sum_dist_tsi     := v_sum_dist_tsi     + v_dist_tsi;
              v_sum_dist_prem    := v_sum_dist_prem    + v_dist_prem;
              v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
           ELSIF v_remaining_tsi = 0 THEN
              v_dist_spct    := 100            - v_sum_dist_spct;
              v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
              v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
              v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
           END IF;
           v_share_cd := GET_GROUP_NUMBER_CELL(rg_col2, c);
           SET_GROUP_NUMBER_CELL(rg_col7, c, v_dist_spct);
           SET_GROUP_SELECTION(rg_id, c);
           INSERT_TO_WPOLICYDS_DTL;
           IF v_remaining_tsi = 0 THEN
              EXIT;
           END IF;
         END LOOP;
         IF v_remaining_tsi != 0  THEN
            v_dist_spct    := 100            - v_sum_dist_spct;
            v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
            v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
            v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
            v_share_cd     := '999';
            p_rg_count     := p_rg_count + 1;
            ADD_GROUP_ROW(rg_id, END_OF_GROUP);
            SET_GROUP_NUMBER_CELL(rg_col2, p_rg_count, 999);
            SET_GROUP_NUMBER_CELL(rg_col7, p_rg_count, v_dist_spct);
            SET_GROUP_SELECTION(rg_id, p_rg_count);

            INSERT_TO_WPOLICYDS_DTL;
          END IF;

      -- Use PERCENTAGES to create the default distribution records. --
      ELSIF p_default_type = 2 THEN
         FOR c IN 1..p_rg_count
         LOOP
           v_dist_spct     := GET_GROUP_NUMBER_CELL(rg_col3, c);
           v_share_amt     := GET_GROUP_NUMBER_CELL(rg_col4, c);
           IF v_share_amt IS NOT NULL THEN
              v_dist_tsi        := v_share_amt / p_currency_rt;
              v_dist_spct_limit := ROUND(v_dist_tsi / p_dist_tsi * 100, 14);
              IF v_dist_spct > v_dist_spct_limit THEN
                 v_dist_spct := v_dist_spct_limit;
              END IF;
           END IF;
           v_sum_dist_spct := v_sum_dist_spct + v_dist_spct;
           IF v_sum_dist_spct != 100 THEN
              v_dist_tsi         := ROUND(p_dist_tsi     * v_dist_spct / 100, 2);
              v_dist_prem        := ROUND(p_dist_prem    * v_dist_spct / 100, 2);
              v_ann_dist_tsi     := ROUND(p_ann_dist_tsi * v_dist_spct / 100, 2);
              v_sum_dist_tsi     := v_sum_dist_tsi     + v_dist_tsi;
              v_sum_dist_prem    := v_sum_dist_prem    + v_dist_prem;
              v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
           ELSE
              v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
              v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
              v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
           END IF;
           v_share_cd      := GET_GROUP_NUMBER_CELL(rg_col2, c);
           SET_GROUP_NUMBER_CELL(rg_col7, c, v_dist_spct);
           SET_GROUP_SELECTION(rg_id, c);
           INSERT_TO_WPOLICYDS_DTL;
         END LOOP;
         IF v_sum_dist_spct != 100 THEN
            v_dist_spct    := 100            - v_sum_dist_spct;
            v_dist_tsi     := p_dist_tsi     - v_sum_dist_tsi;
            v_dist_prem    := p_dist_prem    - v_sum_dist_prem;
            v_ann_dist_tsi := p_ann_dist_tsi - v_sum_ann_dist_tsi;
            v_share_cd     := '999';
            p_rg_count     := p_rg_count + 1;
            ADD_GROUP_ROW(rg_id, END_OF_GROUP);
            SET_GROUP_NUMBER_CELL(rg_col2, p_rg_count, 999);
            SET_GROUP_NUMBER_CELL(rg_col7, p_rg_count, v_dist_spct);
            SET_GROUP_SELECTION(rg_id, p_rg_count);
            INSERT_TO_WPOLICYDS_DTL;
         END IF;
      END IF;*/
    --  END IF;  -- jhing 12.19.2014 commented out 
   END;

   PROCEDURE post_dist_with_val_giuws005 (
      p_par_id              IN       gipi_wpolbas.par_id%TYPE,
      p_dist_no             IN       giuw_pol_dist.dist_no%TYPE,
      p_dist_seq_no         IN       giuw_wpolicyds.dist_seq_no%TYPE,
      p_module              IN       VARCHAR2,
      p_user_id             IN       giis_users.user_id%TYPE,
      p_current_form_name   IN       VARCHAR2,
     p_override_switch     IN       VARCHAR2, -- added by: shan 05.29.2014
      p_net_msg             OUT      VARCHAR2,
      p_treaty_msg          OUT      VARCHAR2,
      p_override_msg        OUT      VARCHAR2,
      p_net_override        OUT      VARCHAR2,
      p_treaty_override     OUT      VARCHAR2,
      p_msg_alert           OUT      VARCHAR2,
      p_dist_flag           OUT      VARCHAR2,
      p_mean_dist_flag      OUT      VARCHAR2,
      p_workflow_msgr       OUT      VARCHAR2,
      p_param_function      OUT      VARCHAR2
   )
   IS
   BEGIN
      /* Post records retrieved from the working tables to their
      ** corresponding master tables.
      ** IMPORTANT:  This button can only be pressed upon complete distribution
      **             of a specified DIST_NO, that is, GIUW_WPOLICYDS.DIST_FLAG = '2'.
      **             AND if the said distribution involves one or more reinsurers,
      **             that is, if a facultative share, relative to the DIST_NO being
      **             processed, was found to be existing in any of the records in
      **             tables GIUW_WPOLICYDS_DTL, GIUW_WITEMDS_DTL, GIUW_WPERILDS_DTL
      **             and GIUW_WITEMPERILDS_DTL.
      ** NOTE:  For more info on VARIABLES.POST_SW, see package spec VARIABLES. */
      DECLARE
         v_message                VARCHAR2 (2000)
                                               := 'W   o   r   k   i   n   g';
         v_share                  VARCHAR2 (2000)                := 'N';
         --alert_id             alert;
         alert_button             NUMBER;
         --rose08062009
         p_type_exceed            VARCHAR2 (7);
         p_block                  VARCHAR2 (5000);
         v_param_value_v          VARCHAR2 (1);
         v_exist                  VARCHAR2 (1);
         v_share_type             VARCHAR2 (1);
         v_prev_type_exceed       VARCHAR2 (10);
         v_auto_dist              VARCHAR2 (1);
         v_menu_line              giis_line.line_cd%TYPE;         --vj 031710
         v_loc_block              VARCHAR2 (50);                  --vj 031710
         v_count                  NUMBER                         := 0;
         var_v_prev_type_exceed   VARCHAR2 (5000);
         v_par_type               gipi_parlist.par_type%TYPE;
         v_nbt_eff_date           gipi_wpolbas.eff_date%TYPE;
         v_line_cd                gipi_wpolbas.line_cd%TYPE;
         v_nbt_subline_cd         gipi_wpolbas.subline_cd%TYPE;
         v_loc_count              NUMBER := 0;          -- shan 06.23.2014
      BEGIN
         /*vj 031710*/
         BEGIN
            SELECT NVL (b.menu_line_cd, b.line_cd), par_type
              INTO v_menu_line, v_par_type
              FROM gipi_parlist a, giis_line b
             WHERE a.line_cd = b.line_cd AND a.par_id = p_par_id;
         END;

         FOR pol IN (SELECT eff_date, line_cd, subline_cd
                       FROM gipi_wpolbas
                      WHERE par_id = p_par_id)
         LOOP
            v_nbt_eff_date := pol.eff_date;
            v_line_cd := pol.line_cd;
            v_nbt_subline_cd := pol.subline_cd;
         END LOOP;

         IF v_menu_line = 'FI'
         THEN
            v_loc_block := 'block';
         ELSIF v_menu_line = 'CA'
         THEN
            v_loc_block := 'location';
         END IF;

         /*end vj 031710*/
         --check_dist_flag;                                        --A.R.C. 08.24.2006

         --VALIDATE_BLOCK_LIMIT; --added by gmi  commented out by rose, placed the codes in package proc. validate_block_limit.limit validation
         --rose 08062009--
         FOR chk_type IN (SELECT   d.share_type,
                                   SUM (ROUND (dist_spct, 14)) dist_spct,
                                   a.eff_date
                              FROM giuw_pol_dist a,
                                   giuw_wpolicyds b,
                                   giuw_wpolicyds_dtl c,
                                   giis_dist_share d
                             WHERE a.dist_no = b.dist_no
                               AND a.dist_no = c.dist_no
                               AND b.dist_seq_no = c.dist_seq_no
                               AND c.line_cd = d.line_cd
                               AND c.share_cd = d.share_cd
                               AND a.par_id = p_par_id
                               AND a.dist_no = p_dist_no
                               AND b.dist_seq_no = p_dist_seq_no
                          --and c.share_cd != 999 --rose 11/11/2009 to avoid the double display of the alert if the sharing is facul and ret only commented out 06162010 for cases that facul is 100%
                          GROUP BY d.share_type, a.eff_date
                          ORDER BY d.share_type)
         LOOP
            v_share_type := chk_type.share_type;

            IF v_menu_line = 'FI'
            THEN
               /*validate_block_limit.limit_validation(p_par_id,*/        -- replaced by codes below shan : 06.19.2014
               giuw_pol_dist_pkg.limit_validation2(p_par_id,          
                                                      v_line_cd,
                                                      p_block,
                                                      p_type_exceed,
                                                      v_share_type,
                                                      chk_type.eff_date,
                                                      chk_type.dist_spct,
                                                      v_loc_count
                                                     );
            ELSIF     v_menu_line = 'CA'
                  AND v_nbt_subline_cd =
                                       NVL (giisp.v ('CA_SUBLINE_PFL'), 'PFL')
            THEN
               -- marion 08.10.2010 add b240.nbt_subline_cd = NVL(Giisp.v('CA_SUBLINE_PFL'),'PFL') in if condition
               /*ca_limit_validation(p_par_id,*/            -- replaced by code below : shan : 06.19.2014
               giuw_pol_dist_pkg.ca_limit_validation2(p_par_id,       
                                    v_line_cd,
                                    p_block,
                                    p_type_exceed,
                                    v_share_type,
                                    chk_type.eff_date,
                                    chk_type.dist_spct,
                                    v_loc_count
                                   );                     --added by VJ 031710
            END IF;

            IF p_type_exceed = 'NET'
            THEN
               --function--check parameter in giis_parameter
               v_param_value_v :=
                  validate_block_limit.check_override_function ('PARAMETER',
                                                                p_module,
                                                                'RO',
                                                                p_user_id
                                                               );
            ELSIF p_type_exceed = 'TREATY'
            THEN
               v_param_value_v :=
                  validate_block_limit.check_override_function ('PARAMETER',
                                                                p_module,
                                                                'TO',
                                                                p_user_id
                                                               );
            END IF;

            /*added by rose 02182010 para twice lalabas ung override canvas pag both treaty and ret ang lumagpas sa limit*/
            IF    (p_type_exceed = 'NET') --(p_type_exceed = 'NET' AND v_prev_type_exceed IS NULL)  -- modified out, dahil dito hindi nag prompt ung override ni Treaty - irwin 10.5.2012
               OR (p_type_exceed = 'TREATY')--(p_type_exceed = 'TREATY' AND v_prev_type_exceed IS NULL)
               OR p_type_exceed IS NULL
            THEN
               IF p_type_exceed = 'NET'
               THEN
                  v_prev_type_exceed := 'RO';
                  var_v_prev_type_exceed := 'RO';
               END IF;

               IF p_type_exceed = 'NET'
               THEN
                  p_param_function := 'RO';
               ELSIF p_type_exceed = 'TREATY'
               THEN
                  p_param_function := 'TO';
               END IF;

               --alert_id := FIND_ALERT ('BLOCK_ALERT');   --nok
               --function--check user still under the function check_override_function--
               v_exist :=
                  validate_block_limit.check_override_function
                                                            ('USER',
                                                             p_module,
                                                             p_param_function,
                                                             p_user_id
                                                            );

               IF v_exist = 'N'
               THEN
                  IF p_type_exceed = 'NET'
                  THEN
                      --nok
                     /*SET_ALERT_PROPERTY (alert_id,
                                         alert_message_text,
                                            'Net retention limit for '
                                         || v_loc_block
                                         || ' '
                                         || p_block
                                         || ' has been exceeded.'
                                         || ' Would you like to continue?'
                                        );                               --vj 031710
                     alert_button := SHOW_ALERT (alert_id);*/
                     /*p_net_msg :=             -- replaced by codes below : shan 06.23.2014
                           'Net retention limit for '
                        || v_loc_block
                        || ' '
                        || p_block
                        || ' has been exceeded.'
                        || ' Would you like to continue?';*/
                    /*added by shan 06232014*/
                     IF v_loc_count > 1 THEN
                         p_net_msg :=
                            'Net retention limit for '
                            || p_block
                            || ' '
                            || v_loc_block
                            || 's has been exceeded.'
                            || ' Would you like to continue?';                     
                     ELSE
                         p_net_msg :=
                               'Net retention limit for '
                            || v_loc_block
                            || ' '
                            || p_block
                            || ' has been exceeded.'
                            || ' Would you like to continue?';                     
                     END IF;
                  ELSIF p_type_exceed = 'TREATY'
                  THEN
                     --:parameter.function := 'TO'; --02232010
                     --nok
                     /*SET_ALERT_PROPERTY (alert_id,
                                         alert_message_text,
                                            'Treaty limit for '
                                         || v_loc_block
                                         || ' '
                                         || p_block
                                         || ' has been exceeded.'
                                         || ' Would you like to continue?'
                                        );                               --vj 031710
                     alert_button := SHOW_ALERT (alert_id);*/
                     /*p_treaty_msg :=              -- replaced by codes below : shan 06.23.2014
                           'Treaty limit for '
                        || v_loc_block
                        || ' '
                        || p_block
                        || ' has been exceeded.'
                        || ' Would you like to continue?';*/
                     IF v_loc_count > 1 THEN
                         p_treaty_msg :=
                               'Treaty limit for '
                            || p_block
                            || ' '
                            || v_loc_block
                            || 's has been exceeded.'
                            || ' Would you like to continue?';                     
                     ELSE
                         p_treaty_msg :=
                               'Treaty limit for '
                            || v_loc_block
                            || ' '
                            || p_block
                            || ' has been exceeded.'
                            || ' Would you like to continue?';                     
                     END IF;
                  END IF;
               -------------------03222010 consolidated the version of pnbgen for their specific enh
               ELSIF v_exist = 'Y'
               THEN
                  IF p_type_exceed = 'NET'
                  THEN
                      --nok
                     /*SET_ALERT_PROPERTY (alert_id,
                                         alert_message_text,
                                            'Net retention limit for block '
                                         || p_block
                                         || ' has been exceeded.'
                                         || ' Would you like to continue?'
                                        );
                     alert_button := SHOW_ALERT (alert_id);*/
                     /*p_net_msg :=                 -- replaced by codes below : shan 06.23.2014
                           'Net retention limit for block '
                        || p_block
                        || ' has been exceeded.'
                        || ' Would you like to continue?';*/
                     IF v_loc_count > 1 THEN
                         p_net_msg :=
                            'Net retention limit for '
                            || p_block
                            || ' '
                            || v_loc_block
                            || 's has been exceeded.'
                            || ' Would you like to continue?';                     
                     ELSE
                         p_net_msg :=
                               'Net retention limit for '
                            || v_loc_block
                            || ' '
                            || p_block
                            || ' has been exceeded.'
                            || ' Would you like to continue?';                     
                     END IF;

                     FOR chk_type IN
                        (SELECT   d.share_type,
                                  SUM (ROUND (dist_spct, 14)) dist_spct,
                                  a.eff_date
                             FROM giuw_pol_dist a,
                                  giuw_wpolicyds b,
                                  giuw_wpolicyds_dtl c,
                                  giis_dist_share d
                            WHERE a.dist_no = b.dist_no
                              AND a.dist_no = c.dist_no
                              AND b.dist_seq_no = c.dist_seq_no
                              AND c.line_cd = d.line_cd
                              AND c.share_cd = d.share_cd
                              AND a.par_id = p_par_id
                              AND a.dist_no = p_dist_no
                              AND b.dist_seq_no = p_dist_seq_no
                              AND c.share_cd NOT IN (999, 1)
                         GROUP BY d.share_type, a.eff_date)
                     LOOP
                        v_share_type := chk_type.share_type;

                        IF v_menu_line = 'FI'
                        THEN
                           --validate_block_limit.limit_validation      -- replaced by code below : shan 06.23.2014
                           giuw_pol_dist_pkg.limit_validation2
                                                          (p_par_id,
                                                           v_line_cd,
                                                           p_block,
                                                           p_type_exceed,
                                                           v_share_type,
                                                           chk_type.eff_date,
                                                           chk_type.dist_spct,
                                                           v_loc_count      -- added by shan 06.23.2014
                                                          );
                        ELSIF     v_menu_line = 'CA'
                              AND v_nbt_subline_cd =
                                       NVL (giisp.v ('CA_SUBLINE_PFL'), 'PFL')
                        THEN
                           -- marion 08.10.2010 add b240.nbt_subline_cd = NVL(Giisp.v('CA_SUBLINE_PFL'),'PFL') in if condition
                          -- ca_limit_validation (p_par_id, -- replaced by code below : shan 06.23.2014
                          giuw_pol_dist_pkg.ca_limit_validation2 (p_par_id,
                                                v_line_cd,
                                                p_block,
                                                p_type_exceed,
                                                v_share_type,
                                                chk_type.eff_date,
                                                chk_type.dist_spct,
                                                v_loc_count     -- shan 06.23.2014
                                               );
                        --added by rose para sa v_Exist y tapos ca line 03312010
                        END IF;
                     END LOOP;
                  END IF;
                  
                  /** moved outside loop and 'NET' condition : shan 05.30.2014 **/
                 IF p_type_exceed = 'TREATY'
                 THEN
                    --nok
                    /*SET_ALERT_PROPERTY (alert_id,
                                        alert_message_text,
                                           'Treaty limit for block '
                                        || p_block
                                        || ' has been exceeded.'
                                        || ' Would you like to continue'
                                       );
                    alert_button := SHOW_ALERT (alert_id);*/
                    /*p_treaty_msg :=           -- replaced by codes below : shan 06.23.2014
                          'Treaty limit for block '
                       || p_block
                       || ' has been exceeded.'
                       || ' Would you like to continue';*/
                    IF v_loc_count > 1 THEN
                         p_treaty_msg :=
                               'Treaty limit for '
                            || p_block
                            || ' '
                            || v_loc_block
                            || 's has been exceeded.'
                            || ' Would you like to continue?';                     
                     ELSE
                         p_treaty_msg :=
                               'Treaty limit for '
                            || v_loc_block
                            || ' '
                            || p_block
                            || ' has been exceeded.'
                            || ' Would you like to continue?';                     
                     END IF; 
                 END IF;
-------------------
               END IF;

               IF alert_button = 0
               THEN                                   --nok alert_button2 THEN
                  --RAISE form_trigger_failure;
                  NULL;
               ELSE
                  IF v_param_value_v = 'Y' AND p_type_exceed IS NOT NULL
                  THEN
                     IF v_exist = 'N'
                     THEN
                        /*alert_id := FIND_ALERT ('OVERRIDE');*/ -- nok
                        /*Set_Alert_Property(alert_id, ALERT_MESSAGE_TEXT, 'User has no authority to process distribution block limit. '|| 'Please ask for override or Reassign the PAR to another user.');*//*VJ 031710*/

                        --nok
                        /*SET_ALERT_PROPERTY
                           (alert_id,
                            alert_message_text,
                               'User has no authority to process distribution limit. '
                            || 'Please ask for override or Reassign the PAR to another user.'
                           );
                        alert_button := SHOW_ALERT (alert_id);*/
                        p_override_msg :=
                              'User has no authority to process distribution limit. '
                           || 'Please ask for override or Reassign the PAR to another user.';

                        IF alert_button = 0
                        THEN                          --nok alert_button2 THEN
                           --RAISE form_trigger_failure;
                           NULL;
                        ELSE
                           --call override canvas--
                           IF p_type_exceed = 'NET'
                           THEN
                              --nok
                              /*SET_WINDOW_PROPERTY ('override',
                                                   title,
                                                   'Net Retention Override'
                                                  );*/
                              p_net_override := 'Net Retention Override';
                           ELSIF p_type_exceed = 'TREATY'
                           THEN
                              --nok
                              /*SET_WINDOW_PROPERTY ('override',
                                                   title,
                                                   'Treaty Retention Override'
                                                  );*/
                              p_treaty_override :=
                                                  'Treaty Retention Override';
                           END IF;
                        --GO_ITEM ('control.ovr_username');
                        --control_ovr_username := '';
                        --control_ovr_password := '';
                        END IF;
                     END IF;
                  ELSIF v_param_value_v = 'N' AND v_prev_type_exceed = 'RO'
                  THEN
                     FOR chk_type IN
                        (SELECT   d.share_type,
                                  SUM (ROUND (dist_spct, 14)) dist_spct,
                                  a.eff_date
                             FROM giuw_pol_dist a,
                                  giuw_wpolicyds b,
                                  giuw_wpolicyds_dtl c,
                                  giis_dist_share d
                            WHERE a.dist_no = b.dist_no
                              AND a.dist_no = c.dist_no
                              AND b.dist_seq_no = c.dist_seq_no
                              AND c.line_cd = d.line_cd
                              AND c.share_cd = d.share_cd
                              AND a.par_id = p_par_id
                              AND a.dist_no = p_dist_no
                              AND b.dist_seq_no = p_dist_seq_no
                              AND c.share_cd NOT IN (999, 1)
                         GROUP BY d.share_type, a.eff_date)
                     LOOP
                        v_share_type := chk_type.share_type;

                        IF v_menu_line = 'FI'
                        THEN
                           --validate_block_limit.limit_validation  -- replace by code below : shan 06.23.2014
                           giuw_pol_dist_pkg.limit_validation2
                                                          (p_par_id,
                                                           v_line_cd,
                                                           p_block,
                                                           p_type_exceed,
                                                           v_share_type,
                                                           chk_type.eff_date,
                                                           chk_type.dist_spct,
                                                           v_loc_count  -- shan 06.23.2014
                                                          );
                        ELSIF     v_menu_line = 'CA'
                              AND v_nbt_subline_cd =
                                       NVL (giisp.v ('CA_SUBLINE_PFL'), 'PFL')
                        THEN
                           -- marion 08.10.2010 add b240.nbt_subline_cd = NVL(Giisp.v('CA_SUBLINE_PFL'),'PFL') in if condition
                           --ca_limit_validation (p_par_id,     -- replaced by code below : shan 06.23.2014
                           giuw_pol_dist_pkg.ca_limit_validation2(p_par_id,
                                                v_line_cd,
                                                p_block,
                                                p_type_exceed,
                                                v_share_type,
                                                chk_type.eff_date,
                                                chk_type.dist_spct,
                                                v_loc_count     -- shan 06.23.2014
                                               );         --added by VJ 031710
                        END IF;
                     END LOOP;

                     IF p_type_exceed = 'TREATY'
                     THEN
                          --nok
                        /*alert_id := FIND_ALERT ('BLOCK_ALERT');
                        SET_ALERT_PROPERTY (alert_id,
                                            alert_message_text,
                                               'Treaty limit for '
                                            || v_loc_block
                                            || ' '
                                            || p_block
                                            || ' has been exceeded.'
                                            || ' Would you like to continue?'
                                           );                            --vj 031710
                        alert_button := SHOW_ALERT (alert_id);*/
                        /*p_treaty_msg :=           -- replaced by codes below : shan 06.23.2014
                              'Treaty limit for '
                           || v_loc_block
                           || ' '
                           || p_block
                           || ' has been exceeded.'
                           || ' Would you like to continue?';*/
                        IF v_loc_count > 1 THEN
                             p_treaty_msg :=
                                   'Treaty limit for '
                                || p_block
                                || ' '
                                || v_loc_block
                                || 's has been exceeded.'
                                || ' Would you like to continue?';                     
                         ELSE
                             p_treaty_msg :=
                                   'Treaty limit for '
                                || v_loc_block
                                || ' '
                                || p_block
                                || ' has been exceeded.'
                                || ' Would you like to continue?';                     
                         END IF; 
                     END IF;
                  END IF;

                  
                     
                  /* ==== moved to post_dist_giuws005_final to separate validation from posting : shan 06.17.2014 === * /
                  --end of rose 08062009--
                  IF    (v_param_value_v = 'N' AND v_exist IN ('Y', 'N'))
                     OR (    v_param_value_v = 'Y'
                         AND (   v_line_cd NOT IN ('FI', 'CA')
                              OR (    p_type_exceed IS NULL
                                  AND v_prev_type_exceed IS NULL
                                 )
                              OR v_exist = 'Y'
                             )
                        )
                     /*rose 03312010 added Casualty line aaded v_exist = 'Y' 05.19.2010* /
                     OR (    p_type_exceed IS NULL
                         AND v_prev_type_exceed IS NULL
                         AND p_param_function IS NULL
                        )
                     OR (    p_type_exceed IS NOT NULL
                         AND v_exist = 'Y'
                         AND v_prev_type_exceed IS NOT NULL
                        )
                     OR ( p_override_switch = 'Y' ) /* added by: shan 05.29.2014 - parameter switch used in geniisys web 
                                                       to indicate that a user override has already been approved* /
                  THEN
                     /* Forces oracle to validate any changes
                       ** made to the current field where the cursor
                       ** is located.  Thus, applying the approriate
                       ** changes to its SYSTEM.FORM_STATUS variable. */

                     --nok
                     /*VALIDATE (item_scope);

                     IF FORM_FAILURE THEN
                        RAISE form_trigger_failure;
                     END IF;*/

                     /*IF :SYSTEM.form_status IN ('QUERY', 'NEW')    -- nok
                     THEN
                        IF variables.post_no_commit_sw = 'Y'
                        THEN
                           msg_alert
                              ('Option is only available after changes have been saved.',
                               'I',
                               TRUE
                              );
                        END IF;
                     ELSE
                        msg_alert
                           ('Option is only available after changes have been saved.',
                            'I',
                            TRUE
                           );
                     END IF;

                     FOR a IN (SELECT 1
                                 FROM giuw_wpolicyds_dtl
                                WHERE dist_no = p_dist_no
                                  AND line_cd = p_line_cd
                                  AND dist_spct = 0)
                     LOOP
                        msg_alert ('Share percentage must be greater than 0.',
                                   'E',
                                   TRUE
                                  );
                        EXIT;
                     END LOOP;*/

                     /* Displays the warning canvas and
                     ** sets the cursor style to busy. */
                     --cursor_busy;

                     /* Displays the WORKING message in the status bar
                     ** in an animated manner. */
                     /*FOR c IN 1 .. (NVL (LENGTH (v_message), 0))    -- nok
                     LOOP
                        synchronize_message (SUBSTR (v_message,
                                                     NVL (LENGTH (v_message), 0) - c
                                                    )
                                            );

                        FOR c1 IN 1 .. 1500
                        LOOP
                           NULL;
                        END LOOP;
                     END LOOP;*/

                     /* Remove existing records related to the
                     ** current DIST_NO from certain distribution
                     ** and RI master tables considering the fact
                     ** that the current changes made were not yet
                     ** posted to the master tables. * /
                     giuw_pol_dist_pkg.delete_dist_master_tables (p_dist_no);
                     --v_message := v_message || '   >';
                     --synchronize_message (v_message);
                                          
                     /* Post records retrieved from GIUW_WPOLICYDS
                     ** and GIUW_WPOLICYDS_DTL to tables GIUW_POLICYDS
                     ** and GIUW_POLICYDS_DTL. * /
                     giuw_pol_dist_pkg.post_wpolicyds_dtl_giuws005
                                                             (p_dist_no,
                                                              v_par_type,
                                                              v_nbt_eff_date,
                                                              p_msg_alert
                                                             );
                     --v_message := v_message || '   >';
                     --synchronize_message (v_message);

                     /* Post records retrieved from GIUW_WITEMDS
                     ** and GIUW_WITEMDS_DTL to tables GIUW_ITEMDS
                     ** and GIUW_ITEMDS_DTL. * /
                     giuw_pol_dist_pkg.post_witemds_dtl_giuws005 (p_dist_no);
                     --v_message := v_message || '   >';
                     --synchronize_message (v_message);

                     /* Post records retrieved from GIUW_WITEMPERILDS and
                     ** GIUW_WITEMPERILDS_DTL to tables GIUW_ITEMPERILDS
                     ** and GIUW_ITEMPERILDS_DTL. * /
                     giuw_pol_dist_pkg.post_witemperilds_dtl_giuws005
                                                                    (p_dist_no);
                     --v_message := v_message || '   >';
                     --synchronize_message (v_message);

                     /* Post records retrieved from GIUW_WPERILDS
                     ** and GIUW_WPERILDS_DTL to tables GIUW_PERILDS
                     ** and GIUW_PERILDS_DTL. * /
                     giuw_pol_dist_pkg.post_wperilds_dtl_giuws005 (p_dist_no);

                     --v_message := v_message || '   >';
                     --synchronize_message (v_message);

                     /* Since records in the working tables have
                         ** already been copied to the master tables,
                         ** the DIST_FLAG of table GIUW_POL_DIST
                         ** must then be updated to '2'(With Facultative),
                         ** meaning that the distribution record has already
                         ** been posted but the data in the working tables
                         ** have not yet been deleted because a final posting
                         ** by the RI department is still required. */
                       /*added the if condition para inde paulit ulit ang
                     pagtawag sa check auto dist para inde magulo ang
                       update ng autodist 02232010* /
                     IF    v_count = 0
                        OR (v_count > 0 AND p_type_exceed = 'TREATY')
                     THEN                                    /*05202010 rose* /
                        IF    (    var_v_prev_type_exceed IS NOT NULL
                               AND v_param_value_v = 'Y'
                              )
                           OR (    v_prev_type_exceed IS NOT NULL
                               AND v_param_value_v = 'Y'
                              )
                           OR (    p_type_exceed IS NOT NULL
                               AND v_param_value_v = 'Y'
                              )
                           OR (    p_param_function IS NOT NULL
                               AND v_param_value_v = 'Y'
                              )
                        THEN
                           --nok check_auto_dist1;
                           v_count := 1;
                        END IF;
                     END IF;

                     FOR v IN (SELECT share_type
                                 FROM giis_dist_share
                                WHERE line_cd = v_line_cd
                                  AND share_type = 3
                                  AND share_cd IN (
                                         SELECT share_cd
                                           FROM giuw_wpolicyds_dtl
                                          WHERE dist_no = p_dist_no
                                            AND line_cd = v_line_cd))
                     LOOP
                        IF v.share_type = '3'
                        THEN
                           v_share := 'Y';
                        END IF;
                     END LOOP;

                     IF v_share = 'Y'
                     THEN
                        UPDATE giuw_pol_dist
                           SET dist_flag = '2',
                               post_flag = 'O',
                               auto_dist = 'N',
                               special_dist_sw = 'N'
                         --auto_dist = 'N'
                        WHERE  par_id = p_par_id AND dist_no = p_dist_no;

                        p_dist_flag := '2';
                        p_mean_dist_flag := 'With Facultative';

                        /* A.R.C. 08.13.2004
                        ** to create workflow records of Facultative Placement * /
                        FOR c1 IN (SELECT b.userid, d.event_desc
                                     FROM giis_events_column c,
                                          giis_event_mod_users b,
                                          giis_event_modules a,
                                          giis_events d
                                    WHERE 1 = 1
                                      AND c.event_cd = a.event_cd
                                      AND c.event_mod_cd = a.event_mod_cd
                                      AND b.event_mod_cd = a.event_mod_cd
                                      --AND b.userid <> USER  --A.R.C. 01.23.2006
                                      AND b.passing_userid = USER
                                      --A.R.C. 01.23.2006
                                      AND a.module_id = 'GIUWS004'
                                      AND a.event_cd = d.event_cd
                                      AND UPPER (d.event_desc) =
                                                       'FACULTATIVE PLACEMENT')
                        LOOP
                           create_transfer_workflow_rec
                                                    (c1.event_desc,
                                                     p_current_form_name,
                                                     --nok GET_APPLICATION_PROPERTY (current_form_name),
                                                     c1.userid,
                                                     p_par_id,
                                                        c1.event_desc
                                                     || ' '
                                                     || get_policy_no
                                                                     (p_par_id),
                                                     p_msg_alert,
                                                     p_workflow_msgr,
                                                     p_user_id
                                                    );
                        END LOOP;
                     ELSE
                        UPDATE giuw_pol_dist
                           SET dist_flag = '1',
                               post_flag = 'O',
                               auto_dist = 'Y',
                               special_dist_sw = 'N'
                         --auto_dist = 'N'
                        WHERE  par_id = p_par_id AND dist_no = p_dist_no;

                        p_dist_flag := '1';
                        p_mean_dist_flag := 'Undistributed';
                        --A.R.C. 02.07.2007
                            --added to delete the workflow facultative placement of GIUWS004 if not facul
                        delete_workflow_rec ('Facultative Placement',
                                             'GIUWS004',
                                             p_user_id,
                                             p_par_id
                                            );
                     END IF;
                  /*v_message := v_message || '   >';      --nok
                  synchronize_message (v_message);
                  FORMS_DDL ('COMMIT');
                  MESSAGE ('Post Distribution Complete.');*/
                  /* Closes the warning canvas and
                  ** sets the cursor style to default. * /
                  --cursor_normal;                 
                  END IF;
                 /* === end shan ===*/
               END IF;
            --
            ELSIF v_prev_type_exceed IS NOT NULL
            THEN
               NULL;
            --nok
             /*var_v_param_value := v_param_value_v;
             var_v_block := p_block;
             var_v_type_exceed := p_type_exceed;
             var_v_share_type := v_share_type;
             var_v_eff_date := chk_type.eff_date;
             var_v_dist_spct := chk_type.dist_spct;*/
            END IF;
         --
         END LOOP;
        --nok
       /*added by rose 02232010*/
      /* IF variables.v_prev_type_exceed IS NULL
          AND v_prev_type_exceed IS NULL
          AND p_type_exceed IS NULL
          AND param_function IS NULL THEN
          check_auto_dist1;
       END IF;

       --for param = N changing of button label
       IF    (variables.v_prev_type_exceed IS NOT NULL AND v_param_value_v = 'N'
             )
          OR (v_prev_type_exceed IS NOT NULL AND v_param_value_v = 'N')
          OR (p_type_exceed IS NOT NULL AND v_param_value_v = 'N')
          OR (param_function IS NOT NULL AND v_param_value_v = 'N')
       THEN
          check_auto_dist1;
       END IF;*/
      END;
   END;

   PROCEDURE post_wpolicyds_dtl_giuws005 (
      p_dist_no              giuw_pol_dist.dist_no%TYPE,
      p_par_type             gipi_parlist.par_type%TYPE,
      p_nbt_eff_date         gipi_wpolbas.eff_date%TYPE,
      p_msg_alert      OUT   VARCHAR2
   )
   IS
      v_count   NUMBER (1);
   BEGIN
      /* Get the value of the columns in table GIUW_WPOLICYDS
      ** in preparation for insertion or update to its corresponding
      ** master table GIUW_POLICYDS. */
      FOR wds_cur IN (SELECT   dist_no, dist_seq_no, tsi_amt, prem_amt,
                               ann_tsi_amt, item_grp
                          FROM giuw_wpolicyds
                         WHERE dist_no = p_dist_no
                      ORDER BY dist_no, dist_seq_no)
      LOOP
         v_count := NULL;

         /* If the record corresponding to the specified DIST_NO
         ** and DIST_SEQ_NO does not exist in table GIUW_POLICYDS,
         ** then the record in table GIUW_WPOLICYDS must be inserted
         ** to the said table. */
         IF v_count IS NULL
         THEN
            INSERT INTO giuw_policyds
                        (dist_no, dist_seq_no,
                         tsi_amt, prem_amt,
                         ann_tsi_amt, item_grp
                        )
                 VALUES (wds_cur.dist_no, wds_cur.dist_seq_no,
                         wds_cur.tsi_amt, wds_cur.prem_amt,
                         wds_cur.ann_tsi_amt, wds_cur.item_grp
                        );
         END IF;
      END LOOP;

      /* Get the value of the columns in table GIUW_WPOLICYDS_DTL
      ** in preparation for insertion or update to its corresponding
      ** master table GIUW_POLICYDS_DTL. */
      FOR wds_dtl_cur IN (SELECT   a.dist_no, a.dist_seq_no, a.line_cd,
                                   a.share_cd, a.dist_tsi, a.dist_prem,
                                   a.dist_spct, a.dist_spct1, a.ann_dist_spct,
                                   a.ann_dist_tsi, a.dist_grp, b.share_type,
                                   b.expiry_date, b.trty_name, b.eff_date
                              FROM giuw_wpolicyds_dtl a, giis_dist_share b
                             WHERE a.share_cd = b.share_cd
                               AND a.line_cd = b.line_cd
                               AND a.dist_no = p_dist_no
                          ORDER BY a.dist_no,
                                   a.dist_seq_no,
                                   a.line_cd,
                                   a.share_cd)
      LOOP
         v_count := NULL;

         IF wds_dtl_cur.share_type = '2' AND p_par_type = 'P'
         THEN
             --edited by d.alcantara, 01-31-2012, added trunc to p_nbt_eff_date
            IF TRUNC(p_nbt_eff_date) > TRUNC (wds_dtl_cur.expiry_date)
            THEN
               --nok FORMS_DDL('ROLLBACK');

               /* Closes the warning canvas and
               ** sets the cursor style to default. */
               --nok CURSOR_NORMAL;
               p_msg_alert :=
                     'Treaty '
                  || wds_dtl_cur.trty_name
                  || ' has already expired.  '
                  || 'Replace the treaty with another one.';
            END IF;
         END IF;

         /* If the record corresponding to the specified DIST_NO,
         ** DIST_SEQ_NO, LINE_CD, SHARE_CD does not exist in table
         ** GIUW_POLICYDS_DTL, then the record in table GIUW_WPOLICYDS_DTL
         ** must be inserted to the said table. */
         IF v_count IS NULL
         THEN
            INSERT INTO giuw_policyds_dtl
                        (dist_no, dist_seq_no,
                         line_cd, share_cd,
                         dist_tsi, dist_prem,
                         dist_spct, ann_dist_spct,
                         ann_dist_tsi, dist_grp,
                         dist_spct1
                        )
                 VALUES (wds_dtl_cur.dist_no, wds_dtl_cur.dist_seq_no,
                         wds_dtl_cur.line_cd, wds_dtl_cur.share_cd,
                         wds_dtl_cur.dist_tsi, wds_dtl_cur.dist_prem,
                         wds_dtl_cur.dist_spct, wds_dtl_cur.ann_dist_spct,
                         wds_dtl_cur.ann_dist_tsi, wds_dtl_cur.dist_grp,
                         wds_dtl_cur.dist_spct1
                        );
         END IF;
      END LOOP;
   --nok CLEAR_MESSAGE;
   END;

   PROCEDURE post_witemds_dtl_giuws005 (p_dist_no giuw_pol_dist.dist_no%TYPE)
   IS
      v_count   NUMBER (1);
   BEGIN
      /* Get the value of the columns in table GIUW_WITEMDS
      ** in preparation for insertion or update to its corresponding
      ** master table GIUW_ITEMDS. */
      FOR wds_cur IN (SELECT   dist_no, dist_seq_no, item_no, tsi_amt,
                               prem_amt, ann_tsi_amt
                          FROM giuw_witemds
                         WHERE dist_no = p_dist_no
                      ORDER BY dist_no, dist_seq_no, item_no)
      LOOP
         v_count := NULL;

         /* If the record corresponding to the specified DIST_NO
         ** DIST_SEQ_NO and ITEM_NO does not exist in table GIUW_ITEMDS,
         ** then the record in table GIUW_WITEMDS must be inserted
         ** to the said table. */
         IF v_count IS NULL
         THEN
            INSERT INTO giuw_itemds
                        (dist_no, dist_seq_no,
                         item_no, tsi_amt, prem_amt,
                         ann_tsi_amt
                        )
                 VALUES (wds_cur.dist_no, wds_cur.dist_seq_no,
                         wds_cur.item_no, wds_cur.tsi_amt, wds_cur.prem_amt,
                         wds_cur.ann_tsi_amt
                        );
         END IF;
      END LOOP;

      /* Get the value of the columns in table GIUW_WITEMDS_DTL
      ** in preparation for insertion or update to its corresponding
      ** master table GIUW_ITEMDS_DTL. */
      FOR wds_dtl_cur IN (SELECT   dist_no, dist_seq_no, item_no, line_cd,
                                   share_cd, dist_tsi, dist_prem, dist_spct,
                                   dist_spct1, ann_dist_spct, ann_dist_tsi,
                                   dist_grp
                              FROM giuw_witemds_dtl
                             WHERE dist_no = p_dist_no
                          ORDER BY dist_no,
                                   dist_seq_no,
                                   item_no,
                                   line_cd,
                                   share_cd)
      LOOP
         v_count := NULL;

         /* If the record corresponding to the specified DIST_NO, DIST_SEQ_NO,
         ** ITEM_NO, LINE_CD, SHARE_CD does not exist in table GIUW_ITEMDS_DTL,
         ** then the record in table GIUW_ITEMDS_DTL must be inserted to the
         ** said table. */
         IF v_count IS NULL
         THEN
            INSERT INTO giuw_itemds_dtl
                        (dist_no, dist_seq_no,
                         item_no, line_cd,
                         share_cd, dist_tsi,
                         dist_prem, dist_spct,
                         ann_dist_spct,
                         ann_dist_tsi, dist_grp,
                         dist_spct1
                        )
                 VALUES (wds_dtl_cur.dist_no, wds_dtl_cur.dist_seq_no,
                         wds_dtl_cur.item_no, wds_dtl_cur.line_cd,
                         wds_dtl_cur.share_cd, wds_dtl_cur.dist_tsi,
                         wds_dtl_cur.dist_prem, wds_dtl_cur.dist_spct,
                         wds_dtl_cur.ann_dist_spct,
                         wds_dtl_cur.ann_dist_tsi, wds_dtl_cur.dist_grp,
                         wds_dtl_cur.dist_spct1
                        );
         END IF;
      END LOOP;
   --CLEAR_MESSAGE;
   END;

   PROCEDURE post_witemperilds_dtl_giuws005 (
      p_dist_no   giuw_pol_dist.dist_no%TYPE
   )
   IS
      v_count   NUMBER (1);
   BEGIN
      /* Get the value of the columns in table GIUW_WITEMPERILDS
      ** in preparation for insertion or update to its corresponding
      ** master table GIUW_ITEMPERILDS. */
      FOR wds_cur IN (SELECT   dist_no, dist_seq_no, item_no, line_cd,
                               peril_cd, tsi_amt, prem_amt, ann_tsi_amt
                          FROM giuw_witemperilds
                         WHERE dist_no = p_dist_no
                      ORDER BY dist_no,
                               dist_seq_no,
                               item_no,
                               line_cd,
                               peril_cd)
      LOOP
         v_count := NULL;

         /* If the record corresponding to the specified DIST_NO, DIST_SEQ_NO,
         ** ITEM_NO, LINE_CD and PERIL_CD does not exist in table GIUW_ITEMPERILDS,
         ** then the record in table GIUW_WITEMPERILDS must be inserted to the said
         ** table. */
         IF v_count IS NULL
         THEN
            INSERT INTO giuw_itemperilds
                        (dist_no, dist_seq_no,
                         item_no, line_cd, peril_cd,
                         tsi_amt, prem_amt,
                         ann_tsi_amt
                        )
                 VALUES (wds_cur.dist_no, wds_cur.dist_seq_no,
                         wds_cur.item_no, wds_cur.line_cd, wds_cur.peril_cd,
                         wds_cur.tsi_amt, wds_cur.prem_amt,
                         wds_cur.ann_tsi_amt
                        );
         END IF;
      END LOOP;

      /* Get the value of the columns in table GIUW_WITEMPERILDS_DTL
      ** in preparation for insertion or update to its corresponding
      ** master table GIUW_ITEMPERILDS_DTL. */
      FOR wds_dtl_cur IN (SELECT   dist_no, dist_seq_no, item_no, peril_cd,
                                   line_cd, share_cd, dist_tsi, dist_prem,
                                   dist_spct, dist_spct1, ann_dist_spct,
                                   ann_dist_tsi, dist_grp
                              FROM giuw_witemperilds_dtl
                             WHERE dist_no = p_dist_no
                          ORDER BY dist_no,
                                   dist_seq_no,
                                   item_no,
                                   line_cd,
                                   peril_cd,
                                   share_cd)
      LOOP
         v_count := NULL;

         /* If the record corresponding to the specified DIST_NO, DIST_SEQ_NO,
         ** ITEM_NO, LINE_CD, PERIL_CD and SHARE_CD does not exist in table
         ** GIUW_ITEMPERILDS_DTL, then the record in table GIUW_WITEMPERILDS_DTL
         ** must be inserted to the said table. */
         IF v_count IS NULL
         THEN
            INSERT INTO giuw_itemperilds_dtl
                        (dist_no, dist_seq_no,
                         item_no, peril_cd,
                         line_cd, share_cd,
                         dist_tsi, dist_prem,
                         dist_spct, ann_dist_spct,
                         ann_dist_tsi, dist_grp,
                         dist_spct1
                        )
                 VALUES (wds_dtl_cur.dist_no, wds_dtl_cur.dist_seq_no,
                         wds_dtl_cur.item_no, wds_dtl_cur.peril_cd,
                         wds_dtl_cur.line_cd, wds_dtl_cur.share_cd,
                         wds_dtl_cur.dist_tsi, wds_dtl_cur.dist_prem,
                         wds_dtl_cur.dist_spct, wds_dtl_cur.ann_dist_spct,
                         wds_dtl_cur.ann_dist_tsi, wds_dtl_cur.dist_grp,
                         wds_dtl_cur.dist_spct1
                        );
         END IF;
      END LOOP;
   --CLEAR_MESSAGE;
   END;

   PROCEDURE post_wperilds_dtl_giuws005 (p_dist_no giuw_pol_dist.dist_no%TYPE)
   IS
      v_count   NUMBER (1);
   BEGIN
      /* Get the value of the columns in table GIUW_WPERILDS
      ** in preparation for insertion or update to its corresponding
      ** master table GIUW_PERILDS. */
      FOR wds_cur IN (SELECT   dist_no, dist_seq_no, line_cd, peril_cd,
                               tsi_amt, prem_amt, ann_tsi_amt
                          FROM giuw_wperilds
                         WHERE dist_no = p_dist_no
                      ORDER BY dist_no, dist_seq_no, line_cd, peril_cd)
      LOOP
         v_count := NULL;

         /* If the record corresponding to the specified DIST_NO
         ** DIST_SEQ_NO, LINE_CD and PERIL_CD does not exist in table
         ** GIUW_PERILDS, then the record in table GIUW_WPERILDS must be
         ** inserted to the said table. */
         IF v_count IS NULL
         THEN
            INSERT INTO giuw_perilds
                        (dist_no, dist_seq_no,
                         line_cd, peril_cd, tsi_amt,
                         prem_amt, ann_tsi_amt
                        )
                 VALUES (wds_cur.dist_no, wds_cur.dist_seq_no,
                         wds_cur.line_cd, wds_cur.peril_cd, wds_cur.tsi_amt,
                         wds_cur.prem_amt, wds_cur.ann_tsi_amt
                        );
         END IF;
      END LOOP;

      /* Get the value of the columns in table GIUW_WPERILDS_DTL
      ** in preparation for insertion or update to its corresponding
      ** master table GIUW_PERILDS_DTL. */
      FOR wds_dtl_cur IN (SELECT   dist_no, dist_seq_no, peril_cd, line_cd,
                                   share_cd, dist_tsi, dist_prem, dist_spct,
                                   ann_dist_spct, ann_dist_tsi, dist_grp,
                                   dist_spct1
                              FROM giuw_wperilds_dtl
                             WHERE dist_no = p_dist_no
                          ORDER BY dist_no,
                                   dist_seq_no,
                                   line_cd,
                                   peril_cd,
                                   share_cd)
      LOOP
         v_count := NULL;

         /* If the record corresponding to the specified DIST_NO, DIST_SEQ_NO,
         ** LINE_CD, PERIL_CD and SHARE_CD does not exist in table GIUW_PERILDS_DTL,
         ** then the record in table GIUW_WPERILDS_DTL must be inserted to the
         ** said table. */
         IF v_count IS NULL
         THEN
            INSERT INTO giuw_perilds_dtl
                        (dist_no, dist_seq_no,
                         peril_cd, line_cd,
                         share_cd, dist_tsi,
                         dist_prem, dist_spct,
                         ann_dist_spct,
                         ann_dist_tsi, dist_grp,
                         dist_spct1
                        )
                 VALUES (wds_dtl_cur.dist_no, wds_dtl_cur.dist_seq_no,
                         wds_dtl_cur.peril_cd, wds_dtl_cur.line_cd,
                         wds_dtl_cur.share_cd, wds_dtl_cur.dist_tsi,
                         wds_dtl_cur.dist_prem, wds_dtl_cur.dist_spct,
                         wds_dtl_cur.ann_dist_spct,
                         wds_dtl_cur.ann_dist_tsi, wds_dtl_cur.dist_grp,
                         wds_dtl_cur.dist_spct1
                        );
         END IF;
      END LOOP;
   --CLEAR_MESSAGE;
   END;

   /*
     **  Created by   :  Emman
     **  Date Created :  06.15.2011
     **  Reference By : (GIUWS003 - Preliminary Peril Distribution)
     **  Description  : Gets giuw_pol_dist details of specified par id
     */
   FUNCTION get_giuw_pol_dist1 (p_par_id giuw_pol_dist.par_id%TYPE)
      RETURN giuw_pol_dist_tab PIPELINED
   IS
      v_list   giuw_pol_dist_type;
   BEGIN
      FOR i IN (SELECT   a.dist_no, a.par_id, a.dist_flag, a.redist_flag,
                         a.eff_date, a.expiry_date, a.create_date,
                         a.post_flag, a.policy_id, a.endt_type, a.tsi_amt,
                         a.prem_amt, a.ann_tsi_amt, a.dist_type,
                         a.item_posted_sw, a.ex_loss_sw, a.negate_date,
                         a.acct_ent_date, a.acct_neg_date, a.batch_id,
                         a.user_id, a.last_upd_date, a.cpi_rec_no,
                         a.cpi_branch_cd, a.auto_dist, a.old_dist_no,
                         a.post_date, a.iss_cd, a.prem_seq_no,
                         a.takeup_seq_no, a.item_grp, a.arc_ext_data,
                         b.multi_booking_yy, b.multi_booking_mm
                    FROM giuw_pol_dist a, gipi_winvoice b
                   WHERE a.par_id = p_par_id
                     AND a.par_id = b.par_id(+)
                     AND a.item_grp = b.item_grp(+)
                     AND a.takeup_seq_no = b.takeup_seq_no(+)
                ORDER BY dist_no)
      LOOP
         v_list.dist_no := i.dist_no;
         v_list.par_id := i.par_id;
         v_list.dist_flag := i.dist_flag;
         v_list.redist_flag := i.redist_flag;
         v_list.eff_date := i.eff_date;
         v_list.expiry_date := i.expiry_date;
         v_list.create_date := i.create_date;
         v_list.post_flag := i.post_flag;
         v_list.policy_id := i.policy_id;
         v_list.endt_type := i.endt_type;
         v_list.tsi_amt := i.tsi_amt;
         v_list.prem_amt := i.prem_amt;
         v_list.ann_tsi_amt := i.ann_tsi_amt;
         v_list.dist_type := i.dist_type;
         v_list.item_posted_sw := i.item_posted_sw;
         v_list.ex_loss_sw := i.ex_loss_sw;
         v_list.negate_date := i.negate_date;
         v_list.acct_ent_date := i.acct_ent_date;
         v_list.acct_neg_date := i.acct_neg_date;
         v_list.batch_id := i.batch_id;
         v_list.user_id := i.user_id;
         v_list.last_upd_date := i.last_upd_date;
         v_list.cpi_rec_no := i.cpi_rec_no;
         v_list.cpi_branch_cd := i.cpi_branch_cd;
         v_list.auto_dist := i.auto_dist;
         v_list.old_dist_no := i.old_dist_no;
         v_list.post_date := i.post_date;
         v_list.iss_cd := i.iss_cd;
         v_list.prem_seq_no := i.prem_seq_no;
         v_list.takeup_seq_no := i.takeup_seq_no;
         v_list.item_grp := i.item_grp;
         v_list.arc_ext_data := i.arc_ext_data;
         v_list.multi_booking_mm := i.multi_booking_mm;
         v_list.multi_booking_yy := i.multi_booking_yy;
         cg_ref_codes_pkg.cgdv$chk_char_ref_codes (i.dist_flag,
                                                   v_list.mean_dist_flag,
                                                   'GIUW_POL_DIST.DIST_FLAG'
                                                  );
         v_list.var_share := 'N';

         FOR v IN (SELECT share_type
                     FROM giis_dist_share
                    WHERE share_type = 3
                      AND (share_cd, line_cd) IN (SELECT share_cd, line_cd
                                                    FROM giuw_wperilds_dtl
                                                   WHERE dist_no = i.dist_no))
         LOOP
            IF v.share_type = '3'
            THEN
               v_list.var_share := 'Y';
               EXIT;
            END IF;
         END LOOP;

         v_list.dist_post_flag := '';

         FOR c1 IN (SELECT c.post_flag
                      FROM giuw_wpolicyds_dtl a,
                           giuw_wpolicyds b,
                           giuw_pol_dist c
                     WHERE a.dist_seq_no = b.dist_seq_no
                       AND a.dist_no = b.dist_no
                       AND b.dist_no = c.dist_no
                       AND (a.dist_prem != 0 OR a.dist_tsi != 0)
                       AND a.share_cd = '999'
                       AND b.dist_flag = '2'
                       AND c.dist_no = i.dist_no)
         LOOP
            v_list.dist_post_flag := c1.post_flag;
            EXIT;
         END LOOP;

         SELECT giuw_wpolicyds_dtl_pkg.get_giuw_wpolicyds_dtl_exist (i.dist_no)
           INTO v_list.giuw_wpolicyds_dtl_exist
           FROM DUAL;

         SELECT giuw_wpolicyds_pkg.get_giuw_wpolicyds_exist (i.dist_no)
           INTO v_list.giuw_wpolicyds_exist
           FROM DUAL;

         v_list.reverse_date     := ''; 
         v_list.reverse_sw       := ''; 
         FOR c2 IN (SELECT A.reverse_date, b.reverse_sw
                      FROM giri_binder a, giri_frps_ri b, giri_distfrps c
                     WHERE a.policy_id = p_par_id 
                       AND c.dist_no = v_list.dist_no
                       AND a.fnl_binder_id = b.fnl_binder_id
                       AND b.line_cd = c.line_cd 
                       AND b.frps_yy = c.frps_yy 
                       AND b.frps_seq_no = c.frps_seq_no)
         LOOP
           v_list.reverse_date     := c2.reverse_date; 
           v_list.reverse_sw       := c2.reverse_sw; 
           EXIT;
         END LOOP;  

         PIPE ROW (v_list);
      END LOOP;

      RETURN;
   END get_giuw_pol_dist1;

   /*
     **  Created by   :  Emman
     **  Date Created :  06.24.2011
     **  Reference By : (GIUWS003 - Preliminary Peril Distribution)
     **  Description  : Gets giuw_pol_dist details of specified par id and dist_no
     */
   FUNCTION get_giuw_pol_dist1 (
      p_par_id    giuw_pol_dist.par_id%TYPE,
      p_dist_no   giuw_pol_dist.dist_no%TYPE
   )
      RETURN giuw_pol_dist_tab PIPELINED
   IS
      v_list   giuw_pol_dist_type;
   BEGIN
      FOR i IN (SELECT   a.dist_no, a.par_id, a.dist_flag, a.redist_flag,
                         a.eff_date, a.expiry_date, a.create_date,
                         a.post_flag, a.policy_id, a.endt_type, a.tsi_amt,
                         a.prem_amt, a.ann_tsi_amt, a.dist_type,
                         a.item_posted_sw, a.ex_loss_sw, a.negate_date,
                         a.acct_ent_date, a.acct_neg_date, a.batch_id,
                         a.user_id, a.last_upd_date, a.cpi_rec_no,
                         a.cpi_branch_cd, a.auto_dist, a.old_dist_no,
                         a.post_date, a.iss_cd, a.prem_seq_no,
                         a.takeup_seq_no, a.item_grp, a.arc_ext_data,
                         b.multi_booking_yy, b.multi_booking_mm
                    FROM giuw_pol_dist a, gipi_winvoice b
                   WHERE a.par_id = p_par_id
                     AND a.dist_no = p_dist_no
                     AND a.par_id = b.par_id(+)
                     AND a.item_grp = b.item_grp(+)
                     AND a.takeup_seq_no = b.takeup_seq_no(+)
                ORDER BY dist_no)
      LOOP
         v_list.dist_no := i.dist_no;
         v_list.par_id := i.par_id;
         v_list.dist_flag := i.dist_flag;
         v_list.redist_flag := i.redist_flag;
         v_list.eff_date := i.eff_date;
         v_list.expiry_date := i.expiry_date;
         v_list.create_date := i.create_date;
         v_list.post_flag := i.post_flag;
         v_list.policy_id := i.policy_id;
         v_list.endt_type := i.endt_type;
         v_list.tsi_amt := i.tsi_amt;
         v_list.prem_amt := i.prem_amt;
         v_list.ann_tsi_amt := i.ann_tsi_amt;
         v_list.dist_type := i.dist_type;
         v_list.item_posted_sw := i.item_posted_sw;
         v_list.ex_loss_sw := i.ex_loss_sw;
         v_list.negate_date := i.negate_date;
         v_list.acct_ent_date := i.acct_ent_date;
         v_list.acct_neg_date := i.acct_neg_date;
         v_list.batch_id := i.batch_id;
         v_list.user_id := i.user_id;
         v_list.last_upd_date := i.last_upd_date;
         v_list.cpi_rec_no := i.cpi_rec_no;
         v_list.cpi_branch_cd := i.cpi_branch_cd;
         v_list.auto_dist := i.auto_dist;
         v_list.old_dist_no := i.old_dist_no;
         v_list.post_date := i.post_date;
         v_list.iss_cd := i.iss_cd;
         v_list.prem_seq_no := i.prem_seq_no;
         v_list.takeup_seq_no := i.takeup_seq_no;
         v_list.item_grp := i.item_grp;
         v_list.arc_ext_data := i.arc_ext_data;
         v_list.multi_booking_mm := i.multi_booking_mm;
         v_list.multi_booking_yy := i.multi_booking_yy;
         cg_ref_codes_pkg.cgdv$chk_char_ref_codes (i.dist_flag,
                                                   v_list.mean_dist_flag,
                                                   'GIUW_POL_DIST.DIST_FLAG'
                                                  );
         v_list.var_share := 'N';

         FOR v IN (SELECT share_type
                     FROM giis_dist_share
                    WHERE share_type = 3
                      AND (share_cd, line_cd) IN (SELECT share_cd, line_cd
                                                    FROM giuw_wperilds_dtl
                                                   WHERE dist_no = i.dist_no))
         LOOP
            IF v.share_type = '3'
            THEN
               v_list.var_share := 'Y';
               EXIT;
            END IF;
         END LOOP;

         v_list.dist_post_flag := '';

         FOR c1 IN (SELECT c.post_flag
                      FROM giuw_wpolicyds_dtl a,
                           giuw_wpolicyds b,
                           giuw_pol_dist c
                     WHERE a.dist_seq_no = b.dist_seq_no
                       AND a.dist_no = b.dist_no
                       AND b.dist_no = c.dist_no
                       AND (a.dist_prem != 0 OR a.dist_tsi != 0)
                       AND a.share_cd = '999'
                       AND b.dist_flag = '2'
                       AND c.dist_no = i.dist_no)
         LOOP
            v_list.dist_post_flag := c1.post_flag;
            EXIT;
         END LOOP;

         SELECT giuw_wpolicyds_dtl_pkg.get_giuw_wpolicyds_dtl_exist (i.dist_no)
           INTO v_list.giuw_wpolicyds_dtl_exist
           FROM DUAL;

         SELECT giuw_wpolicyds_pkg.get_giuw_wpolicyds_exist (i.dist_no)
           INTO v_list.giuw_wpolicyds_exist
           FROM DUAL;

         v_list.reverse_date     := ''; 
         v_list.reverse_sw       := ''; 
         FOR c2 IN (SELECT A.reverse_date, b.reverse_sw
                      FROM giri_binder a, giri_frps_ri b, giri_distfrps c
                     WHERE a.policy_id = p_par_id 
                       AND c.dist_no = v_list.dist_no
                       AND a.fnl_binder_id = b.fnl_binder_id
                       AND b.line_cd = c.line_cd 
                       AND b.frps_yy = c.frps_yy 
                       AND b.frps_seq_no = c.frps_seq_no)
         LOOP
           v_list.reverse_date     := c2.reverse_date; 
           v_list.reverse_sw       := c2.reverse_sw; 
           EXIT;
         END LOOP;  

         PIPE ROW (v_list);
      END LOOP;

      RETURN;
   END get_giuw_pol_dist1;

/*
     **  Created by   :  Tonio
     **  Date Created :  07.4.2011
     **  Reference By : GIRIS026 POST FRPS
     **
     */
   FUNCTION check_if_posted (p_dist_no giuw_pol_dist.dist_no%TYPE)
      RETURN VARCHAR2
   IS
      v_posted   VARCHAR2 (1) := 'N';
   BEGIN
      FOR a IN (SELECT 1
                  FROM giuw_pol_dist
                 WHERE dist_no = p_dist_no)
      LOOP
         v_posted := 'Y';
      END LOOP;

      RETURN v_posted;
   END check_if_posted;

   /*
   **  Created by   :  Emman
   **  Date Created :  07.14.2011
   **  Reference By : (GIUWS001 - Set-up Groups for Distribution)
   **  Description  : Gets giuw_pol_dist details for package
   */
   FUNCTION get_pack_giuw_pol_dist (
      p_pack_par_id   gipi_parlist.pack_par_id%TYPE
   )
      RETURN giuw_pol_dist_tab PIPELINED
   IS
      v_list   giuw_pol_dist_type;
   BEGIN
      FOR i IN (SELECT   a.dist_no, a.par_id, a.dist_flag, a.redist_flag,
                         a.eff_date, a.expiry_date, a.create_date,
                         a.post_flag, a.policy_id, a.endt_type, a.tsi_amt,
                         a.prem_amt, a.ann_tsi_amt, a.dist_type,
                         a.item_posted_sw, a.ex_loss_sw, a.negate_date,
                         a.acct_ent_date, a.acct_neg_date, a.batch_id,
                         a.user_id, a.last_upd_date, a.cpi_rec_no,
                         a.cpi_branch_cd, a.auto_dist, a.old_dist_no,
                         a.post_date, a.iss_cd, a.prem_seq_no,
                         a.takeup_seq_no, a.item_grp, a.arc_ext_data,
                         b.multi_booking_yy, b.multi_booking_mm
                    FROM giuw_pol_dist a, gipi_winvoice b, gipi_parlist c
                   WHERE c.pack_par_id = p_pack_par_id
                     AND a.par_id = c.par_id
                     AND a.par_id = b.par_id(+)
                     AND a.item_grp = b.item_grp(+)
                     AND a.takeup_seq_no = b.takeup_seq_no(+)
                ORDER BY dist_no)
      LOOP
         v_list.dist_no := i.dist_no;
         v_list.par_id := i.par_id;
         v_list.dist_flag := i.dist_flag;
         v_list.redist_flag := i.redist_flag;
         v_list.eff_date := i.eff_date;
         v_list.expiry_date := i.expiry_date;
         v_list.create_date := i.create_date;
         v_list.post_flag := i.post_flag;
         v_list.policy_id := i.policy_id;
         v_list.endt_type := i.endt_type;
         v_list.tsi_amt := i.tsi_amt;
         v_list.prem_amt := i.prem_amt;
         v_list.ann_tsi_amt := i.ann_tsi_amt;
         v_list.dist_type := i.dist_type;
         v_list.item_posted_sw := i.item_posted_sw;
         v_list.ex_loss_sw := i.ex_loss_sw;
         v_list.negate_date := i.negate_date;
         v_list.acct_ent_date := i.acct_ent_date;
         v_list.acct_neg_date := i.acct_neg_date;
         v_list.batch_id := i.batch_id;
         v_list.user_id := i.user_id;
         v_list.last_upd_date := i.last_upd_date;
         v_list.cpi_rec_no := i.cpi_rec_no;
         v_list.cpi_branch_cd := i.cpi_branch_cd;
         v_list.auto_dist := i.auto_dist;
         v_list.old_dist_no := i.old_dist_no;
         v_list.post_date := i.post_date;
         v_list.iss_cd := i.iss_cd;
         v_list.prem_seq_no := i.prem_seq_no;
         v_list.takeup_seq_no := i.takeup_seq_no;
         v_list.item_grp := i.item_grp;
         v_list.arc_ext_data := i.arc_ext_data;
         v_list.multi_booking_mm := i.multi_booking_mm;
         v_list.multi_booking_yy := i.multi_booking_yy;
         cg_ref_codes_pkg.cgdv$chk_char_ref_codes (i.dist_flag,
                                                   v_list.mean_dist_flag,
                                                   'GIUW_POL_DIST.DIST_FLAG'
                                                  );
         v_list.var_share := 'N';

         FOR v IN (SELECT share_type
                     FROM giis_dist_share
                    WHERE share_type = 3
                      AND (share_cd, line_cd) IN (SELECT share_cd, line_cd
                                                    FROM giuw_wpolicyds_dtl
                                                   WHERE dist_no = i.dist_no))
         LOOP
            IF v.share_type = '3'
            THEN
               v_list.var_share := 'Y';
               EXIT;
            END IF;
         END LOOP;

         v_list.dist_post_flag := '';

         FOR c1 IN (SELECT c.post_flag
                      FROM giuw_wpolicyds_dtl a,
                           giuw_wpolicyds b,
                           giuw_pol_dist c
                     WHERE a.dist_seq_no = b.dist_seq_no
                       AND a.dist_no = b.dist_no
                       AND b.dist_no = c.dist_no
                       AND (a.dist_prem != 0 OR a.dist_tsi != 0)
                       AND a.share_cd = '999'
                       AND b.dist_flag = '2'
                       AND c.dist_no = i.dist_no)
         LOOP
            v_list.dist_post_flag := c1.post_flag;
            EXIT;
         END LOOP;

         SELECT giuw_wpolicyds_dtl_pkg.get_giuw_wpolicyds_dtl_exist (i.dist_no)
           INTO v_list.giuw_wpolicyds_dtl_exist
           FROM DUAL;

         SELECT giuw_wpolicyds_pkg.get_giuw_wpolicyds_exist (i.dist_no)
           INTO v_list.giuw_wpolicyds_exist
           FROM DUAL;

         v_list.reverse_date     := ''; 
         v_list.reverse_sw       := ''; 
         FOR c2 IN (SELECT A.reverse_date, b.reverse_sw
                      FROM giri_binder a, giri_frps_ri b, giri_distfrps c
                     WHERE a.policy_id = p_pack_par_id 
                       AND c.dist_no = v_list.dist_no
                       AND a.fnl_binder_id = b.fnl_binder_id
                       AND b.line_cd = c.line_cd 
                       AND b.frps_yy = c.frps_yy 
                       AND b.frps_seq_no = c.frps_seq_no)
         LOOP
           v_list.reverse_date     := c2.reverse_date; 
           v_list.reverse_sw       := c2.reverse_sw; 
           EXIT;
         END LOOP; 

         PIPE ROW (v_list);
      END LOOP;

      RETURN;
   END get_pack_giuw_pol_dist;

   /*
     **  Created by   :  Emman
     **  Date Created :  07.13.2011
     **  Reference By : (GIUWS003 - Preliminary Peril Distribution)
     **  Description  : Gets giuw_pol_dist details for package
     */
   FUNCTION get_pack_giuw_pol_dist1 (
      p_pack_par_id   gipi_parlist.pack_par_id%TYPE
   )
      RETURN giuw_pol_dist_tab PIPELINED
   IS
      v_list   giuw_pol_dist_type;
   BEGIN
      FOR i IN (SELECT   a.dist_no, a.par_id, a.dist_flag, a.redist_flag,
                         a.eff_date, a.expiry_date, a.create_date,
                         a.post_flag, a.policy_id, a.endt_type, a.tsi_amt,
                         a.prem_amt, a.ann_tsi_amt, a.dist_type,
                         a.item_posted_sw, a.ex_loss_sw, a.negate_date,
                         a.acct_ent_date, a.acct_neg_date, a.batch_id,
                         a.user_id, a.last_upd_date, a.cpi_rec_no,
                         a.cpi_branch_cd, a.auto_dist, a.old_dist_no,
                         a.post_date, a.iss_cd, a.prem_seq_no,
                         a.takeup_seq_no, a.item_grp, a.arc_ext_data,
                         b.multi_booking_yy, b.multi_booking_mm
                    FROM giuw_pol_dist a, gipi_winvoice b, gipi_parlist c
                   WHERE c.pack_par_id = p_pack_par_id
                     AND a.par_id = c.par_id
                     AND a.par_id = b.par_id(+)
                     AND a.item_grp = b.item_grp(+)
                     AND a.takeup_seq_no = b.takeup_seq_no(+)
                ORDER BY dist_no)
      LOOP
         v_list.dist_no := i.dist_no;
         v_list.par_id := i.par_id;
         v_list.dist_flag := i.dist_flag;
         v_list.redist_flag := i.redist_flag;
         v_list.eff_date := i.eff_date;
         v_list.expiry_date := i.expiry_date;
         v_list.create_date := i.create_date;
         v_list.post_flag := i.post_flag;
         v_list.policy_id := i.policy_id;
         v_list.endt_type := i.endt_type;
         v_list.tsi_amt := i.tsi_amt;
         v_list.prem_amt := i.prem_amt;
         v_list.ann_tsi_amt := i.ann_tsi_amt;
         v_list.dist_type := i.dist_type;
         v_list.item_posted_sw := i.item_posted_sw;
         v_list.ex_loss_sw := i.ex_loss_sw;
         v_list.negate_date := i.negate_date;
         v_list.acct_ent_date := i.acct_ent_date;
         v_list.acct_neg_date := i.acct_neg_date;
         v_list.batch_id := i.batch_id;
         v_list.user_id := i.user_id;
         v_list.last_upd_date := i.last_upd_date;
         v_list.cpi_rec_no := i.cpi_rec_no;
         v_list.cpi_branch_cd := i.cpi_branch_cd;
         v_list.auto_dist := i.auto_dist;
         v_list.old_dist_no := i.old_dist_no;
         v_list.post_date := i.post_date;
         v_list.iss_cd := i.iss_cd;
         v_list.prem_seq_no := i.prem_seq_no;
         v_list.takeup_seq_no := i.takeup_seq_no;
         v_list.item_grp := i.item_grp;
         v_list.arc_ext_data := i.arc_ext_data;
         v_list.multi_booking_mm := i.multi_booking_mm;
         v_list.multi_booking_yy := i.multi_booking_yy;
         cg_ref_codes_pkg.cgdv$chk_char_ref_codes (i.dist_flag,
                                                   v_list.mean_dist_flag,
                                                   'GIUW_POL_DIST.DIST_FLAG'
                                                  );
         v_list.var_share := 'N';

         FOR v IN (SELECT share_type
                     FROM giis_dist_share
                    WHERE share_type = 3
                      AND (share_cd, line_cd) IN (SELECT share_cd, line_cd
                                                    FROM giuw_wperilds_dtl
                                                   WHERE dist_no = i.dist_no))
         LOOP
            IF v.share_type = '3'
            THEN
               v_list.var_share := 'Y';
               EXIT;
            END IF;
         END LOOP;

         v_list.dist_post_flag := '';

         FOR c1 IN (SELECT c.post_flag
                      FROM giuw_wpolicyds_dtl a,
                           giuw_wpolicyds b,
                           giuw_pol_dist c
                     WHERE a.dist_seq_no = b.dist_seq_no
                       AND a.dist_no = b.dist_no
                       AND b.dist_no = c.dist_no
                       AND (a.dist_prem != 0 OR a.dist_tsi != 0)
                       AND a.share_cd = '999'
                       AND b.dist_flag = '2'
                       AND c.dist_no = i.dist_no)
         LOOP
            v_list.dist_post_flag := c1.post_flag;
            EXIT;
         END LOOP;

         SELECT giuw_wpolicyds_dtl_pkg.get_giuw_wpolicyds_dtl_exist (i.dist_no)
           INTO v_list.giuw_wpolicyds_dtl_exist
           FROM DUAL;

         SELECT giuw_wpolicyds_pkg.get_giuw_wpolicyds_exist (i.dist_no)
           INTO v_list.giuw_wpolicyds_exist
           FROM DUAL;

         v_list.reverse_date     := ''; 
         v_list.reverse_sw       := ''; 
         FOR c2 IN (SELECT A.reverse_date, b.reverse_sw
                      FROM giri_binder a, giri_frps_ri b, giri_distfrps c
                     WHERE a.policy_id = p_pack_par_id 
                       AND c.dist_no = v_list.dist_no
                       AND a.fnl_binder_id = b.fnl_binder_id
                       AND b.line_cd = c.line_cd 
                       AND b.frps_yy = c.frps_yy 
                       AND b.frps_seq_no = c.frps_seq_no)
         LOOP
           v_list.reverse_date     := c2.reverse_date; 
           v_list.reverse_sw       := c2.reverse_sw; 
           EXIT;
         END LOOP; 

         PIPE ROW (v_list);
      END LOOP;

      RETURN;
   END get_pack_giuw_pol_dist1;

      /*
   **  Created by   :  Anthony Santos
   **  Date Created :  07.18.2011
   **  Reference By : (GIUWS013
   **  Description  : Gets giuw_pol_dist details of specified parid
   */
   FUNCTION get_giuw_pol_dist_giuws013 (
      p_par_id      giuw_pol_dist.par_id%TYPE,
      p_policy_id   gipi_invoice.policy_id%TYPE,
     p_dist_no   giuw_pol_dist.dist_no%TYPE
   )
      RETURN giuw_pol_dist_tab PIPELINED
   IS
      v_list   giuw_pol_dist_type;
   BEGIN
      FOR i IN (SELECT   a.dist_no, a.par_id, a.dist_flag, a.redist_flag,
                         a.eff_date, a.expiry_date, a.create_date,
                         a.post_flag, a.policy_id, a.endt_type, a.tsi_amt,
                         a.prem_amt, a.ann_tsi_amt, a.dist_type,
                         a.item_posted_sw, a.ex_loss_sw, a.negate_date,
                         a.acct_ent_date, a.acct_neg_date, a.batch_id,
                         a.user_id, a.last_upd_date, a.cpi_rec_no,
                         a.cpi_branch_cd, a.auto_dist, a.old_dist_no,
                         a.post_date, a.iss_cd, a.prem_seq_no,
                         a.takeup_seq_no, a.item_grp, a.arc_ext_data,
                         b.multi_booking_yy, b.multi_booking_mm
                    FROM giuw_pol_dist a, gipi_invoice b
                   WHERE a.par_id = p_par_id
                     --AND a.par_id = b.par_id(+)
                     AND b.policy_id = p_policy_id
                     AND NVL (a.item_grp, 1) = b.item_grp(+)
                     AND NVL (a.takeup_seq_no, 1) = b.takeup_seq_no(+)
                     AND a.dist_flag <> '3'
                     AND a.dist_no IN (SELECT dist_no
                                         FROM giuw_wpolicyds WHERE dist_no = p_dist_no)
                ORDER BY dist_no)
      LOOP
         v_list.dist_no := i.dist_no;
         v_list.par_id := i.par_id;
         v_list.dist_flag := i.dist_flag;
         v_list.redist_flag := i.redist_flag;
         v_list.eff_date := i.eff_date;
         v_list.expiry_date := i.expiry_date;
         v_list.create_date := i.create_date;
         v_list.post_flag := i.post_flag;
         v_list.policy_id := i.policy_id;
         v_list.endt_type := i.endt_type;
         v_list.tsi_amt := i.tsi_amt;
         v_list.prem_amt := i.prem_amt;
         v_list.ann_tsi_amt := i.ann_tsi_amt;
         v_list.dist_type := i.dist_type;
         v_list.item_posted_sw := i.item_posted_sw;
         v_list.ex_loss_sw := i.ex_loss_sw;
         v_list.negate_date := i.negate_date;
         v_list.acct_ent_date := i.acct_ent_date;
         v_list.acct_neg_date := i.acct_neg_date;
         v_list.batch_id := i.batch_id;
         v_list.user_id := i.user_id;
         v_list.last_upd_date := i.last_upd_date;
         v_list.cpi_rec_no := i.cpi_rec_no;
         v_list.cpi_branch_cd := i.cpi_branch_cd;
         v_list.auto_dist := i.auto_dist;
         v_list.old_dist_no := i.old_dist_no;
         v_list.post_date := i.post_date;
         v_list.iss_cd := i.iss_cd;
         v_list.prem_seq_no := i.prem_seq_no;
         v_list.takeup_seq_no := i.takeup_seq_no;
         v_list.item_grp := i.item_grp;
         v_list.arc_ext_data := i.arc_ext_data;
         v_list.multi_booking_mm := i.multi_booking_mm;
         v_list.multi_booking_yy := i.multi_booking_yy;
         cg_ref_codes_pkg.cgdv$chk_char_ref_codes (i.dist_flag,
                                                   v_list.mean_dist_flag,
                                                   'GIUW_POL_DIST.DIST_FLAG'
                                                  );
         v_list.var_share := 'N';

         FOR v IN (SELECT share_type
                     FROM giis_dist_share
                    WHERE share_type = 3
                      AND (share_cd, line_cd) IN (SELECT share_cd, line_cd
                                                    FROM giuw_wpolicyds_dtl
                                                   WHERE dist_no = i.dist_no))
         LOOP
            IF v.share_type = '3'
            THEN
               v_list.var_share := 'Y';
               EXIT;
            END IF;
         END LOOP;

         v_list.dist_post_flag := '';

         FOR c1 IN (SELECT c.post_flag
                      FROM giuw_wpolicyds_dtl a,
                           giuw_wpolicyds b,
                           giuw_pol_dist c
                     WHERE a.dist_seq_no = b.dist_seq_no
                       AND a.dist_no = b.dist_no
                       AND b.dist_no = c.dist_no
                       AND (a.dist_prem != 0 OR a.dist_tsi != 0)
                       AND a.share_cd = '999'
                       AND b.dist_flag = '2'
                       AND c.dist_no = i.dist_no)
         LOOP
            v_list.dist_post_flag := c1.post_flag;
            EXIT;
         END LOOP;

         SELECT giuw_wpolicyds_dtl_pkg.get_giuw_wpolicyds_dtl_exist (i.dist_no)
           INTO v_list.giuw_wpolicyds_dtl_exist
           FROM DUAL;

         SELECT giuw_wpolicyds_pkg.get_giuw_wpolicyds_exist (i.dist_no)
           INTO v_list.giuw_wpolicyds_exist
           FROM DUAL;

         PIPE ROW (v_list);
      END LOOP;

      RETURN;
   END;

     /*
   **  Created by   :  Anthony Santos
   **  Date Created :  07.21.2011
   **  Reference By : (GIUWS013
   */
   PROCEDURE post_dist_giuws013 (
      p_policy_id                giuw_pol_dist.policy_id%TYPE,
      p_dist_no                  giuw_pol_dist.dist_no%TYPE,
      p_endt_seq_no              gipi_polbasic_pol_dist_v1.endt_seq_no%TYPE,
      p_eff_date                 gipi_polbasic_pol_dist_v1.eff_date%TYPE,
      p_batch_id        IN OUT   giuw_pol_dist.batch_id%TYPE,
      p_line_cd                  gipi_polbasic_pol_dist_v1.line_cd%TYPE,
      p_subline_cd               gipi_polbasic_pol_dist_v1.subline_cd%TYPE,
      p_iss_cd                   gipi_polbasic_pol_dist_v1.iss_cd%TYPE,
      p_issue_yy                 gipi_polbasic_pol_dist_v1.issue_yy%TYPE,
      p_pol_seq_no               gipi_polbasic_pol_dist_v1.pol_seq_no%TYPE,
      p_renew_no                 gipi_polbasic_pol_dist_v1.renew_no%TYPE,
      p_dist_seq_no              giuw_wpolicyds.dist_seq_no%TYPE,
      p_facul_sw                 VARCHAR2,
      p_workflow_msgr   OUT      VARCHAR2,
      p_message         OUT      VARCHAR2
   )
   IS
      v_eff_date      giuw_pol_dist.eff_date%TYPE;
      v_expiry_date   giuw_pol_dist.expiry_date%TYPE;
   BEGIN
      delete_dist_master_tables (p_dist_no);
      giuw_policyds_pkg.post_wpolicyds_dtl (p_dist_no,
                                            p_endt_seq_no,
                                            p_eff_date,
                                            p_message
                                           );
      giuw_witemds_pkg.post_witemds_dtl (p_dist_no);
      giuw_itemperilds_dtl_pkg.post_witemperilds_dtl (p_dist_no);
      giuw_wperilds_dtl_pkg.post_wperilds_dtl (p_dist_no);

       /* Remove the current distribution from the batch
      ** to which it originally belongs to. */
      /* Added RBD - 09/27/99 - Update on GIUW_POL_DIST */
      IF p_batch_id IS NOT NULL
      THEN
         FOR c1 IN (SELECT ROWID, batch_qty
                      FROM giuw_dist_batch
                     WHERE batch_id = p_batch_id)
         LOOP
            IF c1.batch_qty > 1
            THEN
               UPDATE giuw_dist_batch
                  SET batch_qty = c1.batch_qty - 1
                WHERE ROWID = c1.ROWID;
            ELSE
               UPDATE giuw_pol_dist
                  SET batch_id = NULL
                WHERE batch_id = p_batch_id;

               DELETE      giuw_dist_batch_dtl
                     WHERE batch_id = p_batch_id;

               DELETE      giuw_dist_batch
                     WHERE ROWID = c1.ROWID;
            END IF;

            p_batch_id := NULL;
            EXIT;
         END LOOP;
      END IF;

      delete_workflow_rec ('Final Distribution', 'GIPIS055', USER,
                           p_policy_id);

      /* If a facultative share does not exist in any of
      ** the distribution records, records in the working
      ** tables will be deleted. */
      /* Edited by RBD 09/27/99 */
      /* Updated by RBD 10/04/99 - on USER AND LAST UPDATE */
      IF p_facul_sw = 'N'
      THEN
         -- SET_ITEM_PROPERTY('c1306.but_post_dist', ENABLED, PROPERTY_FALSE);
         UPDATE gipi_polbasic
            SET dist_flag = 3,
                user_id = NVL (giis_users_pkg.app_user, USER),
                last_upd_date = SYSDATE
          WHERE policy_id = p_policy_id;

         UPDATE giuw_pol_dist
            SET dist_flag = 3,
                post_flag = 'O',
                batch_id = NULL,
                post_date = SYSDATE,
                user_id = NVL (giis_users_pkg.app_user, USER),
                last_upd_date = SYSDATE
          WHERE policy_id = p_policy_id AND dist_no = p_dist_no;

           /* A.R.C. 02.02.2006
         ** to create workflow records of Policy/Endt.  Redistribution */
         FOR a1 IN (SELECT DISTINCT claim_id
                               FROM gicl_claims b, gipi_polbasic a
                              WHERE b.line_cd = a.line_cd
                                AND b.subline_cd = a.subline_cd
                                AND b.iss_cd = a.iss_cd
                                AND b.issue_yy = a.issue_yy
                                AND b.pol_seq_no = a.pol_seq_no
                                AND b.renew_no = a.renew_no
                                AND b.clm_stat_cd NOT IN ('CC', 'WD', 'DN')
                                AND a.policy_id = p_policy_id)
         LOOP
            FOR c1 IN (SELECT b.userid, d.event_desc
                         FROM giis_events_column c,
                              giis_event_mod_users b,
                              giis_event_modules a,
                              giis_events d
                        WHERE 1 = 1
                          AND c.event_cd = a.event_cd
                          AND c.event_mod_cd = a.event_mod_cd
                          AND b.event_mod_cd = a.event_mod_cd
                          AND b.passing_userid =
                                           NVL (giis_users_pkg.app_user, USER)
                          AND a.module_id = 'GIUWS012'
                          AND a.event_cd = d.event_cd
                          AND UPPER (d.event_desc) =
                                                'POLICY/ENDT.  REDISTRIBUTION')
            LOOP
               create_transfer_workflow_rec (c1.event_desc,
                                             'GIUWS012',
                                             c1.userid,
                                             a1.claim_id,
                                                c1.event_desc
                                             || ' '
                                             || get_clm_no (a1.claim_id),
                                             p_message,
                                             p_workflow_msgr,
                                             NVL (giis_users_pkg.app_user,
                                                  USER
                                                 )
                                            );
            END LOOP;
         END LOOP;

         /* 11052000 BETH
         **    posted policy distribution with eim_flag = '2' should be
         **    updated with eim_flag ='6' and undist_sw = 'Y' in eim_takeup_info
         **    table.
         */
         FOR a IN (SELECT '1'
                     FROM eim_takeup_info
                    WHERE policy_id = p_policy_id AND eim_flag = '2')
         LOOP
            UPDATE eim_takeup_info
               SET eim_flag = '6',
                   undist_sw = 'Y'
             WHERE policy_id = p_policy_id;

            EXIT;
         END LOOP;

         DBMS_OUTPUT.put_line (   '7'
                               || 'policyId: '
                               || p_policy_id
                               || ' distNO: '
                               || p_dist_no
                              );

         /* mark jm 10.12.2009 UW-SPECS-2009-00067 starts here */
         /* for updating GICL_CLM_RESERVE.REDIST_SW */
         BEGIN
            SELECT eff_date, expiry_date
              INTO v_eff_date, v_expiry_date
              FROM giuw_pol_dist
             WHERE policy_id = p_policy_id AND dist_no = p_dist_no;
         END;

         FOR a IN (SELECT claim_id, loss_date
                     FROM gicl_claims
                    WHERE line_cd = p_line_cd
                      AND subline_cd = p_subline_cd
                      AND pol_iss_cd = p_iss_cd
                      AND issue_yy = p_issue_yy
                      AND pol_seq_no = p_pol_seq_no
                      AND renew_no = p_renew_no)
         LOOP
            FOR b IN (SELECT item_no, peril_cd
                        FROM giuw_witemperilds
                       WHERE dist_no = p_dist_no
                         AND dist_seq_no = p_dist_seq_no)
            LOOP
               FOR c IN (SELECT 1
                           FROM gicl_clm_reserve
                          WHERE claim_id = a.claim_id
                            AND item_no = b.item_no
                            AND peril_cd = b.peril_cd)
               LOOP
                  IF     p_facul_sw = 'N'
                     AND (a.loss_date BETWEEN v_eff_date AND v_expiry_date)
                  THEN
                     UPDATE gicl_clm_reserve
                        SET redist_sw = 'Y'
                      WHERE claim_id = a.claim_id
                        AND item_no = b.item_no
                        AND peril_cd = b.peril_cd;
                  END IF;
               END LOOP;
            END LOOP;
         END LOOP;

         /* mark jm 10.12.09 UW-SPECS-2009-00067 ends here */

         /* Delete all data related to the current
         ** DIST_NO from the distribution and RI
         ** working tables. */
         delete_dist_working_tables (p_dist_no);

          /* A.R.C. 06.27.2005
         ** to delete workflow records of Undistributed policies awaiting claims */
         FOR c1 IN (SELECT claim_id
                      FROM gicl_claims
                     WHERE 1 = 1
                       AND line_cd = p_line_cd
                       AND subline_cd = p_subline_cd
                       AND iss_cd = p_iss_cd
                       AND issue_yy = p_issue_yy
                       AND pol_seq_no = p_pol_seq_no
                       AND renew_no = p_renew_no)
         LOOP
            delete_workflow_rec ('Undistributed policies awaiting claims',
                                 'GICLS010',
                                 NVL (giis_users_pkg.app_user, USER),
                                 c1.claim_id
                                );
         END LOOP;

         --A.R.C. 02.07.2007
           --added to delete the workflow facultative placement of GIUWS012 if not facul
         delete_workflow_rec ('Facultative Placement',
                              'GIUWS012',
                              NVL (giis_users_pkg.app_user, USER),
                              p_policy_id
                             );
      ELSIF p_facul_sw = 'Y'
      THEN
         UPDATE gipi_polbasic
            SET dist_flag = 2,
                user_id = NVL (giis_users_pkg.app_user, USER),
                last_upd_date = SYSDATE
          WHERE policy_id = p_policy_id;

         UPDATE giuw_pol_dist
            SET dist_flag = 2,
                post_flag = 'O',
                batch_id = NULL,
                user_id = NVL (giis_users_pkg.app_user, USER),
                last_upd_date = SYSDATE
          WHERE policy_id = p_policy_id AND dist_no = p_dist_no;

           /* A.R.C. 08.16.2004
         ** to create workflow records of Facultative Placement */
         FOR c1 IN
            (SELECT b.userid, d.event_desc
               FROM giis_events_column c,
                    giis_event_mod_users b,
                    giis_event_modules a,
                    giis_events d
              WHERE 1 = 1
                AND c.event_cd = a.event_cd
                AND c.event_mod_cd = a.event_mod_cd
                AND b.event_mod_cd = a.event_mod_cd
                --AND b.userid <> USER  --A.R.C. 01.26.2006
                AND b.passing_userid =
                        NVL (giis_users_pkg.app_user, USER)
                                                           --A.R.C. 01.26.2006
                AND a.module_id = 'GIUWS012'
                AND a.event_cd = d.event_cd
                AND UPPER (d.event_desc) = 'FACULTATIVE PLACEMENT')
         LOOP
            create_transfer_workflow_rec (c1.event_desc,
                                          'GIUWS012',
                                          c1.userid,
                                          p_policy_id,
                                             c1.event_desc
                                          || ' '
                                          || get_policy_no (p_policy_id),
                                          p_message,
                                          p_workflow_msgr,
                                          NVL (giis_users_pkg.app_user, USER)
                                         );
         END LOOP;
         
         FOR dist_no IN (SELECT DISTINCT dist_seq_no
                           FROM giuw_policyds_dtl
                          WHERE dist_no = p_dist_no)
         LOOP
            DELETE_WORKING_BINDER_TABLES(p_dist_no, dist_no.dist_seq_no);
         END LOOP;
      END IF;
   END post_dist_giuws013;

   /*
     **  Created by   :  Anthony Santos
     **  Date Created :  07.21.2011
     **  Reference By : (GIUWS013
     */
   PROCEDURE pre_post_giuws013 (
      p_policy_id            giuw_pol_dist.policy_id%TYPE,
      p_dist_no              giuw_pol_dist.dist_no%TYPE,
      p_facul_sw       OUT   VARCHAR2,
      p_facul_share    OUT   giuw_wpolicyds_dtl_pkg.giuw_facul_share_dtl_cur,
      p_facul_share2   OUT   giuw_wpolicyds_dtl_pkg.giuw_facul_share_dtl_cur,
      p_message        OUT   VARCHAR2,
      p_count          OUT   NUMBER,
      p_exist          OUT   VARCHAR2,
      p_old_dist_no    OUT   NUMBER
   )
   IS
      v_old_dist_no   giuw_pol_dist.dist_no%TYPE;
      v_old_line_cd   giuw_policyds_dtl.line_cd%TYPE;
      v_cnt           NUMBER;
   BEGIN
      p_message := 'SUCCESS';
      p_exist := 'N';
      p_facul_sw := 'N';
      p_count := 0;

      FOR a IN (SELECT COUNT (dist_no) COUNT
                  FROM giuw_pol_dist
                 WHERE policy_id = p_policy_id
                   AND negate_date IS NULL
                   AND dist_flag IN ('1', '2', '3'))
      LOOP
         v_cnt := a.COUNT;
      END LOOP;

      IF v_cnt > 1
      THEN
         validate_existing_dist_rec2 (p_policy_id, p_dist_no, p_message);
      ELSE
         validate_existing_dist_rec (p_policy_id, p_dist_no, p_message);
      END IF;

      FOR i IN
         (SELECT *
            FROM TABLE
                    (giuw_wpolicyds_dtl_pkg.get_list_with_facul_share
                                                                    (p_dist_no)
                    ))
      LOOP
         p_count := p_count + 1;
      END LOOP;

      OPEN p_facul_share FOR
         SELECT *
           FROM TABLE
                   (giuw_wpolicyds_dtl_pkg.get_list_with_facul_share
                                                                    (p_dist_no)
                   );

      IF p_count > 0
      THEN
         p_facul_sw := 'Y';
      END IF;

      /* Delete previously inserted records
      ** that are no longer relevant to the
      ** current distribution record as such
      ** records no longer have a facultative
      ** share in it. */
      DELETE      giri_wdistfrps a
            WHERE NOT EXISTS (
                     SELECT 'A'
                       FROM giuw_wpolicyds_dtl
                      WHERE share_cd = 999
                        AND dist_seq_no = a.dist_seq_no
                        AND dist_no = a.dist_no)
              AND dist_no = p_dist_no;

      FOR c1 IN (SELECT dist_no_old
                   FROM giuw_distrel
                  WHERE policy_id = p_policy_id AND dist_no_new = p_dist_no)
      LOOP
         p_exist := 'Y';
         v_old_dist_no := c1.dist_no_old;
       p_old_dist_no := c1.dist_no_old; -- added by: Nica 07.25.2012
         EXIT;
      END LOOP;

      /*OPEN p_facul_share2 FOR
         SELECT *
           FROM TABLE
                   (giuw_wpolicyds_dtl_pkg.get_list_with_facul_share2
                                                                 (p_policy_id,
                                                                  p_dist_no
                                                                 )
                   );*/
      IF p_exist = 'Y' THEN
          /*OPEN p_facul_share2 FOR
             SELECT *
               FROM TABLE
                       (giuw_wpolicyds_dtl_pkg.get_list_with_facul_share2
                                                                     (p_policy_id,
                                                                      p_dist_no
                                                                     )
                   );*/
       OPEN p_facul_share2 FOR
                 SELECT *
                   FROM TABLE
                           (giuw_wpolicyds_dtl_pkg.get_list_with_facul_share
                                                                    (p_dist_no)
                   );
      ELSE
          OPEN p_facul_share2 FOR
                 SELECT *
                   FROM TABLE
                           (giuw_wpolicyds_dtl_pkg.get_list_with_facul_share
                                                                    (p_dist_no)
                   );
      END IF;
   END pre_post_giuws013;

   /*
     **  Created by   :  Anthony Santos
     **  Date Created :  07.22.2011
     **  Reference By : (GIUWS013
     */
   PROCEDURE post_form_commit_giuws013 (
      p_policy_id     giuw_pol_dist.par_id%TYPE,
      p_dist_no       giuw_pol_dist.dist_no%TYPE,
      p_dist_seq_no   giuw_wpolicyds.dist_seq_no%TYPE,
      p_batch_id      giuw_pol_dist.batch_id%TYPE,
      p_batch_dist_sw  VARCHAR2        -- shan 08.11.2014
   )
   IS
      v_changes   VARCHAR2 (1) := 'Y';                 --dahil updated na sya
   BEGIN
      giuw_pol_dist_pkg.adjust_wpolicyds_dtl (p_dist_no, p_dist_seq_no);

	  IF p_batch_dist_sw != 'Y' THEN
		  UPDATE giuw_pol_dist
			 SET dist_flag = '1',
				 post_flag = 'O',
				 batch_id = NULL,
				 user_id = NVL (giis_users_pkg.app_user, USER),
				 last_upd_date = SYSDATE
		   WHERE policy_id = p_policy_id AND dist_no = p_dist_no;
	
		  IF p_batch_id IS NOT NULL
		  THEN
			 FOR c1 IN (SELECT ROWID, batch_qty
						  FROM giuw_dist_batch
						 WHERE batch_id = p_batch_id)
			 LOOP
				IF c1.batch_qty > 1
				THEN
				   UPDATE giuw_dist_batch
					  SET batch_qty = c1.batch_qty - 1
					WHERE ROWID = c1.ROWID;
				ELSE
				   DELETE      giuw_dist_batch_dtl
						 WHERE batch_id = p_batch_id;
	
				   DELETE      giuw_dist_batch
						 WHERE ROWID = c1.ROWID;
				END IF;
	
				--p_batch_id := NULL;
				EXIT;
			 END LOOP;
		  END IF;
      ELSE
          UPDATE giuw_pol_dist
			 SET dist_flag = '1',
				 post_flag = 'O',
				 user_id = NVL (giis_users_pkg.app_user, USER),
				 last_upd_date = SYSDATE
		   WHERE policy_id = p_policy_id AND dist_no = p_dist_no;
  	  END IF;

      UPDATE gipi_polbasic
         SET dist_flag = '1',
             user_id = NVL (giis_users_pkg.app_user, USER),
             last_upd_date = SYSDATE
       WHERE policy_id = p_policy_id;

      giuw_pol_dist_pkg.populate_witem_peril_dtl (p_dist_no);
      giuw_pol_dist_pkg.adjust_net_ret_imperfection (p_dist_no);

      UPDATE giuw_wpolicyds
         SET dist_flag = '2'
       WHERE dist_no = p_dist_no;
   END;
   
   /*
   **  Created by  : Emman
   **  Date Created  : 07.27.2011
   **  Reference By  : (GIUWS012 - Distribution by Peril)
   **  Description  : Adjust amts in perilds dtl tables to equalize the amounts
   **                attained by the policyds dtl table
   */
   PROCEDURE ADJUST_DTL_AMTS_GIUWS012(p_dist_no      GIUW_POL_DIST.dist_no%TYPE)
   IS
     v_rowid                       VARCHAR2(50):= NULL;
     v_prl_eql                     VARCHAR2(1) := 'Y';
     v_itmprl_eql                  VARCHAR2(1) := 'Y';
     v_correct_dist_tsi         giuw_wpolicyds_dtl.dist_tsi%TYPE;
     v_correct_dist_prem      giuw_wpolicyds_dtl.dist_prem%TYPE;
     v_correct_ann_dist_tsi   giuw_wpolicyds_dtl.ann_dist_tsi%TYPE;
   
   BEGIN
     /* Get sum of tsi, prem and ann_tsi from giuw_wpolicyds_dtl
     ** group by share_cd */
     FOR a IN (SELECT ROUND(SUM(dist_tsi),2) pol_tsi, ROUND(SUM(dist_prem),2) pol_prem, 
                              ROUND(SUM(ann_dist_tsi),2) pol_ann_tsi, dist_seq_no, share_cd
                 FROM giuw_wpolicyds_dtl
                WHERE dist_no = p_dist_no
                GROUP BY dist_seq_no, share_cd)
     LOOP
       /* First part : compare giuw_wpolicyds_dtl with giuw_wperilds_dtl*/               
        /* Get sum of tsi, prem and ann_tsi from giuw_wperilds_dtl */
       FOR b IN (SELECT ROUND(SUM(DECODE(gper.peril_type,'B',gwd.dist_tsi,0)),2) prl_tsi, 
                        ROUND(SUM(gwd.dist_prem),2) prl_prem, 
                             ROUND(SUM(DECODE(gper.peril_type,'B',gwd.ann_dist_tsi,0)),2) prl_ann_tsi
                   FROM giuw_wperilds_dtl gwd
                      , giis_peril gper
                  WHERE gwd.peril_cd = gper.peril_cd
                    AND gwd.line_cd  = gper.line_cd
                    AND gwd.dist_no = p_dist_no
                    AND gwd.dist_seq_no = a.dist_seq_no
                    AND gwd.share_cd = a.share_cd)
       LOOP
          /* initialize variables*/
          v_prl_eql := 'Y';
          v_rowid   := NULL;
           v_correct_dist_tsi       := 0;
           v_correct_dist_prem    := 0;
           v_correct_ann_dist_tsi := 0;
         /* Get rowid of last peril encoded in giuw_wperilds_dtl*/
          FOR r IN (SELECT rowid
                           FROM giuw_wperilds_dtl
                             WHERE dist_no = p_dist_no
                              AND dist_seq_no = a.dist_seq_no
                              AND share_cd = a.share_cd) LOOP
           v_rowid := r.rowid;
          END LOOP;
          /* Compare sums taken from giuw_wpolicyds_dtl and giuw_wperilds_dtl 
          ** if sums are not equal, get correct amt for giuw_wperilds_dtl*/
          IF b.prl_tsi <> a.pol_tsi THEN
              v_prl_eql := 'N';
              v_correct_dist_tsi := a.pol_tsi - b.prl_tsi;
          END IF;    
          IF b.prl_prem <> a.pol_prem THEN
              v_prl_eql := 'N';
              v_correct_dist_prem := a.pol_prem - b.prl_prem;
          END IF;    
          IF b.prl_ann_tsi <> a.pol_ann_tsi THEN
              v_prl_eql := 'N';
              v_correct_ann_dist_tsi := a.pol_ann_tsi - b.prl_ann_tsi;
          END IF;    
          /* update giuw_wperilds_dtl if at least one of the compared amts is not equal
          ** adjust only the last peril entered*/
          IF v_prl_eql = 'N' THEN
              UPDATE giuw_wperilds_dtl
                 SET dist_tsi     = v_correct_dist_tsi + dist_tsi
                   , dist_prem    = v_correct_dist_prem + dist_prem
                   , ann_dist_tsi = v_correct_ann_dist_tsi + ann_dist_tsi
               WHERE rowid        = v_rowid;
          END IF;
       END LOOP; --b loop
   
       /* Second part : compare giuw_wpolicyds_dtl with giuw_itemperilds_dtl*/
       FOR c IN (SELECT ROUND(SUM(DECODE(gper.peril_type,'B',gwd.dist_tsi,0)),2) itmprl_tsi, 
                        ROUND(SUM(gwd.dist_prem),2) itmprl_prem, 
                             ROUND(SUM(DECODE(gper.peril_type,'B',gwd.ann_dist_tsi,0)),2) itmprl_ann_tsi
                   FROM giuw_witemperilds_dtl gwd
                      , giis_peril gper
                  WHERE gwd.peril_cd = gper.peril_cd
                    AND gwd.line_cd  = gper.line_cd
                    AND gwd.dist_no = p_dist_no
                    AND gwd.dist_seq_no = a.dist_seq_no
                    AND gwd.share_cd = a.share_cd)
       LOOP
          v_itmprl_eql := 'Y';
          v_rowid      := NULL;
           v_correct_dist_tsi       := 0;
           v_correct_dist_prem    := 0;
           v_correct_ann_dist_tsi := 0;
         
         /* Get rowid of last peril of the last item encoded in giuw_witemperilds_dtl*/
          FOR r IN (SELECT rowid
                           FROM giuw_witemperilds_dtl
                             WHERE dist_no = p_dist_no
                              AND dist_seq_no = a.dist_seq_no
                              AND share_cd = a.share_cd) LOOP
           v_rowid := r.rowid;
          END LOOP;
          /* Compare sums taken from giuw_wpolicyds_dtl and giuw_witemperilds_dtl 
          ** if sums are not equal, get correct amt for giuw_witemperilds_dtl*/
          IF c.itmprl_tsi <> a.pol_tsi THEN
              v_itmprl_eql := 'N';
              v_correct_dist_tsi := a.pol_tsi - c.itmprl_tsi;
          END IF;    
          IF c.itmprl_prem <> a.pol_prem THEN
              v_itmprl_eql := 'N';
              v_correct_dist_prem := a.pol_prem - c.itmprl_prem;
          END IF;    
          IF c.itmprl_ann_tsi <> a.pol_ann_tsi THEN
              v_itmprl_eql := 'N';
              v_correct_ann_dist_tsi := a.pol_ann_tsi - c.itmprl_ann_tsi;
          END IF;    
          /* update giuw_witemperilds_dtl if at least one of the compared amts is not equal
          ** adjust only the last peril entered*/
          IF v_itmprl_eql = 'N' THEN
              UPDATE giuw_witemperilds_dtl
                 SET dist_tsi     = v_correct_dist_tsi + dist_tsi
                   , dist_prem    = v_correct_dist_prem + dist_prem 
                   , ann_dist_tsi = v_correct_ann_dist_tsi + ann_dist_tsi
               WHERE rowid        = v_rowid;
          END IF;
       END LOOP; --c loop
     END LOOP; --a loop
   
   END ADJUST_DTL_AMTS_GIUWS012;
   
   /*
   **  Created by  : Emman
   **  Date Created  : 07.27.2011
   **  Reference By  : (GIUWS012 - Distribution by Peril)
   **  Description  : Adjust computational floats to equalize the amounts
   **        attained by the master tables with that of its detail
   **        tables.
   */
   PROCEDURE adjust_net_ret_imperfection4 (
      p_dist_no   IN   giuw_pol_dist.dist_no%TYPE
   )
   IS
   BEGIN
      /* Equalize the amounts of tables GIUW_WPOLICYDS
      ** and GIUW_WPOLICYDS_DTL. */
      --giuw_pol_dist_pkg.adjust_policy_level_amts (p_dist_no);--commented out to be replace by new adjust package edgar 05/08/2014
      /* Equalize the amounts of tables GIUW_WITEMDS
      ** and GIUW_WITEMDS_DTL. */
      --giuw_pol_dist_pkg.adjust_item_level_amts (p_dist_no);--commented out to be replace by new adjust package edgar 05/08/2014
      /* Equalize the amounts of tables GIUW_WITEMPERILDS
      ** and GIUW_WITEMPERILDS_DTL. */
      --giuw_pol_dist_pkg.adjust_item_peril_level_amts (p_dist_no);--commented out to be replace by new adjust package edgar 05/08/2014
      /* ASI 082099 */
      --giuw_pol_dist_pkg.adjust_final_giuws003 (p_dist_no);--commented out to be replace by new adjust package edgar 05/08/2014
     
     --giuw_pol_dist_pkg.adjust_dtl_amts_giuws012(p_dist_no);--commented out to be replace by new adjust package edgar 05/08/2014
       NULL; --edgar 05/08/2014
   END adjust_net_ret_imperfection4;
   
   /*
   **  Created by        : Emman
   **  Date Created     : 07.27.2011
   **  Reference By     : (GIUWS012- Distribution by Peril)
   **  Description     : post-form-commit trigger
   */
   PROCEDURE post_form_commit_giuws012 (
     p_policy_id                 gipi_polbasic.policy_id%TYPE,
      p_dist_no                   giuw_pol_dist.dist_no%TYPE,
      p_dist_seq_no               giuw_wperilds.dist_seq_no%TYPE,
      p_line_cd                   giuw_wperilds.line_cd%TYPE,
      p_peril_cd                  giuw_wperilds.peril_cd%TYPE,
      p_batch_id                 giuw_pol_dist.batch_id%TYPE,
      p_post_sw                   VARCHAR2,
     p_user_id                    giuw_pol_dist.user_id%TYPE
   )
   IS
   BEGIN
      /* Adjust computational floats to equalize the amounts
      ** attained by the master tables with that of its detail
      ** tables.
      ** Tables involved:  GIUW_WPERILDS - GIUW_WPERILDS_DTL */
      GIUW_POL_DIST_PKG.ADJUST_WPERILDS_DTL(p_dist_no, p_dist_seq_no, p_line_cd, p_peril_cd);
      
     IF (p_post_sw = 'Y')
      THEN
         RETURN;
      END IF;

   /* *************************** START OF FOR COMMIT ONLY ******************************** */
   /*  PROCEDURE IS ONLY PERFORMED DURING COMMIT PROCESSING WHERE THE VALUE OF THE VARIABLE
   **  VARIABLES.POST_SW IS EQUAL TO 'N'.                                                   */
   /* ************************************************************************************* */

      /* Reset DIST_FLAG to undistributed as
      ** the current changes made were not yet
      ** posted to the master tables. */
      UPDATE giuw_pol_dist
         SET dist_flag = '1',
             post_flag = 'P',
             batch_id  = NULL,
             user_id   = p_user_id,
             last_upd_date = SYSDATE
       WHERE policy_id = p_policy_id
        AND dist_no   = p_dist_no;
       
     UPDATE gipi_polbasic
        SET dist_flag        = '1',
            user_id          = p_user_id,
            last_upd_date = SYSDATE
      WHERE policy_id = p_policy_id;
      
     /* Remove the current distribution from the batch
     ** to which it originally belongs to. */
     IF p_batch_id IS NOT NULL THEN
        FOR c1 IN (SELECT rowid, batch_qty
                     FROM giuw_dist_batch
                    WHERE batch_id = p_batch_id)
        LOOP
          IF c1.batch_qty > 1 THEN
             UPDATE giuw_dist_batch
                SET batch_qty = c1.batch_qty - 1
              WHERE rowid     = c1.rowid;
          ELSE
               DELETE giuw_dist_batch_dtl
              WHERE batch_id = p_batch_id;
             DELETE giuw_dist_batch
              WHERE rowid = c1.rowid;
          END IF;
          --p_batch_id := NULL;
          EXIT;
        END LOOP;
     END IF;

      
      /* Remove existing records related to the
      ** current DIST_NO from certain distribution
      ** and RI master tables considering the fact
      ** that the current changes made were not yet
      ** posted to the master tables. */
      delete_dist_master_tables (p_dist_no);
      
      BEGIN
         giuw_witemperilds_dtl_pkg.populate_witemperilds_dtl (p_dist_no);
         giuw_witemds_dtl_pkg.populate_witemds_dtl_giuws012 (p_dist_no);
         giuw_wpolicyds_dtl_pkg.populate_wpolicyds_dtl3 (p_dist_no);
         /* Adjust computational floats to equalize the amounts
         ** attained by the master tables with that of its detail
         ** tables.
         ** Tables involved:  GIUW_WPOLICYDS    - GIUW_WPOLICYDS_DTL
         **                   GIUW_WITEMDS      - GIUW_WITEMDS_DTL
         **                   GIUW_WITEMPERILDS - GIUW_WITEMPERILDS_DTL */
         giuw_pol_dist_pkg.adjust_net_ret_imperfection4 (p_dist_no);
      END;

      /* Sets the distribution flag of table GIUW_WPOLICYDS to
     ** 2 or what used to be 2, signifying that all records
     ** have already been properly distributed and that such
     ** records are ready for posting.
     ** NOTE:  The update was made across all DIST_SEQ_NO's
     **        because the current system does not support
     **        partial distribution.  This means that if a
     **        particular DIST_SEQ_NO has already been 
     **        distributed, all subsequent DIST_SEQ_NO's 
     **        must also be distributed. */
     UPDATE giuw_wpolicyds
        SET dist_flag =  '2'
      WHERE dist_no   = p_dist_no;
   END post_form_commit_giuws012;
   
   /*
   **  Created by   :  Robert John Virrey
   **  Date Created :  07.28.2011
   **  Reference By : (GIUTS002)
   **  Description  : Gets giuw_pol_dist details of specified parid
   */
   FUNCTION get_giuw_pol_dist_giuts002 (
      p_par_id      giuw_pol_dist.par_id%TYPE,
      p_policy_id   gipi_invoice.policy_id%TYPE,
     p_dist_no   giuw_pol_dist.dist_no%TYPE
   )
      RETURN giuw_pol_dist_tab PIPELINED
   IS
      v_list   giuw_pol_dist_type;
   BEGIN
      FOR i IN (SELECT   a.dist_no, a.par_id, a.dist_flag, a.redist_flag,
                         a.eff_date, a.expiry_date, a.create_date,
                         a.post_flag, a.policy_id, a.endt_type, a.tsi_amt,
                         a.prem_amt, a.ann_tsi_amt, a.dist_type,
                         a.item_posted_sw, a.ex_loss_sw, a.negate_date,
                         a.acct_ent_date, a.acct_neg_date, a.batch_id,
                         a.user_id, a.last_upd_date, a.cpi_rec_no,
                         a.cpi_branch_cd, a.auto_dist, a.old_dist_no,
                         a.post_date, a.iss_cd, a.prem_seq_no,
                         a.takeup_seq_no, a.item_grp, a.arc_ext_data,
                         b.multi_booking_yy, b.multi_booking_mm
                    FROM giuw_pol_dist a, gipi_invoice b
                   WHERE a.par_id = p_par_id
                     AND b.policy_id = p_policy_id
                     AND NVL (a.item_grp, 1) = b.item_grp(+)
                     AND NVL (a.takeup_seq_no, 1) = NVL(b.takeup_seq_no(+), 1) --modified by jdiago 08.15.2014 : added NVL on b.takeup_seq_no(+)
                     AND a.dist_flag = 3
                     AND a.dist_no IN (SELECT dist_no
                                         FROM gipi_polbasic_pol_dist_v WHERE dist_no = p_dist_no)
                ORDER BY dist_no)
      LOOP
         v_list.dist_no := i.dist_no;
         v_list.par_id := i.par_id;
         v_list.dist_flag := i.dist_flag;
         v_list.redist_flag := i.redist_flag;
         v_list.eff_date := i.eff_date;
         v_list.expiry_date := i.expiry_date;
         v_list.create_date := i.create_date;
         v_list.post_flag := i.post_flag;
         v_list.policy_id := i.policy_id;
         v_list.endt_type := i.endt_type;
         v_list.tsi_amt := i.tsi_amt;
         v_list.prem_amt := i.prem_amt;
         v_list.ann_tsi_amt := i.ann_tsi_amt;
         v_list.dist_type := i.dist_type;
         v_list.item_posted_sw := i.item_posted_sw;
         v_list.ex_loss_sw := i.ex_loss_sw;
         v_list.negate_date := i.negate_date;
         v_list.acct_ent_date := i.acct_ent_date;
         v_list.acct_neg_date := i.acct_neg_date;
         v_list.batch_id := i.batch_id;
         v_list.user_id := i.user_id;
         v_list.last_upd_date := i.last_upd_date;
         v_list.cpi_rec_no := i.cpi_rec_no;
         v_list.cpi_branch_cd := i.cpi_branch_cd;
         v_list.auto_dist := i.auto_dist;
         v_list.old_dist_no := i.old_dist_no;
         v_list.post_date := i.post_date;
         v_list.iss_cd := i.iss_cd;
         v_list.prem_seq_no := i.prem_seq_no;
         v_list.takeup_seq_no := i.takeup_seq_no;
         v_list.item_grp := i.item_grp;
         v_list.arc_ext_data := i.arc_ext_data;
         v_list.multi_booking_mm := i.multi_booking_mm;
         v_list.multi_booking_yy := i.multi_booking_yy;
         cg_ref_codes_pkg.cgdv$chk_char_ref_codes (i.dist_flag,
                                                   v_list.mean_dist_flag,
                                                   'GIUW_POL_DIST.DIST_FLAG'
                                                  );
         
                  
        SELECT giuw_policyds_dtl_pkg.get_giuw_policyds_dtl_exist (i.dist_no)
          INTO v_list.giuw_policyds_dtl_exist
          FROM DUAL;

        SELECT giuw_policyds_pkg.get_giuw_policyds_exist (i.dist_no)
          INTO v_list.giuw_policyds_exist
          FROM DUAL;
      
         PIPE ROW (v_list);
      END LOOP;

      RETURN;
   END get_giuw_pol_dist_giuts002;
   
/*
**  Created by   : Veronica V. Raymundo
**  Date Created : July 29, 2011
**  Reference By : GIUWS016 - One-Risk Distribution TSI/Prem (Group)
**  Description  : Retrieves the GIUW_POL_DIST record for the given policy_id and dist_no
*/
   
   FUNCTION get_giuw_pol_dist_giuws016 (
      p_policy_id   GIUW_POL_DIST.policy_id%TYPE,
      p_dist_no     GIUW_POL_DIST.dist_no%TYPE,
      p_par_type    GIPI_POLBASIC_POL_DIST_V1.par_type%TYPE,
      p_pol_flag    GIPI_POLBASIC_POL_DIST_V1.pol_flag%TYPE
   )
   
    RETURN giuw_pol_dist_tab PIPELINED
   
   IS
    v_list   giuw_pol_dist_type;
    
   BEGIN
    FOR i IN (SELECT a.par_id, a.dist_no, a.dist_flag, 
                     a.policy_id, a.batch_id, a.post_flag
              FROM GIUW_POL_DIST a
              WHERE a.policy_id = p_policy_id
                AND a.dist_no = p_dist_no)
    LOOP
        v_list.par_id      := i.par_id;
        v_list.dist_no     := i.dist_no;
        v_list.dist_flag   := i.dist_flag;
        v_list.policy_id   := i.policy_id;
        v_list.batch_id    := i.batch_id;
        v_list.post_flag := i.post_flag;
        
        CG_REF_CODES_PKG.cgdv$chk_char_ref_codes (i.dist_flag,
                                                   v_list.mean_dist_flag,
                                                   'GIUW_POL_DIST.DIST_FLAG'
                                                  );
                                                  
        GIUW016_CHK_IF_TO_RECRTE_DISTR(i.dist_no, p_par_type, p_pol_flag, 
                                        v_list.giuw_wpolicyds_exist, 
                                        v_list.giuw_wpolicyds_dtl_exist);

         PIPE ROW (v_list); 
    END LOOP;
   END;
    
    /*
    **  Created by   : Jerome Orio 
    **  Date Created : July 29, 2011
    **  Reference By : GIUWS017 - Distribution by TSI/Prem (Peril) 
    **  Description  : Retrieves the GIUW_POL_DIST record for the given policy_id and dist_no
    */
    FUNCTION get_giuw_pol_dist_giuws017(
        p_policy_id         GIUW_POL_DIST.policy_id%TYPE,
        p_dist_no           GIUW_POL_DIST.dist_no%TYPE,
        p_pol_flag          gipi_wpolbas.pol_flag%TYPE,
        p_par_type          gipi_parlist.par_type%TYPE)  
    RETURN giuw_pol_dist_tab PIPELINED IS
      v_list   giuw_pol_dist_type;
    BEGIN
        FOR i IN (SELECT a.dist_no, a.par_id, a.dist_flag, a.redist_flag,
                         a.eff_date, a.expiry_date, a.create_date,
                         a.post_flag, a.policy_id, a.endt_type, a.tsi_amt,
                         a.prem_amt, a.ann_tsi_amt, a.dist_type,
                         a.item_posted_sw, a.ex_loss_sw, a.negate_date,
                         a.acct_ent_date, a.acct_neg_date, a.batch_id,
                         a.user_id, a.last_upd_date, a.cpi_rec_no,
                         a.cpi_branch_cd, a.auto_dist, a.old_dist_no,
                         a.post_date, a.iss_cd, a.prem_seq_no,
                         a.takeup_seq_no, a.item_grp, a.arc_ext_data,
                         b.multi_booking_yy, b.multi_booking_mm
                    FROM giuw_pol_dist a, gipi_invoice b
                   WHERE a.policy_id = p_policy_id
                     AND a.dist_no = p_dist_no
                     AND a.acct_ent_date IS NULL
                     AND a.policy_id = b.policy_id(+)
                     AND NVL (a.item_grp, 1) = b.item_grp(+)
                     AND NVL (a.takeup_seq_no, 1) = b.takeup_seq_no(+))
        LOOP
            v_list.dist_no          := i.dist_no;
            v_list.par_id           := i.par_id;
            v_list.dist_flag        := i.dist_flag;
            v_list.redist_flag      := i.redist_flag;
            v_list.eff_date         := i.eff_date;
            v_list.expiry_date      := i.expiry_date;
            v_list.create_date      := i.create_date;
            v_list.post_flag        := i.post_flag;
            v_list.policy_id        := i.policy_id;
            v_list.endt_type        := i.endt_type;
            v_list.tsi_amt          := i.tsi_amt;
            v_list.prem_amt         := i.prem_amt;
            v_list.ann_tsi_amt      := i.ann_tsi_amt;
            v_list.dist_type        := i.dist_type;
            v_list.item_posted_sw   := i.item_posted_sw;
            v_list.ex_loss_sw       := i.ex_loss_sw;
            v_list.negate_date      := i.negate_date;
            v_list.acct_ent_date    := i.acct_ent_date;
            v_list.acct_neg_date    := i.acct_neg_date;
            v_list.batch_id         := i.batch_id;
            v_list.user_id          := i.user_id;
            v_list.last_upd_date    := i.last_upd_date;
            v_list.cpi_rec_no       := i.cpi_rec_no;
            v_list.cpi_branch_cd    := i.cpi_branch_cd;
            v_list.auto_dist        := i.auto_dist;
            v_list.old_dist_no      := i.old_dist_no;
            v_list.post_date        := i.post_date;
            v_list.iss_cd           := i.iss_cd;
            v_list.prem_seq_no      := i.prem_seq_no;
            v_list.takeup_seq_no    := i.takeup_seq_no;
            v_list.item_grp         := i.item_grp;
            v_list.arc_ext_data     := i.arc_ext_data;
            v_list.multi_booking_mm := i.multi_booking_mm;
            v_list.multi_booking_yy := i.multi_booking_yy;
            CG_REF_CODES_PKG.cgdv$chk_char_ref_codes (i.dist_flag, v_list.mean_dist_flag, 'GIUW_POL_DIST.DIST_FLAG');
                   
            SELECT giuw_wpolicyds_dtl_pkg.get_giuw_wpolicyds_dtl_exist (i.dist_no)
              INTO v_list.giuw_wpolicyds_dtl_exist
              FROM DUAL;

            SELECT giuw_wpolicyds_pkg.get_giuw_wpolicyds_exist (i.dist_no)
              INTO v_list.giuw_wpolicyds_exist
              FROM DUAL;
              
            /*SELECT giuw_wperilds_dtl_pkg.get_giuw_wperilds_dtl_exist (i.dist_no)
              INTO v_list.giuw_wperilds_dtl_exist
              FROM DUAL;

            SELECT giuw_wperilds_pkg.get_giuw_wperilds_exist (i.dist_no)
              INTO v_list.giuw_wperilds_exist
              FROM DUAL;*/
            giuw_wperilds_pkg.get_giuw_wperilds_exist2(i.dist_no, p_pol_flag, p_par_type, 
                v_list.giuw_wperilds_exist, v_list.giuw_wperilds_dtl_exist);
              
        PIPE ROW (v_list); 
        END LOOP;
    END;
    
    /*
    **  Created by   : Robert John Virrey 
    **  Date Created : August 4, 2011
    **  Reference By : GIUTS002 - Distribution Negation 
    **  Description  : Creates a duplicate of the current distribution record
    **                  in the distribution working tables.  After which, the
    **                  DIST_FLAG of the current record is set to '4'('NEGATED').
    */
    PROCEDURE negate_distribution (
        p_policy_id         IN   NUMBER,
        p_dist_no           IN   NUMBER,
        p_line_cd           IN   VARCHAR2,
        p_temp_distno       OUT  NUMBER,
        p_msg               OUT  VARCHAR2,
        p_current_form_name IN   VARCHAR2,
        p_par_id            IN   VARCHAR2,
        p_workflow_msgr     OUT  VARCHAR2,
        p_user_id           IN   VARCHAR2
    )
    IS
    v_temp_distno   NUMBER;
    v_msg           VARCHAR2(500);
    v_workflow_msgr VARCHAR2(500);
    BEGIN
      BEGIN
         FOR i IN(SELECT dist_flag
                    FROM giuw_pol_dist
                   WHERE dist_no = p_dist_no)
         LOOP
            IF i.dist_flag != '3' THEN
               raise_application_error(-20001,'Geniisys Exception#E#The record is no longer tagged as distributed. You can only negate distributed record. Negation will be cancelled.');
               EXIT;
            END IF;
         END LOOP;
      END;
      
      GIIS_USERS_PKG.app_user := p_user_id; -- andrew - to save the correct user_id 04.24.2013;
    
      /* Generates a new distribution number 
      ** based on the value of oracle sequence
      ** POL_DIST_DIST_NO_S. 
      */
      DISTNO_SEQ_RETRIEVER(v_temp_distno, v_msg);

      /* Creates a new distribution record in
      ** table GIUW_POL_DIST based on the values
      ** taken in by the fields of the negated
      ** record. 
      */
      GIUW_POL_DIST_PKG.NEG_POL_DIST(p_dist_no, v_temp_distno);

      /* Creates a new distribution record in
      ** table GIUW_WPOLICYDS based on the values
      ** taken in by the fields of the negated
      ** record. 
      */  
      GIUW_WPOLICYDS_PKG.NEG_POLICYDS(p_dist_no, v_temp_distno);

      /* Creates a new distribution record in
      ** table GIUW_WPOLICYDS_DTL based on the
      ** values taken in by the fields of the
      ** negated record. 
      */  
      GIUW_WPOLICYDS_DTL_PKG.NEG_POLICYDS_DTL(p_dist_no, v_temp_distno);

      /* Creates a new distribution record in
      ** table GIUW_WITEMDS based on the values
      ** taken in by the fields of the negated
      ** record. 
      */
      GIUW_WITEMDS_PKG.NEG_ITEMDS(p_dist_no, v_temp_distno);

      /* Creates a new distribution record in
      ** table GIUW_WITEMDS_DTL based on the
      ** values taken in by the fields of the
      ** negated record. 
      */
      GIUW_WITEMDS_DTL_PKG.NEG_ITEMDS_DTL(p_dist_no, v_temp_distno);

      /* Creates a new distribution record in
      ** table GIUW_WITEMPERILDS based on the
      ** values taken in by the fields of the
      ** negated record. 
      */
      GIUW_WITEMPERILDS_PKG.NEG_ITEMPERILDS(p_dist_no, v_temp_distno);

      /* Creates a new distribution record in
      ** table GIUW_WITEMPERILDS_DTL based on
      ** the values taken in by the fields of
      ** the negated record. 
      */
      GIUW_WITEMPERILDS_DTL_PKG.NEG_ITEMPERILDS_DTL(p_dist_no, v_temp_distno);

      /* Creates a new distribution record in
      ** table GIUW_WPERILDS based on the values
      ** taken in by the fields of the negated
      ** record. 
      */
      GIUW_WPERILDS_PKG.NEG_PERILDS(p_dist_no, v_temp_distno);

      /* Creates a new distribution record in
      ** table GIUW_WPERILDS_DTL based on the
      ** values taken in by the fields of the
      ** negated record. 
      */
      GIUW_WPERILDS_DTL_PKG.NEG_PERILDS_DTL(p_dist_no, v_temp_distno);

      /* Update related tables to signify that
      ** the distribution record associated to
      ** the specific policy has been negated.
      */
      UPDATE gipi_polbasic
         SET dist_flag = '1',
             user_id = p_user_id, --USER,
             last_upd_date = SYSDATE
       WHERE policy_id = p_policy_id;

     UPDATE giuw_pol_dist 
         SET negate_date = SYSDATE, 
             dist_flag   = '4'
       WHERE dist_no     = p_dist_no;
     
     CHECK_REINSURANCE(p_dist_no,p_line_cd);

      UPDATE giri_distfrps
         SET ri_flag  = '4'
       WHERE dist_no  = p_dist_no;

      
      /*
      **     if current eim_flag = 2, update eim_flag =6 and 
      **     old_dist_no to the dist_no of policy being redistributed
      */
      FOR A IN (SELECT '1'
                  FROM eim_takeup_info
                 WHERE policy_id = p_policy_id
                   AND eim_flag = '2')
      LOOP
          UPDATE eim_takeup_info
             SET eim_flag = '6',
                 old_dist_no = p_dist_no
           WHERE policy_id = p_policy_id;
        EXIT;
      END LOOP;  
      /* Store the old and new distribution number to the appropriate
      ** table to keep track of the differences between the two sets
      ** of distribution records. 
      */
      INSERT INTO  giuw_distrel
                  (dist_no_old   , dist_no_new       , policy_id)
           VALUES (p_dist_no , v_temp_distno , p_policy_id);

      FOR c1 IN (SELECT b.userid, d.event_desc  
                   FROM giis_events_column c, giis_event_mod_users b, giis_event_modules a, giis_events d
                  WHERE 1=1
                    AND c.event_cd = a.event_cd
                    AND c.event_mod_cd = a.event_mod_cd
                    AND b.event_mod_cd = a.event_mod_cd
                    AND b.passing_userid = p_user_id --USER
                    AND a.module_id = 'GIUTS002'
                    AND a.event_cd = d.event_cd)
      LOOP
        --CREATE_TRANSFER_WORKFLOW_REC(NULL,GET_APPLICATION_PROPERTY(CURRENT_FORM_NAME), c1.userid, p_policy_id, c1.event_desc||' '||get_policy_no(v_policy_id));
        create_transfer_workflow_rec(c1.event_desc,
                                     p_current_form_name,
                                     c1.userid,
                                     p_par_id,
                                     c1.event_desc || ' ' || get_policy_no(p_par_id),
                                     v_msg,
                                     v_workflow_msgr,
                                     p_user_id);
      END LOOP;
      /*FORMS_DDL('COMMIT');
      IF FORM_FAILURE THEN
         MSG_ALERT('Error encountered while negating distribution record.  ' ||
                   'Please contact your DBA.', 'E', FALSE);
         MSG_ALERT('Closing this form.', 'I', FALSE);
         EXIT_FORM;
      END IF;*/
      
      IF v_msg IS NOT NULL THEN
         p_msg := v_msg;
        ELSIF v_workflow_msgr IS NOT NULL THEN
              p_workflow_msgr := v_workflow_msgr;
        ELSE
              p_msg := 'Policy successfully negated!  The new Distribution No. is ' ||
                        TO_CHAR(v_temp_distno, '099999999');
              p_temp_distno := v_temp_distno;
      END IF;

    END negate_distribution;
    
    /*
    **  Created by   : Robert John Virrey 
    **  Date Created : August 4, 2011
    **  Reference By : GIUTS002 - Distribution Negation 
    **  Description  : Creates a new distribution record in table GIUW_POL_DIST
    **                  based on the values taken in by the fields of the negated
    **                  record
    */
    PROCEDURE neg_pol_dist (
        p_dist_no      IN giuw_pol_dist.dist_no%TYPE,
        p_temp_distno  IN giuw_pol_dist.dist_no%TYPE
    ) 
    
    IS

      CURSOR dtl_retriever_cur IS
        SELECT par_id        , policy_id      , endt_type   ,
               tsi_amt       , prem_amt       , ann_tsi_amt ,
               redist_flag   , eff_date       , expiry_date , 
               dist_type     , item_posted_sw , ex_loss_sw  , 
               acct_ent_date , acct_neg_date  , create_date , 
               user_id       , last_upd_date  , batch_id    ,
               post_flag     , takeup_seq_no -- added by: Nica 05.24.2013
          FROM giuw_pol_dist
         WHERE dist_no = p_dist_no;
       
      v_par_id                   giuw_pol_dist.par_id%TYPE; 
      v_policy_id                giuw_pol_dist.policy_id%TYPE;
      v_endt_type                giuw_pol_dist.endt_type%TYPE;
      v_tsi_amt                  giuw_pol_dist.tsi_amt%TYPE;
      v_prem_amt                 giuw_pol_dist.prem_amt%TYPE;
      v_ann_tsi_amt              giuw_pol_dist.ann_tsi_amt%TYPE;
      v_redist_flag              giuw_pol_dist.redist_flag%TYPE;
      v_eff_date                 giuw_pol_dist.eff_date%TYPE;
      v_expiry_date              giuw_pol_dist.expiry_date%TYPE;
      v_dist_type                giuw_pol_dist.dist_type%TYPE;
      v_item_posted_sw           giuw_pol_dist.item_posted_sw%TYPE;
      v_ex_loss_sw               giuw_pol_dist.ex_loss_sw%TYPE;
      v_acct_ent_date            giuw_pol_dist.acct_ent_date%TYPE;
      v_acct_neg_date            giuw_pol_dist.acct_neg_date%TYPE;
      v_create_date              giuw_pol_dist.create_date%TYPE;
      v_user_id                  giuw_pol_dist.user_id%TYPE;
      v_last_upd_date            giuw_pol_dist.last_upd_date%TYPE;
      v_batch_id                 giuw_pol_dist.batch_id%TYPE;
      v_post_flag                giuw_pol_dist.post_flag%TYPE;
      v_takeup_seq_no            giuw_pol_dist.takeup_seq_no%TYPE;

    BEGIN
      OPEN dtl_retriever_cur;
      LOOP
        FETCH dtl_retriever_cur 
         INTO v_par_id        , v_policy_id      , v_endt_type   ,
              v_tsi_amt       , v_prem_amt       , v_ann_tsi_amt ,
              v_redist_flag   , v_eff_date       , v_expiry_date , 
              v_dist_type     , v_item_posted_sw , v_ex_loss_sw  , 
              v_acct_ent_date , v_acct_neg_date  , v_create_date , 
              v_user_id       , v_last_upd_date  , v_batch_id    , 
              v_post_flag     , v_takeup_seq_no;
        EXIT WHEN dtl_retriever_cur%NOTFOUND;
        INSERT INTO  giuw_pol_dist
                    (dist_no           , par_id           , policy_id     , 
                     endt_type         , tsi_amt          , prem_amt      ,
                     ann_tsi_amt       , dist_flag        , redist_flag   , 
                     eff_date          , expiry_date      , negate_date   , 
                     dist_type         , item_posted_sw   , ex_loss_sw    , 
                     acct_ent_date     , acct_neg_date    , create_date   , 
                     user_id           , last_upd_date    , batch_id      ,
                     post_flag         , takeup_seq_no    , old_dist_no)    --added old_dist_no by MarkS 5.19.2016 SR-5517
             VALUES (p_temp_distno     , v_par_id         , v_policy_id   , --to make sure POL_DIST_EXP_TBIU does not trigger causing it to get the eff date and expiry date of the policy
                     v_endt_type       , v_tsi_amt        , v_prem_amt    , 
                     v_ann_tsi_amt     , '1'              , v_redist_flag , 
                     v_eff_date        , v_expiry_date    , NULL          , 
                     v_dist_type       , v_item_posted_sw , v_ex_loss_sw  , 
                     null              , null             , SYSDATE       ,
                     NVL (giis_users_pkg.app_user, USER)  , SYSDATE, NULL ,
                     v_post_flag       , v_takeup_seq_no  , p_dist_no);     --added p_dist_no by MarkS 5.19.2016 SR-5517  
      END LOOP;                                                             --to make sure POL_DIST_EXP_TBIU does not trigger causing it to get the eff date and expiry date of the policy
      CLOSE dtl_retriever_cur;
    END neg_pol_dist;
    
   /*
   **  Created by   : Emman
   **  Date Created : 08.04.2011
   **  Reference By : (GIUWS012 - Distribution by Peril)
   **  Description  : Check if the distribution has been previously negated
   **                 before recreating the records in the RI tables
   */
    PROCEDURE POLICY_NEGATED_CHECK_GIUWS012(p_facul_sw          IN OUT VARCHAR2,
                                            p_policy_id         IN     GIPI_POLBASIC_POL_DIST_V1.policy_id%TYPE,
                                            p_dist_no           IN     GIUW_POL_DIST.dist_no%TYPE,
                                            p_line_cd           IN     GIPI_POLBASIC_POL_DIST_V1.line_cd%TYPE,
                                            p_subline_cd        IN     GIPI_POLBASIC_POL_DIST_V1.subline_cd%TYPE)
    IS
      v_exist                       VARCHAR2(1)  := 'N';
      v_old_dist_no                 giuw_pol_dist.dist_no%TYPE;
      v_old_tsi_amt                 giuw_policyds.tsi_amt%TYPE;
      v_old_prem_amt                giuw_policyds.prem_amt%TYPE;
      v_old_dist_tsi                giuw_policyds_dtl.dist_tsi%TYPE;
      v_old_dist_prem               giuw_policyds_dtl.dist_prem%TYPE;
      v_old_dist_spct               giuw_policyds_dtl.dist_spct%TYPE;
      v_old_line_cd                 giuw_policyds_dtl.line_cd%TYPE;
      v_old_currency_cd             gipi_invoice.currency_cd%TYPE;
      v_old_currency_rt             gipi_invoice.currency_rt%TYPE;
      v_old_user_id                 giuw_pol_dist.user_id%TYPE;
      v_new_tsi_amt                 giuw_wpolicyds.tsi_amt%TYPE;
      v_new_prem_amt                giuw_wpolicyds.prem_amt%TYPE;
      v_new_dist_tsi                giuw_wpolicyds_dtl.dist_tsi%TYPE;
      v_new_dist_prem               giuw_wpolicyds_dtl.dist_prem%TYPE;
      v_new_dist_spct               giuw_wpolicyds_dtl.dist_spct%TYPE;
      v_new_currency_cd             gipi_invoice.currency_cd%TYPE;
      v_new_currency_rt             gipi_invoice.currency_rt%TYPE;
      v_new_user_id                 giuw_pol_dist.user_id%TYPE;
      v_rg_seq_no                   giuw_wpolicyds.dist_seq_no%TYPE;
      v_errors                      NUMBER;
      v_count                       NUMBER;
      v_frps_exist                  BOOLEAN;
      rec_Count                     NUMBER;
      
      /** Variables to be used for the record group **/
      TYPE rg_current_groups_type   IS RECORD (
        column_seq_no               GIUW_WPERILDS_DTL.dist_seq_no%TYPE,
        dist_tsi                    GIUW_WPERILDS_DTL.dist_tsi%TYPE,
        dist_prem                   GIUW_WPERILDS_DTL.dist_prem%TYPE,
        dist_spct                   GIUW_WPERILDS_DTL.dist_spct%TYPE,
        tsi_amt                     GIUW_WPERILDS.tsi_amt%TYPE,
        prem_amt                    GIUW_WPERILDS.prem_amt%TYPE,
        user_id                     GIUW_POL_DIST.user_id%TYPE,
        currency_cd                 GIPI_INVOICE.currency_cd%TYPE,
        currency_rt                 GIPI_INVOICE.currency_rt%TYPE
      );
      
      TYPE  rg_current_groups_tab IS TABLE OF rg_current_groups_type;
      
      v_rg_current_groups           rg_current_groups_tab;
      
      v_rg_index                    INTEGER;

      /* Process the remaining records from the
      ** dynamically created record group. */
      PROCEDURE PROCESS_REMAINING_RECORDS IS
      BEGIN
          
        v_count := v_rg_current_groups.COUNT;
        
        IF v_count > 0 THEN
           v_rg_index := v_rg_current_groups.FIRST;
           --FOR c1 IN 1..v_count
           WHILE v_rg_index IS NOT NULL
           LOOP
             v_rg_seq_no           := v_rg_current_groups(v_rg_index).column_seq_no;
             v_new_tsi_amt         := v_rg_current_groups(v_rg_index).tsi_amt;
             v_new_prem_amt        := v_rg_current_groups(v_rg_index).prem_amt;
             v_new_dist_tsi        := v_rg_current_groups(v_rg_index).dist_tsi;
             v_new_dist_prem       := v_rg_current_groups(v_rg_index).dist_prem;
             v_new_dist_spct       := v_rg_current_groups(v_rg_index).dist_spct;
             v_new_currency_cd     := v_rg_current_groups(v_rg_index).currency_cd;
             v_new_currency_rt     := v_rg_current_groups(v_rg_index).currency_rt;
             v_new_user_id         := v_rg_current_groups(v_rg_index).user_id;
             v_frps_exist          := CHECK_FOR_EXISTING_FRPS(p_dist_no, v_rg_seq_no);
             
             IF NOT v_frps_exist THEN
                /* Create a new record in table GIRI_WDISTFRPS in
                ** accordance with the values taken in by table
                ** GIUW_WPOLICYDS_DTL. */
                GIRI_WDISTFRPS_PKG.CREATE_NEW_WDISTFRPS_GIUWS013(p_dist_no, v_rg_seq_no       , v_new_tsi_amt     , v_new_prem_amt  , 
                                     v_new_dist_tsi    , v_new_dist_prem   , v_new_dist_spct ,
                                     v_new_currency_cd , v_new_currency_rt , v_new_user_id,
                                     p_line_cd         , p_subline_cd      , p_policy_id);

             ELSE
                /* Update the amounts of the existing record
                ** in table GIRI_WDISTFRPS. */
                GIRI_WDISTFRPS_PKG.UPDATE_WDISTFRPS_GIUWS013(p_dist_no , v_rg_seq_no       , v_new_tsi_amt     , v_new_prem_amt  ,
                                 v_new_dist_tsi    , v_new_dist_prem   , v_new_dist_spct , 
                                 v_new_currency_cd , v_new_currency_rt , v_new_user_id);

             END IF;
             
             v_rg_index := v_rg_current_groups.NEXT(v_rg_index);  -- added by: Nica 03.05.2012
           END LOOP;
        END IF;
      END;

    BEGIN
      -- initialize record group tab
      v_rg_current_groups := rg_current_groups_tab();

      /* Create a dynamic record group for the current 
      ** distribution record to temporarily maintain a 
      ** list of the DIST_SEQ_NOs with a facultative share
      ** in it.
      ** NOTE:  The V_ERRORS variable was created to contain the ORA error
      **        number which caused the population failure of a record group
      **        during a call made to the POPULATE_GROUP built-in.  The
      **        variable will return a zero value if no errors were encountered,
      **        and a 1403 if the query caused no records to be retrieved. */
      
      IF v_rg_current_groups.COUNT > 0 THEN
         v_rg_current_groups.TRIM(v_rg_current_groups.COUNT);
      END IF;
      
      FOR c1 IN (SELECT C1407.dist_seq_no , sum(decode(peril_type,'B',C1407.dist_tsi,0)) dist_tsi    ,
                                               sum(C1407.dist_prem) dist_prem   ,
                                               decode(sum(decode(peril_type,'B',C1407.dist_tsi,0))/sum(decode(peril_type,'B',decode(C1306.tsi_amt,0,1,C1306.tsi_amt),1)),
                                                      0,sum(c1407.dist_prem)/sum(c1306.prem_amt),
                                                      sum(decode(peril_type,'B',C1407.dist_tsi,0))/sum(decode(peril_type,'B',C1306.tsi_amt,1)))*100 dist_spct   ,
                                               sum(decode(peril_type,'B',C1306.tsi_amt,0)) tsi_amt     ,
                                               sum(C1306.prem_amt) prem_Amt    ,
                                               C080.user_id      ,
                                               B140.currency_cd  ,
                                               B140.currency_rt 
                                          FROM giuw_wperilds_dtl C1407,
                                               giuw_wperilds C1306,
                                               giuw_pol_dist C080,
                                               gipi_invoice B140,
                                               giis_peril gp
                                         WHERE B140.policy_id    = C080.policy_id 
                                           AND C080.dist_no      = C1306.dist_no 
                                           AND C1306.dist_seq_no = C1407.dist_seq_no 
                                           AND C1306.dist_no     = C1407.dist_no 
                                           AND C1407.share_cd    = 999 
                                           AND C1407.dist_no     = TO_CHAR(p_dist_no)
                                                  and c1407.peril_cd      = c1306.peril_cd  
                                                  AND c1407.peril_cd      = gp.peril_cd
                                                  AND c1407.line_cd = gp.line_cd
                                              GROUP BY C1407.dist_seq_no , C1407.line_cd ,
                                                          C080.user_id,B140.currency_cd  , B140.currency_rt
                                      ORDER BY C1407.dist_seq_no)
      LOOP
         v_rg_current_groups.EXTEND(1);
         v_rg_current_groups(v_rg_current_groups.COUNT).column_seq_no    := c1.dist_seq_no;
         v_rg_current_groups(v_rg_current_groups.COUNT).tsi_amt          := c1.tsi_amt;
         v_rg_current_groups(v_rg_current_groups.COUNT).prem_amt         := c1.prem_amt;
         v_rg_current_groups(v_rg_current_groups.COUNT).dist_tsi         := c1.dist_tsi;
         v_rg_current_groups(v_rg_current_groups.COUNT).dist_prem        := c1.dist_prem;
         v_rg_current_groups(v_rg_current_groups.COUNT).dist_spct        := c1.dist_spct;
         v_rg_current_groups(v_rg_current_groups.COUNT).currency_cd      := c1.currency_cd;
         v_rg_current_groups(v_rg_current_groups.COUNT).currency_rt      := c1.currency_rt;
         v_rg_current_groups(v_rg_current_groups.COUNT).user_id          := c1.user_id;
      END LOOP;
      
      /*(IF v_errors NOT IN (0, 1403) THEN
         MESSAGE('ORA-' || TO_CHAR(v_errors) || ' error encountered while populating ' ||
                 'record group CURRENT_GROUPS.', NO_ACKNOWLEDGE);
         RAISE FORM_TRIGGER_FAILURE;
      END IF;*/
      
      v_count := v_rg_current_groups.COUNT;
      
      IF v_count > 0 THEN
         p_facul_sw := 'Y';
      END IF;
      
      /* Delete previously inserted records
      ** that are no longer relevant to the
      ** current distribution record as such
      ** records no longer have a facultative
      ** share in it. */
      DELETE giri_wdistfrps a
       WHERE NOT EXISTS
            (SELECT 'A'
               FROM giuw_wpolicyds_dtl
              WHERE share_cd    = 999
                AND dist_seq_no = a.dist_seq_no
                AND dist_no     = a.dist_no)
         AND dist_no = p_dist_no;

      /* Check whether the current distribution record has
      ** previously been negated.  If so, get its previous
      ** distribution number, as such shall be used in retrieving
      ** the value of the facultative DIST_TSI for the negated
      ** distribution prior to comparing its value with the
      ** same column of the current distribution record's facultative
      ** share. */
      FOR c1 IN (SELECT dist_no_old
                   FROM giuw_distrel
                  WHERE policy_id   = p_policy_id
                    AND dist_no_new = p_dist_no)
      LOOP
        v_exist       := 'Y';
        v_old_dist_no := c1.dist_no_old;
        EXIT;
      END LOOP;
      IF v_exist = 'N' THEN
         RAISE NO_DATA_FOUND;
      END IF;

      /* Scan each of the DIST_SEQ_NO belonging to the
      ** previously negated distribution record, to check
      ** for the existence of a facultative share in each
      ** group. */
      FOR c1 IN (  SELECT dist_seq_no
                     FROM giuw_policyds
                    WHERE dist_no = v_old_dist_no
                 ORDER BY dist_seq_no DESC)
      LOOP

        /* Get the LINE_CD of the current 
        ** DIST_SEQ_NO for the negated distribution
        ** record to access its detail table
        ** more efficiently via primary key. */
        FOR c2 IN (SELECT line_cd
                     FROM giuw_perilds
                    WHERE dist_seq_no = c1.dist_seq_no
                      AND dist_no     = v_old_dist_no)
        LOOP
          v_old_line_cd := c2.line_cd;
          EXIT;
        END LOOP;

        v_exist := 'N';

        /* Get the facultative DIST_TSI of the
        ** previously negated distribution record to 
        ** allow the possibility of comparing its
        ** value with the facultative DIST_TSI of
        ** its recreated distribution record. */
        FOR c3 IN (SELECT c1306.dist_no,sum(decode(peril_type,'B',C1407.dist_tsi,0)) dist_tsi,
                          SUM(C1407.dist_prem) dist_prem,
                          C1407.dist_spct,
                          sum(decode(peril_type,'B',C1306.tsi_amt,0)) tsi_amt,
                          SUM(C1306.prem_amt) prem_amt,
                          C080.user_id,
                          B140.currency_cd,
                          B140.currency_rt
                     FROM giuw_perilds_dtl C1407,
                          giuw_perilds C1306,
                          giuw_pol_dist C080,
                          gipi_invoice B140 ,
                                              GIIS_PERIL GP
                    WHERE B140.policy_id    = C080.policy_id--dist_no
                      AND C080.dist_no      = C1306.dist_no
                      AND C1306.dist_seq_no = C1407.dist_seq_no
                      AND C1306.dist_no     = C1407.dist_no
                      AND C1407.share_cd    = '999'
                      AND C1407.line_cd     = v_old_line_cd
                      AND C1407.dist_seq_no = c1.dist_seq_no
                      AND C1407.dist_no     = v_old_dist_no
                      AND gp.peril_Cd = c1306.peril_cd
                                      and c1407.peril_cd = c1306.peril_cd
                                      and c1407.line_cd = gp.line_cd
                                  GROUP BY c1306.dist_no,C1407.dist_spct,
                          C080.user_id,
                          B140.currency_cd,
                          B140.currency_rt)
        LOOP
          v_exist           := 'Y';
          v_old_tsi_amt     := c3.tsi_amt;
          v_old_prem_amt    := c3.prem_amt;
          v_old_dist_tsi    := c3.dist_tsi;
          v_old_dist_prem   := c3.dist_prem;
          v_old_dist_spct   := c3.dist_spct;
          v_old_currency_cd := c3.currency_cd;
          v_old_currency_rt := c3.currency_rt;
          v_old_user_id     := c3.user_id;
          EXIT;
        END LOOP;

        /* If a facultative share in the negated distribution record exists
        ** for the current DIST_SEQ_NO processed then the procedure below
        ** shall be executed. */
        IF v_exist = 'Y' THEN
           IF v_count > 0 THEN
              v_rg_seq_no      := v_rg_current_groups(v_count).column_seq_no;
              WHILE v_rg_seq_no > c1.dist_seq_no
              LOOP
                v_new_tsi_amt     := v_rg_current_groups(v_count).tsi_amt;
                v_new_prem_amt    := v_rg_current_groups(v_count).prem_amt;
                v_new_dist_tsi    := v_rg_current_groups(v_count).dist_tsi;
                v_new_dist_prem   := v_rg_current_groups(v_count).dist_prem;
                v_new_dist_spct   := v_rg_current_groups(v_count).dist_spct;
                v_new_currency_cd := v_rg_current_groups(v_count).currency_cd;
                v_new_currency_rt := v_rg_current_groups(v_count).currency_rt;
                v_new_user_id     := v_rg_current_groups(v_count).user_id;
                v_count           := v_count - 1;
                rec_Count := v_rg_current_groups.COUNT;
                IF rec_Count > v_count AND v_count <> 0 THEN
                  v_rg_current_groups.delete(v_count);
                END IF;
                v_frps_exist          := CHECK_FOR_EXISTING_FRPS(p_dist_no, v_rg_seq_no);
                IF NOT v_frps_exist THEN

                   -- GENERATE_FRPS_SEQ_NO;

                   /* Create a new record in table GIRI_WDISTFRPS in
                   ** accordance with the values taken in by table
                   ** GIUW_WPOLICYDS_DTL. */
                   GIRI_WDISTFRPS_PKG.CREATE_NEW_WDISTFRPS_GIUWS013(p_dist_no , v_rg_seq_no       , v_new_tsi_amt     , v_new_prem_amt  , 
                                        v_new_dist_tsi    , v_new_dist_prem   , v_new_dist_spct ,
                                        v_new_currency_cd , v_new_currency_rt , v_new_user_id   ,
                                        p_line_cd         , p_subline_cd      , p_policy_id);

                ELSE

                   /* Update the amounts of the existing record
                   ** in table GIRI_WDISTFRPS. */
                   GIRI_WDISTFRPS_PKG.UPDATE_WDISTFRPS_GIUWS013(p_dist_no , v_rg_seq_no       , v_new_tsi_amt     , v_new_prem_amt  ,
                                 v_new_dist_tsi    , v_new_dist_prem   , v_new_dist_spct , 
                                 v_new_currency_cd , v_new_currency_rt , v_new_user_id);

                END IF;
                IF v_count = 0 THEN
                   EXIT;
                END IF;            
                v_rg_seq_no      := v_rg_current_groups(v_count).column_seq_no;

              END LOOP;
              IF v_rg_seq_no < c1.dist_seq_no THEN

                 /* Updates table GIRI_BINDER of the negated
                 ** distribution record signifying that the
                 ** binder released has been reversed. */
                 GIRI_BINDER_PKG.UPDATE_REVERSE_DATE_GIUWS013(v_old_dist_no, c1.dist_seq_no);

              ELSIF v_rg_seq_no = c1.dist_seq_no THEN
                 v_new_tsi_amt     := v_rg_current_groups(v_count).tsi_amt;
                 v_new_prem_amt    := v_rg_current_groups(v_count).prem_amt;
                 v_new_dist_tsi    := v_rg_current_groups(v_count).dist_tsi;
                 v_new_dist_prem   := v_rg_current_groups(v_count).dist_prem;
                 v_new_dist_spct   := v_rg_current_groups(v_count).dist_spct;
                 v_new_currency_cd := v_rg_current_groups(v_count).currency_cd;
                 v_new_currency_rt := v_rg_current_groups(v_count).currency_rt;
                 v_new_user_id     := v_rg_current_groups(v_count).user_id;
                 v_count           := v_count - 1;
                 rec_Count := v_rg_current_groups.COUNT;
                 IF rec_Count > v_count AND v_count <> 0 THEN          
                   v_rg_current_groups.DELETE(v_count);
                 END IF;
                 IF v_new_tsi_amt     <> v_old_tsi_amt     OR
                    v_new_prem_amt    <> v_old_prem_amt    OR
                    v_new_dist_tsi    <> v_old_dist_tsi    OR
                    v_new_dist_prem   <> v_old_dist_prem   OR
                    v_new_dist_spct   <> v_old_dist_spct   OR
                    v_new_currency_cd <> v_old_currency_cd OR
                    v_new_currency_rt <> v_old_currency_rt OR
                    v_new_user_id     <> v_old_user_id     THEN

                    /* Updates table GIRI_BINDER of the negated
                    ** distribution record signifying that the
                    ** binder released has been reversed. */
                    GIRI_BINDER_PKG.UPDATE_REVERSE_DATE_GIUWS013(v_old_dist_no, c1.dist_seq_no);

                    v_frps_exist := CHECK_FOR_EXISTING_FRPS(p_dist_no, c1.dist_seq_no);
                    IF NOT v_frps_exist THEN

                       -- GENERATE_FRPS_SEQ_NO;

                       /* Create a new record in table GIRI_WDISTFRPS in
                       ** accordance with the values taken in by tables
                       ** GIUW_WPOLICYDS_DTL of the current distribution
                       ** record, and GIRI_DISTFRPS of the previously negated
                       ** distribution record. */
                       GIRI_WDISTFRPS_PKG.CREATE_WDISTFRPS_GIUWS013(p_dist_no, v_old_dist_no   , c1.dist_seq_no    , v_new_tsi_amt     ,
                                        v_new_prem_amt  , v_new_dist_tsi    , v_new_dist_prem   , 
                                        v_new_dist_spct , v_new_currency_cd , v_new_currency_rt ,
                                        v_new_user_id, p_line_cd);

                    ELSE

                       /* Update the amounts of the existing record
                       ** in table GIRI_WDISTFRPS. */
                       GIRI_WDISTFRPS_PKG.UPDATE_WDISTFRPS_GIUWS013(p_dist_no, v_rg_seq_no       , v_new_tsi_amt     , v_new_prem_amt  ,
                                        v_new_dist_tsi    , v_new_dist_prem   , v_new_dist_spct , 
                                        v_new_currency_cd , v_new_currency_rt , v_new_user_id);

                    END IF;
                 END IF;
              END IF;
           ELSE

              /* Updates table GIRI_BINDER of the negated
              ** distribution record signifying that the
              ** binder released has been reversed. */
              GIRI_BINDER_PKG.UPDATE_REVERSE_DATE_GIUWS013(v_old_dist_no, c1.dist_seq_no);
                        FOR c IN (SELECT line_cd, frps_yy , frps_seq_no
                                 FROM giri_distfrps
                               WHERE dist_seq_no = c1.dist_seq_no
                               AND dist_no     = v_old_dist_no)
                      LOOP
                        FOR c2 IN (SELECT fnl_binder_id
                                     FROM giri_frps_ri
                                    WHERE line_cd     = c.line_cd
                                      AND frps_yy     = c.frps_yy
                                      AND frps_seq_no = c.frps_seq_no)
                        LOOP
                          UPDATE giri_binder
                              SET replaced_flag  = 'Y'
                          WHERE fnl_binder_id = c2.fnl_binder_id;
                         UPDATE giri_frps_ri
                              SET reverse_sw  = 'Y'
                          WHERE fnl_binder_id = c2.fnl_binder_id; 
                END LOOP;
                      END LOOP;
           END IF;
         END IF;
      END LOOP;

      /* Process the remaining records
      ** in the list. */
      PROCESS_REMAINING_RECORDS;

      v_rg_current_groups.TRIM(v_rg_current_groups.COUNT);

    EXCEPTION
      WHEN NO_DATA_FOUND THEN

        /* Process the remaining records
        ** in the list. */    
        PROCESS_REMAINING_RECORDS;

        v_rg_current_groups.TRIM(v_rg_current_groups.COUNT);
    END POLICY_NEGATED_CHECK_GIUWS012;
    
    
   /*
   **  Created by   : Emman
   **  Date Created : 08.04.2011
   **  Reference By : (GIUWS012 - Distribution by Peril)
   **  Description  : Post records retrieved from the working tables to their 
   **                 corresponding master tables
   */
    PROCEDURE post_wpolicyds_dtl_giuws012(p_dist_no         GIUW_POL_DIST.dist_no%TYPE,
                                          p_endt_seq_no         GIPI_POLBASIC_POL_DIST_V1.endt_seq_no%TYPE,
                                          p_eff_date        GIPI_POLBASIC_POL_DIST_V1.eff_date%TYPE,
                                          p_message         OUT VARCHAR2)
    IS
      v_count      NUMBER(1);
      rec_count    NUMBER(9) := 1;
      valid_sw     VARCHAR2(1) := 'Y';
    BEGIN
      p_message := 'SUCCESS';

      /* Get the value of the columns in table GIUW_WPOLICYDS 
      ** in preparation for insertion or update to its corresponding
      ** master table GIUW_POLICYDS. */ 
      FOR wds_cur IN ( SELECT dist_no     , dist_seq_no , tsi_amt  , 
                              prem_amt    , ann_tsi_amt , item_grp
                         FROM giuw_wpolicyds
                        WHERE dist_no = p_dist_no
                     ORDER BY dist_no , dist_seq_no)
      LOOP
        v_count  :=  NULL;


        /* If the record corresponding to the specified DIST_NO
        ** and DIST_SEQ_NO does not exist in table GIUW_POLICYDS,
        ** then the record in table GIUW_WPOLICYDS must be inserted
        ** to the said table. */ 
        IF v_count IS NULL THEN
           INSERT INTO  giuw_policyds
                       (dist_no             , dist_seq_no         ,
                        tsi_amt             , prem_amt            ,
                        ann_tsi_amt         , item_grp)
                VALUES (wds_cur.dist_no     , wds_cur.dist_seq_no , 
                        wds_cur.tsi_amt     , wds_cur.prem_amt    , 
                        wds_cur.ann_tsi_amt , wds_cur.item_grp);
        END IF;
      END LOOP;

      /* Get the value of the columns in table GIUW_WPOLICYDS_DTL 
      ** in preparation for insertion or update to its corresponding
      ** master table GIUW_POLICYDS_DTL. */ 
      FOR wds_dtl_cur IN (  SELECT a.dist_no   , a.dist_seq_no   , a.line_cd      , 
                                   a.share_cd  , a.dist_tsi      , a.dist_prem    ,
                                   a.dist_spct , a.ann_dist_spct , a.ann_dist_tsi ,
                                   a.dist_grp  , b.share_type    , b.expiry_date  ,
                                   b.trty_name , b.eff_date      , b.prtfolio_sw
                              FROM giuw_wpolicyds_dtl a, giis_dist_share b
                             WHERE a.share_cd = b.share_cd
                               AND a.line_cd  = b.line_cd
                               AND a.dist_no  = p_dist_no
                          ORDER BY a.dist_no  , a.dist_seq_no    , a.line_cd      ,
                                   a.share_cd)
      LOOP
        v_count  :=  NULL;
        FOR flag IN 
            ( SELECT a.dist_flag
                FROM giuw_pol_dist a, giuw_distrel b
               WHERE a.dist_no = b.dist_no_old
                 AND b.dist_no_new = p_dist_no
            ) LOOP
            IF flag.dist_flag = '5' THEN
                 valid_sw := 'N';
            END IF;         
        END LOOP;              
        IF wds_dtl_cur.share_type = '2' AND
             valid_sw = 'Y' AND NVL(p_endt_seq_no , 0) = 0 THEN
           IF TRUNC(p_eff_date) > TRUNC(wds_dtl_cur.expiry_date) AND 
                 nvl(wds_dtl_cur.prtfolio_sw,'N') = 'P' THEN
              
              p_message := 'Treaty ' || wds_dtl_cur.trty_name || ' has already expired.  ' ||
                        'Replace the treaty with another one.';
           END IF;
        END IF;

        /* If the record corresponding to the specified DIST_NO,
        ** DIST_SEQ_NO, LINE_CD, SHARE_CD does not exist in table
        ** GIUW_POLICYDS_DTL, then the record in table GIUW_WPOLICYDS_DTL
        ** must be inserted to the said table. */ 
        IF v_count IS NULL THEN
           INSERT INTO  giuw_policyds_dtl
                       (dist_no                  , dist_seq_no               ,
                        line_cd                  , share_cd                  ,
                        dist_tsi                 , dist_prem                 ,
                        dist_spct                , ann_dist_spct             ,
                        ann_dist_tsi             , dist_grp                  ,
                        dist_spct1)
                VALUES (wds_dtl_cur.dist_no      , wds_dtl_cur.dist_seq_no   , 
                        wds_dtl_cur.line_cd      , wds_dtl_cur.share_cd      , 
                        wds_dtl_cur.dist_tsi     , wds_dtl_cur.dist_prem     ,
                        wds_dtl_cur.dist_spct    , wds_dtl_cur.ann_dist_spct , 
                        wds_dtl_cur.ann_dist_tsi , wds_dtl_cur.dist_grp      ,
                        NULL);
        END IF;
      END LOOP;
    END post_wpolicyds_dtl_giuws012;
    
    /*
   **  Created by   : Emman
   **  Date Created : 08.04.2011
   **  Reference By : (GIUWS012 - Distribution by Peril)
   **  Description  : Delete existing records related to the current DIST_NO from the 
   **                 distribution and RI working tables.
   */
    PROCEDURE DELETE_DIST_WORKING_TABLES_2(p_dist_no GIUW_POL_DIST.dist_no%TYPE)
    IS
      v_dist_no            giuw_pol_dist.dist_no%TYPE;
    BEGIN
      v_dist_no := p_dist_no;
      DELETE giuw_wperilds_dtl
       WHERE dist_no = v_dist_no;
      DELETE giuw_wperilds --added deletion of PERILDS table edgar 01/07/2015
       WHERE dist_no = v_dist_no;        
      DELETE giuw_witemperilds_dtl
       WHERE dist_no = v_dist_no;
      DELETE giuw_witemperilds
       WHERE dist_no = v_dist_no;
      DELETE giuw_witemds_dtl
       WHERE dist_no = v_dist_no;
      DELETE giuw_witemds
       WHERE dist_no = v_dist_no;
      DELETE giuw_wpolicyds_dtl
       WHERE dist_no = v_dist_no;
      FOR c1 IN (SELECT frps_yy, frps_seq_no, line_cd
                   FROM giri_wdistfrps
                  WHERE dist_no = v_dist_no)
      LOOP
        FOR c2 IN (SELECT pre_binder_id
                     FROM giri_wfrps_ri
                    WHERE frps_yy     = c1.frps_yy 
                      AND frps_seq_no = c1.frps_seq_no
                      AND line_cd = c1.line_cd) 
        LOOP
          DELETE giri_wbinder_peril
           WHERE pre_binder_id = c2.pre_binder_id; 
          DELETE giri_wbinder
           WHERE pre_binder_id = c2.pre_binder_id;
        END LOOP;
        DELETE giri_wfrperil
         WHERE frps_yy     = c1.frps_yy
           AND frps_seq_no = c1.frps_seq_no
           AND line_cd = c1.line_cd;
        DELETE giri_wfrps_ri
         WHERE frps_yy     = c1.frps_yy
           AND frps_seq_no = c1.frps_seq_no
           AND line_cd = c1.line_cd;
        DELETE giri_wfrps_peril_grp
         WHERE line_cd = c1.line_cd
           AND frps_yy = c1.frps_yy
           AND frps_seq_no = c1.frps_seq_no;
      END LOOP;
      DELETE giri_wdistfrps
       WHERE dist_no = v_dist_no;
      DELETE giuw_wpolicyds --added deletion of POLICYDS table edgar 01/07/2015
       WHERE dist_no = v_dist_no;         
    END DELETE_DIST_WORKING_TABLES_2;
    
    /*
   **  Created by   : Emman
   **  Date Created : 08.04.2011
   **  Reference By : (GIUWS012 - Distribution by Peril)
   **  Description  : Execute delete_dist_spct1
   */
    PROCEDURE delete_dist_spct1_giuws012(p_dist_no GIUW_POL_DIST.dist_no%TYPE)
    IS
    BEGIN
      UPDATE GIUW_WPOLICYDS_DTL
         SET DIST_SPCT1 = NULL
       WHERE DIST_NO = p_dist_no;
       
      UPDATE GIUW_WITEMDS_DTL
         SET DIST_SPCT1 = NULL
       WHERE DIST_NO = p_dist_no;

      UPDATE GIUW_WITEMPERILDS_DTL
         SET DIST_SPCT1 = NULL
       WHERE DIST_NO = p_dist_no;

      UPDATE GIUW_WPERILDS_DTL
         SET DIST_SPCT1 = NULL
       WHERE DIST_NO = p_dist_no;
    END delete_dist_spct1_giuws012;
    
   /*
   **  Created by   : Emman
   **  Date Created : 08.05.2011
   **  Reference By : (GIUWS012 - Distribution by Peril)
   **  Description  : Post distribution in GIUWS012
   */
    PROCEDURE post_dist_giuws012(p_policy_id       IN     GIPI_POLBASIC_POL_DIST_V1.policy_id%TYPE,
                               p_dist_no           IN     GIUW_POL_DIST.dist_no%TYPE,
                               p_par_id            IN     GIUW_POL_DIST.par_id%TYPE,
                               p_line_cd           IN     GIPI_POLBASIC_POL_DIST_V1.line_cd%TYPE,
                               p_subline_cd        IN     GIPI_POLBASIC_POL_DIST_V1.subline_cd%TYPE,
                               p_iss_cd            IN     GIPI_POLBASIC_POL_DIST_V1.iss_cd%TYPE,
                               p_issue_yy          IN     GIPI_POLBASIC_POL_DIST_V1.issue_yy%TYPE,
                               p_pol_seq_no        IN     GIPI_POLBASIC_POL_DIST_V1.pol_seq_no%TYPE,
                               p_renew_no          IN     GIPI_POLBASIC_POL_DIST_V1.renew_no%TYPE,
                               p_endt_seq_no       IN     GIPI_POLBASIC_POL_DIST_V1.endt_seq_no%TYPE,
                               p_eff_date          IN     GIPI_POLBASIC_POL_DIST_V1.eff_date%TYPE,
                               p_batch_id          IN     GIUW_POL_DIST.batch_id%TYPE,
                               p_message              OUT VARCHAR2,
                               p_workflow_msgr        OUT VARCHAR2,
                               p_v_facul_sw           OUT VARCHAR2)
    IS
      v_cnt           NUMBER;
      v_takeup_term   GIPI_POLBASIC.takeup_term%TYPE;
      v_message       VARCHAR2(10000);
      v_test            VARCHAR2(100);
    BEGIN
      p_message := 'SUCCESS';
      p_v_facul_sw := 'N';
      /* BETH 03/14/2001 
      ** Check if records are existing in all distribution 
      ** tables, disallow POSTING of distribution if there are
      ** missing records in any of the distribution tables
      */
      FOR A IN ( SELECT count(dist_no) count
                   FROM giuw_pol_dist
                  WHERE policy_id = p_policy_id
                    AND negate_date IS NULL
                    AND dist_flag IN ('1','2','3') 
               )       
      LOOP
          v_cnt := a.count;
      END LOOP;             
      IF v_cnt > 1 THEN
         VALIDATE_EXISTING_DIST_REC2 (p_policy_id, p_dist_no, p_message);
      ELSE
         VALIDATE_EXISTING_DIST_REC (p_policy_id, p_dist_no, p_message);
      END IF;  
      
      --marco - 06.13.2014
      BEGIN
         SELECT a.takeup_term
           INTO v_takeup_term
           FROM gipi_polbasic a
          WHERE a.policy_id = p_policy_id;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            v_takeup_term := NULL;
      END;
      IF v_takeup_term = 'ST' THEN
         compare_itmperil_dist_pkg.compare_recompute_dist(p_dist_no, v_message);   
         giuw_pol_dist_pkg.compare_wdist_table_for_policy(p_dist_no, p_policy_id);
      END IF; 
      
      ADJUST_DISTRIBUTION_PERIL_PKG.adjust_distribution(p_dist_no); 
      
      /* Checks for a previously negated
      ** distribution record before creating
      ** or updating records from the RI
      ** table GIRI_WDISTFRPS. */
      GIUW_POL_DIST_PKG.POLICY_NEGATED_CHECK_GIUWS012(p_v_facul_sw, p_policy_id, p_dist_no, p_line_cd, p_subline_cd);
      
      ADJUST_DISTRIBUTION_PERIL_PKG.adjust_share_wdistfrps(p_dist_no);
      
      
--      v_test := 'WALEY';
--      FOR I IN(SELECT 1
--                  FROM giri_wdistfrps
--                 where dist_no = p_dist_no)
--      LOOP
--         v_test := 'MERey haha';
--         EXIT;
--      END LOOP;
--      
--      raise_application_error(-20001, 'Geniisys Exception#S#'||v_test||' new2 ');
      
      /* Remove existing records related to the
      ** current DIST_NO from certain distribution
      ** and RI master tables considering the fact
      ** that the current changes made were not yet
      ** posted to the master tables. */
      DELETE_DIST_MASTER_TABLES(p_dist_no);

      /* Post records retrieved from GIUW_WPOLICYDS 
      ** and GIUW_WPOLICYDS_DTL to tables GIUW_POLICYDS 
      ** and GIUW_POLICYDS_DTL. */
      GIUW_POL_DIST_PKG.POST_WPOLICYDS_DTL_GIUWS012(p_dist_no, p_endt_seq_no, p_eff_date, p_message);
      
      IF p_message <> 'SUCCESS' THEN
        RETURN;
      END IF;

      /* Post records retrieved from GIUW_WITEMDS 
      ** and GIUW_WITEMDS_DTL to tables GIUW_ITEMDS 
      ** and GIUW_WITEMDS_DTL. */
      GIUW_POL_DIST_PKG.POST_WITEMDS_DTL(p_dist_no);

      /* Post records retrieved from GIUW_WITEMPERILDS 
      ** and GIUW_WITEMPERILDS_DTL to tables GIUW_ITEMPERILDS 
      ** and GIUW_ITEMPERILDS_DTL. */
      GIUW_POL_DIST_PKG.POST_WITEMPERILDS_DTL(p_dist_no);

      /* Post records retrieved from GIUW_WPERILDS 
      ** and GIUW_WPERILDS_DTL to tables GIUW_PERILDS 
      ** and GIUW_PERILDS_DTL. */
      GIUW_POL_DIST_PKG.POST_WPERILDS_DTL(p_dist_no);

      /* Remove the current distribution from the batch
      ** to which it originally belongs to. */
      /* Added RBD-09/27/99 Update on GIUW_POL_DIST */
      IF p_batch_id IS NOT NULL THEN
         FOR c1 IN (SELECT ROWID, batch_qty
                      FROM giuw_dist_batch
                     WHERE batch_id = p_batch_id)
         LOOP
           IF c1.batch_qty > 1 THEN
              UPDATE giuw_dist_batch
                 SET batch_qty = c1.batch_qty - 1
               WHERE rowid     = c1.ROWID;
           ELSE
                 UPDATE GIUW_POL_DIST
                    SET batch_id = NULL
                  WHERE batch_id = p_batch_id;
               
              DELETE giuw_dist_batch_dtl
               WHERE batch_id = p_batch_id;
              DELETE giuw_dist_batch
               WHERE rowid = c1.ROWID;
           END IF;
           EXIT;
         END LOOP;
      END IF;
      
     

            -- A.R.C. 08.13.2004 --
        -- to delete workflow records of Final Distribution --
      delete_workflow_rec('Final Distribution','GIPIS055',nvl(giis_users_pkg.app_user, USER),p_policy_id);
      
      /* If a facultative share does not exist in any of
      ** the distribution records, records in the working
      ** tables will be deleted. */ 
      /* Update by RBD 10/04/99 - on USER AND LAST UPDATE */
      IF p_v_facul_sw = 'N' THEN
         -- SET_ITEM_PROPERTY('c1104.but_post_dist', ENABLED, PROPERTY_FALSE);
         UPDATE gipi_polbasic
            SET dist_flag     = 3,
                user_id           = nvl(giis_users_pkg.app_user, USER),
                last_upd_date = SYSDATE
          WHERE policy_id = p_policy_id;

         UPDATE giuw_pol_dist
            SET dist_flag     = 3,
                post_flag     = 'P',
                batch_id      = NULL,
                post_date     = SYSDATE,
                user_id           = nvl(giis_users_pkg.app_user, USER),
                last_upd_date = SYSDATE
          WHERE policy_id = p_policy_id
            AND dist_no   = p_dist_no;

            /* A.R.C. 02.02.2006
        ** to create workflow records of Policy/Endt.  Redistribution */        
           FOR a1 IN (SELECT DISTINCT claim_id
                        FROM gicl_claims b,
                             gipi_polbasic a
                       WHERE b.line_cd = a.line_cd
                         AND b.subline_cd = a.subline_cd
                         AND b.iss_cd = a.iss_cd                     
                         AND b.issue_yy = a.issue_yy 
                         AND b.pol_seq_no = a.pol_seq_no
                         AND b.renew_no = a.renew_no
                         AND b.clm_stat_cd NOT IN ('CC','WD','DN')
                         AND a.policy_id = p_policy_id)
           LOOP    
             FOR c1 IN (SELECT b.userid, d.event_desc  
                            FROM giis_events_column c, giis_event_mod_users b, giis_event_modules a, giis_events d
                           WHERE 1=1
                           AND c.event_cd = a.event_cd
                           AND c.event_mod_cd = a.event_mod_cd
                           AND b.event_mod_cd = a.event_mod_cd
                           AND b.passing_userid = nvl(giis_users_pkg.app_user, USER)
                           AND a.module_id = 'GIUWS012'
                           AND a.event_cd = d.event_cd
                           AND UPPER(d.event_desc) = 'POLICY/ENDT.  REDISTRIBUTION')
             LOOP
               CREATE_TRANSFER_WORKFLOW_REC(c1.event_desc,'GIUWS012', c1.userid, a1.claim_id, c1.event_desc||' '||get_clm_no(a1.claim_id), p_message, p_workflow_msgr, nvl(giis_users_pkg.app_user, USER));
             END LOOP; 
           END LOOP; 
           
         /* 11052000 BETH 
         **    posted policy distribution with eim_flag = '2' should be
         **    updated with eim_flag ='6' and undist_sw = 'Y' in eim_takeup_info
         **    table.
         */
         FOR A IN (SELECT '1'
                     FROM eim_takeup_info
                    WHERE policy_id = p_policy_id
                      AND eim_flag = '2')
         LOOP
              UPDATE eim_takeup_info 
                 SET eim_flag = '6',
                     undist_sw = 'Y'
            WHERE policy_id = p_policy_id;
           EXIT;
         END LOOP;
         
         /* Delete all data related to the current
         ** DIST_NO from the distribution and RI
         ** working tables. */
         GIUW_POL_DIST_PKG.DELETE_DIST_WORKING_TABLES_2(p_dist_no);
           
           /* A.R.C. 06.27.2005
         ** to delete workflow records of Undistributed policies awaiting claims */
         FOR c1 IN (SELECT claim_id
                        FROM gicl_claims
                       WHERE 1=1
                         AND line_cd = p_line_cd
                       AND subline_cd = p_subline_cd 
                       AND iss_cd = p_iss_cd
                       AND issue_yy = p_issue_yy
                       AND pol_seq_no = p_pol_seq_no
                       AND renew_no = p_renew_no)
         LOOP    
           delete_workflow_rec('Undistributed policies awaiting claims','GICLS010',nvl(giis_users_pkg.app_user, USER),c1.claim_id);  
         END LOOP;
              --added to delete the workflow facultative placement of GIUWS012 if not facul
            DELETE_WORKFLOW_REC('Facultative Placement','GIUWS012',nvl(giis_users_pkg.app_user, USER),p_policy_id);
      
      ELSIF p_v_facul_sw    = 'Y' THEN
         UPDATE gipi_polbasic
            SET dist_flag     = 2,
                user_id           = nvl(giis_users_pkg.app_user, USER),
                last_upd_date = SYSDATE
          WHERE policy_id = p_policy_id;
      
         UPDATE giuw_pol_dist
            SET dist_flag         = 2,
                post_flag         = 'P',
                batch_id          = NULL,
                user_id           = nvl(giis_users_pkg.app_user, USER),
                last_upd_date = SYSDATE
          WHERE policy_id = p_policy_id
            AND dist_no   = p_dist_no;
            
            /* A.R.C. 08.13.2004
        ** to create workflow records of Facultative Placement */        
         FOR c1 IN (SELECT b.userid, d.event_desc  
                        FROM giis_events_column c, giis_event_mod_users b, giis_event_modules a, giis_events d
                       WHERE 1=1
                       AND c.event_cd = a.event_cd
                       AND c.event_mod_cd = a.event_mod_cd
                       AND b.event_mod_cd = a.event_mod_cd
                       AND b.passing_userid = nvl(giis_users_pkg.app_user, USER)
                       AND a.module_id = 'GIUWS012'
                       AND a.event_cd = d.event_cd
                       AND UPPER(d.event_desc) = 'FACULTATIVE PLACEMENT')
         LOOP
           CREATE_TRANSFER_WORKFLOW_REC(c1.event_desc,'GIUWS012', c1.userid, p_policy_id, c1.event_desc||' '||get_policy_no(p_policy_id), p_message, p_workflow_msgr, nvl(giis_users_pkg.app_user, USER));
         END LOOP;        
         
         -- marco - 06.30.2014
         UPDATE GIRI_WDISTFRPS
            SET tot_fac_spct2 = NULL
          WHERE dist_no = p_dist_no;
      END IF;
      
      GIUW_POL_DIST_PKG.delete_dist_spct1_giuws012(p_dist_no);
        
      /* A.R.C. 08.13.2004
      ** to delete workflow records of Distribution Negation */
      delete_workflow_rec('Distribution Negation','GIUTS002',nvl(giis_users_pkg.app_user, USER),p_policy_id);
          
        /*iris bordey 04.04.2003
      **to update replaced_flag of giri_binder if distribution has no facul*/
      GIRI_BINDER_PKG.UPDATE_GIRI_BINDER_GIUWS016(p_dist_no, p_par_id);
      
      --FORMS_DDL('COMMIT');
      --CLEAR_MESSAGE;

      /* Sets the cursor back to its normal
      ** state and turns off the display of
      ** the warning canvas. */
      --CURSOR_NORMAL;

      /*Commented by : Iris Bordey 10.24.2003*/
      /* Prompts the user to confirm if he wants to
      ** conduct another transaction. */
      /*SET_ALERT_PROPERTY('AFTER_POST', ALERT_MESSAGE_TEXT, 'Post distribution complete!' ||
        '  Do you wish to conduct another transaction?');
      alert_button := SHOW_ALERT('AFTER_POST');
      IF alert_button = alert_button1 THEN
         GO_BLOCK('b2502');
         ENTER_QUERY; 
      ELSE
         SET_ALERT_PROPERTY('AFTER_POST', ALERT_MESSAGE_TEXT, 'Exit this form?');
         alert_button := SHOW_ALERT('AFTER_POST');
         IF alert_button = alert_button1 THEN
            DO_KEY('EXIT_FORM');
         ELSE
            GO_BLOCK('b2502');
            ENTER_QUERY;
         END IF; 
      END IF;*/
      --iris bordey 10.25.2003
      --to disable buttons and update dist. status of record after posting;
      --set current status
      /*IF v_facul_sw = 'Y' THEN
           :c080.dist_flag := '2';
           :c080.mean_dist_flag := 'with Facultative';
           variables.fully_dist_sw := 'N';
           :GLOBAL.ROADMAP_FACUL_SW := 'Y';
      ELSE
         :c080.dist_flag      := '3';
           :c080.mean_dist_flag := 'Distributed';
           variables.fully_dist_sw := 'Y';
           :GLOBAL.ROADMAP_FULLY_DIST_SW := 'Y';
           --SET_ITEM_PROPERTY('C080.dist_flag',CURRENT_RECORD_ATTRIBUTE, 'BOLD');
         --SET_ITEM_PROPERTY('c080.mean_dist_flag',CURRENT_RECORD_ATTRIBUTE, 'BOLD');
         
         SET_ITEM_PROPERTY('c1104.but_post_dist',ENABLED, PROPERTY_FALSE);
         SET_ITEM_PROPERTY('c1104.but_view_dist',ENABLED, PROPERTY_FALSE);
         SET_ITEM_PROPERTY('c120.dist_tsi',UPDATE_ALLOWED, PROPERTY_FALSE);
         SET_ITEM_PROPERTY('c120.dist_spct',UPDATE_ALLOWED, PROPERTY_FALSE);
         SET_ITEM_PROPERTY('c120.dist_prem',UPDATE_ALLOWED, PROPERTY_FALSE);
         SET_BLOCK_PROPERTY('c120',DELETE_ALLOWED,PROPERTY_FALSE);
         SET_BLOCK_PROPERTY('c120',INSERT_ALLOWED,PROPERTY_FALSE);
      END IF;
      
      
      CLEAR_MESSAGE;
      MESSAGE('Distribution Complete!', NO_ACKNOWLEDGE);*/
      
      FOR i IN(SELECT dist_seq_no
                 FROM GIUW_POLICYDS_DTL
                WHERE dist_no = p_dist_no)
      LOOP
         DELETE_WORKING_BINDER_TABLES(p_dist_no, i.dist_seq_no);
      END LOOP;
      
    END post_dist_giuws012;
    
    /*
   **  Created by   : Emman
   **  Date Created : 08.09.2011
   **  Reference By : (GIUWS012 - Distribution by Peril)
   **  Description  : Get dist_flag and batch_id of giuw_pol_dist record
   */
    FUNCTION get_dist_flag_and_batch_id (p_policy_id     GIPI_POLBASIC_POL_DIST_V1.policy_id%TYPE,
                                        p_dist_no       GIUW_POL_DIST.dist_no%TYPE)
      RETURN giuws012_post_query_tab PIPELINED
    IS
      v_val     giuws012_post_query_type;
    BEGIN
      FOR c1 IN (SELECT dist_flag,
                        batch_id
                   FROM giuw_pol_dist
                  WHERE policy_id  = p_policy_id
                    AND dist_no    = p_dist_no)
      LOOP
        v_val.dist_flag := c1.dist_flag;
        v_val.batch_id  := c1.batch_id;
        PIPE ROW (v_val);
        EXIT;
    END LOOP;
    END get_dist_flag_and_batch_id;
   
    /**
    ** Created by:      Niknok Orio 
    ** Date Created:    08 12, 2011 
    ** Reference by:    GIUTS999 - Populate missing distribution records 
    ** Description :    if missing records are detected BUTTON for creation of final distribution record would be enable
    **/
    PROCEDURE VALIDATE_EXISTING_DIST(
        p_dist_no                IN giuw_pol_dist.dist_no%TYPE,
        p_policy_id              IN giuw_pol_dist.policy_id%TYPE,
        p_enabled_btn_sw        OUT VARCHAR2
        ) IS
      v_hdr_sw   VARCHAR2(1); --field that used as a switch to determine if records exist in header table
      v_dtl_sw   VARCHAR2(1); --field that used as a switch to determine if records exist in detail table
    BEGIN
      p_enabled_btn_sw := 'N';
      v_hdr_sw := 'N';
      --check if there are records in giuw_policyds
      FOR A IN (SELECT c110.dist_no, c110.dist_seq_no
                  FROM giuw_policyds  c110
                 WHERE c110.dist_no = p_dist_no)
      LOOP    
        v_hdr_sw := 'Y';
        v_dtl_sw := 'N';
        --check if there are records corresponding records in giuw_policyds_dtl      
        -- for every record in giuw_policyds   
        FOR B IN (SELECT '1'
                    FROM giuw_policyds_dtl c130
                   WHERE c130.dist_no = a.dist_no
                     AND c130.dist_seq_no = a.dist_seq_no)
        LOOP            
            v_dtl_sw := 'Y';
            EXIT;
        END LOOP;    
        IF v_dtl_sw = 'N' THEN
             EXIT; 
        END IF;
      END LOOP;
      IF v_hdr_sw = 'N' or v_dtl_sw = 'N' THEN  --records not existing
         p_enabled_btn_sw := 'Y';
      ELSE       
         --get all item_no from gipi_item that have peril(s) 
           FOR item IN(SELECT b340.item_no
                         FROM gipi_item b340
                        WHERE b340.policy_id = p_policy_id
                          AND EXISTS (SELECT '1'
                                        FROM gipi_itmperil b380
                                       WHERE b380.policy_id = b340.policy_id
                                         AND b380.item_no   = b340.item_no))
           LOOP  
             v_hdr_sw := 'N';                    
             --check if there are records in giuw_itemds for every record retrieved in gipi_item
           FOR A IN (SELECT c140.dist_no, c140.dist_seq_no
                       FROM giuw_itemds c140
                      WHERE c140.dist_no = p_dist_no
                        AND c140.item_no = item.item_no)
           LOOP    
             v_hdr_sw := 'Y';          
             v_dtl_sw := 'N';
             --check if there are records corresponding records in giuw_itemds_dtl      
             -- for every record in giuw_itemds   
             FOR B IN (SELECT '1'
                         FROM giuw_itemds_dtl c050
                        WHERE c050.dist_no = a.dist_no
                          AND c050.dist_seq_no = a.dist_seq_no
                          AND c050.item_no = item.item_no)
             LOOP            
                 v_dtl_sw := 'Y';
                 EXIT;
             END LOOP;    
             IF v_dtl_sw = 'N' THEN
                EXIT;
             END IF;
           END LOOP;
           IF v_hdr_sw = 'N' THEN
              EXIT;
           END IF;      
         END LOOP;    
         IF v_hdr_sw = 'N' or v_dtl_sw = 'N' THEN --records not existing
            p_enabled_btn_sw := 'Y';
         ELSE
              --get all item_no '' from gipi_itmperil
              FOR perl IN (SELECT b380.item_no, b380.peril_cd
                             FROM gipi_itmperil b380
                            WHERE b380.policy_id = p_policy_id) 
              LOOP            
              v_hdr_sw := 'N';
              --check if there are records in giuw_itemperilds
              --for every record retrieved in table gipi_itmperil   
              FOR A IN (SELECT c060.dist_no, c060.dist_seq_no, c060.item_no, c060.peril_cd
                          FROM giuw_itemperilds c060
                         WHERE c060.dist_no   = p_dist_no
                           AND c060.item_no    = c060.item_no
                           AND c060.peril_cd   = c060.peril_cd)
              LOOP    
                v_hdr_sw := 'Y';
                v_dtl_sw := 'N';
                --check if there are corresponding records in giuw_itemperilds_dtl      
                -- for every record in giuw_itemperilds   
                FOR B IN (SELECT '1'
                            FROM giuw_itemperilds_dtl c070
                           WHERE c070.dist_no = a.dist_no
                               AND c070.dist_seq_no = a.dist_seq_no
                             AND c070.item_no = a.item_no
                             AND c070.peril_cd = a.peril_cd)
                LOOP            
                    v_dtl_sw := 'Y';
                    EXIT;
                END LOOP;    
                IF v_dtl_sw = 'N' THEN
                   EXIT;
                END IF;
              END LOOP;
              IF v_hdr_sw = 'N' THEN
                 EXIT;
              END IF;
            END LOOP;  
            IF v_hdr_sw = 'N' or v_dtl_sw = 'N' THEN--records not existing
               p_enabled_btn_sw := 'Y';
            ELSE
                 --get all combination of dist_seq_no '' from giuw_itemperilds
                 FOR perl IN(SELECT DISTINCT c060.peril_cd peril_cd, c060.dist_seq_no
                               FROM giuw_itemperilds c060
                              WHERE c060.dist_no = p_dist_no)
                 LOOP              
                 v_hdr_sw := 'N';
                 --check if there are records in giuw_perilds
                 --for every combination of peril_cd '' in giuw_itemperilds   
                 FOR A IN (SELECT c090.dist_no, c090.dist_seq_no, c090.peril_cd
                             FROM giuw_perilds c090
                            WHERE c090.dist_no     = p_dist_no
                              AND c090.dist_seq_no = perl.dist_seq_no
                              AND c090.peril_cd    = perl.peril_cd )
                 LOOP    
                   v_hdr_sw := 'Y';
                   v_dtl_sw := 'N';
                   --check if there are records corresponding records in giuw_perilds_dtl      
                   -- for every record in giuw_perilds   
                   FOR B IN (SELECT '1'
                               FROM giuw_perilds_dtl c100
                              WHERE c100.dist_no = a.dist_no
                                AND c100.dist_seq_no = a.dist_seq_no
                                AND c100.peril_cd = a.peril_cd)
                   LOOP            
                       v_dtl_sw := 'Y';
                         EXIT;
                     END LOOP;    
                   IF v_dtl_sw = 'N' THEN
                      EXIT;
                   END IF;
                 END LOOP;
                 IF v_hdr_sw = 'N' THEN
                    EXIT;
                 END IF;
               END LOOP;  
               IF v_hdr_sw = 'N' or v_dtl_sw = 'N' THEN --records not existing
                  p_enabled_btn_sw := 'Y';
               END IF;
            END IF;   
         END IF; 
      END IF;
    END;
    
    /*
    **  Created by   :  Emman
    **  Date Created :  08.16.2011
    **  Reference By : (GIUTS021 - Redistribution)
    **  Description  : Creates  two new distribution record in table GIUW_POL_DIST one for
    **                 earned (DIST_FLAG = '3') and another for unearned (DIST_FLAG = '1')
    **                 based on the values taken in by the fields of the redistributed record 
    **                 and the ratio computed based from the eff_date, expiry_date and 
    **                 redistribution_date.
    */ 
    PROCEDURE NEG_POL_DIST_GIUTS021(p_dist_no          IN OUT GIUW_POL_DIST.dist_no%TYPE,
                                    p_temp_distno      IN OUT GIUW_POL_DIST.dist_no%TYPE,
                                    p_var_v_neg_distno IN OUT GIUW_POL_DIST.dist_no%TYPE,
                                    p_v_ratio          IN OUT NUMBER,
                                    p_v_post_flag      IN OUT VARCHAR2,
                                    p_nbt_rdate        IN     DATE,
                                    p_expiry_date      IN     DATE,
                                    p_eff_date         IN     DATE)
    IS
      CURSOR dtl_retriever_cur IS
        SELECT par_id        , policy_id      , endt_type   ,
               tsi_amt       , prem_amt       , ann_tsi_amt ,
               redist_flag   , eff_date       , expiry_date , 
               dist_type     , item_posted_sw , ex_loss_sw  , 
               acct_ent_date , acct_neg_date  , create_date , 
               user_id       , last_upd_date  , batch_id    ,
               post_flag     , takeup_seq_no -- added by: Nica 05.02.2013 - to retrieve takeup_seq_no
          FROM giuw_pol_dist
         WHERE dist_no = p_var_v_neg_distno;
       
      v_par_id                   giuw_pol_dist.par_id%TYPE; 
      v_policy_id            giuw_pol_dist.policy_id%TYPE;
      v_endt_type            giuw_pol_dist.endt_type%TYPE;
      v_tsi_amt            giuw_pol_dist.tsi_amt%TYPE;
      v_prem_amt            giuw_pol_dist.prem_amt%TYPE;
      v_ann_tsi_amt            giuw_pol_dist.ann_tsi_amt%TYPE;
      v_prem_amt_f            giuw_pol_dist.prem_amt%TYPE;
      v_prem_amt_w            giuw_pol_dist.prem_amt%TYPE;
      v_redist_flag            giuw_pol_dist.redist_flag%TYPE;
      v_eff_date            giuw_pol_dist.eff_date%TYPE;
      v_expiry_date            giuw_pol_dist.expiry_date%TYPE;
      v_dist_type            giuw_pol_dist.dist_type%TYPE;
      v_item_posted_sw        giuw_pol_dist.item_posted_sw%TYPE;
      v_ex_loss_sw            giuw_pol_dist.ex_loss_sw%TYPE;
      v_acct_ent_date        giuw_pol_dist.acct_ent_date%TYPE;
      v_acct_neg_date        giuw_pol_dist.acct_neg_date%TYPE;
      v_create_date            giuw_pol_dist.create_date%TYPE;
      v_user_id            giuw_pol_dist.user_id%TYPE;
      v_last_upd_date        giuw_pol_dist.last_upd_date%TYPE;
      v_batch_id            giuw_pol_dist.batch_id%TYPE;
      v_post_flag            giuw_pol_dist.post_flag%TYPE;
     v_takeup_seq_no       giuw_pol_dist.takeup_seq_no%TYPE; -- added by: Nica 05.02.2013
      v_ratio                       gipi_item.currency_rt%TYPE;
    BEGIN
      OPEN dtl_retriever_cur;
      LOOP
        FETCH dtl_retriever_cur 
         INTO v_par_id        , v_policy_id      , v_endt_type   ,
              v_tsi_amt       , v_prem_amt       , v_ann_tsi_amt ,
              v_redist_flag   , v_eff_date       , v_expiry_date , 
              v_dist_type     , v_item_posted_sw , v_ex_loss_sw  , 
              v_acct_ent_date , v_acct_neg_date  , v_create_date , 
              v_user_id       , v_last_upd_date  , v_batch_id    , 
              v_post_flag     , v_takeup_seq_no; -- added by: Nica 05.02.2013
        EXIT WHEN dtl_retriever_cur%NOTFOUND;
        /* compute for the ratio that will be used to compute for 
        ** the earned portion of the policy */
        p_v_post_flag  := v_post_flag;
        p_v_ratio := (TRUNC(p_nbt_rdate) - TRUNC(p_eff_date)) /
                         (TRUNC(p_expiry_date) - TRUNC(p_eff_date));
        v_prem_amt_f := ROUND(v_prem_amt * p_v_ratio, 2);
        v_prem_amt_w := ROUND(v_prem_amt - v_prem_amt_f,2); 
    /* insert data for earned part of the policy */
        INSERT INTO  giuw_pol_dist
                    (dist_no           , par_id           , policy_id     , 
                     endt_type         , tsi_amt          , prem_amt      ,
                     ann_tsi_amt       , dist_flag        , redist_flag   , 
                     eff_date          , expiry_date      , negate_date   , 
                     dist_type         , item_posted_sw   , ex_loss_sw    , 
                     acct_ent_date     , acct_neg_date    , create_date   , 
                     user_id           , last_upd_date    , batch_id      ,
                     post_flag         , old_dist_no     , takeup_seq_no)
             VALUES (p_dist_no     , v_par_id           , v_policy_id   ,
                     v_endt_type       , v_tsi_amt          , v_prem_amt_f  , 
                     v_ann_tsi_amt     , '3'                , v_redist_flag , 
                     v_eff_date        , p_nbt_rdate -1 , NULL          , 
                     v_dist_type       , v_item_posted_sw   , v_ex_loss_sw  , 
                     null              , null               , SYSDATE       ,
                     USER              , SYSDATE            , NULL          ,
                     --BETH 03142000 change the values to be inserted for this field
                     --     since this is  consider as a new record.
                     v_post_flag       ,  p_var_v_neg_distno, v_takeup_seq_no); -- added by: Nica 05.02.2013
    /* insert data for unearned part of the policy */
        INSERT INTO  giuw_pol_dist
                    (dist_no           , par_id           , policy_id     , 
                     endt_type         , tsi_amt          , prem_amt      ,
                     ann_tsi_amt       , dist_flag        , redist_flag   , 
                     eff_date          , expiry_date      , negate_date   , 
                     dist_type         , item_posted_sw   , ex_loss_sw    , 
                     acct_ent_date     , acct_neg_date    , create_date   , 
                     user_id           , last_upd_date    , batch_id      ,
                     post_flag         , old_dist_no      , takeup_seq_no)
             VALUES (p_temp_distno , v_par_id         , v_policy_id   ,
                     v_endt_type       , v_tsi_amt        , v_prem_amt_w  , 
                     v_ann_tsi_amt     , '1'              , v_redist_flag , 
                     p_nbt_rdate   , v_expiry_date    , NULL          , 
                     v_dist_type       , v_item_posted_sw , v_ex_loss_sw  , 
                     null              , null             , SYSDATE       ,
                     USER              , SYSDATE          , NULL          ,
                     --BETH 03142000 change the values to be inserted for this field
                     --     since this is  consider as a new record.
                     v_post_flag       ,  p_var_v_neg_distno, v_takeup_seq_no); -- added by: Nica 05.02.2013
                     
      END LOOP;
      CLOSE dtl_retriever_cur;
    END NEG_POL_DIST_GIUTS021;
    
    /*
    **  Created by   : Emman
    **  Date Created : 08.17.2011
    **  Reference By : (GIUTS021 - Redistribution)
    **  Description  : Post records retrieved from the working tables to their 
    **                 corresponding master tables
    */
    PROCEDURE post_wpolicyds_dtl_giuts021(p_dist_no              giuw_pol_dist.dist_no%TYPE)
    IS
      v_count      NUMBER(1);
      rec_count    NUMBER(9) := 1;
    BEGIN

      /* Get the value of the columns in table GIUW_WPOLICYDS 
      ** in preparation for insertion or update to its corresponding
      ** master table GIUW_POLICYDS. */ 
      FOR wds_cur IN ( SELECT dist_no     , dist_seq_no , tsi_amt  , 
                              prem_amt    , ann_tsi_amt , item_grp
                         FROM giuw_wpolicyds
                        WHERE dist_no = p_dist_no
                     ORDER BY dist_no , dist_seq_no)
      LOOP
        v_count  :=  NULL;

        /* If the record corresponding to the specified DIST_NO
        ** and DIST_SEQ_NO does not exist in table GIUW_POLICYDS,
        ** then the record in table GIUW_WPOLICYDS must be inserted
        ** to the said table. */ 
        IF v_count IS NULL THEN
           INSERT INTO  giuw_policyds
                       (dist_no             , dist_seq_no         ,
                        tsi_amt             , prem_amt            ,
                        ann_tsi_amt         , item_grp)
                VALUES (wds_cur.dist_no     , wds_cur.dist_seq_no , 
                        wds_cur.tsi_amt     , wds_cur.prem_amt    , 
                        wds_cur.ann_tsi_amt , wds_cur.item_grp);
        END IF;
      END LOOP;

      /* Get the value of the columns in table GIUW_WPOLICYDS_DTL 
      ** in preparation for insertion or update to its corresponding
      ** master table GIUW_POLICYDS_DTL. */ 
      FOR wds_dtl_cur IN (  SELECT a.dist_no   , a.dist_seq_no   , a.line_cd      , 
                                   a.share_cd  , a.dist_tsi      , a.dist_prem    ,
                                   a.dist_spct , a.ann_dist_spct , a.ann_dist_tsi ,
                                   a.dist_grp  , b.share_type    , b.expiry_date  ,
                                   b.trty_name , b.eff_date      , a.dist_spct1 --added dist_spct1 edgar 09/22/2014
                              FROM giuw_wpolicyds_dtl a, giis_dist_share b
                             WHERE a.share_cd = b.share_cd
                               AND a.line_cd  = b.line_cd
                               AND a.dist_no  = p_dist_no
                          ORDER BY a.dist_no  , a.dist_seq_no    , a.line_cd      ,
                                   a.share_cd)
      LOOP
        v_count  :=  NULL;


        /* If the record corresponding to the specified DIST_NO,
        ** DIST_SEQ_NO, LINE_CD, SHARE_CD does not exist in table
        ** GIUW_POLICYDS_DTL, then the record in table GIUW_WPOLICYDS_DTL
        ** must be inserted to the said table. */ 
        IF v_count IS NULL THEN
           INSERT INTO  giuw_policyds_dtl
                       (dist_no                  , dist_seq_no               ,
                        line_cd                  , share_cd                  ,
                        dist_tsi                 , dist_prem                 ,
                        dist_spct                , ann_dist_spct             ,
                        ann_dist_tsi             , dist_grp                  , dist_spct1)--added dist_spct1 edgar 09/22/2014
                VALUES (wds_dtl_cur.dist_no      , wds_dtl_cur.dist_seq_no   , 
                        wds_dtl_cur.line_cd      , wds_dtl_cur.share_cd      , 
                        wds_dtl_cur.dist_tsi     , wds_dtl_cur.dist_prem     ,
                        wds_dtl_cur.dist_spct    , wds_dtl_cur.ann_dist_spct , 
                        wds_dtl_cur.ann_dist_tsi , wds_dtl_cur.dist_grp      , wds_dtl_cur.dist_spct1);--added dist_spct1 edgar 09/22/2014
        END IF;
      END LOOP;
    END post_wpolicyds_dtl_giuts021;
    
   /*
    **  Created by   : Emman
    **  Date Created : 08.17.2011
    **  Reference By : (GIUTS021 - Redistribution)
    **  Description  : Post records retrieved from the working tables to their 
    **                 corresponding master tables
    */
   PROCEDURE post_witemperilds_dtl_giuts021 (
      p_dist_no   giuw_pol_dist.dist_no%TYPE
   )
   IS
      v_count   NUMBER (1);
   BEGIN
      /* Get the value of the columns in table GIUW_WITEMPERILDS
      ** in preparation for insertion or update to its corresponding
      ** master table GIUW_ITEMPERILDS. */
      FOR wds_cur IN (SELECT   dist_no, dist_seq_no, item_no, line_cd,
                               peril_cd, tsi_amt, prem_amt, ann_tsi_amt
                          FROM giuw_witemperilds
                         WHERE dist_no = p_dist_no
                      ORDER BY dist_no,
                               dist_seq_no,
                               item_no,
                               line_cd,
                               peril_cd)
      LOOP
         v_count := NULL;

         /* If the record corresponding to the specified DIST_NO, DIST_SEQ_NO,
         ** ITEM_NO, LINE_CD and PERIL_CD does not exist in table GIUW_ITEMPERILDS,
         ** then the record in table GIUW_WITEMPERILDS must be inserted to the said
         ** table. */
         IF v_count IS NULL
         THEN
            INSERT INTO giuw_itemperilds
                        (dist_no, dist_seq_no,
                         item_no, line_cd, peril_cd,
                         tsi_amt, prem_amt,
                         ann_tsi_amt
                        )
                 VALUES (wds_cur.dist_no, wds_cur.dist_seq_no,
                         wds_cur.item_no, wds_cur.line_cd, wds_cur.peril_cd,
                         wds_cur.tsi_amt, wds_cur.prem_amt,
                         wds_cur.ann_tsi_amt
                        );
         END IF;
      END LOOP;

      /* Get the value of the columns in table GIUW_WITEMPERILDS_DTL
      ** in preparation for insertion or update to its corresponding
      ** master table GIUW_ITEMPERILDS_DTL. */
      FOR wds_dtl_cur IN (SELECT   dist_no, dist_seq_no, item_no, peril_cd,
                                   line_cd, share_cd, dist_tsi, dist_prem,
                                   dist_spct, ann_dist_spct,
                                   ann_dist_tsi, dist_grp, dist_spct1 --added dist_spct1 edgar 09/22/2014
                              FROM giuw_witemperilds_dtl
                             WHERE dist_no = p_dist_no
                          ORDER BY dist_no,
                                   dist_seq_no,
                                   item_no,
                                   line_cd,
                                   peril_cd,
                                   share_cd)
      LOOP
         v_count := NULL;

         /* If the record corresponding to the specified DIST_NO, DIST_SEQ_NO,
         ** ITEM_NO, LINE_CD, PERIL_CD and SHARE_CD does not exist in table
         ** GIUW_ITEMPERILDS_DTL, then the record in table GIUW_WITEMPERILDS_DTL
         ** must be inserted to the said table. */
         IF v_count IS NULL
         THEN
            INSERT INTO giuw_itemperilds_dtl
                        (dist_no, dist_seq_no,
                         item_no, peril_cd,
                         line_cd, share_cd,
                         dist_tsi, dist_prem,
                         dist_spct, ann_dist_spct,
                         ann_dist_tsi, dist_grp , dist_spct1 --added dist_spct1 edgar 09/22/2014
                        )
                 VALUES (wds_dtl_cur.dist_no, wds_dtl_cur.dist_seq_no,
                         wds_dtl_cur.item_no, wds_dtl_cur.peril_cd,
                         wds_dtl_cur.line_cd, wds_dtl_cur.share_cd,
                         wds_dtl_cur.dist_tsi, wds_dtl_cur.dist_prem,
                         wds_dtl_cur.dist_spct, wds_dtl_cur.ann_dist_spct,
                         wds_dtl_cur.ann_dist_tsi, wds_dtl_cur.dist_grp, wds_dtl_cur.dist_spct1 --added dist_spct1 edgar 09/22/2014
                        );
         END IF;
      END LOOP;
   --CLEAR_MESSAGE;
   END post_witemperilds_dtl_giuts021;  
   
   /*
    **  Created by      : Emman
    **  Date Created    : 08.17.2011
    **  Reference By    : (GIUTS021 - Redistribution)
    **  Description     : execute NEGATE_DISTRIBUTION procedure. Creates two duplicate reords of the current distribution record
    **                    one in  the distribution working tables(UNEARNED) and another
    **                    one in the distribution final tables(EARNED).  After which, the
    **                    DIST_FLAG of the current record is set to '5' ('REDISTRIBUTED').
    */
    PROCEDURE NEGATE_DISTRIBUTION_GIUTS021(p_policy_id        IN     GIPI_POLBASIC.policy_id%TYPE,
                                  p_dist_no          IN OUT GIUW_POL_DIST.dist_no%TYPE,
                                  p_temp_distno      IN OUT GIUW_POL_DIST.dist_no%TYPE,
                                  p_neg_distno       IN     GIUW_POL_DIST.dist_no%TYPE,
                                  p_renew_flag       IN     GIPI_POLBASIC.renew_flag%TYPE,
                                  p_nbt_rdate        IN     VARCHAR2,
                                  p_expiry_date      IN     VARCHAR2,
                                  p_eff_date         IN     VARCHAR2,
                                  p_line_cd          IN     GIPI_POLBASIC_POL_DIST_V1.line_cd%TYPE,
                                  p_subline_cd       IN     GIPI_POLBASIC_POL_DIST_V1.subline_cd%TYPE,
                                  p_msg_alert           OUT VARCHAR2)
    IS
      v_ratio               NUMBER; --NUMBER(12); replaced by: Nica 04.23.2013
      v_nbt_rdate           DATE;
      v_expiry_date         DATE;
      v_eff_date            DATE;
      v_post_flag           VARCHAR2(1);
      var_v_neg_distno      GIUW_POL_DIST.dist_no%TYPE; 
    BEGIN
      p_msg_alert := 'SUCCESS';
      
      -- convert varchar2 to date
      BEGIN
        v_nbt_rdate := TO_DATE(p_nbt_rdate, 'MM-DD-RRRR');
      EXCEPTION
        WHEN OTHERS THEN
            v_nbt_rdate := NULL;
      END;
      
      BEGIN
        v_expiry_date := TO_DATE(p_expiry_date, 'MM-DD-RRRR');
      EXCEPTION
        WHEN OTHERS THEN
            v_expiry_date := NULL;
      END;
      
      BEGIN
        v_eff_date := TO_DATE(p_eff_date, 'MM-DD-RRRR');
      EXCEPTION
        WHEN OTHERS THEN
            v_eff_date := NULL;
      END;

      DISTNO_SEQ_RETRIEVER_GIUTS021(p_dist_no, p_temp_distno, p_neg_distno, var_v_neg_distno, p_msg_alert);
      
      IF p_msg_alert <> 'SUCCESS' THEN
        RETURN;
      END IF;
      
      GIUW_POL_DIST_PKG.NEG_POL_DIST_GIUTS021(p_dist_no, p_temp_distno, var_v_neg_distno, v_ratio, v_post_flag, v_nbt_rdate, v_expiry_date, v_eff_date);
      
      GIUW_WPOLICYDS_PKG.NEG_POLICYDS_GIUTS021(p_dist_no, p_temp_distno, var_v_neg_distno, v_ratio);
      
      GIUW_WPOLICYDS_DTL_PKG.NEG_POLICYDS_DTL_GIUTS021(p_dist_no, p_temp_distno, var_v_neg_distno, v_ratio);
      
      GIUW_WITEMDS_PKG.NEG_ITEMDS_GIUTS021(p_dist_no, p_temp_distno, var_v_neg_distno, v_ratio);
      
      GIUW_WITEMDS_DTL_PKG.NEG_ITEMDS_DTL_GIUTS021(p_dist_no, p_temp_distno, var_v_neg_distno, v_ratio);
      
      GIUW_WITEMPERILDS_PKG.NEG_ITEMPERILDS_GIUTS021(p_dist_no, p_temp_distno, var_v_neg_distno, v_ratio);
      
      GIUW_WITEMPERILDS_DTL_PKG.NEG_ITEMPERILDS_DTL_GIUTS021(p_dist_no, p_temp_distno, var_v_neg_distno, v_ratio);
      
      GIUW_WPERILDS_PKG.NEG_PERILDS_GIUTS021(p_dist_no, p_temp_distno, var_v_neg_distno, v_ratio);
      
      GIUW_WPERILDS_DTL_PKG.NEG_PERILDS_DTL_GIUTS021(p_dist_no, p_temp_distno, var_v_neg_distno, v_ratio);
      
      --added by steven 08.11.2014
      /* earned portion */
      --adjust_distribution_peril_pkg.adjust_distribution(p_dist_no); --commented out edgar 09/22/2014
      /* unearned portion */
      --adjust_distribution_peril_pkg.adjust_distribution(p_temp_distno); --commented out edgar 09/22/2014
      giuw_pol_dist_pkg.ADJUST_DIST_TABLES_GIUTS021(p_dist_no, p_temp_distno, p_policy_id);--edgar 09/22/2014 for adjustment
      giuw_pol_dist_pkg.update_gpd_giuts021(p_policy_id, var_v_neg_distno, p_dist_no, p_temp_distno);--edgar 09/26/2014 for correcting amounts in giuw_pol_dist
      UPDATE gipi_polbasic
         SET dist_flag = '1',
             --user_id = USER, replaced by: Nica 05.02.2013
          user_id = NVL (giis_users_pkg.app_user, USER),
             last_upd_date = SYSDATE
       WHERE policy_id = p_policy_id;
      
      UPDATE giuw_pol_dist 
         SET negate_date = v_nbt_rdate, 
             dist_flag   = '5'
             ,batch_id    = NULL --edgar 10/15/2014
       WHERE dist_no     = var_v_neg_distno;
       
      /*added edgar 10/14/2014 update on post flag from original policy*/ 
      UPDATE giuw_pol_dist 
         SET post_flag   = v_post_flag,
             batch_id    = NULL
       WHERE dist_no    IN (p_dist_no, p_temp_distno);              
      
      UPDATE giri_distfrps
         SET ri_flag  = '4'
       WHERE dist_no  = var_v_neg_distno;
     
      /*beth 11072000
      **     if current eim_flag = 2, update eim_flag =6 and 
      **     old_dist_no to the dist_no of policy being redistributed
      */
      FOR A IN (SELECT '1'
                  FROM eim_takeup_info
                 WHERE policy_id = p_policy_id
                   AND eim_flag = '2')
      LOOP
          UPDATE eim_takeup_info
             SET eim_flag = '6',
                 old_dist_no = var_v_neg_distno
           WHERE policy_id = p_policy_id;
        EXIT;
      END LOOP;  
      
      --OFFSET_PROCESS(p_dist_no, p_temp_distno, var_v_neg_distno);/*commented out edgar 09/22/2014 : adjustment is done in ADJUST_DIST_TABLES procedure above*/
      
      /* Store the old and new distribution number to the appropriate
      ** table to keep track of the differences between the two sets
      ** of distribution records. */
      INSERT INTO  giuw_distrel
                  (dist_no_old      , dist_no_new       , policy_id)
           VALUES (var_v_neg_distno , p_temp_distno , p_policy_id);

      --:parameter.query_sw := 'Y';
      
      GIRI_WDISTFRPS_PKG.PROCESS_DISTFRPS_GIUTS021(p_policy_id, p_dist_no, p_line_cd, p_subline_cd, var_v_neg_distno);
      
      GIUW_POL_DIST_PKG.POST_WPOLICYDS_DTL_GIUTS021(p_dist_no);
      
      GIUW_POL_DIST_PKG.POST_WITEMDS_DTL(p_dist_no);
      
      GIUW_POL_DIST_PKG.POST_WITEMPERILDS_DTL_GIUTS021(p_dist_no);
      
      GIUW_POL_DIST_PKG.POST_WPERILDS_DTL(p_dist_no);
      
      GIRI_WDISTFRPS_PKG.PROCESS_RI_GIUTS021(p_dist_no, v_post_flag, var_v_neg_distno, p_renew_flag, v_ratio); --added v_ratio edgar 09/29/2014
      
      GIIS_PARAMETERS_PKG.UPDATE_GIIS_PARAMETERS;
      
      /*FORMS_DDL('COMMIT');*/

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        --MSG_ALERT('There are no records to redistribute.', 'I', FALSE);
        --p_msg_alert := 'There are no records to redistribute.';--commented out edgar 09/26/2014
        raise_application_error(-20001,'Geniisys Exception#E#There are no records to redistribute.');--edgar 09/26/2014
      WHEN OTHERS THEN
        --p_msg_alert := 'Error encountered while redistributing record. Please contact your DBA.'; --commented out edgar 09/26/2014
        raise_application_error(-20001,'Geniisys Exception#E#Error encountered while redistributing record. Please contact your DBA.');--edgar 09/26/2014
    END NEGATE_DISTRIBUTION_GIUTS021; 
   
    PROCEDURE ADJUST_WITMPRLDS_DTL(p_dist_no       giuw_pol_dist.dist_no%TYPE) 
    IS
    v_difference number(20,2);
    v_cntr_ref number(20);
    v_cntr number(20);
    v_temp number(20,2);

    BEGIN 
      /*  Created by   : Christian Santos
      **  Date Created : 04/22/2013
      **  Reference By : GIUWS006
      **  Description  : Adjust the computational floats of dist_tsi, dist_prem and dist_ann_tsi of table GIUW_WITEMPERILDS_DTL
      **                 to equalize against their corresponding value in table GIUW_WPERILDS_DTL
      */
        FOR PRL IN (SELECT PERIL_CD, SHARE_CD, SUM(DIST_TSI) DIST_TSI, SUM(DIST_PREM) DIST_PREM, SUM(ANN_DIST_TSI) DIST_ANN_TSI
                      FROM GIUW_WPERILDS_DTL
                     WHERE DIST_NO = P_DIST_NO
                  GROUP BY PERIL_CD, SHARE_CD)
        LOOP        
            FOR ITMP IN (SELECT PERIL_CD, SHARE_CD, SUM(DIST_TSI) DIST_TSI, SUM(DIST_PREM) DIST_PREM, SUM(ANN_DIST_TSI) DIST_ANN_TSI
                           FROM GIUW_WITEMPERILDS_DTL
                          WHERE DIST_NO = P_DIST_NO
                       GROUP BY PERIL_CD, SHARE_CD)
            LOOP
       
            IF PRL.PERIL_CD = ITMP.PERIL_CD AND PRL.SHARE_CD = ITMP.SHARE_CD THEN
       
                IF PRL.DIST_PREM <> ITMP.DIST_PREM THEN
                    v_difference := PRL.DIST_PREM - ITMP.DIST_PREM;
                    --v_cntr_ref := ABS(v_difference) * 100;
                
                    --v_cntr := 0;
                    --WHILE v_cntr <> v_cntr_ref
                    --LOOP
                        FOR I IN (SELECT * FROM GIUW_WITEMPERILDS_DTL 
                                    WHERE DIST_NO = P_DIST_NO
                                    AND PERIL_CD = PRL.PERIL_CD
                                    AND SHARE_CD = PRL.SHARE_CD)
                        LOOP
                        --v_cntr := v_cntr + 1; 
                        IF SIGN(v_difference*100) = -1 THEN
                        --v_temp := (I.DIST_PREM*100-1)/100;
                        v_temp := (I.DIST_PREM*100)/100;
                        --DBMS_OUTPUT.PUT_LINE(I.DIST_PREM||' -/+ 1 ='||v_temp);
                        ELSE
                        --v_temp := (I.DIST_PREM*100+1)/100;
                        v_temp := (I.DIST_PREM*100)/100;
                        --DBMS_OUTPUT.PUT_LINE(I.DIST_PREM||' -/+ 1 ='||v_temp);
                        END IF;
                            UPDATE GIUW_WITEMPERILDS_DTL
                            SET DIST_PREM = v_temp
                            WHERE PERIL_CD = I.PERIL_CD
                            AND SHARE_CD = I.SHARE_CD
                            AND ITEM_NO = I.ITEM_NO
                            AND DIST_NO = P_DIST_NO;
                        --EXIT WHEN v_cntr = v_cntr_ref;
                        END LOOP;  
                                 
                    --END LOOP;
                END IF;
             
                IF PRL.DIST_TSI <> ITMP.DIST_TSI THEN
                    v_difference := PRL.DIST_TSI - ITMP.DIST_TSI;
                    v_cntr_ref := ABS(v_difference) * 100;
                
                    --v_cntr := 0;
                    --WHILE v_cntr <> v_cntr_ref
                    --LOOP
                        FOR I IN (SELECT * FROM GIUW_WITEMPERILDS_DTL 
                                    WHERE DIST_NO = P_DIST_NO
                                    AND PERIL_CD = PRL.PERIL_CD
                                    AND SHARE_CD = PRL.SHARE_CD)
                        LOOP
                        --v_cntr := v_cntr + 1; 
                        IF SIGN(v_difference*100) = -1 THEN
                        --v_temp := (I.DIST_TSI*100-1)/100;
                        v_temp := (I.DIST_TSI*100)/100;
            --            DBMS_OUTPUT.PUT_LINE(I.DIST_PREM||' -/+ 1 ='||v_temp);
                        ELSE
                        --v_temp := (I.DIST_TSI*100+1)/100;
                        v_temp := (I.DIST_TSI*100)/100;
            --            DBMS_OUTPUT.PUT_LINE(I.DIST_PREM||' -/+ 1 ='||v_temp);
                        END IF;
                            UPDATE GIUW_WITEMPERILDS_DTL
                            SET DIST_TSI = v_temp
                            WHERE PERIL_CD = I.PERIL_CD
                            AND SHARE_CD = I.SHARE_CD
                            AND ITEM_NO = I.ITEM_NO
                            AND DIST_NO = P_DIST_NO;
                        --EXIT WHEN v_cntr = v_cntr_ref;
                        END LOOP;  
                                 
                    --END LOOP;
                END IF;    
       
                IF PRL.DIST_ANN_TSI <> ITMP.DIST_ANN_TSI THEN
                    v_difference := PRL.DIST_ANN_TSI - ITMP.DIST_ANN_TSI;
                    --v_cntr_ref := ABS(v_difference) * 100;
                
                    --v_cntr := 0;
                    --raise_application_error(-20001, '3'||v_cntr_ref);                                                                       
                    --WHILE v_cntr <> v_cntr_ref
                   -- LOOP
                        FOR I IN (SELECT * FROM GIUW_WITEMPERILDS_DTL 
                                    WHERE DIST_NO = P_DIST_NO
                                    AND PERIL_CD = PRL.PERIL_CD
                                    AND SHARE_CD = PRL.SHARE_CD)
                        LOOP
                        --v_cntr := v_cntr + 1; 
                        IF SIGN(v_difference*100) = -1 THEN
                        --v_temp := (I.DIST_PREM*100-1)/100;
                        v_temp := (I.DIST_PREM*100)/100;
                        --DBMS_OUTPUT.PUT_LINE(I.DIST_PREM||' -/+ 1 ='||v_temp);
                        ELSE
                        --v_temp := (I.DIST_PREM*100+1)/100;
                        v_temp := (I.DIST_PREM*100)/100;
                        --DBMS_OUTPUT.PUT_LINE(I.DIST_PREM||' -/+ 1 ='||v_temp);
                        END IF;
                            UPDATE GIUW_WITEMPERILDS_DTL
                            SET DIST_PREM = v_temp
                            WHERE PERIL_CD = I.PERIL_CD
                            AND SHARE_CD = I.SHARE_CD
                            AND ITEM_NO = I.ITEM_NO
                            AND DIST_NO = P_DIST_NO;
                        --EXIT WHEN v_cntr = v_cntr_ref;
                        END LOOP;  
                                 
                   -- END LOOP;
                END IF;    
       
            END IF;
       
            END LOOP;
        END LOOP;
    END ADJUST_WITMPRLDS_DTL;
 
  
    PROCEDURE cmpr_gipi_witmperl_vs_mstrtbls (
        p_par_id        IN  gipi_parlist.par_id%TYPE,
        p_dist_no       IN  giuw_pol_dist.dist_no%TYPE,
        p_msg_alert     OUT VARCHAR2
    )
    IS
        v_with_discrep   VARCHAR2 (1);
    BEGIN
        /*Created by    : Edgar Nobleza
        **Date created  : 05/12/2014
        **Referenced by : GIUWS004
        **Description   : Compare ds tables to gipi_witmperl table fro discrepancy base on aldren's modifications
        */ 
        /***** FOR WPOLICYDS ******/
       FOR rec IN (SELECT (d.tsi_amt - e.tsi_amt) tsi_amt_diff,
                          (d.prem_amt - e.prem_amt) prem_amt_diff,
                          (d.ann_tsi_amt - e.ann_tsi_amt) ann_tsi_amt_diff
                     FROM (SELECT   c.par_id,
                                    ROUND (NVL (SUM (DECODE(f.peril_type, 'B', c.tsi_amt, 0)), 0), 2) tsi_amt,
                                    ROUND (NVL (SUM (c.prem_amt), 0), 2) prem_amt,
                                    ROUND (NVL (SUM (DECODE(f.peril_type, 'B', c.ann_tsi_amt, 0)), 0), 2) ann_tsi_amt
                               FROM gipi_witmperl c, giis_peril f
                              WHERE c.par_id = p_par_id
                              and c.peril_cd = f.peril_cd
                              and c.line_cd = f.line_cd
                           GROUP BY c.par_id) d,
                          (SELECT   b.par_id,
                                    ROUND (NVL (SUM (a.tsi_amt), 0), 2) tsi_amt,
                                    ROUND (NVL (SUM (a.prem_amt), 0), 2) prem_amt,
                                    ROUND (NVL (SUM (a.ann_tsi_amt), 0),
                                           2
                                          ) ann_tsi_amt
                               FROM giuw_wpolicyds a, giuw_pol_dist b
                              WHERE a.dist_no = p_dist_no
                                    AND a.dist_no = b.dist_no
                           GROUP BY b.par_id) e
                    WHERE d.par_id = e.par_id)
       LOOP
          IF    rec.tsi_amt_diff <> 0
             OR rec.prem_amt_diff <> 0
             OR rec.ann_tsi_amt_diff <> 0
          THEN
             v_with_discrep := 1;
             p_msg_alert := 'Records in distribution master tables does not tally with gipi_witmperl table.';
             EXIT;
          END IF;
       END LOOP;

    /***** FOR WITEMDS ******/
       IF v_with_discrep IS NULL
       THEN
          FOR rec1 IN
             (SELECT (d.tsi_amt - e.tsi_amt) tsi_amt_diff,
                     (d.prem_amt - e.prem_amt) prem_amt_diff,
                     (d.ann_tsi_amt - e.ann_tsi_amt) ann_tsi_amt_diff
                FROM (SELECT   c.par_id, c.item_no,
                                ROUND (NVL (SUM (DECODE(f.peril_type, 'B', c.tsi_amt, 0)), 0), 2) tsi_amt,
                                    ROUND (NVL (SUM (c.prem_amt), 0), 2) prem_amt,
                                    ROUND (NVL (SUM (DECODE(f.peril_type, 'B', c.ann_tsi_amt, 0)), 0), 2) ann_tsi_amt
                          FROM gipi_witmperl c, giis_peril f
                         WHERE c.par_id = p_par_id
                         and c.peril_cd = f.peril_cd
                         and c.line_cd = f.line_cd
                      GROUP BY item_no, c.par_id) d,
                     (SELECT   b.par_id, a.item_no,
                               ROUND (NVL (SUM (a.tsi_amt), 0), 2) tsi_amt,
                               ROUND (NVL (SUM (a.prem_amt), 0), 2) prem_amt,
                               ROUND (NVL (SUM (a.ann_tsi_amt), 0),
                                      2) ann_tsi_amt
                          FROM giuw_witemds a, giuw_pol_dist b
                         WHERE a.dist_no = p_dist_no AND a.dist_no = b.dist_no
                      GROUP BY a.item_no, b.par_id) e
               WHERE d.par_id = e.par_id AND d.item_no = e.item_no)
          LOOP
             IF    rec1.tsi_amt_diff <> 0
                OR rec1.prem_amt_diff <> 0
                OR rec1.ann_tsi_amt_diff <> 0
             THEN
                v_with_discrep := 1;
                p_msg_alert := 'Records in distribution master tables does not tally with gipi_witmperl table.';
                EXIT;
             END IF;
          END LOOP;
       END IF;

       /***** FOR WPERILDS ******/
       IF v_with_discrep IS NULL
       THEN
          FOR rec2 IN
             (SELECT (d.tsi_amt - e.tsi_amt) tsi_amt_diff,
                     (d.prem_amt - e.prem_amt) prem_amt_diff,
                     (d.ann_tsi_amt - e.ann_tsi_amt) ann_tsi_amt_diff
                FROM (SELECT   c.par_id, c.peril_cd,
                               ROUND (NVL (SUM (c.tsi_amt), 0), 2) tsi_amt,
                               ROUND (NVL (SUM (c.prem_amt), 0), 2) prem_amt,
                               ROUND (NVL (SUM (c.ann_tsi_amt), 0),
                                      2) ann_tsi_amt
                          FROM gipi_witmperl c
                         WHERE c.par_id = p_par_id
                      GROUP BY c.peril_cd, c.par_id) d,
                     (SELECT   b.par_id, a.peril_cd,
                               ROUND (NVL (SUM (a.tsi_amt), 0), 2) tsi_amt,
                               ROUND (NVL (SUM (a.prem_amt), 0), 2) prem_amt,
                               ROUND (NVL (SUM (a.ann_tsi_amt), 0),
                                      2) ann_tsi_amt
                          FROM giuw_wperilds a, giuw_pol_dist b
                         WHERE a.dist_no = p_dist_no AND a.dist_no = b.dist_no
                      GROUP BY a.peril_cd, b.par_id) e
               WHERE d.par_id = e.par_id AND d.peril_cd = e.peril_cd)
          LOOP
             IF    rec2.tsi_amt_diff <> 0
                OR rec2.prem_amt_diff <> 0
                OR rec2.ann_tsi_amt_diff <> 0
             THEN     
                v_with_discrep := 1;
                p_msg_alert := 'Records in distribution master tables does not tally with gipi_witmperl table.';
                EXIT;
             END IF;
          END LOOP;
       END IF;

       /***** FOR WPITEMERILDS ******/
       IF v_with_discrep IS NULL
       THEN
          FOR rec3 IN
             (SELECT (d.tsi_amt - e.tsi_amt) tsi_amt_diff,
                     (d.prem_amt - e.prem_amt) prem_amt_diff,
                     (d.ann_tsi_amt - e.ann_tsi_amt) ann_tsi_amt_diff
                FROM (SELECT   c.par_id, c.peril_cd, c.item_no,
                               ROUND (NVL (SUM (c.tsi_amt), 0), 2) tsi_amt,
                               ROUND (NVL (SUM (c.prem_amt), 0), 2) prem_amt,
                               ROUND (NVL (SUM (c.ann_tsi_amt), 0),
                                      2) ann_tsi_amt
                          FROM gipi_witmperl c
                         WHERE c.par_id = p_par_id
                      GROUP BY c.peril_cd, c.item_no, c.par_id) d,
                     (SELECT   b.par_id, a.peril_cd, a.item_no,
                               ROUND (NVL (SUM (a.tsi_amt), 0), 2) tsi_amt,
                               ROUND (NVL (SUM (a.prem_amt), 0), 2) prem_amt,
                               ROUND (NVL (SUM (a.ann_tsi_amt), 0),
                                      2) ann_tsi_amt
                          FROM giuw_witemperilds a, giuw_pol_dist b
                         WHERE a.dist_no = p_dist_no AND a.dist_no = b.dist_no
                      GROUP BY a.peril_cd, a.item_no, b.par_id) e
               WHERE d.par_id = e.par_id
                 AND d.peril_cd = e.peril_cd
                 AND d.item_no = e.item_no)
          LOOP
             IF    rec3.tsi_amt_diff <> 0
                OR rec3.prem_amt_diff <> 0
                OR rec3.ann_tsi_amt_diff <> 0
             THEN  
                v_with_discrep := 1;
                p_msg_alert := 'Records in distribution master tables does not tally with gipi_witmperl table.';
                EXIT;
             END IF;
          END LOOP;
       END IF;
    END cmpr_gipi_witmperl_vs_mstrtbls;
    
    PROCEDURE adjust_dist_prem_GIUWS004 (
        p_par_id    IN giuw_pol_dist.par_id%TYPE,
        p_dist_no   IN giuw_pol_dist.dist_no%TYPE
        )    
    IS
    BEGIN
         /*Created by    : Edgar Nobleza
        **Date created  : 05/12/2014
        **Referenced by : GIUWS004
        **Description   : adjust dist prem amount when saving of posting with dist_spct1 having a value base on aldren's modifications
        */ 
       --FOR WPOLICYDS_DTL
       FOR rec4 IN (SELECT   a.dist_seq_no,
                             ROUND (NVL (SUM (prem_amt), 0), 2) prem_amt
                        FROM giuw_wpolicyds a
                       WHERE dist_no = p_dist_no
                    GROUP BY a.dist_no, a.dist_seq_no)
       LOOP
          FOR rec IN (SELECT   b.dist_no, b.dist_seq_no, b.share_cd,
                               ROUND (NVL (SUM (b.dist_spct / 100), 0),
                                      9
                                     ) dist_spct,
                               SUM (b.dist_spct1) dist_spct1
                          FROM giuw_wpolicyds_dtl b
                         WHERE b.dist_no = p_dist_no
                           AND b.dist_seq_no = rec4.dist_seq_no
                      GROUP BY b.dist_no, b.dist_seq_no, b.share_cd)
          LOOP
             IF rec.dist_spct1 IS NOT NULL
             THEN
                UPDATE giuw_wpolicyds_dtl a
                   SET a.dist_prem = rec4.prem_amt * rec.dist_spct,
                       a.dist_spct1 = NULL
                 WHERE a.dist_no = p_dist_no
                   AND a.dist_seq_no = rec.dist_seq_no
                   AND a.share_cd = rec.share_cd;
             END IF;
          END LOOP;
       END LOOP;

       --FOR ITEMDS_DTL
       FOR rec5 IN (SELECT   a.dist_seq_no, a.item_no,
                             ROUND (NVL (SUM (a.prem_amt), 0), 2) prem_amt
                        FROM giuw_witemds a
                       WHERE a.dist_no = p_dist_no
                    GROUP BY a.dist_no, a.dist_seq_no, a.item_no)
       LOOP
          FOR rec1 IN (SELECT   b.dist_no, b.dist_seq_no, b.item_no, b.share_cd,
                                ROUND (NVL (SUM (b.dist_spct / 100), 0),
                                       9
                                      ) dist_spct,
                                SUM (b.dist_spct1) dist_spct1
                           FROM giuw_witemds_dtl b
                          WHERE b.dist_no = p_dist_no
                            AND b.dist_seq_no = rec5.dist_seq_no
                            AND b.item_no = rec5.item_no
                       GROUP BY b.dist_no, b.dist_seq_no, b.item_no, b.share_cd)
          LOOP
             IF rec1.dist_spct1 IS NOT NULL
             THEN
                UPDATE giuw_witemds_dtl a
                   SET a.dist_prem = rec5.prem_amt * rec1.dist_spct,
                       a.dist_spct1 = NULL
                 WHERE a.dist_no = p_dist_no
                   AND a.dist_seq_no = rec1.dist_seq_no
                   AND a.item_no = rec1.item_no
                   AND a.share_cd = rec1.share_cd;
             END IF;
          END LOOP;
       END LOOP;

       --FOR WPERILDS_DTL
       FOR rec6 IN (SELECT   a.dist_seq_no, a.peril_cd,
                             ROUND (NVL (SUM (a.prem_amt), 0), 2) prem_amt
                        FROM giuw_wperilds a
                       WHERE a.dist_no = p_dist_no
                    GROUP BY a.dist_no, a.dist_seq_no, a.peril_cd)
       LOOP
          FOR rec2 IN (SELECT   b.dist_no, b.dist_seq_no, b.peril_cd, b.share_cd,
                                ROUND (NVL (SUM (b.dist_spct / 100), 0),
                                       9
                                      ) dist_spct,
                                SUM (b.dist_spct1) dist_spct1
                           FROM giuw_wperilds_dtl b
                          WHERE b.dist_no = p_dist_no
                            AND b.dist_seq_no = rec6.dist_seq_no
                            AND b.peril_cd = rec6.peril_cd
                       GROUP BY b.dist_no, b.dist_seq_no, b.peril_cd, share_cd)
          LOOP
             IF rec2.dist_spct1 IS NOT NULL
             THEN
                UPDATE giuw_wperilds_dtl a
                   SET a.dist_prem = rec6.prem_amt * rec2.dist_spct,
                       a.dist_spct1 = NULL
                 WHERE a.dist_no = p_dist_no
                   AND a.dist_seq_no = rec2.dist_seq_no
                   AND a.peril_cd = rec2.peril_cd
                   AND a.share_cd = rec2.share_cd;
             END IF;
          END LOOP;
       END LOOP;

    --FOR WITEMPERILDS_DTL
       FOR rec7 IN (SELECT   a.dist_seq_no, a.item_no, a.peril_cd,
                             ROUND (NVL (SUM (a.prem_amt), 0), 2) prem_amt
                        FROM giuw_witemperilds a
                       WHERE a.dist_no = p_dist_no
                    GROUP BY a.dist_no, a.dist_seq_no, a.item_no, a.peril_cd)
       LOOP
          FOR rec3 IN (SELECT   b.dist_no, b.dist_seq_no, b.item_no, b.peril_cd,
                                b.share_cd,
                                ROUND (NVL (SUM (b.dist_spct / 100), 0),
                                       9
                                      ) dist_spct,
                                SUM (b.dist_spct1) dist_spct1
                           FROM giuw_witemperilds_dtl b
                          WHERE b.dist_no = p_dist_no
                            AND b.dist_seq_no = rec7.dist_seq_no
                            AND b.item_no = rec7.item_no
                            AND b.peril_cd = rec7.peril_cd
                       GROUP BY b.dist_no,
                                b.dist_seq_no,
                                b.item_no,
                                b.peril_cd,
                                b.share_cd)
          LOOP
             IF rec3.dist_spct1 IS NOT NULL
             THEN
                UPDATE giuw_witemperilds_dtl a
                   SET a.dist_prem = rec7.prem_amt * rec3.dist_spct,
                       a.dist_spct1 = NULL
                 WHERE a.dist_no = p_dist_no
                   AND a.dist_seq_no = rec3.dist_seq_no
                   AND a.peril_cd = rec3.peril_cd
                   AND a.share_cd = rec3.share_cd
                   AND a.item_no = rec3.item_no;
             END IF;
          END LOOP;
       END LOOP;
    END adjust_dist_prem_GIUWS004;
   
   PROCEDURE update_dist_spct1_to_null (
        p_dist_no   IN giuw_pol_dist.dist_no%TYPE
        )
    IS
    BEGIN
         /*Created by    : Edgar Nobleza
        **Date created  : 05/13/2014
        **Referenced by : GIUWS004
        **Description   : updates non-null dist_spct1 on distribution tables base on aldren's modifications
        */     
       FOR rec IN (SELECT b.dist_no, b.dist_seq_no, b.line_cd, b.share_cd,
                          b.dist_spct1
                     FROM giuw_wpolicyds_dtl b
                    WHERE b.dist_no = p_dist_no)
       LOOP
          UPDATE giuw_wpolicyds_dtl a
             SET a.dist_spct1 = NULL
           WHERE a.dist_no = rec.dist_no
             AND a.dist_seq_no = rec.dist_seq_no
             AND a.line_cd = rec.line_cd
             AND a.share_cd = rec.share_cd;
       END LOOP;

       FOR rec IN (SELECT b.dist_no, b.dist_seq_no, b.item_no, b.line_cd,
                          b.share_cd, b.dist_spct1
                     FROM giuw_witemds_dtl b
                    WHERE b.dist_no = p_dist_no)
       LOOP
          UPDATE giuw_witemds_dtl a
             SET a.dist_spct1 = NULL
           WHERE a.dist_no = rec.dist_no
             AND a.dist_seq_no = rec.dist_seq_no
             AND a.item_no = rec.item_no
             AND a.line_cd = rec.line_cd
             AND a.share_cd = rec.share_cd;
       END LOOP;

       FOR rec IN (SELECT b.dist_no, b.dist_seq_no, b.line_cd, b.peril_cd,
                          b.share_cd, b.dist_spct1
                     FROM giuw_wperilds_dtl b
                    WHERE b.dist_no = p_dist_no)
       LOOP
          UPDATE giuw_wperilds_dtl a
             SET a.dist_spct1 = NULL
           WHERE a.dist_no = rec.dist_no
             AND a.dist_seq_no = rec.dist_seq_no
             AND a.line_cd = rec.line_cd
             AND a.peril_cd = rec.peril_cd
             AND a.share_cd = rec.share_cd;
       END LOOP;

       FOR rec IN (SELECT b.dist_no, b.dist_seq_no, b.item_no, b.line_cd,
                          b.peril_cd, b.share_cd, b.dist_spct1
                     FROM giuw_witemperilds_dtl b
                    WHERE b.dist_no = p_dist_no)
       LOOP
          UPDATE giuw_witemperilds_dtl a
             SET a.dist_spct1 = NULL
           WHERE a.dist_no = rec.dist_no
             AND a.dist_seq_no = rec.dist_seq_no
             AND a.item_no = rec.item_no
             AND a.line_cd = rec.line_cd
             AND a.peril_cd = rec.peril_cd
             AND a.share_cd = rec.share_cd;
       END LOOP;
    END update_dist_spct1_to_null;
    
    PROCEDURE adjust_all_wtables_GIUWS004 (
        p_dist_no   IN giuw_pol_dist.dist_no%TYPE
        )
    IS
    BEGIN
         /*Created by    : Edgar Nobleza
        **Date created  : 05/13/2014
        **Referenced by : GIUWS004
        **Description   : adjust all distribution modules to correct amounts base on aldren's modifications
        */ 
       adjust_wdist_one_risk.adjust_witemperilds_dtl(p_dist_no);
       adjust_wdist_one_risk.ADJUST_DIST(p_dist_no);
       adjust_wdist_one_risk.adjust_wpolicyds_dtl (p_dist_no);
       adjust_wdist_one_risk.adjust_witemds_dtl(p_dist_no);
       adjust_wdist_one_risk.adjust_wperilds_dtl(p_dist_no);
       adjust_wdist_one_risk.adjust_tot_spct_to_100(p_dist_no);     --added by Gzelle 06102014
    END adjust_all_wtables_GIUWS004;    
    
    PROCEDURE get_dist_spct1 (
        p_dist_no       IN  giuw_pol_dist.dist_no%TYPE,
        p_exist         OUT VARCHAR2
        )
    IS 
        v_exist     VARCHAR2(2) := 'N';
    BEGIN
        FOR i IN (SELECT 1 
                    FROM giuw_wpolicyds_dtl
                   WHERE dist_no = p_dist_no
                     AND dist_spct1 IS NOT NULL
                     AND dist_spct1 <> dist_spct)
        LOOP
            v_exist := 'NE';
        END LOOP;
        
        IF v_exist <> 'NE' THEN      --modified by Gzelle 06172014 changed 'Y' to 'NE'
            FOR i IN (SELECT 1 
            FROM giuw_wpolicyds_dtl
           WHERE dist_no = p_dist_no
             AND dist_spct1 IS NOT NULL
             AND dist_spct1 = dist_spct)
            LOOP
                v_exist := 'E';
            END LOOP;
        END IF;
        p_exist := v_exist;
    END get_dist_spct1;
    
    PROCEDURE compare_del_rinsrt_wdist_table (
       p_dist_no   IN   giuw_pol_dist.dist_no%TYPE
    )
    IS
       msg4   VARCHAR2 (1) := NULL;
    BEGIN
       --added by aldren 01282014
       /*cmpare_delrnsrt_wdst_tbles.wpolicyds_vs_wpolicyds_dtl (p_dist_no);*/
       cmpare_delrnsrt_wdst_tbles.wperilds_vs_wperilds_dtl (p_dist_no, msg4);

       IF msg4 IS NULL
       THEN
          cmpare_delrnsrt_wdst_tbles.witemds_vs_witemds_dtl (p_dist_no, msg4);

          IF msg4 IS NULL
          THEN
             cmpare_delrnsrt_wdst_tbles.witmprilds_vs_witmprilds_dtl (p_dist_no,
                                                                      msg4
                                                                     );

             IF msg4 IS NULL
             THEN
                cmpare_delrnsrt_wdst_tbles.witmprlds_dtl_vs_wplicyds_dtl
                                                                      (p_dist_no,
                                                                       msg4
                                                                      );

                IF msg4 IS NULL
                THEN
                   cmpare_delrnsrt_wdst_tbles.witmprilds_dtl_vs_wprilds_dtl
                                                                      (p_dist_no,
                                                                       msg4
                                                                      );

                   IF msg4 IS NULL
                   THEN
                      cmpare_delrnsrt_wdst_tbles.witmprilds_dtl_vs_witemds_dtl
                                                                      (p_dist_no,
                                                                       msg4
                                                                      );

                      IF msg4 IS NULL
                      THEN
                         cmpare_delrnsrt_wdst_tbles.wpolicyds_dtl_vs_witemds_dtl
                                                                      (p_dist_no,
                                                                       msg4
                                                                      );

                         IF msg4 IS NULL
                         THEN
                            cmpare_delrnsrt_wdst_tbles.wpolcyds_dtl_vs_wperilds_dtl
                                                                      (p_dist_no,
                                                                       msg4
                                                                      );
                         END IF;
                      END IF;
                   END IF;
                END IF;
             END IF;
          END IF;
       END IF;
    -- end by aldren 01282014

    END compare_del_rinsrt_wdist_table;   
    
    PROCEDURE compare_wdist_table (
      p_dist_no             IN       giuw_pol_dist.dist_no%TYPE,
      p_par_id              IN       gipi_wpolbas.par_id%TYPE
    )
    IS   
         v_takeup_term            gipi_wpolbas.TAKEUP_TERM%type;
         v_msg_alert              VARCHAR2(100);
         v_msg_type               VARCHAR2(1);
         v_error                  BOOLEAN;
    BEGIN
        BEGIN
         SELECT a.takeup_term
           INTO v_takeup_term
           FROM gipi_wpolbas a
          WHERE a.par_id = p_par_id;
        EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            v_takeup_term := NULL;
        END;
                                 
        IF v_takeup_term = 'ST' THEN
            cmpare_b4_psting_wdist_tables.wpolicyds_vs_wpolicyds_dtl (p_dist_no,v_msg_alert, v_msg_type, v_error);
                                        
            IF v_error THEN
                RAISE_APPLICATION_ERROR(-20001, 'Geniisys Exception#'||v_msg_type||'#'||v_msg_alert);
            END IF;
                                        
            cmpare_b4_psting_wdist_tables.wperilds_vs_wperilds_dtl (p_dist_no,v_msg_alert, v_msg_type, v_error);
                                        
            IF v_error THEN
                RAISE_APPLICATION_ERROR(-20001, 'Geniisys Exception#'||v_msg_type||'#'||v_msg_alert);
            END IF;
                                        
            cmpare_b4_psting_wdist_tables.witemds_vs_witemds_dtl (p_dist_no,v_msg_alert, v_msg_type, v_error);
                                        
            IF v_error THEN
                RAISE_APPLICATION_ERROR(-20001, 'Geniisys Exception#'||v_msg_type||'#'||v_msg_alert);
            END IF;
                                        
            cmpare_b4_psting_wdist_tables.witmprilds_vs_witmprilds_dtl (p_dist_no,v_msg_alert, v_msg_type, v_error);
                                        
            IF v_error THEN
                RAISE_APPLICATION_ERROR(-20001, 'Geniisys Exception#'||v_msg_type||'#'||v_msg_alert);
            END IF;
                                        
            cmpare_b4_psting_wdist_tables.witmprlds_dtl_vs_wplicyds_dtl (p_dist_no,v_msg_alert, v_msg_type, v_error);
                                        
            IF v_error THEN
                RAISE_APPLICATION_ERROR(-20001, 'Geniisys Exception#'||v_msg_type||'#'||v_msg_alert);
            END IF;
                                        
            cmpare_b4_psting_wdist_tables.witmprilds_dtl_vs_wprilds_dtl (p_dist_no,v_msg_alert, v_msg_type, v_error);
                                        
            IF v_error THEN
                RAISE_APPLICATION_ERROR(-20001, 'Geniisys Exception#'||v_msg_type||'#'||v_msg_alert);
            END IF;
                                        
            cmpare_b4_psting_wdist_tables.witmprilds_dtl_vs_witemds_dtl (p_dist_no,v_msg_alert, v_msg_type, v_error);
                                        
            IF v_error THEN
                RAISE_APPLICATION_ERROR(-20001, 'Geniisys Exception#'||v_msg_type||'#'||v_msg_alert);
            END IF;
                                        
            cmpare_b4_psting_wdist_tables.wpolicyds_dtl_vs_witemds_dtl (p_dist_no,v_msg_alert, v_msg_type, v_error);
                                        
            IF v_error THEN
                RAISE_APPLICATION_ERROR(-20001, 'Geniisys Exception#'||v_msg_type||'#'||v_msg_alert);
            END IF;
                                        
            cmpare_b4_psting_wdist_tables.wpolcyds_dtl_vs_wperilds_dtl (p_dist_no,v_msg_alert, v_msg_type, v_error);
                                        
            IF v_error THEN
                RAISE_APPLICATION_ERROR(-20001, 'Geniisys Exception#'||v_msg_type||'#'||v_msg_alert);
            END IF;
        END IF;
    END compare_wdist_table; 
    
    
    FUNCTION get_wpolbas_dtl_GIUWS005(
        p_par_id        gipi_wpolbas.PAR_ID%type
    ) RETURN wpolbas_tab PIPELINED
    AS
        rec     wpolbas_type;
    BEGIN
        FOR b2502 IN (SELECT line_cd, subline_cd, iss_cd, issue_yy, pol_seq_no,
                             renew_no, eff_date, endt_seq_no
                        FROM gipi_wpolbas
                       WHERE par_id = p_par_id)
        LOOP
            rec.line_cd    := b2502.line_cd;
            rec.subline_Cd := b2502.subline_cd;
            rec.iss_cd     := b2502.iss_cd;
            rec.issue_yy   := b2502.issue_yy;
            rec.pol_seq_no := b2502.pol_seq_no;
            rec.renew_no   := b2502.renew_no;
            rec.eff_date   := b2502.eff_date;
            
            FOR i IN (SELECT line_name
                        FROM giis_line
                       WHERE line_cd = b2502.line_cd)
            LOOP
                rec.line_name := i.line_name;
            END LOOP;
            
            PIPE ROW(rec);
            EXIT;
        END LOOP;
    END get_wpolbas_dtl_GIUWS005;   
    
    -- shan 06.10.2014
    PROCEDURE check_null_dist_prem_GIUWS006(
        p_dist_no   IN  GIUW_POL_DIST.DIST_NO%type,
        p_btn_sw    IN  VARCHAR2,
        p_counter   OUT VARCHAR2
    )
    AS
         v_count NUMBER;
    BEGIN
        SELECT count(distinct dist_seq_no)
          INTO v_count
          from giuw_wperilds_dtl
          where dist_no = p_dist_no
          and (dist_prem IS NULL OR DIST_SPCT IS NULL OR DIST_SPCT1 IS NULL);
          
        IF p_btn_sw = 'P' THEN  -- posting
            FOR mel IN (SELECT *
                          from giuw_wperilds_dtl
                         where dist_no = p_dist_no
                           and (dist_prem IS NULL))
            LOOP
                p_counter := 'Y';
                EXIT;
            END LOOP;
            
            IF p_counter = 'Y' THEN
                IF v_count NOT IN (1,0) THEN
                     
                UPDATE GIUW_POL_DIST
                   SET POST_FLAG = 'P'
                 where dist_no = p_dist_no;
                     
                RAISE_APPLICATION_ERROR(-20001, 'Geniisys Exception#I#There was an error encountered in distribution records. To correct this error please press the Recreate Items button.');   
                END IF;   
                
                populate_witem_pl_dtl_giuws006(p_dist_no);
            END IF;
            
        ELSIF p_btn_sw = 'S' OR p_btn_sw = 'W' THEN   -- saving / populate_witem_peril
            IF v_count NOT IN (1,0) THEN     
                UPDATE GIUW_POL_DIST
                  SET POST_FLAG = 'P'
                where dist_no = p_dist_no;
                 
                RAISE_APPLICATION_ERROR(-20001, 'Geniisys Exception#I#There was an error encountered in distribution records. To correct this error please press the Recreate Items button.');   
            END IF;
            
            IF p_btn_sw = 'W' THEN
                populate_witem_peril_giuws006(p_dist_no);
            END IF;
        END IF;
    END check_null_dist_prem_GIUWS006;  
    
    PROCEDURE populate_witem_pl_dtl_giuws006 (
      p_dist_no   giuw_pol_dist.dist_no%TYPE
    )
    AS
        v_dist_no         giuw_pol_dist.dist_no%TYPE;
        v_dist_tsi         giuw_witemds_dtl.dist_tsi%TYPE;
        v_dist_prem                   giuw_witemds_dtl.dist_prem%TYPE;  
        v_ann_dist_tsi                giuw_witemds_dtl.ann_dist_tsi%TYPE;
        v_dist_tsi1         giuw_witemperilds_dtl.dist_tsi%TYPE;
        v_dist_prem1                  giuw_witemperilds_dtl.dist_prem%TYPE;  
        v_ann_dist_tsi1               giuw_witemperilds_dtl.ann_dist_tsi%TYPE;
        v_dist_tsi2         giuw_wperilds_dtl.dist_tsi%TYPE;
        v_dist_prem2                  giuw_wperilds_dtl.dist_prem%TYPE;  
        v_ann_dist_tsi2               giuw_wperilds_dtl.ann_dist_tsi%TYPE;

    BEGIN
        v_dist_no := p_dist_no;
        /* Delete tables in preparation
        ** for data insertion. */
        DELETE giuw_wperilds_dtl
         WHERE dist_no = v_dist_no;
         
        DELETE giuw_witemperilds_dtl
         WHERE dist_no = v_dist_no;
         
        DELETE giuw_witemds_dtl
         WHERE dist_no = v_dist_no;
         
        /* Get the distribution share percentage for each record
        ** in table GIUW_WPOLICYDS_DTL. */
        FOR c1 IN (SELECT dist_seq_no , line_cd       , share_cd ,
                          dist_spct,dist_spct1   , ann_dist_spct , dist_grp
                     FROM giuw_wpolicyds_dtl
                    WHERE dist_no = v_dist_no) 
        LOOP
            /* Get the amounts from table GIUW_WITEMDS and multiply
            ** it to the share percentage driven from table 
            ** GIUW_WPOLICYDS_DTL to arrive at the correct breakdown
            ** of the amounts for table GIUW_WITEMDS_DTL. */
            FOR c2 IN (SELECT tsi_amt , prem_amt , ann_tsi_amt ,
                              item_no
                         FROM giuw_witemds
                        WHERE dist_seq_no = c1.dist_seq_no
                          AND dist_no     = v_dist_no)
            LOOP
                v_dist_tsi     := ROUND(c1.dist_spct/100     * c2.tsi_amt, 2);
                v_dist_prem    := ROUND(c1.dist_spct1/100     * c2.prem_amt, 2);
                v_ann_dist_tsi := ROUND(c1.ann_dist_spct/100 * c2.ann_tsi_amt, 2);
                --message('create_witem');pause;     
                INSERT INTO  giuw_witemds_dtl
                          (dist_no         , dist_seq_no    , item_no          , 
                           line_cd         , share_cd       , dist_spct        ,
                           dist_tsi        , dist_prem      , ann_dist_spct    ,
                           ann_dist_tsi    , dist_grp,dist_spct1)
                   VALUES (v_dist_no       , c1.dist_seq_no , c2.item_no       ,
                           c1.line_cd      , c1.share_cd    , c1.dist_spct     ,
                           v_dist_tsi      , v_dist_prem    , c1.ann_dist_spct ,
                           v_ann_dist_tsi  , c1.dist_grp,c1.dist_spct1);
            END LOOP;

            /* Get the amounts from table GIUW_WITEMPERILDS and multiply
            ** it to the share percentage driven from table 
            ** GIUW_WPOLICYDS_DTL to arrive at the correct breakdown
            ** of the amounts for table GIUW_WITEMPERILDS_DTL. */
            FOR c3 IN (SELECT tsi_amt , prem_amt , ann_tsi_amt ,
                              item_no , line_cd  , peril_cd
                         FROM giuw_witemperilds
                        WHERE line_cd     = c1.line_cd 
                          AND dist_seq_no = c1.dist_seq_no
                          AND dist_no     = v_dist_no) 
            LOOP
                v_dist_tsi1     := ROUND(c1.dist_spct/100     * c3.tsi_amt, 2);
                v_dist_prem1    := ROUND(c1.dist_spct1/100     * c3.prem_amt, 2);
                v_ann_dist_tsi1 := ROUND(c1.ann_dist_spct/100 * c3.ann_tsi_amt, 2);   
                INSERT INTO  giuw_witemperilds_dtl
                          (dist_no         , dist_seq_no    , item_no          , 
                           line_cd         , share_cd       , dist_spct        ,
                           dist_tsi        , dist_prem      , ann_dist_spct    ,
                           ann_dist_tsi    , dist_grp       , peril_cd,dist_spct1)
                   VALUES (v_dist_no       , c1.dist_seq_no , c3.item_no       ,
                           c3.line_cd      , c1.share_cd    , c1.dist_spct     ,
                           v_dist_tsi1     , v_dist_prem1   , c1.ann_dist_spct ,
                           v_ann_dist_tsi1 , c1.dist_grp    , c3.peril_cd,c1.dist_spct1);
            END LOOP;

            /* Get the amounts from table GIUW_WPERILDS and multiply
            ** it to the share percentage driven from table 
            ** GIUW_WPOLICYDS_DTL to arrive at the correct breakdown
            ** of the amounts for table GIUW_WPERILDS_DTL. */
            FOR c4 IN (SELECT tsi_amt , prem_amt , ann_tsi_amt ,
                              line_cd  , peril_cd
                         FROM giuw_wperilds
                        WHERE line_cd     = c1.line_cd
                          AND dist_seq_no = c1.dist_seq_no
                          AND dist_no     = v_dist_no)
            LOOP
                v_dist_tsi2     := ROUND(c1.dist_spct/100     * c4.tsi_amt, 2);
                v_dist_prem2    := ROUND(c1.dist_spct1/100     * c4.prem_amt, 2);
                v_ann_dist_tsi2 := ROUND(c1.ann_dist_spct/100 * c4.ann_tsi_amt, 2);   
                INSERT INTO  giuw_wperilds_dtl
                          (dist_no         , dist_seq_no    , peril_cd         , 
                           line_cd         , share_cd       , dist_spct        ,
                           dist_tsi        , dist_prem      , ann_dist_spct    ,
                           ann_dist_tsi    , dist_grp,dist_spct1)
                   VALUES (v_dist_no       , c1.dist_seq_no , c4.peril_cd      ,
                           c1.line_cd      , c1.share_cd    , c1.dist_spct     ,
                           v_dist_tsi2     , v_dist_prem2   , c1.ann_dist_spct ,
                           v_ann_dist_tsi2 , c1.dist_grp,c1.dist_spct1);
            END LOOP;
        END LOOP;
    END populate_witem_pl_dtl_giuws006;
    
    /* populate_witem_peril_modified in GIUWS006.fmb */
    PROCEDURE populate_witem_peril_giuws006 (
      p_dist_no   giuw_pol_dist.dist_no%TYPE
    )
    AS
        v_dist_tsi        giuw_witemds_dtl.dist_tsi%TYPE;
        v_dist_prem       giuw_witemds_dtl.dist_prem%TYPE;
        v_ann_dist_tsi    giuw_witemds_dtl.ann_dist_tsi%TYPE;
        v_dist_tsi1       giuw_witemperilds_dtl.dist_tsi%TYPE;
        v_dist_prem1      giuw_witemperilds_dtl.dist_prem%TYPE;
        v_ann_dist_tsi1   giuw_witemperilds_dtl.ann_dist_tsi%TYPE;
        v_dist_tsi2       giuw_wperilds_dtl.dist_tsi%TYPE;
        v_dist_prem2      giuw_wperilds_dtl.dist_prem%TYPE;
        v_ann_dist_tsi2   giuw_wperilds_dtl.ann_dist_tsi%TYPE;
    BEGIN
        FOR mel IN (SELECT *
                      FROM giuw_wperilds_dtl
                     WHERE dist_no = p_dist_no 
                       AND (dist_prem IS NULL))
        LOOP
            --count1 := count1 + 1; 
                  
            /*IF count1 = 1 THEN -- to show only once the message.
            msg_alert('Some records have null distribution prem amount. Distribution records will be recomputed','I',FALSE);
            END IF;*/  
                  
            --  DBMS_OUTPUT.put_line ('pasok' ||mel.dist_no||' '||mel.dist_seq_no ||' '|| mel.line_cd ||' '|| mel.peril_cd||' '||mel.share_cd);

            BEGIN
                -- v_dist_no := :c080.dist_no;
                DELETE      giuw_wperilds_dtl
                   WHERE dist_no = mel.dist_no AND dist_seq_no = mel.dist_seq_no AND line_cd = mel.line_cd AND peril_cd = mel.peril_cd AND share_cd = mel.share_cd;

                DELETE      giuw_witemperilds_dtl
                   WHERE dist_no = mel.dist_no AND dist_seq_no = mel.dist_seq_no AND line_cd = mel.line_cd AND peril_cd = mel.peril_cd AND share_cd = mel.share_cd;

                DELETE      giuw_witemds_dtl
                   WHERE dist_no = mel.dist_no AND dist_seq_no = mel.dist_seq_no AND line_cd = mel.line_cd
                                                                                                    --AND peril_cd = v_peril_cd
                         AND share_cd = mel.share_cd;

                /* Get the distribution share percentage for each record
                ** in table GIUW_WPOLICYDS_DTL. */
                FOR c1 IN (SELECT dist_seq_no, line_cd, share_cd, dist_spct, dist_spct1, ann_dist_spct, dist_grp
                          FROM giuw_wpolicyds_dtl
                         WHERE dist_no = mel.dist_no AND dist_seq_no = mel.dist_seq_no AND line_cd = mel.line_cd
                                                                                                    --AND peril_cd = v_peril_cd
                         AND share_cd = mel.share_cd)
                LOOP
                    /* Get the amounts from table GIUW_WITEMDS and multiply
                    ** it to the share percentage driven from table
                    ** GIUW_WPOLICYDS_DTL to arrive at the correct breakdown
                    ** of the amounts for table GIUW_WITEMDS_DTL. */
                    FOR c2 IN (SELECT tsi_amt, prem_amt, ann_tsi_amt, item_no
                                 FROM giuw_witemds
                                WHERE dist_seq_no = c1.dist_seq_no AND dist_no = mel.dist_no AND dist_seq_no = mel.dist_seq_no)
                    -- AND line_cd = v_line_cd
                     --AND peril_cd = v_peril_cd
                    -- AND share_cd = v_share_cd)
                    LOOP
                       v_dist_tsi := ROUND (c1.dist_spct / 100 * c2.tsi_amt, 2);
                       v_dist_prem := ROUND (c1.dist_spct1 / 100 * c2.prem_amt, 2);
                       v_ann_dist_tsi := ROUND (c1.ann_dist_spct / 100 * c2.ann_tsi_amt, 2);

                       --message('create_witem');pause;
                       INSERT INTO giuw_witemds_dtl
                                   (dist_no, dist_seq_no, item_no, line_cd, share_cd, dist_spct, dist_tsi, dist_prem, ann_dist_spct, ann_dist_tsi, dist_grp, dist_spct1
                                   )
                            VALUES (mel.dist_no, c1.dist_seq_no, c2.item_no, c1.line_cd, c1.share_cd, c1.dist_spct, v_dist_tsi, v_dist_prem, c1.ann_dist_spct, v_ann_dist_tsi, c1.dist_grp, c1.dist_spct1
                                   );
                    END LOOP;

                    /* Get the amounts from table GIUW_WITEMPERILDS and multiply
                    ** it to the share percentage driven from table
                    ** GIUW_WPOLICYDS_DTL to arrive at the correct breakdown
                    ** of the amounts for table GIUW_WITEMPERILDS_DTL. */
                    FOR c3 IN (SELECT tsi_amt, prem_amt, ann_tsi_amt, item_no, line_cd, peril_cd
                                 FROM giuw_witemperilds
                                WHERE line_cd = c1.line_cd AND dist_seq_no = c1.dist_seq_no AND dist_no = mel.dist_no AND dist_seq_no = mel.dist_seq_no AND line_cd = mel.line_cd AND peril_cd = mel.peril_cd)
                    -- AND share_cd = v_share_cd)
                    LOOP
                       v_dist_tsi1 := ROUND (c1.dist_spct / 100 * c3.tsi_amt, 2);
                       v_dist_prem1 := ROUND (c1.dist_spct1 / 100 * c3.prem_amt, 2);
                       v_ann_dist_tsi1 := ROUND (c1.ann_dist_spct / 100 * c3.ann_tsi_amt, 2);

                       INSERT INTO giuw_witemperilds_dtl
                                   (dist_no, dist_seq_no, item_no, line_cd, share_cd, dist_spct, dist_tsi, dist_prem, ann_dist_spct, ann_dist_tsi, dist_grp, peril_cd,
                                    dist_spct1
                                   )
                            VALUES (mel.dist_no, c1.dist_seq_no, c3.item_no, c3.line_cd, c1.share_cd, c1.dist_spct, v_dist_tsi1, v_dist_prem1, c1.ann_dist_spct, v_ann_dist_tsi1, c1.dist_grp, c3.peril_cd,
                                    c1.dist_spct1
                                   );
                    END LOOP;

                    /* Get the amounts from table GIUW_WPERILDS and multiply
                    ** it to the share percentage driven from table
                    ** GIUW_WPOLICYDS_DTL to arrive at the correct breakdown
                    ** of the amounts for table GIUW_WPERILDS_DTL. */
                    FOR c4 IN (SELECT tsi_amt, prem_amt, ann_tsi_amt, line_cd, peril_cd
                                 FROM giuw_wperilds
                                WHERE line_cd = c1.line_cd AND dist_seq_no = c1.dist_seq_no AND dist_no = mel.dist_no AND dist_seq_no = mel.dist_seq_no AND line_cd = mel.line_cd AND peril_cd = mel.peril_cd)
                    -- AND share_cd = v_share_cd)
                    LOOP
                       v_dist_tsi2 := ROUND (c1.dist_spct / 100 * c4.tsi_amt, 2);
                       v_dist_prem2 := ROUND (c1.dist_spct1 / 100 * c4.prem_amt, 2);
                       v_ann_dist_tsi2 := ROUND (c1.ann_dist_spct / 100 * c4.ann_tsi_amt, 2);
                                                   
                                                   
                       INSERT INTO giuw_wperilds_dtl
                                   (dist_no, dist_seq_no, peril_cd, line_cd, share_cd, dist_spct, dist_tsi, dist_prem, ann_dist_spct, ann_dist_tsi, dist_grp, dist_spct1
                                   )
                            VALUES (mel.dist_no, c1.dist_seq_no, c4.peril_cd, c1.line_cd, c1.share_cd, c1.dist_spct, v_dist_tsi2, v_dist_prem2, c1.ann_dist_spct, v_ann_dist_tsi2, c1.dist_grp, c1.dist_spct1
                                   );
                    END LOOP;
                END LOOP;
            END;                  
        END LOOP;
    END populate_witem_peril_giuws006;
    
    
    FUNCTION check_sum_insrd_prem_giuws006(
        p_dist_no   giuw_pol_dist.DIST_NO%type
    )RETURN VARCHAR2
    AS
        v_msg   VARCHAR2(100) := 'SUCCESS';
    BEGIN
        FOR a IN (SELECT '1'
                    FROM giuw_witemds_dtl
                   WHERE dist_no = p_dist_no
                   AND dist_spct = 0
                   AND dist_spct1 = 0)
        LOOP
            RAISE_APPLICATION_ERROR(-20001,'Geniisys Exception#E#Cannot post distribution. Zero Share % is computed on both Sum Insured and Premium on Working ItemDS Distribution table.');
            EXIT;                                                                                                                
        END LOOP;                                                        

                                           
        FOR mel IN (SELECT SUM(dist_spct)sum_dist_spct,sum(dist_spct1) sum_dist_spct1 
                      FROM giuw_wpolicyds_dtl
                     WHERE dist_no = p_dist_no
                    GROUP BY dist_seq_no
                   )
        LOOP
            IF mel.sum_dist_spct > 100 OR mel.sum_dist_spct1 > 100 THEN
                RAISE_APPLICATION_ERROR(-20001,'Geniisys Exception#E#Cannot post distribution.  Sum Insured or Premium on Working Distribution Table computed is greater than 100 share %.');
                EXIT;
            END IF;
        END LOOP;
                            
        FOR mel1 IN (SELECT SUM(dist_spct)sum_dist_spct,sum(dist_spct1) sum_dist_spct1 
                       FROM giuw_witemds_dtl
                      WHERE dist_no = p_dist_no
                      GROUP BY dist_seq_no,item_no
                   )
        LOOP
            IF mel1.sum_dist_spct > 100 OR mel1.sum_dist_spct1 > 100 THEN
                RAISE_APPLICATION_ERROR(-20001,'Geniisys Exception#E#Cannot post distribution. Sum Insured or Premium on Working Distribution Table computed is greater than 100 share %.');
                EXIT;
            END IF;
        END LOOP;   
        
        RETURN v_msg;
    END check_sum_insrd_prem_giuws006;
    
    
    PROCEDURE validate_b4_post_GIUWS006(
        p_dist_no   giuw_pol_dist.DIST_NO%type,
        p_par_id    giuw_pol_dist.PAR_ID%type
    )
    AS
        v_msg      VARCHAR2(100) := 'Cannot update distribution records with posted binder.';
        v_msg1      VARCHAR2(100);
        v_msg2      VARCHAR2(3);
        v_msg3      BOOLEAN;
                              
        v_msg4      VARCHAR2(100);
        v_msg5      VARCHAR2(3);
        v_msg6      BOOLEAN;
        v_cnt      NUMBER := 0;
    BEGIN
        FOR i IN (SELECT 1
                    FROM giri_wdistfrps a, giri_distfrps b
                   WHERE a.dist_no = p_dist_no
                     AND a.line_cd = b.line_cd
                     AND a.frps_yy = b.frps_yy
                     AND a.frps_seq_no = b.frps_seq_no)
        LOOP
            RAISE_APPLICATION_ERROR(-20001,'Geniisys Exception#I#'||v_msg);
            EXIT;
        END LOOP;
         
        LOOP
            v_cnt := v_cnt +1;
                cmpare_amts_wrking_tbls.WPERILDS_VS_WPERILDS_DTL(p_dist_no,   v_msg1,   v_msg2,   v_msg3);
                IF v_msg1 IS NOT NULL AND   v_msg2 IS NOT NULL AND v_msg3 IS NOT NULL THEN
                    recompute_dist_peril_pkg.RECOMPUTE_DTL_TABLES(p_dist_no);
                    adjust_distribution_peril_pkg.adjust_distribution(p_dist_no);
                    EXIT;
                END IF;
                cmpare_amts_wrking_tbls.WITMPRILDS_VS_WITMPRILDS_DTL(p_dist_no,   v_msg1,   v_msg2,   v_msg3);
                IF v_msg4 IS NOT NULL AND   v_msg5 IS NOT NULL AND v_msg6 IS NOT NULL THEN
                    recompute_dist_peril_pkg.RECOMPUTE_DTL_TABLES(p_dist_no);
                    adjust_distribution_peril_pkg.adjust_distribution(p_dist_no);
                    EXIT;
                END IF;                                       
                cmpare_amts_wrking_tbls.WITMPRILDS_DTL_VS_WPRILDS_DTL(p_dist_no,   v_msg1,   v_msg2,   v_msg3);
                IF v_msg4 IS NOT NULL AND   v_msg5 IS NOT NULL AND v_msg6 IS NOT NULL THEN
                    recompute_dist_peril_pkg.RECOMPUTE_DTL_TABLES(p_dist_no);
                    adjust_distribution_peril_pkg.adjust_distribution(p_dist_no);
                    EXIT;
                END IF;   
                cmpare_amts_wrking_tbls.WITEMDS_VS_WITEMDS_DTL(p_dist_no,   v_msg1,   v_msg2,   v_msg3);
                IF v_msg4 IS NOT NULL AND   v_msg5 IS NOT NULL AND v_msg6 IS NOT NULL THEN
                    recompute_dist_peril_pkg.RECOMPUTE_DTL_TABLES(p_dist_no);
                    adjust_distribution_peril_pkg.adjust_distribution(p_dist_no);
                    EXIT;
                END IF;   
                cmpare_amts_wrking_tbls.WITMPRILDS_DTL_VS_WITEMDS_DTL(p_dist_no,   v_msg1,   v_msg2,   v_msg3);
                IF v_msg4 IS NOT NULL AND   v_msg5 IS NOT NULL AND v_msg6 IS NOT NULL THEN
                    recompute_dist_peril_pkg.RECOMPUTE_DTL_TABLES(p_dist_no);
                    adjust_distribution_peril_pkg.adjust_distribution(p_dist_no);
                    EXIT;
                END IF;   
                cmpare_amts_wrking_tbls.WPOLICYDS_VS_WPOLICYDS_DTL(p_dist_no,   v_msg1,   v_msg2,   v_msg3);
                IF v_msg4 IS NOT NULL AND   v_msg5 IS NOT NULL AND v_msg6 IS NOT NULL THEN
                    recompute_dist_peril_pkg.RECOMPUTE_DTL_TABLES(p_dist_no);
                    adjust_distribution_peril_pkg.adjust_distribution(p_dist_no);
                    EXIT;
                END IF;   
                cmpare_amts_wrking_tbls.WPOLCYDS_DTL_VS_WPERILDS_DTL(p_dist_no,   v_msg1,   v_msg2,   v_msg3);
                IF v_msg4 IS NOT NULL AND   v_msg5 IS NOT NULL AND v_msg6 IS NOT NULL THEN
                    recompute_dist_peril_pkg.RECOMPUTE_DTL_TABLES(p_dist_no);
                    adjust_distribution_peril_pkg.adjust_distribution(p_dist_no);
                    EXIT;
                END IF;   
                cmpare_amts_wrking_tbls.WITMPRLDS_DTL_VS_WPLICYDS_DTL(p_dist_no,   v_msg1,   v_msg2,   v_msg3);
                IF v_msg4 IS NOT NULL AND   v_msg5 IS NOT NULL AND v_msg6 IS NOT NULL THEN
                    recompute_dist_peril_pkg.RECOMPUTE_DTL_TABLES(p_dist_no);
                    adjust_distribution_peril_pkg.adjust_distribution(p_dist_no);
                    EXIT;
                END IF;   
                cmpare_amts_wrking_tbls.WPOLICYDS_DTL_VS_WITEMDS_DTL(p_dist_no,   v_msg1,   v_msg2,   v_msg3);
                IF v_msg4 IS NOT NULL AND   v_msg5 IS NOT NULL AND v_msg6 IS NOT NULL THEN
                    recompute_dist_peril_pkg.RECOMPUTE_DTL_TABLES(p_dist_no);
                    adjust_distribution_peril_pkg.adjust_distribution(p_dist_no);
                    EXIT;
                END IF;  
				-- comment out - used by CS 
                /*cmpare_amts_wrking_tbls.VALIDATE_ITMPERIL_TSI_PREM(p_dist_no, 'PD',  v_msg1,   v_msg2,   v_msg3);
                IF v_msg4 IS NOT NULL AND   v_msg5 IS NOT NULL AND v_msg6 IS NOT NULL THEN
                    recompute_dist_peril_pkg.RECOMPUTE_DTL_TABLES(p_dist_no);
                    adjust_distribution_peril_pkg.adjust_distribution(p_dist_no);
                    EXIT;
                END IF;*/
            EXIT WHEN v_cnt >=1;
        END LOOP;
        
        compare_wdist_table(p_dist_no, p_par_id);
    END validate_b4_post_GIUWS006;
    
    PROCEDURE post_wpolicyds_dtl_giuws006 (
      p_dist_no              giuw_pol_dist.dist_no%TYPE,
      p_par_type             gipi_parlist.par_type%TYPE,
      p_nbt_eff_date         gipi_wpolbas.eff_date%TYPE,
      p_msg_alert      OUT   VARCHAR2
    )
    IS
        v_count   NUMBER (1);
        v_par_type   VARCHAR2(10);
        v_incept_date DATE;
        v_pol_flag    VARCHAR2(10);
    BEGIN
        /* Get the value of the columns in table GIUW_WPOLICYDS
        ** in preparation for insertion or update to its corresponding
        ** master table GIUW_POLICYDS. */
        FOR wds_cur IN (SELECT   dist_no, dist_seq_no, tsi_amt, prem_amt,
                               ann_tsi_amt, item_grp
                          FROM giuw_wpolicyds
                         WHERE dist_no = p_dist_no
                      ORDER BY dist_no, dist_seq_no)
        LOOP
         v_count := NULL;

         /* If the record corresponding to the specified DIST_NO
         ** and DIST_SEQ_NO does not exist in table GIUW_POLICYDS,
         ** then the record in table GIUW_WPOLICYDS must be inserted
         ** to the said table. */
            IF v_count IS NULL THEN
                INSERT INTO giuw_policyds
                            (dist_no, dist_seq_no,
                             tsi_amt, prem_amt,
                             ann_tsi_amt, item_grp
                            )
                     VALUES (wds_cur.dist_no, wds_cur.dist_seq_no,
                             wds_cur.tsi_amt, wds_cur.prem_amt,
                             wds_cur.ann_tsi_amt, wds_cur.item_grp
                            );
            END IF;
        END LOOP;  
        
        /* Get the value of the columns in table GIUW_WPOLICYDS_DTL
        ** in preparation for insertion or update to its corresponding
        ** master table GIUW_POLICYDS_DTL. */
        FOR wds_dtl_cur IN (SELECT   a.dist_no, a.dist_seq_no, a.line_cd,
                               a.share_cd, a.dist_tsi, a.dist_prem,
                               a.dist_spct, a.ann_dist_spct,
                               a.ann_dist_tsi, a.dist_grp, b.share_type,
                               b.expiry_date, b.trty_name, b.eff_date, 
                               a.dist_spct1,b.prtfolio_sw   -- added by shan 06.10.2014
                          FROM giuw_wpolicyds_dtl a, giis_dist_share b
                         WHERE a.share_cd = b.share_cd
                           AND a.line_cd = b.line_cd
                           AND a.dist_no = p_dist_no
                      ORDER BY a.dist_no,
                               a.dist_seq_no,
                               a.line_cd,
                               a.share_cd)
        LOOP
            v_count := NULL;

            --IF wds_dtl_cur.share_type = '2' AND p_par_type = 'P' -- replaced with code below : shan 06.10.2014
            IF wds_dtl_cur.share_type = '2' AND p_par_type IN ('P','E') 
            THEN
                IF p_par_type = 'E' THEN
                    IF NVL(wds_dtl_cur.prtfolio_sw,'N') = 'N' THEN
                                                                                      
                        SELECT b.par_type, TRUNC (c.incept_date), c.pol_flag
                          INTO v_par_type, v_incept_date, v_pol_flag
                          FROM giuw_pol_dist a, gipi_parlist b, gipi_wpolbas c
                         WHERE a.par_id = b.par_id
                           AND b.par_id = c.par_id
                           AND a.dist_no = p_dist_no;
                                                                                   
                        IF v_incept_date > TRUNC(wds_dtl_cur.expiry_date) THEN
                            /*FORMS_DDL('ROLLBACK');
                            /* Closes the warning canvas and
                            ** sets the cursor style to default. */
                            /*CURSOR_NORMAL;          
                            clear_message(); --mjo02202014
                            clear_message(); --mjo02202014 */ 
                            RAISE_APPLICATION_ERROR(-20001,'Geniisys Exception#I#Treaty ' || wds_dtl_cur.trty_name || ' has already expired. Replace the treaty with another one.');
                        END IF;                                                      
                    END IF;
                    
                    --edited by d.alcantara, 01-31-2012, added trunc to p_nbt_eff_date
                    IF TRUNC(p_nbt_eff_date) > TRUNC (wds_dtl_cur.expiry_date)
                    THEN
                       --nok FORMS_DDL('ROLLBACK');

                       /* Closes the warning canvas and
                       ** sets the cursor style to default. */
                       --nok CURSOR_NORMAL;
                       p_msg_alert :=
                             'Treaty '
                          || wds_dtl_cur.trty_name
                          || ' has already expired.  '
                          || 'Replace the treaty with another one.';
                    END IF;
                END IF;
            END IF;
            
            /* If the record corresponding to the specified DIST_NO,
            ** DIST_SEQ_NO, LINE_CD, SHARE_CD does not exist in table
            ** GIUW_POLICYDS_DTL, then the record in table GIUW_WPOLICYDS_DTL
            ** must be inserted to the said table. */
            IF v_count IS NULL
            THEN
                INSERT INTO giuw_policyds_dtl
                            (dist_no, dist_seq_no,
                             line_cd, share_cd,
                             dist_tsi, dist_prem,
                             dist_spct, ann_dist_spct,
                             ann_dist_tsi, dist_grp, dist_spct1
                            )
                     VALUES (wds_dtl_cur.dist_no, wds_dtl_cur.dist_seq_no,
                             wds_dtl_cur.line_cd, wds_dtl_cur.share_cd,
                             wds_dtl_cur.dist_tsi, wds_dtl_cur.dist_prem,
                             wds_dtl_cur.dist_spct, wds_dtl_cur.ann_dist_spct,
                             wds_dtl_cur.ann_dist_tsi, wds_dtl_cur.dist_grp, wds_dtl_cur.dist_spct1
                            );
            END IF;
        END LOOP;          
           
    END post_wpolicyds_dtl_giuws006;
    
    
    PROCEDURE post_witemds_dtl_giuws006 (
        p_dist_no giuw_pol_dist.dist_no%TYPE
    )
    IS
      v_count   NUMBER (1);
    BEGIN
      /* Get the value of the columns in table GIUW_WITEMDS
      ** in preparation for insertion or update to its corresponding
      ** master table GIUW_ITEMDS. */
      FOR wds_cur IN (SELECT   dist_no, dist_seq_no, item_no, tsi_amt,
                               prem_amt, ann_tsi_amt
                          FROM giuw_witemds
                         WHERE dist_no = p_dist_no
                      ORDER BY dist_no, dist_seq_no, item_no)
      LOOP
         v_count := NULL;

         /* If the record corresponding to the specified DIST_NO
         ** DIST_SEQ_NO and ITEM_NO does not exist in table GIUW_ITEMDS,
         ** then the record in table GIUW_WITEMDS must be inserted
         ** to the said table. */
         IF v_count IS NULL
         THEN
            INSERT INTO giuw_itemds
                        (dist_no, dist_seq_no,
                         item_no, tsi_amt, prem_amt,
                         ann_tsi_amt
                        )
                 VALUES (wds_cur.dist_no, wds_cur.dist_seq_no,
                         wds_cur.item_no, wds_cur.tsi_amt, wds_cur.prem_amt,
                         wds_cur.ann_tsi_amt
                        );
         END IF;
      END LOOP;

      /* Get the value of the columns in table GIUW_WITEMDS_DTL
      ** in preparation for insertion or update to its corresponding
      ** master table GIUW_ITEMDS_DTL. */
      FOR wds_dtl_cur IN (SELECT   dist_no, dist_seq_no, item_no, line_cd,
                                   share_cd, dist_tsi, dist_prem, dist_spct,
                                   ann_dist_spct, ann_dist_tsi, dist_grp, dist_spct1
                              FROM giuw_witemds_dtl
                             WHERE dist_no = p_dist_no
                          ORDER BY dist_no,
                                   dist_seq_no,
                                   item_no,
                                   line_cd,
                                   share_cd)
      LOOP
         v_count := NULL;

         /* If the record corresponding to the specified DIST_NO, DIST_SEQ_NO,
         ** ITEM_NO, LINE_CD, SHARE_CD does not exist in table GIUW_ITEMDS_DTL,
         ** then the record in table GIUW_ITEMDS_DTL must be inserted to the
         ** said table. */
         IF v_count IS NULL
         THEN
            INSERT INTO giuw_itemds_dtl
                        (dist_no, dist_seq_no,
                         item_no, line_cd,
                         share_cd, dist_tsi,
                         dist_prem, dist_spct,
                         ann_dist_spct,
                         ann_dist_tsi, dist_grp, dist_spct1
                        )
                 VALUES (wds_dtl_cur.dist_no, wds_dtl_cur.dist_seq_no,
                         wds_dtl_cur.item_no, wds_dtl_cur.line_cd,
                         wds_dtl_cur.share_cd, wds_dtl_cur.dist_tsi,
                         wds_dtl_cur.dist_prem, wds_dtl_cur.dist_spct,
                         wds_dtl_cur.ann_dist_spct,
                         wds_dtl_cur.ann_dist_tsi, wds_dtl_cur.dist_grp, wds_dtl_cur.dist_spct1
                        );
         END IF;
      END LOOP;
   --CLEAR_MESSAGE;
    END post_witemds_dtl_giuws006;
    
    
    PROCEDURE post_witemperilds_dtl_giuws006 (p_dist_no giuw_pol_dist.dist_no%TYPE)
   IS
      v_count   NUMBER (1);
   BEGIN
      /* Get the value of the columns in table GIUW_WITEMPERILDS
      ** in preparation for insertion or update to its corresponding
      ** master table GIUW_ITEMPERILDS. */
      FOR wds_cur IN (SELECT   dist_no, dist_seq_no, item_no, line_cd,
                               peril_cd, tsi_amt, prem_amt, ann_tsi_amt
                          FROM giuw_witemperilds
                         WHERE dist_no = p_dist_no
                      ORDER BY dist_no,
                               dist_seq_no,
                               item_no,
                               line_cd,
                               peril_cd)
      LOOP
         v_count := NULL;

         /* If the record corresponding to the specified DIST_NO, DIST_SEQ_NO,
         ** ITEM_NO, LINE_CD and PERIL_CD does not exist in table GIUW_ITEMPERILDS,
         ** then the record in table GIUW_WITEMPERILDS must be inserted to the said
         ** table. */
         IF v_count IS NULL
         THEN
            INSERT INTO giuw_itemperilds
                        (dist_no, dist_seq_no,
                         item_no, line_cd, peril_cd,
                         tsi_amt, prem_amt,
                         ann_tsi_amt
                        )
                 VALUES (wds_cur.dist_no, wds_cur.dist_seq_no,
                         wds_cur.item_no, wds_cur.line_cd, wds_cur.peril_cd,
                         wds_cur.tsi_amt, wds_cur.prem_amt,
                         wds_cur.ann_tsi_amt
                        );
         END IF;
      END LOOP;

      /* Get the value of the columns in table GIUW_WITEMPERILDS_DTL
      ** in preparation for insertion or update to its corresponding
      ** master table GIUW_ITEMPERILDS_DTL. */
      FOR wds_dtl_cur IN (SELECT   dist_no, dist_seq_no, item_no, peril_cd,
                                   line_cd, share_cd, dist_tsi, dist_prem,
                                   dist_spct, ann_dist_spct, ann_dist_tsi,
                                   dist_grp, dist_spct1
                              FROM giuw_witemperilds_dtl
                             WHERE dist_no = p_dist_no
                          ORDER BY dist_no,
                                   dist_seq_no,
                                   item_no,
                                   line_cd,
                                   peril_cd,
                                   share_cd)
      LOOP
         v_count := NULL;

         /* If the record corresponding to the specified DIST_NO, DIST_SEQ_NO,
         ** ITEM_NO, LINE_CD, PERIL_CD and SHARE_CD does not exist in table
         ** GIUW_ITEMPERILDS_DTL, then the record in table GIUW_WITEMPERILDS_DTL
         ** must be inserted to the said table. */
         IF v_count IS NULL
         THEN
            INSERT INTO giuw_itemperilds_dtl
                        (dist_no, dist_seq_no,
                         item_no, peril_cd,
                         line_cd, share_cd,
                         dist_tsi, dist_prem,
                         dist_spct, ann_dist_spct,
                         ann_dist_tsi, dist_grp,
                         dist_spct1
                        )
                 VALUES (wds_dtl_cur.dist_no, wds_dtl_cur.dist_seq_no,
                         wds_dtl_cur.item_no, wds_dtl_cur.peril_cd,
                         wds_dtl_cur.line_cd, wds_dtl_cur.share_cd,
                         wds_dtl_cur.dist_tsi, wds_dtl_cur.dist_prem,
                         wds_dtl_cur.dist_spct, wds_dtl_cur.ann_dist_spct,
                         wds_dtl_cur.ann_dist_tsi, wds_dtl_cur.dist_grp,
                         wds_dtl_cur.dist_spct1
                        );
         END IF;
      END LOOP;
   --CLEAR_MESSAGE;
   END post_witemperilds_dtl_giuws006;
   
   PROCEDURE post_dist_giuws003_final (
      p_par_id              IN       gipi_wpolbas.par_id%TYPE,
      p_dist_no             IN       giuw_pol_dist.dist_no%TYPE,
      p_dist_seq_no         IN       giuw_wpolicyds.dist_seq_no%TYPE,
      p_module              IN       VARCHAR2,
      p_user_id             IN       giis_users.user_id%TYPE,
      p_current_form_name   IN       VARCHAR2,
      p_net_msg             OUT      VARCHAR2,
      p_treaty_msg          OUT      VARCHAR2,
      p_override_msg        OUT      VARCHAR2,
      p_net_override        OUT      VARCHAR2,
      p_treaty_override     OUT      VARCHAR2,
      p_msg_alert           OUT      VARCHAR2,
      p_dist_flag           OUT      VARCHAR2,
      p_mean_dist_flag      OUT      VARCHAR2,
      p_workflow_msgr       OUT      VARCHAR2,
      p_param_function      OUT      VARCHAR2      
   )
   IS
   BEGIN
      /* Post records retrieved from the working tables to their
      ** corresponding master tables.
      ** IMPORTANT:  This button can only be pressed upon complete distribution
      **             of a specified DIST_NO, that is, GIUW_WPOLICYDS.DIST_FLAG = '2'.
      **             AND if the said distribution involves one or more reinsurers,
      **             that is, if a facultative share, relative to the DIST_NO being
      **             processed, was found to be existing in any of the records in
      **             tables GIUW_WPOLICYDS_DTL, GIUW_WITEMDS_DTL, GIUW_WPERILDS_DTL
      **             and GIUW_WITEMPERILDS_DTL.
      ** NOTE:  For more info on VARIABLES.POST_SW, see package spec VARIABLES. */
      DECLARE
         v_message                VARCHAR2 (2000)
                                               := 'W   o   r   k   i   n   g';
         v_share                  VARCHAR2 (2000)                := 'N';
         --alert_id             alert;
         alert_button             NUMBER;
         --rose08062009
         p_type_exceed            VARCHAR2 (7);
         p_block                  VARCHAR2 (5000);
         v_param_value_v          VARCHAR2 (1);
         v_exist                  VARCHAR2 (1);
         v_share_type             VARCHAR2 (1);
         v_prev_type_exceed       VARCHAR2 (10);
         v_auto_dist              VARCHAR2 (1);
         v_menu_line              giis_line.line_cd%TYPE;         --vj 031710
         v_loc_block              VARCHAR2 (50);                  --vj 031710
         v_count                  NUMBER                         := 0;
         var_v_prev_type_exceed   VARCHAR2 (5000);
         v_par_type               gipi_parlist.par_type%TYPE;
         v_nbt_eff_date           gipi_wpolbas.eff_date%TYPE;
         v_line_cd                gipi_wpolbas.line_cd%TYPE;
         v_nbt_subline_cd         gipi_wpolbas.subline_cd%TYPE;
         v_takeup_term            gipi_wpolbas.takeup_term%TYPE;
      BEGIN
      
          FOR pol IN (SELECT eff_date, line_cd, subline_cd
                        FROM gipi_wpolbas
                       WHERE par_id = p_par_id)
          LOOP
            v_nbt_eff_date := pol.eff_date;
            v_line_cd := pol.line_cd;
            v_nbt_subline_cd := pol.subline_cd;
          END LOOP;   
          BEGIN
             SELECT a.takeup_term
               INTO v_takeup_term
               FROM gipi_wpolbas a
              WHERE a.par_id = p_par_id;
          EXCEPTION
             WHEN NO_DATA_FOUND
             THEN
                v_takeup_term := NULL;
          END;
          
          
          IF v_takeup_term = 'ST' THEN
              compare_itmperil_dist_pkg.COMPARE_RECOMPUTE_DIST(p_dist_no, p_msg_alert);
              adjust_distribution_peril_pkg.ADJUST_SHARE_WDISTFRPS(p_dist_no);   
              giuw_pol_dist_pkg.COMPARE_WDIST_TABLE(p_dist_no, p_par_id );
          END IF;
         /* Remove existing records related to the
         ** current DIST_NO from certain distribution
         ** and RI master tables considering the fact
         ** that the current changes made were not yet
         ** posted to the master tables. */
         giuw_pol_dist_pkg.delete_dist_master_tables (p_dist_no);
         /* Post records retrieved from GIUW_WPOLICYDS
         ** and GIUW_WPOLICYDS_DTL to tables GIUW_POLICYDS
         ** and GIUW_POLICYDS_DTL. */
         post_wpolicyds_dtl (p_dist_no,
                             v_par_type,
                             v_nbt_eff_date,
                             p_msg_alert
                            );
         /* Post records retrieved from GIUW_WITEMDS
         ** and GIUW_WITEMDS_DTL to tables GIUW_ITEMDS
         ** and GIUW_ITEMDS_DTL. */
         post_witemds_dtl (p_dist_no);
         /* Post records retrieved from GIUW_WITEMPERILDS and
         ** GIUW_WITEMPERILDS_DTL to tables GIUW_ITEMPERILDS
         ** and GIUW_ITEMPERILDS_DTL. */
         post_witemperilds_dtl (p_dist_no);
         /* Post records retrieved from GIUW_WPERILDS
         ** and GIUW_WPERILDS_DTL to tables GIUW_PERILDS
         ** and GIUW_PERILDS_DTL. */
         post_wperilds_dtl (p_dist_no);

         FOR v IN (SELECT share_type
                     FROM giis_dist_share
                    WHERE line_cd = v_line_cd
                      AND share_type = 3
                      AND share_cd IN (
                             SELECT share_cd
                               FROM giuw_wperilds_dtl
                              WHERE dist_no = p_dist_no
                                AND line_cd = v_line_cd))
         LOOP
            IF v.share_type = '3'
            THEN
               v_share := 'Y';
            END IF;
         END LOOP;

         IF v_share = 'Y'
         THEN
            UPDATE giuw_pol_dist
               SET dist_flag = '2',
                   post_flag = 'P',
                   auto_dist = 'N',
                   special_dist_sw = 'N'
             WHERE par_id = p_par_id AND dist_no = p_dist_no;

            p_dist_flag := '2';
            p_mean_dist_flag := 'With Facultative';

            /** to create workflow records of Facultative Placement */
            FOR c1 IN (SELECT b.userid, d.event_desc
                         FROM giis_events_column c,
                              giis_event_mod_users b,
                              giis_event_modules a,
                              giis_events d
                        WHERE 1 = 1
                          AND c.event_cd = a.event_cd
                          AND c.event_mod_cd = a.event_mod_cd
                          AND b.event_mod_cd = a.event_mod_cd
                          AND b.passing_userid = USER
                          AND a.module_id = 'GIUWS003'
                          AND a.event_cd = d.event_cd
                          AND UPPER (d.event_desc) =
                                           'FACULTATIVE PLACEMENT')
            LOOP
               create_transfer_workflow_rec
                                        (c1.event_desc,
                                         p_current_form_name,
                                         --nok GET_APPLICATION_PROPERTY (current_form_name),
                                         c1.userid,
                                         p_par_id,
                                            c1.event_desc
                                         || ' '
                                         || get_policy_no
                                                         (p_par_id),
                                         p_msg_alert,
                                         p_workflow_msgr,
                                         p_user_id
                                        );
            END LOOP;
         ELSE
            UPDATE giuw_pol_dist
               SET dist_flag = '1',
                   post_flag = 'P',
                   auto_dist = 'Y',
                   special_dist_sw = 'N'
             WHERE par_id = p_par_id AND dist_no = p_dist_no;

            p_dist_flag := '1';
            p_mean_dist_flag := 'Undistributed';
            --added to delete the workflow facultative placement of GIUWS004 if not facul
            delete_workflow_rec ('Facultative Placement',
                                 'GIUWS004',
                                 p_user_id,
                                 p_par_id
                                ); 
         END IF;     
                     giuw_pol_dist_pkg.create_ri_records (p_dist_no,
                                   p_par_id,
                                   v_line_cd,
                                   v_nbt_subline_cd
                                  );
      END;   
   END post_dist_giuws003_final;  

   PROCEDURE compareDel_rinsrt_wdist_table4 (
       p_dist_no IN giuw_pol_dist.dist_no%TYPE
   )
   IS
       msg4   VARCHAR2 (1) := NULL;
   BEGIN
       --added by aldren 01282014
       cmpare_del_rnsrt_wdist_tables.wperilds_vs_wperilds_dtl (p_dist_no, msg4);

       IF msg4 IS NULL THEN
          cmpare_del_rnsrt_wdist_tables.witemds_vs_witemds_dtl (p_dist_no, msg4);

          IF msg4 IS NULL THEN
             cmpare_del_rnsrt_wdist_tables.witmprilds_vs_witmprilds_dtl (p_dist_no, msg4);

             IF msg4 IS NULL THEN
                cmpare_del_rnsrt_wdist_tables.witmprlds_dtl_vs_wplicyds_dtl (p_dist_no, msg4);

                IF msg4 IS NULL THEN
                   cmpare_del_rnsrt_wdist_tables.witmprilds_dtl_vs_wprilds_dtl (p_dist_no, msg4);

                   IF msg4 IS NULL THEN
                      cmpare_del_rnsrt_wdist_tables.witmprilds_dtl_vs_witemds_dtl (p_dist_no, msg4);

                      IF msg4 IS NULL THEN
                         cmpare_del_rnsrt_wdist_tables.wpolicyds_dtl_vs_witemds_dtl (p_dist_no, msg4);

                         IF msg4 IS NULL THEN
                            cmpare_del_rnsrt_wdist_tables.wpolcyds_dtl_vs_wperilds_dtl (p_dist_no, msg4);
                         END IF;
                      END IF;
                   END IF;
                END IF;
             END IF;
          END IF;
       END IF;
    --end 01/28/2014
   END compareDel_rinsrt_wdist_table4;   

   PROCEDURE cmpareDel_rinsrt_wdist_tbl_1_4 (
       p_dist_no IN giuw_pol_dist.dist_no%TYPE
   )
   IS
       msg4   VARCHAR2 (1) := NULL;
   BEGIN
       --added by aldren 01282014
       cmpare_delrnsrt_wdst_tbles.wperilds_vs_wperilds_dtl (p_dist_no, msg4);

       IF msg4 IS NULL THEN
          cmpare_delrnsrt_wdst_tbles.witemds_vs_witemds_dtl (p_dist_no, msg4);

          IF msg4 IS NULL THEN
             cmpare_delrnsrt_wdst_tbles.witmprilds_vs_witmprilds_dtl (p_dist_no, msg4);

             IF msg4 IS NULL THEN
                cmpare_delrnsrt_wdst_tbles.witmprlds_dtl_vs_wplicyds_dtl (p_dist_no, msg4);

                IF msg4 IS NULL THEN
                   cmpare_delrnsrt_wdst_tbles.witmprilds_dtl_vs_wprilds_dtl (p_dist_no, msg4);

                   IF msg4 IS NULL THEN
                      cmpare_delrnsrt_wdst_tbles.witmprilds_dtl_vs_witemds_dtl (p_dist_no, msg4);

                      IF msg4 IS NULL THEN
                         cmpare_delrnsrt_wdst_tbles.wpolicyds_dtl_vs_witemds_dtl (p_dist_no, msg4);

                         IF msg4 IS NULL THEN
                            cmpare_delrnsrt_wdst_tbles.wpolcyds_dtl_vs_wperilds_dtl (p_dist_no, msg4);
                         END IF;
                      END IF;
                   END IF;
                END IF;
             END IF;
          END IF;
       END IF;
   END cmpareDel_rinsrt_wdist_tbl_1_4;  
   
    PROCEDURE post_dist_giuws006_final (
        p_par_id              IN       gipi_wpolbas.par_id%TYPE,
        p_dist_no             IN       giuw_pol_dist.dist_no%TYPE,
        p_dist_seq_no         IN       giuw_wpolicyds.dist_seq_no%TYPE,
        p_module              IN       VARCHAR2,
        p_user_id             IN       giis_users.user_id%TYPE,
        p_current_form_name   IN       VARCHAR2,
        p_net_msg             OUT      VARCHAR2,
        p_treaty_msg          OUT      VARCHAR2,
        p_override_msg        OUT      VARCHAR2,
        p_net_override        OUT      VARCHAR2,
        p_treaty_override     OUT      VARCHAR2,
        p_msg_alert           OUT      VARCHAR2,
        p_dist_flag           OUT      VARCHAR2,
        p_mean_dist_flag      OUT      VARCHAR2,
        p_workflow_msgr       OUT      VARCHAR2,
        p_param_function      OUT      VARCHAR2
    )
    AS
    BEGIN
        /* Post records retrieved from the working tables to their
      ** corresponding master tables.
      ** IMPORTANT:  This button can only be pressed upon complete distribution
      **             of a specified DIST_NO, that is, GIUW_WPOLICYDS.DIST_FLAG = '2'.
      **             AND if the said distribution involves one or more reinsurers,
      **             that is, if a facultative share, relative to the DIST_NO being
      **             processed, was found to be existing in any of the records in
      **             tables GIUW_WPOLICYDS_DTL, GIUW_WITEMDS_DTL, GIUW_WPERILDS_DTL
      **             and GIUW_WITEMPERILDS_DTL.
      ** NOTE:  For more info on VARIABLES.POST_SW, see package spec VARIABLES. */
      DECLARE
         v_message                VARCHAR2 (2000)
                                               := 'W   o   r   k   i   n   g';
         v_share                  VARCHAR2 (2000)                := 'N';
         --rose11112009
         --alert_id             alert;
         alert_button             NUMBER;
         p_type_exceed            VARCHAR2 (7);
         p_block                  VARCHAR2 (5000);
         v_param_value_v          VARCHAR2 (1);
         v_exist                  VARCHAR2 (1);
         v_share_type             VARCHAR2 (1);
         /*03312010 rose*/
         v_prev_type_exceed       VARCHAR2 (10);
         v_auto_dist              VARCHAR2 (1);
         v_menu_line              giis_line.line_cd%TYPE;
         var_v_prev_type_exceed   VARCHAR2 (5000);
         v_par_type               gipi_parlist.par_type%TYPE;
         v_nbt_eff_date           gipi_wpolbas.eff_date%TYPE;
         p_line_cd                gipi_wpolbas.line_cd%TYPE;
         v_nbt_subline_cd         gipi_wpolbas.subline_cd%TYPE;
         v_line_cd                gipi_wpolbas.line_cd%TYPE;
         v_takeup_term            gipi_wpolbas.TAKEUP_TERM%type;
        BEGIN
            BEGIN
               SELECT NVL (b.menu_line_cd, b.line_cd), par_type
                 INTO v_menu_line, v_par_type
                 FROM gipi_parlist a, giis_line b
                WHERE a.line_cd = b.line_cd
                  AND a.par_id = p_par_id;
            END;
            
            FOR pol IN (SELECT eff_date, line_cd, subline_cd
                          FROM gipi_wpolbas
                         WHERE par_id = p_par_id)
            LOOP
                v_nbt_eff_date := pol.eff_date;
                v_line_cd := pol.line_cd;
                v_nbt_subline_cd := pol.subline_cd;
            END LOOP; 
            
              -- shan 07.25.2014
              BEGIN
                 SELECT a.takeup_term
                   INTO v_takeup_term
                   FROM gipi_wpolbas a
                  WHERE a.par_id = p_par_id;
              EXCEPTION
                 WHEN NO_DATA_FOUND
                 THEN
                    v_takeup_term := NULL;
              END;              
              
              IF v_takeup_term = 'ST' THEN
                  compare_itmperil_dist_pkg.COMPARE_RECOMPUTE_DIST(p_dist_no, p_msg_alert);
                  adjust_distribution_peril_pkg.ADJUST_SHARE_WDISTFRPS(p_dist_no);   
                  giuw_pol_dist_pkg.COMPARE_WDIST_TABLE(p_dist_no, p_par_id );
              END IF;
              -- end 07.25.2014
              
             /* Remove existing records related to the
             ** current DIST_NO from certain distribution
             ** and RI master tables considering the fact
             ** that the current changes made were not yet
             ** posted to the master tables. */
             giuw_pol_dist_pkg.delete_dist_master_tables (p_dist_no);
             /* Post records retrieved from GIUW_WPOLICYDS
             ** and GIUW_WPOLICYDS_DTL to tables GIUW_POLICYDS
             ** and GIUW_POLICYDS_DTL. */
             giuw_pol_dist_pkg.post_wpolicyds_dtl_giuws006 (p_dist_no,  -- changed from post_wpolicyds_dtl :  shan 06.10.2014
                                                   v_par_type,
                                                   v_nbt_eff_date,
                                                   p_msg_alert
                                                  );
             /* Post records retrieved from GIUW_WITEMDS
             ** and GIUW_WITEMDS_DTL to tables GIUW_ITEMDS
             ** and GIUW_ITEMDS_DTL. */
             giuw_pol_dist_pkg.post_witemds_dtl_giuws006 (p_dist_no);   -- changed from post_witemds_dtl :  shan 06.10.2014
             /* Post records retrieved from GIUW_WITEMPERILDS and
             ** GIUW_WITEMPERILDS_DTL to tables GIUW_ITEMPERILDS
             ** and GIUW_ITEMPERILDS_DTL. */
             giuw_pol_dist_pkg.post_witemperilds_dtl_giuws006 (p_dist_no);       -- changed from post_witemperilds_dtl :  shan 06.10.2014
             /* Post records retrieved from GIUW_WPERILDS
             ** and GIUW_WPERILDS_DTL to tables GIUW_PERILDS
             ** and GIUW_PERILDS_DTL. */
             giuw_pol_dist_pkg.post_wperilds_dtl (p_dist_no);


             FOR v IN (SELECT share_type
                         FROM giis_dist_share
                        WHERE line_cd = v_line_cd
                          AND share_type = 3
                          AND share_cd IN (
                                 SELECT share_cd
                                   FROM giuw_wperilds_dtl
                                  WHERE dist_no = p_dist_no
                                    AND line_cd = v_line_cd))
             LOOP
                IF v.share_type = '3'
                THEN
                   v_share := 'Y';
                END IF;
             END LOOP;
               
             IF v_share = 'Y'
             THEN
                UPDATE giuw_pol_dist
                   SET dist_flag = '2',
                       post_flag = 'P',
                       auto_dist = 'N',
                       special_dist_sw = 'N'
                 --auto_dist = 'N'
                WHERE  par_id = p_par_id AND dist_no = p_dist_no;

                p_dist_flag := '2';
                p_mean_dist_flag := 'With Facultative';

                          /* A.R.C. 08.13.2004
                ** to create workflow records of Facultative Placement */
                FOR c1 IN (SELECT b.userid, d.event_desc
                             FROM giis_events_column c,
                                  giis_event_mod_users b,
                                  giis_event_modules a,
                                  giis_events d
                            WHERE 1 = 1
                              AND c.event_cd = a.event_cd
                              AND c.event_mod_cd = a.event_mod_cd
                              AND b.event_mod_cd = a.event_mod_cd
                              --AND b.userid <> USER  --A.R.C. 01.23.2006
                              AND b.passing_userid = USER
                              --A.R.C. 01.23.2006
                              AND a.module_id = 'GIUWS003'
                              AND a.event_cd = d.event_cd
                              AND UPPER (d.event_desc) =
                                               'FACULTATIVE PLACEMENT')
                LOOP
                   create_transfer_workflow_rec
                                            (c1.event_desc,
                                             p_current_form_name,
                                             --GET_APPLICATION_PROPERTY (current_form_name),
                                             c1.userid,
                                             p_par_id,
                                                c1.event_desc
                                             || ' '
                                             || get_policy_no
                                                             (p_par_id),
                                             p_msg_alert,
                                             p_workflow_msgr,
                                             p_user_id
                                            );
                END LOOP;
             ELSE
                UPDATE giuw_pol_dist
                   SET dist_flag = '1',
                       post_flag = 'P',
                       auto_dist = 'Y',
                       special_dist_sw = 'N'
                 --auto_dist = 'N'
                WHERE  par_id = p_par_id AND dist_no = p_dist_no;

                p_dist_flag := '1';
                p_mean_dist_flag := 'Undistributed';
                --A.R.C. 02.07.2007
                     --added to delete the workflow facultative placement of GIUWS003 if not facul
                delete_workflow_rec ('Facultative Placement',
                                     'GIUWS003',
                                     USER,
                                     p_par_id
                                    );
             END IF;
			 giuw_pol_dist_pkg.create_ri_records2 (p_dist_no, p_par_id, v_line_cd, v_nbt_subline_cd);   --added by robert 10.13.15 GENQA 5053
        END;
    END post_dist_giuws006_final;
    
    PROCEDURE compare_wdist_table_for_policy (
      p_dist_no             IN       giuw_pol_dist.dist_no%TYPE,
      p_policy_id           IN       gipi_polbasic.policy_id%TYPE
   )
    IS   
         v_takeup_term            gipi_wpolbas.TAKEUP_TERM%type;
         v_msg_alert              VARCHAR2(100);
         v_msg_type               VARCHAR2(1);
         v_error                  BOOLEAN;
    BEGIN
        BEGIN
         SELECT a.takeup_term
           INTO v_takeup_term
           FROM gipi_polbasic a
          WHERE a.policy_id = p_policy_id;
        EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            v_takeup_term := NULL;
        END;
                                 
        IF v_takeup_term = 'ST' THEN
            cmpare_b4_psting_wdist_tables.wpolicyds_vs_wpolicyds_dtl (p_dist_no,v_msg_alert, v_msg_type, v_error);
                                        
            IF v_error THEN
                RAISE_APPLICATION_ERROR(-20001, 'Geniisys Exception#'||v_msg_type||'#'||v_msg_alert);
            END IF;
                                        
            cmpare_b4_psting_wdist_tables.wperilds_vs_wperilds_dtl (p_dist_no,v_msg_alert, v_msg_type, v_error);
                                        
            IF v_error THEN
                RAISE_APPLICATION_ERROR(-20001, 'Geniisys Exception#'||v_msg_type||'#'||v_msg_alert);
            END IF;
                                        
            cmpare_b4_psting_wdist_tables.witemds_vs_witemds_dtl (p_dist_no,v_msg_alert, v_msg_type, v_error);
                                        
            IF v_error THEN
                RAISE_APPLICATION_ERROR(-20001, 'Geniisys Exception#'||v_msg_type||'#'||v_msg_alert);
            END IF;
                                        
            cmpare_b4_psting_wdist_tables.witmprilds_vs_witmprilds_dtl (p_dist_no,v_msg_alert, v_msg_type, v_error);
                                        
            IF v_error THEN
                RAISE_APPLICATION_ERROR(-20001, 'Geniisys Exception#'||v_msg_type||'#'||v_msg_alert);
            END IF;
                                        
            cmpare_b4_psting_wdist_tables.witmprlds_dtl_vs_wplicyds_dtl (p_dist_no,v_msg_alert, v_msg_type, v_error);
                                        
            IF v_error THEN
                RAISE_APPLICATION_ERROR(-20001, 'Geniisys Exception#'||v_msg_type||'#'||v_msg_alert);
            END IF;
                                        
            cmpare_b4_psting_wdist_tables.witmprilds_dtl_vs_wprilds_dtl (p_dist_no,v_msg_alert, v_msg_type, v_error);
                                        
            IF v_error THEN
                RAISE_APPLICATION_ERROR(-20001, 'Geniisys Exception#'||v_msg_type||'#'||v_msg_alert);
            END IF;
                                        
            cmpare_b4_psting_wdist_tables.witmprilds_dtl_vs_witemds_dtl (p_dist_no,v_msg_alert, v_msg_type, v_error);
                                        
            IF v_error THEN
                RAISE_APPLICATION_ERROR(-20001, 'Geniisys Exception#'||v_msg_type||'#'||v_msg_alert);
            END IF;
                                        
            cmpare_b4_psting_wdist_tables.wpolicyds_dtl_vs_witemds_dtl (p_dist_no,v_msg_alert, v_msg_type, v_error);
                                        
            IF v_error THEN
                RAISE_APPLICATION_ERROR(-20001, 'Geniisys Exception#'||v_msg_type||'#'||v_msg_alert);
            END IF;
                                        
            cmpare_b4_psting_wdist_tables.wpolcyds_dtl_vs_wperilds_dtl (p_dist_no,v_msg_alert, v_msg_type, v_error);
                                        
            IF v_error THEN
                RAISE_APPLICATION_ERROR(-20001, 'Geniisys Exception#'||v_msg_type||'#'||v_msg_alert);
            END IF;
        END IF;
    END compare_wdist_table_for_policy; 
    
   PROCEDURE val_renum_items (
      p_policy_id   VARCHAR2,
      p_dist_no     VARCHAR2
   )
   IS
   BEGIN --edited by steven 06.26.2014
       FOR j IN (SELECT '1'
                   FROM gipi_itmperil
                  WHERE policy_id = p_policy_id 
                    AND item_no NOT IN (SELECT item_no
                                          FROM giuw_witemperilds
                                         WHERE dist_no = p_dist_no))
       LOOP
         raise_application_error
            (-20001,
             'Geniisys Exception#I#There was an error encountered in distribution records, to correct this error please recreate using Set-Up Groups for Distribution(Item).'
            );
         EXIT;
       END LOOP;
   END;
   
   
    PROCEDURE post_dist_giuws005_final (
        p_par_id              IN       gipi_wpolbas.par_id%TYPE,
        p_dist_no             IN       giuw_pol_dist.dist_no%TYPE,
        p_dist_seq_no         IN       giuw_wpolicyds.dist_seq_no%TYPE,
        p_module              IN       VARCHAR2,
        p_user_id             IN       giis_users.user_id%TYPE,
        p_current_form_name   IN       VARCHAR2,
        p_override_switch     IN       VARCHAR2, -- added by: shan 05.29.2014
        p_net_msg             OUT      VARCHAR2,
        p_treaty_msg          OUT      VARCHAR2,
        p_override_msg        OUT      VARCHAR2,
        p_net_override        OUT      VARCHAR2,
        p_treaty_override     OUT      VARCHAR2,
        p_msg_alert           OUT      VARCHAR2,
        p_dist_flag           OUT      VARCHAR2,
        p_mean_dist_flag      OUT      VARCHAR2,
        p_workflow_msgr       OUT      VARCHAR2,
        p_param_function      OUT      VARCHAR2
    )
    AS
   
    BEGIN
       /* Post records retrieved from the working tables to their
      ** corresponding master tables.
      ** IMPORTANT:  This button can only be pressed upon complete distribution
      **             of a specified DIST_NO, that is, GIUW_WPOLICYDS.DIST_FLAG = '2'.
      **             AND if the said distribution involves one or more reinsurers,
      **             that is, if a facultative share, relative to the DIST_NO being
      **             processed, was found to be existing in any of the records in
      **             tables GIUW_WPOLICYDS_DTL, GIUW_WITEMDS_DTL, GIUW_WPERILDS_DTL
      **             and GIUW_WITEMPERILDS_DTL.
      ** NOTE:  For more info on VARIABLES.POST_SW, see package spec VARIABLES. */
      DECLARE
         v_message                VARCHAR2 (2000)
                                               := 'W   o   r   k   i   n   g';
         v_share                  VARCHAR2 (2000)                := 'N';
         --alert_id             alert;
         alert_button             NUMBER;
         --rose08062009
         p_type_exceed            VARCHAR2 (7);
         p_block                  VARCHAR2 (5000);
         v_param_value_v          VARCHAR2 (1);
         v_exist                  VARCHAR2 (1);
         v_share_type             VARCHAR2 (1);
         v_prev_type_exceed       VARCHAR2 (10);
         v_auto_dist              VARCHAR2 (1);
         v_menu_line              giis_line.line_cd%TYPE;         --vj 031710
         v_loc_block              VARCHAR2 (50);                  --vj 031710
         v_count                  NUMBER                         := 0;
         var_v_prev_type_exceed   VARCHAR2 (5000);
         v_par_type               gipi_parlist.par_type%TYPE;
         v_nbt_eff_date           gipi_wpolbas.eff_date%TYPE;
         v_line_cd                gipi_wpolbas.line_cd%TYPE;
         v_nbt_subline_cd         gipi_wpolbas.subline_cd%TYPE; 
         v_takeup_term            VARCHAR2(3);
        BEGIN
            BEGIN
                SELECT NVL (b.menu_line_cd, b.line_cd), par_type
                  INTO v_menu_line, v_par_type
                  FROM gipi_parlist a, giis_line b
                 WHERE a.line_cd = b.line_cd AND a.par_id = p_par_id;
            END;

            FOR pol IN (SELECT eff_date, line_cd, subline_cd
                          FROM gipi_wpolbas
                         WHERE par_id = p_par_id)
            LOOP
                v_nbt_eff_date := pol.eff_date;
                v_line_cd := pol.line_cd;
                v_nbt_subline_cd := pol.subline_cd;
            END LOOP;
            
            BEGIN
                 SELECT a.takeup_term
                   INTO v_takeup_term
                   FROM gipi_wpolbas a
                  WHERE a.par_id = p_par_id;
            EXCEPTION
                 WHEN NO_DATA_FOUND
                 THEN
                    v_takeup_term := NULL;
            END;
            
            IF v_takeup_term = 'ST' THEN
                FOR a IN (SELECT post_flag  -- shan 07.24.2014
                            FROM giuw_pol_dist
                           WHERE par_id = p_par_id 
                             AND dist_no = p_dist_no)
                LOOP
                    IF a.post_flag = 'P' THEN
                        cmpare_delrnsrt_wdst_tbles.del_rnsrt_wdst_tbls (p_dist_no);
                    ELSE
                        giuw_pol_dist_pkg.compare_del_rinsrt_wdist_table(p_dist_no);
                    END IF;
                END LOOP;
                --giuw_pol_dist_pkg.compare_del_rinsrt_wdist_table(p_dist_no);
                giuw_pol_dist_pkg.ADJUST_ALL_WTABLES_GIUWS004(p_dist_no);  
                adjust_wdist_one_risk.ADJUST_SHARE_WDISTFRPS(p_dist_no);
                --giuw_pol_dist_pkg.COMPARE_WDIST_TABLE(p_dist_no, p_par_id);   -- moved after deletion of master records : shan 07.24.2014
            END IF;
            giuw_pol_dist_pkg.create_ri_records_giuws005 (p_dist_no, p_par_id, v_line_cd, v_nbt_subline_cd );
            
            
            /* Remove existing records related to the
            ** current DIST_NO from certain distribution
            ** and RI master tables considering the fact
            ** that the current changes made were not yet
            ** posted to the master tables. */
            giuw_pol_dist_pkg.delete_dist_master_tables (p_dist_no);
            --v_message := v_message || '   >';
            --synchronize_message (v_message);
                                               
            IF v_takeup_term = 'ST' THEN
                giuw_pol_dist_pkg.COMPARE_WDIST_TABLE(p_dist_no, p_par_id);
            END IF;
                   
            /* Post records retrieved from GIUW_WPOLICYDS
            ** and GIUW_WPOLICYDS_DTL to tables GIUW_POLICYDS
            ** and GIUW_POLICYDS_DTL. */
            giuw_pol_dist_pkg.post_wpolicyds_dtl_giuws005
                                                 (p_dist_no,
                                                  v_par_type,
                                                  v_nbt_eff_date,
                                                  p_msg_alert
                                                 );
            --v_message := v_message || '   >';
            --synchronize_message (v_message);

            /* Post records retrieved from GIUW_WITEMDS
            ** and GIUW_WITEMDS_DTL to tables GIUW_ITEMDS
            ** and GIUW_ITEMDS_DTL. */
            giuw_pol_dist_pkg.post_witemds_dtl_giuws005 (p_dist_no);
            --v_message := v_message || '   >';
            --synchronize_message (v_message);

            /* Post records retrieved from GIUW_WITEMPERILDS and
            ** GIUW_WITEMPERILDS_DTL to tables GIUW_ITEMPERILDS
            ** and GIUW_ITEMPERILDS_DTL. */
            giuw_pol_dist_pkg.post_witemperilds_dtl_giuws005
                                                        (p_dist_no);
            --v_message := v_message || '   >';
            --synchronize_message (v_message);

            /* Post records retrieved from GIUW_WPERILDS
            ** and GIUW_WPERILDS_DTL to tables GIUW_PERILDS
            ** and GIUW_PERILDS_DTL. */
            giuw_pol_dist_pkg.post_wperilds_dtl_giuws005 (p_dist_no);

            --v_message := v_message || '   >';
            --synchronize_message (v_message);

            /* Since records in the working tables have
             ** already been copied to the master tables,
             ** the DIST_FLAG of table GIUW_POL_DIST
             ** must then be updated to '2'(With Facultative),
             ** meaning that the distribution record has already
             ** been posted but the data in the working tables
             ** have not yet been deleted because a final posting
             ** by the RI department is still required. */
            /*added the if condition para inde paulit ulit ang
            pagtawag sa check auto dist para inde magulo ang
            update ng autodist 02232010*/
            IF  v_count = 0 OR (v_count > 0 AND p_type_exceed = 'TREATY')
            THEN                                    /*05202010 rose*/
                IF    (    var_v_prev_type_exceed IS NOT NULL
                       AND v_param_value_v = 'Y'
                      )
                   OR (    v_prev_type_exceed IS NOT NULL
                       AND v_param_value_v = 'Y'
                      )
                   OR (    p_type_exceed IS NOT NULL
                       AND v_param_value_v = 'Y'
                      )
                   OR (    p_param_function IS NOT NULL
                       AND v_param_value_v = 'Y'
                      )
                THEN
                   --nok check_auto_dist1;
                   v_count := 1;
                END IF;
            END IF;

            FOR v IN  (SELECT share_type
                         FROM giis_dist_share
                        WHERE line_cd = v_line_cd
                          AND share_type = 3
                          AND share_cd IN (
                                 SELECT share_cd
                                   FROM giuw_wpolicyds_dtl
                                  WHERE dist_no = p_dist_no
                                    AND line_cd = v_line_cd))
            LOOP
                IF v.share_type = '3'
                THEN
                   v_share := 'Y';
                END IF;
            END LOOP;

            IF v_share = 'Y'
            THEN
                UPDATE giuw_pol_dist
                   SET dist_flag = '2',
                       post_flag = 'O',
                       auto_dist = 'N',
                       special_dist_sw = 'N'
                 --auto_dist = 'N'
                WHERE  par_id = p_par_id AND dist_no = p_dist_no;

                p_dist_flag := '2';
                p_mean_dist_flag := 'With Facultative';

                /* A.R.C. 08.13.2004
                ** to create workflow records of Facultative Placement */
                FOR c1 IN (SELECT b.userid, d.event_desc
                             FROM giis_events_column c,
                                  giis_event_mod_users b,
                                  giis_event_modules a,
                                  giis_events d
                            WHERE 1 = 1
                              AND c.event_cd = a.event_cd
                              AND c.event_mod_cd = a.event_mod_cd
                              AND b.event_mod_cd = a.event_mod_cd
                              --AND b.userid <> USER  --A.R.C. 01.23.2006
                              AND b.passing_userid = USER
                              --A.R.C. 01.23.2006
                              AND a.module_id = 'GIUWS004'
                              AND a.event_cd = d.event_cd
                              AND UPPER (d.event_desc) =
                                               'FACULTATIVE PLACEMENT')
                LOOP
                    create_transfer_workflow_rec
                                            (c1.event_desc,
                                             p_current_form_name,
                                             --nok GET_APPLICATION_PROPERTY (current_form_name),
                                             c1.userid,
                                             p_par_id,
                                                c1.event_desc
                                             || ' '
                                             || get_policy_no
                                                             (p_par_id),
                                             p_msg_alert,
                                             p_workflow_msgr,
                                             p_user_id
                                            );
                END LOOP;
            ELSE
                UPDATE giuw_pol_dist
                   SET dist_flag = '1',
                       post_flag = 'O',
                       auto_dist = 'Y',
                       special_dist_sw = 'N'
                 --auto_dist = 'N'
                WHERE  par_id = p_par_id AND dist_no = p_dist_no;

                p_dist_flag := '1';
                p_mean_dist_flag := 'Undistributed';
                --A.R.C. 02.07.2007
                    --added to delete the workflow facultative placement of GIUWS004 if not facul
                delete_workflow_rec ('Facultative Placement',
                                     'GIUWS004',
                                     p_user_id,
                                     p_par_id
                                    );
            END IF;
        END;
    END post_dist_giuws005_final;
    
   PROCEDURE pre_post_dist_giuws012(
      p_dist_no                     GIUW_WPOLICYDS.dist_no%TYPE,
      p_policy_id                   GIPI_POLBASIC.policy_id%TYPE
   )
   IS
   BEGIN
      FOR i IN(SELECT NVL(tsi_amt, 0) tsi_amt,
                      NVL(prem_amt, 0) prem_amt
                 FROM GIPI_POLBASIC
                WHERE policy_id = p_policy_id)
      LOOP
         IF i.tsi_amt = 0 AND i.prem_amt = 0 THEN
            raise_application_error(-20001, 'Geniisys Exception#I#Cannot post distribution. Please distribute by group.');
         END IF;
      END LOOP;
      
      GIUW_POL_DIST_PKG.val_renum_items(p_policy_id, p_dist_no);
   END;
    
    PROCEDURE check_posted_binder (
      p_par_id          IN  giuw_pol_dist.par_id%TYPE,
      p_dist_no         IN  giuw_pol_dist.dist_no%TYPE,
      p_process         IN  VARCHAR2,
      p_alert          OUT  VARCHAR2 
    )
    IS
    BEGIN
       FOR binder_exist IN (SELECT 1
                              FROM giri_frps_ri a,
                                   giri_binder b,
                                   giri_distfrps c,
                                   giuw_pol_dist d
                             WHERE 1 = 1
                               AND a.fnl_binder_id = b.fnl_binder_id
                               AND a.line_cd = c.line_cd
                               AND a.frps_yy = c.frps_yy
                               AND a.frps_seq_no = c.frps_seq_no
                               AND c.dist_no = d.dist_no
                               AND d.par_id = p_par_id
                               AND d.dist_no = p_dist_no)
       LOOP
          IF p_process = 'P' OR p_process = 'S' THEN --if posting or saving
            p_alert := 'Cannot update distribution records with posted binder.';
          ELSIF p_process = 'R' THEN --if from creating/recreating item
            p_alert := 'Cannot create/recreate distribution records with posted binder.';
          END IF;
          EXIT;
       END LOOP;
    END check_posted_binder; 
    
    PROCEDURE limit_validation2 (
      p_par_id              gipi_parlist.par_id%TYPE,
      p_line_cd             gipi_polbasic.line_cd%TYPE,
      v_block         OUT   VARCHAR2,
      v_type_exceed   OUT   VARCHAR2,
      v_share_type          giis_dist_share.share_type%TYPE,
      v_eff_date            giuw_pol_dist.eff_date%TYPE,
      v_dist_spct           giuw_wpolicyds_dtl.dist_spct%TYPE,
      p_count         OUT   NUMBER
   )
   IS
      v_menu_line_cd   giis_line.menu_line_cd%TYPE    := '&$';
      v_retn_lim_amt   giis_block.retn_lim_amt%TYPE;
      v_trty_lim_amt   giis_block.trty_lim_amt%TYPE;
      v_block_id       giis_block.block_id%TYPE;
      tot_by_type      NUMBER;
      tot_by_policy    NUMBER;
      tot_by_par       NUMBER;
      v_totals         NUMBER;
      v_items          NUMBER;
      v_rates          NUMBER;
      v_count          NUMBER                         := 0;
   -- jhing 05.23.2012
   BEGIN
      SELECT NVL (menu_line_cd, '&$')
        INTO v_menu_line_cd
        FROM giis_line
       --WHERE line_cd = :b240.line_cd;
      WHERE  line_cd = p_line_cd;

      IF p_line_cd = giisp.v ('LINE_CODE_FI') OR v_menu_line_cd = 'FI'
      /* 'jhing 05.06.2012  'SU' replaced with 'FI'*/
      THEN
         FOR x IN (SELECT DISTINCT b.retn_lim_amt, b.trty_lim_amt,
                                   a.block_id,
                                   
/* a.item_no,  -- jhing 05.23.2012 added DISTINCT and commented out a.item_no */
                                      b.province
                                   || ' - '
                                   || b.city
                                   || ' - '
                                   || b.district_desc
                                   || ' - '
                                   || b.block_desc BLOCK
                              FROM gipi_wfireitm a, giis_block b
                             WHERE a.block_id = b.block_id
                               --AND a.par_id   = :b240.par_id
                               AND a.par_id = p_par_id)
         LOOP
            v_retn_lim_amt := x.retn_lim_amt;
            v_trty_lim_amt := x.trty_lim_amt;
            v_block_id := x.block_id;

            -- v_block    := x.BLOCK;  -- jhing 05.23.2012 commented out
            IF v_retn_lim_amt IS NOT NULL OR v_trty_lim_amt IS NOT NULL
            THEN
               -------------checking of share_type-------
--rose 08132009 transfer dis part in forms in order to display 2 alerts if both retention and treaty was exceeded
         /*FOR chk_type IN (SELECT d.share_type, SUM(ROUND(dist_spct, 14)) dist_spct, a.eff_date
                          FROM GIUW_POL_DIST a,GIUW_WPOLICYDS b,GIUW_WPOLICYDS_DTL c, GIIS_DIST_SHARE d
                WHERE a.dist_no   = b.dist_no
                AND a.dist_no     = c.dist_no
                AND b.dist_seq_no = c.dist_seq_no
                AND c.line_cd       = d.line_cd
                AND c.share_cd    = d.share_cd*/
                /*AND a.par_id     = :b240.par_id
                     AND a.dist_no     = :C080.dist_no
                     AND b.dist_seq_no = :C1306.dist_seq_no*/
                     /*AND a.par_id       = p_par_id
                AND a.dist_no       = p_dist_no
                     AND b.dist_seq_no = p_dist_seq_no
                GROUP BY d.share_type, a.eff_date)
         LOOP     */
         -----------totals of TSI by different items----------------
          --A.R.C. 08.15.2006
         -- to correct the computation of amount with foreign currency
         --SELECT SUM(tsi_amt)
               SELECT /* SUM(tsi_amt*currency_rt) -- jhing 06.05.2012 replaced with : */ SUM
                                                          (  c.dist_tsi
                                                           * NVL
                                                                (a.currency_rt,
                                                                 1
                                                                )
                                                          )
                 /*jhing 06.05.2012*/
               INTO    tot_by_type
                 FROM gipi_witem a,
                      gipi_wfireitm b
                                     /*jhing *05.06.2012  added tables*/
               ,
                      giuw_witemds_dtl c,
                      giuw_pol_dist d,
                      giis_dist_share e             /* end jhing 05.06.2012 */
                --WHERE a.par_id    = :b240.par_id
               WHERE  a.par_id = p_par_id
                  AND a.par_id = b.par_id
                  AND a.item_no = b.item_no
                  AND b.block_id = v_block_id
                  /*jhing 05.06.2012 added conditions*/
                  AND a.par_id = d.par_id
                  AND a.item_no = c.item_no
                  AND c.line_cd = e.line_cd
                  AND d.dist_no = c.dist_no
                  AND c.share_cd = e.share_cd
                  AND e.share_type = v_share_type;

               /* jhing 05.06.2012 end of added conditions*/

               -----------totals of selected policies----------------
               --issa@fpac12.06.2006; changed SUM(polbsc.tsi_amt) to SUM(itmdtl.dist_tsi)
               --to get correct amounts for comparison since amts shld be based on dist_tsi (like in block accumulation)
               SELECT SUM (itmdtl.dist_tsi * NVL (gpitem.currency_rt, 1)
                                                                        /* jhing 05.06.2012 added currency_rt */
                      )                                  --SUM(polbsc.tsi_amt)
                 INTO tot_by_policy
                 FROM gipi_polbasic polbsc,
                      giuw_pol_dist poldist,
                      gipi_item gpitem,
                      gipi_fireitem gpfitm,
                      giuw_itemds_dtl itmdtl,
                      giis_dist_share distshare
                WHERE polbsc.policy_id = poldist.policy_id
                  AND polbsc.policy_id = gpitem.policy_id
                  AND gpitem.policy_id = gpfitm.policy_id
                  AND gpitem.item_no = gpfitm.item_no
                  AND poldist.dist_no = itmdtl.dist_no
                  AND gpitem.item_no = itmdtl.item_no
                  AND itmdtl.line_cd = distshare.line_cd
                  AND itmdtl.share_cd = distshare.share_cd
                  AND distshare.share_type = v_share_type
                  AND gpfitm.block_id = v_block_id
                  AND TRUNC (polbsc.eff_date) <= TRUNC (v_eff_date)
                  AND TRUNC (polbsc.expiry_date) >= TRUNC (v_eff_date)
                  /*  jhing 05.06.2012 added condition */
                  AND polbsc.pol_flag NOT IN
                         ('4',
                          '5'  --,'X' --'X' commented out by aldren 05/13/2014
                             )
                  AND poldist.dist_flag IN ('2', '3')
                                                     /* end jhing 05.06.2012 added condition */
               ;

               -----------totals of selected pars----------------
               SELECT /* SUM(wpolbs.tsi_amt) -- jhing 05.06.2012 replaced with: */ SUM
                                                     (  witmdtl.dist_tsi
                                                      * NVL
                                                           (gpwitm.currency_rt,
                                                            1
                                                           )
                                                     )
                 INTO  tot_by_par
                 FROM gipi_wpolbas wpolbs,
                      giuw_pol_dist poldist,
                      gipi_witem gpwitm,
                      gipi_wfireitm gpwfitm,
                      giuw_witemds_dtl witmdtl,
                      giis_dist_share distshare,
                      gipi_parlist gprlist
                --gipi parlist added by aldren 03262014
               WHERE  wpolbs.par_id = poldist.par_id
                  AND wpolbs.par_id = gpwitm.par_id
                  AND gpwitm.par_id = gpwfitm.par_id
                  AND gpwitm.item_no = gpwfitm.item_no
                  AND poldist.dist_no = witmdtl.dist_no
                  AND gpwitm.item_no = witmdtl.item_no
                  AND witmdtl.line_cd = distshare.line_cd
                  AND witmdtl.share_cd = distshare.share_cd
                  AND distshare.share_type = v_share_type
                  AND gpwfitm.block_id = v_block_id
                  AND wpolbs.par_id <> p_par_id
                  AND TRUNC (wpolbs.eff_date) <= TRUNC (v_eff_date)
                  AND TRUNC (wpolbs.expiry_date) >= TRUNC (v_eff_date)
                  AND gprlist.par_id = wpolbs.par_id
                  --added by aldren 03262014
                  AND gprlist.par_status NOT IN (99, 98);

               --added by aldren 03262014.  To exclude cancelled and deleted par.;

               -- v_totals := (NVL(tot_by_type,0) + NVL(tot_by_policy,0) + NVL(tot_by_par,0)) * (v_dist_spct/100); -- jhing commented out and replaced with :
               v_totals :=
                  (  NVL (tot_by_type, 0)
                   + NVL (tot_by_policy, 0)
                   + NVL (tot_by_par, 0)
                  );                    -- jhing 05.06.2012 modified statement

               IF v_share_type = 1
               THEN
                  IF     v_retn_lim_amt < ROUND (v_totals, 2)
                     AND v_retn_lim_amt IS NOT NULL
                  THEN
                     v_type_exceed := 'NET';
                     -- jhing 05.23.2012
                     v_count := v_count + 1;

                     IF v_count = 1
                     THEN
                        v_block := x.BLOCK;
                     ELSE
                        v_block := 'VARIOUS';
                     END IF;
                  -- end hing 05.23.2012
                  END IF;
               ELSIF v_share_type = 2
               THEN
                  IF     v_trty_lim_amt < ROUND (v_totals, 2)
                     AND v_trty_lim_amt IS NOT NULL
                  THEN
                     v_type_exceed := 'TREATY';
                     -- jhing 05.23.2012
                     v_count := v_count + 1;

                     IF v_count = 1
                     THEN
                        v_block := x.BLOCK;
                     ELSE
                        v_block := 'VARIOUS';
                     END IF;
                  -- end jhing 05.23.2012
                  END IF;
               END IF;
            --END LOOP;
            END IF;
         END LOOP;
      END IF;
      
      p_count := v_count;
   END limit_validation2;  
   
    PROCEDURE ca_limit_validation2 (
       p_par_id              gipi_parlist.par_id%TYPE,
       p_line_cd             gipi_polbasic.line_cd%TYPE,
       v_loc           OUT   VARCHAR2,
       v_type_exceed   OUT   VARCHAR2,
       v_share_type          giis_dist_share.share_type%TYPE,
       v_eff_date            giuw_pol_dist.eff_date%TYPE,
       v_dist_spct           giuw_wpolicyds_dtl.dist_spct%TYPE,
       p_count         OUT   NUMBER
    )
    IS
       v_menu_line_cd   giis_line.menu_line_cd%TYPE          := '&$';
       v_retn_lim_amt   giis_ca_location.ret_limit%TYPE;
       v_trty_lim_amt   giis_ca_location.treaty_limit%TYPE;
       v_loc_cd         giis_ca_location.location_cd%TYPE;
       tot_by_type      NUMBER;
       tot_by_policy    NUMBER;
       tot_by_par       NUMBER;
       v_totals         NUMBER;
       v_items          NUMBER;
       v_rates          NUMBER;
       v_count          NUMBER                               := 0;
    --added by aldren
    BEGIN
       SELECT NVL (menu_line_cd, line_cd)
         INTO v_menu_line_cd
         FROM giis_line
        WHERE line_cd = p_line_cd;

       IF p_line_cd = giisp.v ('LINE_CODE_CA') OR v_menu_line_cd = 'CA'
       THEN
          FOR x IN
             (SELECT DISTINCT             --added 'DISTINCT' 05.26.14 apignas_jr.
                              b.ret_limit, b.treaty_limit, a.location_cd,
                              --a.item_no, --comment out. 05.26.14 apignas_jr.
                                 b.loc_addr1
                              || ' '
                              || b.loc_addr2
                              || ' '
                              || b.loc_addr3 loc_desc
                         FROM gipi_wcasualty_item a, giis_ca_location b
                        WHERE a.location_cd = b.location_cd
                          AND a.par_id = p_par_id)
          LOOP
             v_retn_lim_amt := x.ret_limit;
             v_trty_lim_amt := x.treaty_limit;
             v_loc_cd := x.location_cd;

             --v_loc := x.loc_desc;                       --commented out by aldren
             IF v_retn_lim_amt IS NOT NULL OR v_trty_lim_amt IS NOT NULL
             THEN
                SELECT
                       --SUM (a.tsi_amt * a.currency_rt) --commented out by edgar 05/27/2014
                       SUM (e.dist_tsi * a.currency_rt)--added by edgar 05/28/2014 for correct comparison of amounts
                INTO   tot_by_type
                  FROM gipi_witem a,
                       gipi_wcasualty_item b,
                       /*added tables edgar 05/28/2014*/
                       giuw_witemds_dtl e,
                       giuw_pol_dist f,
                       giis_dist_share g,
                       /*end of addition edgar 05/28/2014*/
                       gipi_wpolbas c,       -- analyn 08/13/10 added gipi_wpolbas
                       gipi_parlist d
                 WHERE a.par_id = p_par_id
                   AND a.par_id = b.par_id
                   AND a.item_no = b.item_no
                   AND b.location_cd = v_loc_cd
                   AND c.subline_cd = NVL (giisp.v ('CA_SUBLINE_PFL'), 'PFL')
                   -- analyn 08/13/10
                   AND a.par_id = c.par_id                      -- analyn 08/13/10
                   AND a.par_id = d.par_id
                   /*added conditions edgar 05/28/2014*/
                   AND a.par_id = f.par_id
                   AND a.item_no = e.item_no
                   AND e.line_cd = g.line_cd
                   AND f.dist_no = e.dist_no
                   AND e.share_cd = g.share_cd
                   AND g.share_type = v_share_type
                   /*end of addition edgar 05/28/2014*/
                   AND d.par_status NOT IN (98, 99);

                SELECT SUM (itmdtl.dist_tsi * gpitem.currency_rt)
                  -- edgar 03/26/2014 added currency_rt
                INTO   tot_by_policy
                  FROM gipi_polbasic polbsc,
                       giuw_pol_dist poldist,
                       gipi_item gpitem,
                       gipi_casualty_item gpfitm,
                       giuw_itemds_dtl itmdtl,
                       giis_dist_share distshare
                 WHERE polbsc.policy_id = poldist.policy_id
                   AND polbsc.policy_id = gpitem.policy_id
                   AND gpitem.policy_id = gpfitm.policy_id
                   AND gpitem.item_no = gpfitm.item_no
                   AND poldist.dist_no = itmdtl.dist_no
                   AND gpitem.item_no = itmdtl.item_no
                   AND itmdtl.line_cd = distshare.line_cd
                   AND itmdtl.share_cd = distshare.share_cd
                   AND distshare.share_type = v_share_type
                   AND gpfitm.location_cd = v_loc_cd
                   AND polbsc.subline_cd = NVL (giisp.v ('CA_SUBLINE_PFL'), 'PFL')
                   -- analyn 08/13/10
                   AND TRUNC (polbsc.eff_date) <= TRUNC (v_eff_date)
                   AND TRUNC (polbsc.expiry_date) >= TRUNC (v_eff_date)
                   AND polbsc.pol_flag NOT IN ('4', '5')       -- edgar 03/26/2014
                   AND poldist.dist_flag IN ('2', '3'); --added by aldren 05162014

                -----------totals of selected pars----------------
                SELECT --SUM (wpolbs.tsi_amt * gpwitm.currency_rt) -- edgar 03/26/2014 added currency_rt -- commented out edgar 05/28/2014
                       SUM (witmdtl.dist_tsi * gpwitm.currency_rt)-- edgar 05/28/2014 for correct comparison
                INTO   tot_by_par
                  FROM gipi_wpolbas wpolbs,
                       giuw_pol_dist poldist,
                       gipi_witem gpwitm,
                       gipi_wcasualty_item gpwfitm,
                       giuw_witemds_dtl witmdtl,
                       giis_dist_share distshare,
                       gipi_parlist gplist                     -- edgar 03/26/2014
                 WHERE wpolbs.par_id = poldist.par_id
                   AND wpolbs.par_id = gpwitm.par_id
                   AND gpwitm.par_id = gpwfitm.par_id
                   AND gpwitm.item_no = gpwfitm.item_no
                   AND poldist.dist_no = witmdtl.dist_no
                   AND gpwitm.item_no = witmdtl.item_no
                   AND witmdtl.line_cd = distshare.line_cd
                   AND witmdtl.share_cd = distshare.share_cd
                   AND distshare.share_type = v_share_type
                   AND gpwfitm.location_cd = v_loc_cd
                   AND wpolbs.par_id <> p_par_id
                   AND wpolbs.subline_cd = NVL (giisp.v ('CA_SUBLINE_PFL'), 'PFL')
                   -- analyn 08/13/10
                   AND TRUNC (wpolbs.eff_date) <= TRUNC (v_eff_date)
                   AND TRUNC (wpolbs.expiry_date) >= TRUNC (v_eff_date)
                   AND wpolbs.par_id = gplist.par_id           -- edgar 03/26/2014
                   AND gpwitm.par_id = gplist.par_id           -- edgar 03/26/2014
                   AND gplist.par_status NOT IN (98, 99);      -- edgar 03/26/2014

                v_totals :=
                     (  NVL (tot_by_type, 0)
                      + NVL (tot_by_policy, 0)
                      + NVL (tot_by_par, 0)
                     );
                   --* (v_dist_spct / 100); --commented out edgar 05/28/2014

                IF v_share_type = 1
                THEN
                   IF     v_retn_lim_amt < ROUND (v_totals, 2)
                      AND v_retn_lim_amt IS NOT NULL
                   THEN
                      v_type_exceed := 'NET';
                      --added by aldren 05232014--
                      v_count := v_count + 1;

                      IF v_count = 1
                      THEN
                         v_loc := x.loc_desc;
                      ELSE
                         v_loc := 'VARIOUS';
                      END IF;
                   --end by aldren 05232014--
                   END IF;
                ELSIF v_share_type = 2
                THEN
                   IF     v_trty_lim_amt < ROUND (v_totals, 2)
                      AND v_trty_lim_amt IS NOT NULL
                   THEN
                      v_type_exceed := 'TREATY';
                      --added by aldren 05232014--
                      v_count := v_count + 1;

                      IF v_count = 1
                      THEN
                         v_loc := x.loc_desc;
                      ELSE
                         v_loc := 'VARIOUS';
                      END IF;
                   --end by aldren 05232014--
                   END IF;
                END IF;
             --END LOOP;
             END IF;
          END LOOP;
       END IF;
       
       p_count := v_count;
    END ca_limit_validation2;
    
    FUNCTION is_peril_group_share_diff (p_dist_no NUMBER)
       RETURN VARCHAR2
    IS
       v_is_diff   VARCHAR2 (1) := 'N';
       v_post_flag VARCHAR2 (1);
    BEGIN
       SELECT DISTINCT post_flag
         INTO v_post_flag
         FROM giuw_pol_dist
        WHERE dist_no = p_dist_no;   
    
       FOR i IN (SELECT dist_no, dist_seq_no, share_cd, dist_spct, dist_spct1
                   FROM giuw_wperilds_dtl
                  WHERE dist_no = p_dist_no)
       LOOP
          FOR j IN (SELECT dist_spct, dist_spct1
                      FROM giuw_wpolicyds_dtl
                     WHERE dist_no = i.dist_no
                       AND dist_seq_no = i.dist_seq_no
                       AND share_cd = i.share_cd)
          LOOP
             IF (i.dist_spct <> j.dist_spct OR i.dist_spct1 <> j.dist_spct1)
             AND v_post_flag = 'O'
             THEN
                v_is_diff := 'Y';
                EXIT;
             END IF;
          END LOOP;
       END LOOP;
       
       RETURN v_is_diff;
    END;
    
   PROCEDURE delete_binder_working_tables (p_dist_no giuw_pol_dist.dist_no%TYPE)
   IS
      v_dist_no   giuw_pol_dist.dist_no%TYPE;
   BEGIN
      v_dist_no := p_dist_no;

      FOR c1 IN (SELECT line_cd, frps_yy, frps_seq_no --added line_cd edgar12/15/2014
                   FROM giri_wdistfrps
                  WHERE dist_no = v_dist_no)
      LOOP
         FOR c2 IN (SELECT pre_binder_id
                      FROM giri_wfrps_ri
                     WHERE frps_yy = c1.frps_yy
                       AND frps_seq_no = c1.frps_seq_no
                       AND line_cd = c1.line_cd) --added line_cd edgar12/15/2014                     
         LOOP
            DELETE      giri_wbinder_peril
                  WHERE pre_binder_id = c2.pre_binder_id;

            DELETE      giri_wbinder
                  WHERE pre_binder_id = c2.pre_binder_id;
         END LOOP;

         DELETE      giri_wfrperil
               WHERE frps_yy = c1.frps_yy AND frps_seq_no = c1.frps_seq_no AND line_cd = c1.line_cd; --added line_cd edgar12/15/2014

         DELETE      giri_wfrps_ri
               WHERE frps_yy = c1.frps_yy AND frps_seq_no = c1.frps_seq_no AND line_cd = c1.line_cd; --added line_cd edgar12/15/2014
         --added by edgar 05132014 base on GIUWS004 modifications by aldren--
         DELETE GIRI_WFRPS_PERIL_GRP
          WHERE frps_yy     = c1.frps_yy AND frps_seq_no = c1.frps_seq_no AND line_cd = c1.line_cd; --added line_cd edgar12/15/2014
         --end by edgar 05132014--
      END LOOP;
   END delete_binder_working_tables;    
   


    PROCEDURE delete_missing_shares (p_dist_no giuw_pol_dist.dist_no%TYPE)
    IS
       v_dist_no   giuw_pol_dist.dist_no%TYPE;
    BEGIN
       v_dist_no := p_dist_no;

       DELETE FROM giuw_witemperilds_dtl a
             WHERE dist_no = v_dist_no
               AND share_cd NOT IN (
                      SELECT share_cd
                        FROM giuw_wperilds_dtl b
                       WHERE b.dist_no = a.dist_no
                         AND b.dist_seq_no = a.dist_seq_no
                         AND b.peril_cd = a.peril_cd);

       DELETE FROM giuw_witemds_dtl a
             WHERE dist_no = v_dist_no
               AND share_cd NOT IN (
                      SELECT share_cd
                        FROM giuw_witemperilds_dtl b
                       WHERE b.dist_no = a.dist_no
                         AND b.dist_seq_no = a.dist_seq_no
                         AND b.item_no = a.item_no);

       DELETE FROM giuw_wpolicyds_dtl a
             WHERE dist_no = v_dist_no
               AND share_cd NOT IN (
                      SELECT share_cd
                        FROM giuw_witemperilds_dtl b
                       WHERE b.dist_no = a.dist_no
                         AND b.dist_seq_no = a.dist_seq_no);
    END delete_missing_shares; 
    
    PROCEDURE pre_val_neg_dist (
        p_policy_id gipi_polbasic.policy_id%TYPE,
        p_dist_no   giuw_pol_dist.dist_no%TYPE
    )
    IS
    BEGIN
       FOR i IN (SELECT dist_flag
                   FROM giuw_pol_dist
                  WHERE dist_no = p_dist_no)
       LOOP
          IF i.dist_flag != '3' THEN
             raise_application_error(-20001,'Geniisys Exception#E#The record is no longer tagged as distributed. You can only negate distributed record. Negation will be cancelled.');
             EXIT;
          END IF;
       END LOOP;
       
       FOR i IN (SELECT a.master_bndr_id, a.pack_binder_id
                   FROM giri_frps_ri a, giri_binder b
                  WHERE a.fnl_binder_id = b.fnl_binder_id
                    AND b.policy_id = p_policy_id
                    AND (a.master_bndr_id IS NOT NULL OR
                         a.pack_binder_id IS NOT NULL)
                    AND b.reverse_date IS NULL)
       LOOP
          IF i.pack_binder_id IS NOT NULL THEN
             raise_application_error(-20001,'Geniisys Exception#E#Cannot negate distribution with binder(s) included in Package binder(s). Please reverse package binder(s) before proceeding with the negation.');
          ELSE
             raise_application_error(-20001,'Geniisys Exception#E#Cannot negate distribution with binder(s) included in grouped binders. Please un-grouped the grouped binders before proceeding with the negation.');
          END IF;
          
          EXIT;
       END LOOP;
       
       FOR i IN (SELECT 1
                   FROM giuw_pol_dist a, giuw_distrel b
                  WHERE a.old_dist_no IS NOT NULL
                    AND b.dist_no_old = a.old_dist_no
                    AND a.dist_no != b.dist_no_new
                    AND a.dist_no = p_dist_no)
       LOOP
          raise_application_error(-20001,'Geniisys Exception#E#Negation of the earned portion of the redistributed distribution record is not allowed.');
          EXIT;
       END LOOP;
    END;

    PROCEDURE ADJUST_DIST_TABLES_GIUTS021 (
        p_dist_no       IN  giuw_pol_dist.dist_no%TYPE,
        p_temp_dist_no  IN  giuw_pol_dist.dist_no%TYPE,
        p_policy_id     IN  giuw_pol_dist.policy_id%TYPE) 
    IS
        v_takeup 		gipi_polbasic.takeup_term%TYPE;
        v_onerisk		VARCHAR2(1):= 'Y';
        v_post_flag     giuw_pol_dist.post_flag%TYPE;
    BEGIN
        /*Created by		:edgar
        **Date created		:09/22/2014
        **Description		:For adjustment of distribution tables of earned and unearned portion.
        */    
      /*for earned*/
      adjust_ds_tables.adjust_dist_tables(p_dist_no);
      /*for unearned*/
      adjust_ds_tables.adjust_dist_tables(p_temp_dist_no);
      
      SELECT NVL(takeup_term,'ST')
        INTO v_takeup
        FROM gipi_polbasic
       WHERE policy_id = p_policy_id;
      
     
      FOR poldist IN (SELECT post_flag
                        FROM giuw_pol_dist
                       WHERE policy_id = p_policy_id)
      LOOP
        v_post_flag := poldist.post_flag;
      END LOOP;
      
      
      IF v_takeup = 'ST' THEN
          /*for earned*/
          IF adjust_ds_tables.validate_dist_tables(p_dist_no) THEN
                --msg_alert('Error is encountered in creating distribution records. Please contact CPI.','I',TRUE);
                raise_application_error(-20001,'Geniisys Exception#E#Error is encountered in creating distribution records. Please contact CPI.');
          END IF;
          /*for unearned*/
          IF adjust_ds_tables.validate_dist_tables(p_temp_dist_no) THEN
                --msg_alert('Error is encountered in creating distribution records. Please contact CPI.','I',TRUE);
                raise_application_error(-20001,'Geniisys Exception#E#Error is encountered in creating distribution records. Please contact CPI.');
          END IF;
      END IF;
      
      IF v_post_flag = 'O' THEN
          /*for earned*/
          FOR i IN (SELECT 1
                       FROM giuw_wperilds_dtl a
                      WHERE dist_no = p_dist_no
                        AND EXISTS (
                               SELECT 1
                                 FROM giuw_wpolicyds_dtl b
                                WHERE b.dist_no = a.dist_no
                                  AND b.share_cd = a.share_cd
                                  AND b.dist_seq_no = a.dist_seq_no
                                  AND (b.dist_spct <> a.dist_spct
                                        OR b.dist_spct1 <> a.dist_spct1)))
          LOOP
                v_onerisk := 'N';
                adjust_distribution_peril_pkg.ADJUST_DISTRIBUTION(p_dist_no);
                EXIT;
          END LOOP;
           /*for unearned*/
          FOR i IN (SELECT 1
                       FROM giuw_wperilds_dtl a
                      WHERE dist_no = p_temp_dist_no
                        AND EXISTS (
                               SELECT 1
                                 FROM giuw_wpolicyds_dtl b
                                WHERE b.dist_no = a.dist_no
                                  AND b.share_cd = a.share_cd
                                  AND b.dist_seq_no = a.dist_seq_no
                                  AND (b.dist_spct <> a.dist_spct
                                        OR b.dist_spct1 <> a.dist_spct1)))
          LOOP
                v_onerisk := 'N';
                adjust_distribution_peril_pkg.ADJUST_DISTRIBUTION(p_temp_dist_no);
                EXIT;
          END LOOP;	   
          IF v_onerisk = 'Y' THEN
                 /*for earned*/
                 adjust_wdist_one_risk.adjust_witemperilds_dtl (p_dist_no);
                   adjust_wdist_one_risk.adjust_wpolicyds_dtl (p_dist_no);
                   adjust_wdist_one_risk.adjust_witemds_dtl (p_dist_no);
                   adjust_wdist_one_risk.adjust_wperilds_dtl (p_dist_no);
                   adjust_wdist_one_risk.adjust_tot_spct_to_100 (p_dist_no);
                   adjust_wdist_one_risk.adjust_share_wdistfrps(p_dist_no);
                   /*for unearned*/
                 adjust_wdist_one_risk.adjust_witemperilds_dtl (p_temp_dist_no);
                   adjust_wdist_one_risk.adjust_wpolicyds_dtl (p_temp_dist_no);
                   adjust_wdist_one_risk.adjust_witemds_dtl (p_temp_dist_no);
                   adjust_wdist_one_risk.adjust_wperilds_dtl (p_temp_dist_no);
                   adjust_wdist_one_risk.adjust_tot_spct_to_100 (p_temp_dist_no);
                   adjust_wdist_one_risk.adjust_share_wdistfrps(p_temp_dist_no);			   
          END IF;
      ELSIF v_post_flag = 'P' THEN
                    /*for earned*/
                    adjust_distribution_peril_pkg.ADJUST_DISTRIBUTION(p_dist_no);
                    /*for unearned*/
                    adjust_distribution_peril_pkg.ADJUST_DISTRIBUTION(p_temp_dist_no);
      END IF;
    END ADJUST_DIST_TABLES_GIUTS021;       
    
    PROCEDURE update_gpd_giuts021 (
       p_policy_id     IN   gipi_polbasic.policy_id%TYPE,
       p_neg_dist_no   IN   giuw_pol_dist.dist_no%TYPE,
       p_dist_no       IN   giuw_pol_dist.dist_no%TYPE,
       p_temp_distno   IN   giuw_pol_dist.dist_no%TYPE
    )
    IS
       v_prem_amt        giuw_pol_dist.prem_amt%TYPE;
       v_takeup          gipi_polbasic.takeup_term%TYPE;
       v_item_grp        gipi_item.item_grp%TYPE;
       v_takeup_seq_no   gipi_invoice.takeup_seq_no%TYPE;
    BEGIN
       /*Created by     : Edgar
       **Date Created   : 09/26/2014
       **Description    : To correct amounts stored in giuw_pol_dist base on currency rate
       */
       BEGIN
          FOR i IN (SELECT   SUM (ROUND ((NVL (c.tsi_amt, 0) * a.currency_rt), 2)
                                 ) tsi_amt,
                             SUM (ROUND ((NVL (c.prem_amt, 0) * a.currency_rt), 2)
                                 ) prem_amt,
                             SUM (ROUND ((NVL (c.ann_tsi_amt, 0) * a.currency_rt),
                                         2
                                        )
                                 ) ann_tsi_amt,
                             b.dist_no
                        FROM gipi_invoice a, giuw_pol_dist b, giuw_wpolicyds c
                       WHERE a.policy_id = b.policy_id
                         AND b.dist_no = c.dist_no
                         AND a.item_grp = c.item_grp
                         AND b.dist_no IN (p_dist_no, p_temp_distno)
                    GROUP BY b.dist_no)
          LOOP
             UPDATE giuw_pol_dist
                SET tsi_amt = i.tsi_amt,
                    prem_amt = i.prem_amt,
                    ann_tsi_amt = i.ann_tsi_amt
              WHERE dist_no = i.dist_no;
          END LOOP;
       END;
    END update_gpd_giuts021;    
    
    PROCEDURE validate_takeup_giuts021 (p_policy_id IN gipi_polbasic.policy_id%TYPE)
    IS
       v_takeup   gipi_polbasic.takeup_term%TYPE;
    BEGIN
       /*Created by     : Edgar
       **Date Created   : 09/26/2014
       **Description    : Validates takeuup term, restrict if long term is being redistributed
       */
       BEGIN
          SELECT NVL (takeup_term, 'ST')
            INTO v_takeup
            FROM gipi_polbasic
           WHERE policy_id = p_policy_id;

          IF v_takeup <> 'ST'
          THEN
             raise_application_error
                (-20001,
                 'Geniisys Exception#E#Cannot redistribute long term policy/endorsement.'
                );
          END IF;
          
          
           FOR i IN (SELECT a.master_bndr_id, a.pack_binder_id
                       FROM giri_frps_ri a, giri_binder b
                      WHERE a.fnl_binder_id = b.fnl_binder_id
                        AND b.policy_id = p_policy_id
                        AND (a.master_bndr_id IS NOT NULL OR
                             a.pack_binder_id IS NOT NULL)
                        AND b.reverse_date IS NULL)
           LOOP
              IF i.pack_binder_id IS NOT NULL THEN
                 raise_application_error(-20001,'Geniisys Exception#E#This record is included in the grouped package binder. Please reverse package binder(s) before redistributing the record.');
              ELSE
                 raise_application_error(-20001,'Geniisys Exception#E#Please ungroup the binders before redistributing the record.');
              END IF;
              
              EXIT;
           END LOOP;          
       EXCEPTION
          WHEN NO_DATA_FOUND
          THEN
             v_takeup := 'ST';
       END;
    END validate_takeup_giuts021;
    
    PROCEDURE delete_bond_dist (p_par_id giuw_pol_dist.par_id%TYPE)
    IS
       v_dist_no giuw_pol_dist.dist_no%TYPE;
    BEGIN
       BEGIN
          SELECT dist_no
            INTO v_dist_no
            FROM giuw_pol_dist
           WHERE par_id = p_par_id
             AND ROWNUM = 1;
        
          del_giuw_pol_dist(v_dist_no);
                 
       EXCEPTION WHEN NO_DATA_FOUND THEN
          NULL;    
       END;
    END delete_bond_dist;     
    /* Added by Robert SR 5053 11.11.15
      Purpose : Validate the data stored in GIUW_PERILDS_DTL ( Peril Distribution)
     */
    PROCEDURE validate_dist_wperildtl (
       p_dist_no         giuw_pol_dist.dist_no%TYPE,
       p_message   OUT   VARCHAR2
    )
    AS
       v_tol_discrep   giuw_pol_dist.tsi_amt%TYPE   := 2;
    BEGIN
       FOR i IN (SELECT a.dist_no, a.dist_seq_no, a.peril_cd, c.trty_name,
                        c.share_cd, b.dist_spct, b.dist_tsi, b.dist_prem,
                        ROUND (  NVL (a.tsi_amt, 0)
                               * ROUND (NVL (b.dist_spct, 0), 9)
                               / 100,
                               2
                              ) computed_tsi,
                        ROUND (  NVL (a.prem_amt, 0)
                               * ROUND (NVL (b.dist_spct1, 0), 9)
                               / 100,
                               2
                              ) computed_prem,
                          NVL (b.dist_tsi, 0)
                        - ROUND (  NVL (a.tsi_amt, 0)
                                 * ROUND (NVL (b.dist_spct, 0), 9)
                                 / 100,
                                 2
                                ) diff_tsi,
                          NVL (b.dist_prem, 0)
                        - ROUND (  NVL (a.prem_amt, 0)
                                 * ROUND (NVL (b.dist_spct1, 0), 9)
                                 / 100,
                                 2
                                ) diff_prem
                   FROM giuw_wperilds a, giuw_wperilds_dtl b, giis_dist_share c
                  WHERE 1 = 1
                    AND a.dist_no = p_dist_no
                    AND a.dist_no = b.dist_no
                    AND a.dist_seq_no = b.dist_seq_no
                    AND a.peril_cd = b.peril_cd
                    AND b.line_cd = c.line_cd
                    AND b.share_cd = c.share_cd
                    AND (   (ABS (  NVL (b.dist_tsi, 0)
                                  - ROUND (  NVL (a.tsi_amt, 0)
                                           * ROUND (NVL (b.dist_spct, 0), 9)
                                           / 100,
                                           2
                                          )
                                 ) > v_tol_discrep
                            )
                         OR (ABS (  NVL (b.dist_prem, 0)
                                  - ROUND (  NVL (a.prem_amt, 0)
                                           * ROUND (NVL (b.dist_spct1, 0), 9)
                                           / 100,
                                           2
                                          )
                                 ) > v_tol_discrep
                            )
                        ))
       LOOP
          p_message :=  'Geniisys Exception#I#There was an error encountered in distribution records, to correct this error please recreate using Set-Up Groups For Distribution.';
       END LOOP;

    END validate_dist_wperildtl;
    
    PROCEDURE validate_wrking_tbls_amts(
        p_dist_no           giuw_pol_dist.DIST_NO%type,
        p_message   OUT     VARCHAR2
    )
    AS
        v_msg1      VARCHAR2(100);
        v_msg2      VARCHAR2(3);
        v_msg3      BOOLEAN;
        v_message   VARCHAR2(500) := 'Geniisys Exception#I#There was an error encountered in distribution records, ' ||
                                     ' to correct this error please recreate using Set-Up Groups For Distribution.';
    BEGIN
        
        cmpare_amts_wrking_tbls.WPERILDS_VS_WPERILDS_DTL(p_dist_no,   v_msg1,   v_msg2,   v_msg3);
        IF v_msg1 IS NOT NULL AND   v_msg2 IS NOT NULL THEN
            p_message := v_message;
        END IF;
        cmpare_amts_wrking_tbls.WITMPRILDS_VS_WITMPRILDS_DTL(p_dist_no,   v_msg1,   v_msg2,   v_msg3);
        IF v_msg1 IS NOT NULL AND   v_msg2 IS NOT NULL THEN
            p_message := v_message;
        END IF;                                      
        cmpare_amts_wrking_tbls.WITMPRILDS_DTL_VS_WPRILDS_DTL(p_dist_no,   v_msg1,   v_msg2,   v_msg3);
        IF v_msg1 IS NOT NULL AND   v_msg2 IS NOT NULL THEN
            p_message := v_message;
        END IF;  
        cmpare_amts_wrking_tbls.WITEMDS_VS_WITEMDS_DTL(p_dist_no,   v_msg1,   v_msg2,   v_msg3);
        IF v_msg1 IS NOT NULL AND   v_msg2 IS NOT NULL THEN
            p_message := v_message;
        END IF;   
        cmpare_amts_wrking_tbls.WITMPRILDS_DTL_VS_WITEMDS_DTL(p_dist_no,   v_msg1,   v_msg2,   v_msg3);
        IF v_msg1 IS NOT NULL AND   v_msg2 IS NOT NULL THEN
            p_message := v_message;
        END IF;   
        cmpare_amts_wrking_tbls.WPOLICYDS_VS_WPOLICYDS_DTL(p_dist_no,   v_msg1,   v_msg2,   v_msg3);
        IF v_msg1 IS NOT NULL AND   v_msg2 IS NOT NULL THEN
            p_message := v_message;
        END IF;  
        cmpare_amts_wrking_tbls.WPOLCYDS_DTL_VS_WPERILDS_DTL(p_dist_no,   v_msg1,   v_msg2,   v_msg3);
        IF v_msg1 IS NOT NULL AND   v_msg2 IS NOT NULL THEN
            p_message := v_message;
        END IF;   
        cmpare_amts_wrking_tbls.WITMPRLDS_DTL_VS_WPLICYDS_DTL(p_dist_no,   v_msg1,   v_msg2,   v_msg3);
        IF v_msg1 IS NOT NULL AND   v_msg2 IS NOT NULL THEN
            p_message := v_message;
        END IF;   
        cmpare_amts_wrking_tbls.WPOLICYDS_DTL_VS_WITEMDS_DTL(p_dist_no,   v_msg1,   v_msg2,   v_msg3);
        IF v_msg1 IS NOT NULL AND   v_msg2 IS NOT NULL THEN
            p_message := v_message;
        END IF;  
        
    END validate_wrking_tbls_amts; 
    
    /** ==================================================================================================================
    **  Created   by Jhing 04.06.2016 
    **  Purpose: To populate giuw_witemperilds_dtl, giuw_wperilds_dtl and giuw_witemds_dtl after default distribution has
    **           been created from default distribution program flow/logic for ONE RISK.Instead of reusing existing procedure  
    **           from other packages, created a new one since in setup dist, we will now ensure dist_spct1 has value. 
    ** ==================================================================================================================*/ 
       
    PROCEDURE populate_oth_tbls_one_risk (
      p_dist_no         IN  giuw_pol_dist.dist_no%TYPE 
    )
    IS
      v_dist_no         giuw_pol_dist.dist_no%TYPE;
      v_dist_tsi        giuw_witemds_dtl.dist_tsi%TYPE;
      v_dist_prem       giuw_witemds_dtl.dist_prem%TYPE;
      v_ann_dist_tsi    giuw_witemds_dtl.ann_dist_tsi%TYPE;
      v_dist_tsi1       giuw_witemperilds_dtl.dist_tsi%TYPE;
      v_dist_prem1      giuw_witemperilds_dtl.dist_prem%TYPE;
      v_ann_dist_tsi1   giuw_witemperilds_dtl.ann_dist_tsi%TYPE;
      v_dist_tsi2       giuw_wperilds_dtl.dist_tsi%TYPE;
      v_dist_prem2      giuw_wperilds_dtl.dist_prem%TYPE;
      v_ann_dist_tsi2   giuw_wperilds_dtl.ann_dist_tsi%TYPE;    
    BEGIN
      v_dist_no := p_dist_no;

      /* Delete tables in preparation
      ** for data insertion. */
      DELETE      giuw_wperilds_dtl
            WHERE dist_no = v_dist_no;

      DELETE      giuw_witemperilds_dtl
            WHERE dist_no = v_dist_no;

      DELETE      giuw_witemds_dtl
            WHERE dist_no = v_dist_no;

      /* Get the distribution share percentage for each record
      ** in table GIUW_WPOLICYDS_DTL. */
      FOR c1 IN (SELECT dist_seq_no, line_cd, share_cd, dist_spct,
                        ann_dist_spct, dist_grp,
                        dist_spct1                --Added by tonio 06/08/2011
                   FROM giuw_wpolicyds_dtl
                  WHERE dist_no = v_dist_no)
      LOOP
         /* Get the amounts from table GIUW_WITEMDS and multiply
         ** it to the share percentage driven from table
         ** GIUW_WPOLICYDS_DTL to arrive at the correct breakdown
         ** of the amounts for table GIUW_WITEMDS_DTL. */
         FOR c2 IN (SELECT tsi_amt, prem_amt, ann_tsi_amt, item_no
                      FROM giuw_witemds
                     WHERE dist_seq_no = c1.dist_seq_no
                       AND dist_no = v_dist_no)
         LOOP
            v_dist_tsi := ROUND (c1.dist_spct / 100 * c2.tsi_amt, 2);
            v_dist_prem := ROUND (NVL(c1.dist_spct1 , c1.dist_spct)/ 100 * c2.prem_amt, 2);
            v_ann_dist_tsi :=
                           ROUND (c1.ann_dist_spct / 100 * c2.ann_tsi_amt, 2);

            INSERT INTO giuw_witemds_dtl
                        (dist_no, dist_seq_no, item_no, line_cd,
                         share_cd, dist_spct, dist_spct1,
                         dist_tsi, dist_prem, ann_dist_spct,
                         ann_dist_tsi, dist_grp
                        )
                 VALUES (v_dist_no, c1.dist_seq_no, c2.item_no, c1.line_cd,
                         c1.share_cd, c1.dist_spct, NVL(c1.dist_spct1, c1.dist_spct ) ,
                         v_dist_tsi, v_dist_prem, c1.ann_dist_spct,
                         v_ann_dist_tsi, c1.dist_grp
                        );
         END LOOP;

         /* Get the amounts from table GIUW_WITEMPERILDS and multiply
         ** it to the share percentage driven from table
         ** GIUW_WPOLICYDS_DTL to arrive at the correct breakdown
         ** of the amounts for table GIUW_WITEMPERILDS_DTL. */
         FOR c3 IN (SELECT tsi_amt, prem_amt, ann_tsi_amt, item_no, line_cd,
                           peril_cd
                      FROM giuw_witemperilds
                     WHERE line_cd = c1.line_cd
                       AND dist_seq_no = c1.dist_seq_no
                       AND dist_no = v_dist_no)
         LOOP
            v_dist_tsi1 := ROUND (c1.dist_spct / 100 * c3.tsi_amt, 2);
            v_dist_prem1 := ROUND (NVL(c1.dist_spct1, c1.dist_spct) / 100 * c3.prem_amt, 2);
            v_ann_dist_tsi1 :=
                           ROUND (c1.ann_dist_spct / 100 * c3.ann_tsi_amt, 2);

            INSERT INTO giuw_witemperilds_dtl
                        (dist_no, dist_seq_no, item_no, line_cd,
                         share_cd, dist_spct, dist_spct1,
                         dist_tsi, dist_prem, ann_dist_spct,
                         ann_dist_tsi, dist_grp, peril_cd
                        )
                 VALUES (v_dist_no, c1.dist_seq_no, c3.item_no, c3.line_cd,
                         c1.share_cd, c1.dist_spct, NVL(c1.dist_spct1, c1.dist_spct) ,
                         v_dist_tsi1, v_dist_prem1, c1.ann_dist_spct,
                         v_ann_dist_tsi1, c1.dist_grp, c3.peril_cd
                        );
         END LOOP;

         /* Get the amounts from table GIUW_WPERILDS and multiply
         ** it to the share percentage driven from table
         ** GIUW_WPOLICYDS_DTL to arrive at the correct breakdown
         ** of the amounts for table GIUW_WPERILDS_DTL. */
         FOR c4 IN (SELECT tsi_amt, prem_amt, ann_tsi_amt, line_cd, peril_cd
                      FROM giuw_wperilds
                     WHERE line_cd = c1.line_cd
                       AND dist_seq_no = c1.dist_seq_no
                       AND dist_no = v_dist_no)
         LOOP
            v_dist_tsi2 := ROUND (c1.dist_spct / 100 * c4.tsi_amt, 2);
            v_dist_prem2 := ROUND (NVL(c1.dist_spct1,c1.dist_spct) / 100 * c4.prem_amt, 2); 
            v_ann_dist_tsi2 :=
                           ROUND (c1.ann_dist_spct / 100 * c4.ann_tsi_amt, 2);

            INSERT INTO giuw_wperilds_dtl
                        (dist_no, dist_seq_no, peril_cd, line_cd,
                         share_cd, dist_spct, dist_spct1,
                         dist_tsi, dist_prem, ann_dist_spct,
                         ann_dist_tsi, dist_grp
                        )
                 VALUES (v_dist_no, c1.dist_seq_no, c4.peril_cd, c1.line_cd,
                         c1.share_cd, c1.dist_spct, NVL(c1.dist_spct1 ,c1.dist_spct ) ,
                         v_dist_tsi2, v_dist_prem2, c1.ann_dist_spct,
                         v_ann_dist_tsi2, c1.dist_grp
                        );
         END LOOP;
      END LOOP;    
    
    END populate_oth_tbls_one_risk;  
    
    /* ===================================================================================================================
    **  Created   by Jhing 05.06.2016
    **  Purpose: To populate giuw_witemperilds_dtl, giuw_wpolicyds_dtl and giuw_witemds_dtl after default distribution has
    **           been created from default distribution program flow/logic for PERIL DIST. Instead of reusing existing procedure  
    **           from other packages, created a new one since in setup dist, we will now ensure dist_spct1 has value. 
    ** ==================================================================================================================*/     
    PROCEDURE populate_oth_tbls_peril_dist (
      p_dist_no         IN  giuw_pol_dist.dist_no%TYPE 
    )
    IS
        v_dist_tsi giuw_wpolicyds_dtl.dist_tsi%TYPE;
        v_dist_prem giuw_wpolicyds_dtl.dist_prem%TYPE;
        v_ann_dist_tsi  giuw_wpolicyds_dtl.ann_dist_tsi%TYPE;
        v_ann_dist_spct giuw_wpolicyds_dtl.ann_dist_spct%TYPE;
        v_dist_spct     giuw_wpolicyds_dtl.dist_spct%TYPE;
        v_dist_spct1    giuw_wpolicyds_dtl.dist_spct1%TYPE;
        v_spct1_exists  VARCHAR2(1);
    BEGIN
    
    /** =====================================================================================================================   **
    **         POPULATE THE GIUW_WITEMPERILDS_DTL BASED FROM GIUW_WPERILDS_DTL                                                  **
    **  =====================================================================================================================   */
      DELETE giuw_witemperilds_dtl 
       WHERE dist_no = p_dist_no;
       
       
      FOR c1 IN (SELECT dist_spct , ann_dist_spct , dist_grp    ,
                        share_cd  , line_cd       , dist_seq_no ,
                        peril_cd  , dist_spct1
                   FROM giuw_wperilds_dtl
                  WHERE dist_no = p_dist_no)
      LOOP
        FOR c2 IN (SELECT tsi_amt , prem_amt    , ann_tsi_amt ,
                          dist_no , dist_seq_no , item_no     ,
                          line_cd , peril_cd
                     FROM giuw_witemperilds
                    WHERE peril_cd    = c1.peril_cd
                      AND line_cd     = c1.line_cd
                      AND dist_seq_no = c1.dist_seq_no
                      AND dist_no     = p_dist_no)
        LOOP

          /* Multiply the percentage values of table GIUW_WPERILDS_DTL
          ** with the values of columns belonging to table GIUW_WITEMPERILDS,
          ** to arrive at the correct break down of values in table
          ** GIUW_WITEMPERILDS_DTL. */
          IF c2.tsi_amt = 0 THEN
             v_dist_tsi := 0;
          ELSE   
             v_dist_tsi     := ROUND(c1.dist_spct/100     * c2.tsi_amt, 2);
          END IF;
          IF c2.prem_amt = 0 THEN
             v_dist_prem := 0;
          ELSE   
             v_dist_prem    := ROUND(NVL(c1.dist_spct1, c1.dist_spct)/100     * c2.prem_amt, 2);
          END IF;   
          IF c2.ann_tsi_amt = 0 THEN
             v_ann_dist_tsi := 0;
          ELSE       
             v_ann_dist_tsi := ROUND(c1.ann_dist_spct/100 * c2.ann_tsi_amt, 2);
          END IF;   

          INSERT INTO  giuw_witemperilds_dtl
                      (dist_no          , dist_seq_no    , item_no          ,
                       line_cd          , peril_cd       , share_cd         ,
                       dist_spct        , dist_tsi       , dist_prem        ,
                       ann_dist_spct    , ann_dist_tsi   , dist_grp         ,
                       dist_spct1)
               VALUES (c2.dist_no       , c2.dist_seq_no , c2.item_no       ,
                       c2.line_cd       , c2.peril_cd    , c1.share_cd      ,
                       c1.dist_spct     , v_dist_tsi     , v_dist_prem      ,
                       c1.ann_dist_spct , v_ann_dist_tsi , c1.dist_grp      ,
                       NVL(c1.dist_spct1, c1.dist_spct ) );
        END LOOP;
      END LOOP;

   /** =====================================================================================================================   **
    **         POPULATE THE GIUW_WITEMDS_DTL BASED FROM GIUW_WITEMPERILDS_DTL                                                  **
    **  =====================================================================================================================   */
    
      DELETE giuw_witemds_dtl 
      WHERE dist_no = p_dist_no;
     
      FOR c1 IN (  SELECT dist_seq_no dist_seq_no  ,
                          line_cd     line_cd      ,
                          item_no     item_no      ,
                          share_cd    share_cd     ,
                          dist_grp    dist_grp
                     FROM giuw_witemperilds_dtl
                    WHERE dist_no = p_dist_no
                 GROUP BY dist_seq_no, item_no, line_cd, share_cd, dist_grp)
      LOOP
        FOR c2 IN (  SELECT SUM(DECODE(A170.peril_type, 'B', 
                                       a.dist_tsi, 0))        dist_tsi     ,
                            SUM(a.dist_prem)                  dist_prem    ,
                            SUM(DECODE(A170.peril_type, 'B',
                                       a.ann_dist_tsi, 0))    ann_dist_tsi
                       FROM giuw_witemperilds_dtl a, giis_peril A170
                      WHERE A170.peril_cd   = a.peril_cd
                        AND A170.line_cd    = a.line_cd
                        AND a.dist_grp      = c1.dist_grp
                        AND a.share_cd      = c1.share_cd
                        AND a.line_cd       = c1.line_cd
                        AND a.item_no       = c1.item_no
                        AND a.dist_seq_no   = c1.dist_seq_no                    
                        AND a.dist_no       = p_dist_no)
        LOOP
      
          FOR c3 IN (SELECT tsi_amt , prem_amt    , ann_tsi_amt ,
                            dist_no , dist_seq_no , item_no
                       FROM giuw_witemds
                      WHERE item_no     = c1.item_no
                        AND dist_seq_no = c1.dist_seq_no
                        AND dist_no     = p_dist_no)
          LOOP

            /* Divide the individual TSI/Premium with the total TSI/Premium
            ** and multiply it by 100 to arrive at the correct percentage for
            ** the breakdown. */
           
            IF c3.tsi_amt = 0 AND c3.prem_amt <> 0 THEN
               v_dist_spct := ROUND (((c2.dist_prem / c3.prem_amt) * 100), 9);
            ELSIF c3.tsi_amt = 0 AND /*c3.prem_amt <> 0*/ c3.prem_amt = 0 THEN --modified edgar 02/06/2015
               v_dist_spct  := 0 ; 
            ELSE     
               v_dist_spct    := ROUND(((c2.dist_tsi/c3.tsi_amt) * 100),9) ;   
            END IF; 
              
            IF  c3.tsi_amt <> 0 AND c3.prem_amt = 0 THEN 
                 v_dist_spct1   := ROUND (((c2.dist_tsi / c3.tsi_amt) * 100), 9);
            ELSIF c3.prem_amt = 0 AND c3.tsi_amt = 0  THEN
                 v_dist_spct1   := 0;
            ELSE     
               v_dist_spct1   := ROUND(((c2.dist_prem/c3.prem_amt) * 100),9);   
            END IF; 
              
            IF c3.ann_tsi_amt = 0 THEN
                 v_ann_dist_spct := 0;
            ELSE     
               v_ann_dist_spct := ROUND(((c2.ann_dist_tsi/c3.ann_tsi_amt) * 100),9) ;   
            END IF;  
            
            INSERT INTO  giuw_witemds_dtl
                        (dist_no         , dist_seq_no    , item_no          ,
                         line_cd         , share_cd       , dist_spct        ,
                         dist_tsi        , dist_prem      , ann_dist_spct    ,
                         ann_dist_tsi    , dist_grp       , dist_spct1)  
                 VALUES (c3.dist_no      , c3.dist_seq_no , c3.item_no       , 
                         c1.line_cd      , c1.share_cd    , v_dist_spct      ,
                         c2.dist_tsi     , c2.dist_prem   , v_ann_dist_spct  ,
                         c2.ann_dist_tsi , c1.dist_grp    , NVL(v_dist_spct1, v_dist_spct));  
          END LOOP;
          EXIT;
        END LOOP;
      END LOOP;


   /** =====================================================================================================================   **
    **         POPULATE THE GIUW_WPOLICYDS_DTL BASED FROM GIUW_WITEMS_DTL                                                  **
    **  =====================================================================================================================   */
      DELETE      giuw_wpolicyds_dtl
            WHERE dist_no = p_dist_no;

      FOR c1 IN (SELECT   SUM (dist_tsi) dist_tsi, SUM (dist_prem) dist_prem,
                          SUM (ann_dist_tsi) ann_dist_tsi,
                          dist_seq_no dist_seq_no, line_cd line_cd,
                          share_cd share_cd, dist_grp dist_grp
                     FROM giuw_witemds_dtl
                    WHERE dist_no = p_dist_no
                 GROUP BY dist_seq_no, line_cd, share_cd, dist_grp)
      LOOP
         FOR c2 IN (SELECT tsi_amt, prem_amt, ann_tsi_amt, dist_no,
                           dist_seq_no
                      FROM giuw_wpolicyds
                     WHERE dist_seq_no = c1.dist_seq_no
                       AND dist_no = p_dist_no)
         LOOP
            /* Divide the individual TSI with the total TSI and multiply
            ** it by 100 to arrive at the correct percentage for the
            ** breakdown. */
            IF c2.tsi_amt = 0 AND c2.prem_amt <> 0 THEN
               v_dist_spct := ROUND (((c1.dist_prem / c2.prem_amt) * 100), 9);
            ELSIF c2.tsi_amt = 0 AND /*c2.prem_amt <> 0*/ c2.prem_amt = 0 THEN --modified edgar 02/06/2015
               v_dist_spct  := 0 ; 
            ELSE     
               v_dist_spct    := ROUND(((c1.dist_tsi/c2.tsi_amt) * 100),9) ;   
            END IF; 
              
            IF  c2.tsi_amt <> 0 AND c2.prem_amt = 0 THEN 
                 v_dist_spct1   := ROUND (((c1.dist_tsi / c2.tsi_amt) * 100), 9);
            ELSIF c2.prem_amt = 0 AND c2.tsi_amt = 0  THEN
                 v_dist_spct1   := 0;
            ELSE     
               v_dist_spct1   := ROUND(((c1.dist_prem/c2.prem_amt) * 100),9);   
            END IF; 
              
            IF c2.ann_tsi_amt = 0 THEN
                 v_ann_dist_spct := 0;
            ELSE     
               v_ann_dist_spct := ROUND(((c1.ann_dist_tsi/c2.ann_tsi_amt) * 100),9) ;   
            END IF;  

            INSERT INTO giuw_wpolicyds_dtl
                        (dist_no, dist_seq_no, line_cd, share_cd,
                         dist_spct, dist_tsi, dist_prem,
                         ann_dist_spct, ann_dist_tsi, dist_grp,
                         dist_spct1
                        )
                 VALUES (c2.dist_no, c2.dist_seq_no, c1.line_cd, c1.share_cd,
                         v_dist_spct, c1.dist_tsi, c1.dist_prem,
                         v_ann_dist_spct, c1.ann_dist_tsi, c1.dist_grp,
                         NVL(v_dist_spct1 , v_dist_spct)
                        );
         END LOOP;
      END LOOP;
      
      /*  ==========================================================================
      **    update value of DIST_SPCT1 based from the nature of GIUW_WPERILDS_DTL 
      **  ========================================================================= */
      
      v_spct1_exists := 'N';
      FOR exists1 IN (SELECT 1 
                        FROM giuw_wperilds_dtl
                            WHERE dist_no = p_dist_no
                                AND dist_spct1 IS NOT NULL )
      LOOP
         v_spct1_exists := 'Y';
         EXIT;
      END LOOP;
      
--      
--      IF v_spct1_exists = 'N' THEN
--            UPDATE giuw_witemds_dtl
--                SET dist_spct1 = NULL
--                    WHERE dist_no = p_dist_no
--                        AND dist_spct1 IS NOT NULL;
--      
--      
--             UPDATE giuw_wpolicyds_dtl
--                SET dist_spct1 = NULL
--                    WHERE dist_no = p_dist_no
--                        AND dist_spct1 IS NOT NULL;
--      ELSE
--            UPDATE giuw_witemds_dtl
--                SET dist_spct1 = dist_spct--dist_spct1 --edgar 02/06/2015
--                    WHERE dist_no = p_dist_no
--                        AND dist_spct1 IS NULL;
--      
--      
--             UPDATE giuw_wpolicyds_dtl
--                SET dist_spct1 = dist_spct
--                    WHERE dist_no = p_dist_no
--                        AND dist_spct1 IS NULL;      
--      END IF;
      
     
    END populate_oth_tbls_peril_dist;  
    
        
    PROCEDURE insert_setup_dflt_group_values (
      p_dist_no         IN  giuw_pol_dist.dist_no%TYPE,
      p_dist_seq_no     IN  giuw_policyds.dist_seq_no%TYPE ,
      p_rg_count        IN  NUMBER ,
      p_default_no      IN  giis_default_dist.default_no%TYPE ,
      p_default_type    IN  giis_default_dist.default_type%TYPE,
      p_line_cd         IN  giis_line.line_cd%TYPE ,
      p_tsi_amt         IN  giuw_policyds.tsi_amt%TYPE,
      p_prem_amt        IN  giuw_policyds.prem_amt%TYPE,
      p_ann_tsi_amt     IN  giuw_policyds.ann_tsi_amt%TYPE,
      p_currency_rt     IN  gipi_item.currency_rt%TYPE
    )  
    IS
      v_share_cd            giis_dist_share.share_cd%TYPE;
      v_dist_spct           giuw_wpolicyds_dtl.dist_spct%TYPE;
      v_dist_spct1          giuw_wpolicyds_dtl.dist_spct1%TYPE  := NULL ; 
      v_ann_dist_spct       giuw_wpolicyds_dtl.ann_dist_spct%TYPE ;
      v_dist_tsi            giuw_wpolicyds_dtl.dist_tsi%TYPE;
      v_dist_prem           giuw_wpolicyds_dtl.dist_prem%TYPE;
      v_ann_dist_tsi        giuw_wpolicyds_dtl.ann_dist_tsi%TYPE;
      v_peril_cd            giis_peril.peril_cd%TYPE;
      v_use_share_amt2      VARCHAR2 (1)                              := 'N';
      v_share_amt           giis_default_dist_group.share_amt1%TYPE; 
      v_sum_dist_spct       giuw_wpolicyds_dtl.dist_spct%TYPE;
      v_sum_dist_tsi        giuw_wpolicyds.tsi_amt%TYPE;
      v_sum_dist_prem       giuw_wpolicyds.prem_amt%TYPE;
      v_sum_ann_dist_spct   giuw_wpolicyds_dtl.ann_dist_spct%TYPE;
      v_sum_ann_dist_tsi    giuw_wpolicyds_dtl.ann_dist_tsi%TYPE;
      v_dist_spct_limit     giuw_wpolicyds_dtl.dist_spct%TYPE;
      v_remaining_tsi       giuw_wpolicyds.tsi_amt%TYPE ;
      v_currency_rt         gipi_invoice.currency_rt%TYPE;
                      
      PROCEDURE INSERT_TO_WPOLICYDS_DTL IS
      BEGIN
        INSERT INTO  GIUW_WPOLICYDS_DTL
                    (dist_no     , dist_seq_no   , line_cd        ,
                     share_cd    , dist_spct     , dist_tsi       ,
                     dist_prem   , ann_dist_spct , ann_dist_tsi   ,
                     dist_grp    , dist_spct1)
             VALUES (p_dist_no   , p_dist_seq_no , p_line_cd      ,
                     v_share_cd  , v_dist_spct   , v_dist_tsi     ,
                     v_dist_prem , v_dist_spct   , v_ann_dist_tsi ,
                     1           , v_dist_spct1);
      END; -- end INSERT_TO_WPOLICYDS_DTL     
    BEGIN
    
        v_currency_rt := NVL( p_currency_rt,1);
        IF p_rg_count = 0 THEN 

             /* Create the default distribution records based on the 100%
             ** NET RETENTION and 0% FACULTATIVE hard code defaults. */
             v_share_cd     := 1;
             v_dist_spct    := 100;
             v_dist_tsi     := p_tsi_amt;
             v_dist_prem    := p_prem_amt;
             v_ann_dist_tsi := p_ann_tsi_amt;
             FOR c IN 1..2
             LOOP
               INSERT_TO_WPOLICYDS_DTL;
               v_share_cd     := 999;
               v_dist_spct    := 0;
               v_dist_tsi     := 0;
               v_dist_prem    := 0;
               v_ann_dist_tsi := 0;
             END LOOP;

          ELSE
             /* Use AMOUNTS to create the default distribution records. */
             IF p_default_type = 1 THEN
             
                v_remaining_tsi := p_tsi_amt * v_currency_rt ;
                v_sum_dist_spct := 0 ;
                v_sum_dist_tsi  := 0 ;
                v_sum_dist_prem := 0 ;
                v_sum_ann_dist_tsi := 0 ;               
               
                FOR c IN (SELECT rownum, a.line_cd    , a.share_cd , a.share_pct  , 
                                 a.share_amt1 , a.peril_cd , a.share_amt2 ,
                                 1 true_pct 
                            FROM GIIS_DEFAULT_DIST_GROUP a  
                           WHERE a.default_no = TO_CHAR(NVL(p_default_no, 0))
                             AND a.line_cd    = p_line_cd
                             AND a.share_cd   <> 999
                           ORDER BY a.sequence ASC)
                LOOP

                 /* v_peril_cd := c.peril_cd;
                  IF v_peril_cd IS NOT NULL THEN
                     IF NVL(v_prev_peril_cd, 0) = v_peril_cd THEN
                        NULL;
                     ELSE
                        v_use_share_amt2 := 'N';
                        FOR c1 IN (  SELECT 'a' 
                                        FROM giuw_wperilds a
                                            WHERE a.dist_no = p_dist_no
                                                AND a.dist_seq_no = v_dist_seq_no
                                                AND a.line_cd= p_line_cd
                                                AND a.peril_cd = v_peril_cd )
                        LOOP
                          v_use_share_amt2 := 'Y';
                          EXIT;
                        END LOOP;
                        v_prev_peril_cd := v_peril_cd;
                     END IF;
                  END IF; */
                  IF v_use_share_amt2 = 'N' THEN
                       v_share_amt  := c.share_amt1;
                  ELSE
                       v_share_amt  := c.share_amt2;
                  END IF;
                  IF v_remaining_tsi >= v_share_amt THEN
                     v_dist_tsi      := v_share_amt / v_currency_rt;
                     v_remaining_tsi := v_remaining_tsi - v_share_amt;
                  ELSE
                     v_remaining_tsi := 0;
                  END IF;
                  IF v_remaining_tsi != 0 THEN
                     v_dist_spct        := ROUND(v_dist_tsi / p_tsi_amt * 100, 9);
                     v_dist_tsi         := ROUND(p_tsi_amt     * v_dist_spct / 100, 2);
                     v_dist_prem        := ROUND(p_prem_amt    * v_dist_spct / 100, 2);
                     v_ann_dist_tsi     := ROUND(p_ann_tsi_amt * v_dist_spct / 100, 2);
                     v_sum_dist_spct    := v_sum_dist_spct    + v_dist_spct;
                     v_sum_dist_tsi     := v_sum_dist_tsi     + v_dist_tsi;
                     v_sum_dist_prem    := v_sum_dist_prem    + v_dist_prem;
                     v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
                  ELSIF v_remaining_tsi = 0 THEN
                     v_dist_spct    := 100           - v_sum_dist_spct;
                     v_dist_prem    := p_prem_amt    - v_sum_dist_prem;
                     v_ann_dist_tsi := p_ann_tsi_amt - v_sum_ann_dist_tsi;
                     v_dist_tsi     := p_tsi_amt     - v_sum_dist_tsi;
                  END IF;

                  v_share_cd := c.share_cd;          
                  INSERT_TO_WPOLICYDS_DTL;
                  IF v_remaining_tsi = 0 THEN
                     EXIT;
                  END IF;
                END LOOP;
                
                IF v_sum_dist_spct < 100 THEN 
                    IF v_remaining_tsi != 0  THEN
                       v_dist_spct    := 100            - v_sum_dist_spct;
                       v_dist_prem    := p_prem_amt    - v_sum_dist_prem;
                       v_ann_dist_tsi := p_ann_tsi_amt - v_sum_ann_dist_tsi;
                       v_dist_tsi     := p_tsi_amt     - v_sum_dist_tsi;
                       v_share_cd     := '999';
                       INSERT_TO_WPOLICYDS_DTL;
                    END IF;
                
                END IF;

             /* Use PERCENTAGES to create the default distribution records. */
             ELSIF p_default_type = 2 THEN
             
                v_sum_dist_spct := 0 ;
                v_sum_dist_tsi  := 0 ;
                v_sum_dist_prem := 0 ;
                v_sum_ann_dist_tsi := 0 ;
                
                FOR c IN (SELECT rownum, a.line_cd    , a.share_cd , a.share_pct  , 
                                 a.share_amt1 , a.peril_cd , a.share_amt2 ,
                                 1 true_pct 
                            FROM GIIS_DEFAULT_DIST_GROUP a  
                           WHERE a.default_no = TO_CHAR(NVL(p_default_no, 0))
                             AND a.line_cd    = p_line_cd
                             AND a.share_cd   <> 999
                           ORDER BY a.sequence ASC)
                LOOP
                    v_dist_spct     := c.share_pct;
                    v_share_amt     := c.share_amt1;
                    
                   -- jhing temporary left this condition as fpac-th enh uses limit..this code might be used by the enh though not sure
                   -- since their enh is not yet checked in.
                   -- for now, this condition will not be met as when the maintenance should only have value for one of these columns
                   -- and not both and hence will not affect regular setup distribution.
                   
                  IF v_share_amt IS NOT NULL THEN
                     v_dist_tsi        := v_share_amt / v_currency_rt;
                     v_dist_spct_limit := ROUND(v_dist_tsi / p_tsi_amt * 100, 9);
                     IF v_dist_spct > v_dist_spct_limit THEN 
                        v_dist_spct := v_dist_spct_limit;
                     END IF;
                  END IF;
                  v_sum_dist_spct := v_sum_dist_spct + v_dist_spct;
                  IF v_sum_dist_spct != 100 THEN
                     v_dist_tsi         := ROUND(p_tsi_amt     * v_dist_spct / 100, 2);
                     v_dist_prem        := ROUND(p_prem_amt    * v_dist_spct / 100, 2);
                     v_ann_dist_tsi     := ROUND(p_ann_tsi_amt * v_dist_spct / 100, 2);
                     v_sum_dist_tsi     := v_sum_dist_tsi     + v_dist_tsi;
                     v_sum_dist_prem    := v_sum_dist_prem    + v_dist_prem;
                     v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
                  ELSE
                     v_dist_tsi     := p_tsi_amt     - v_sum_dist_tsi;
                     v_dist_prem    := p_prem_amt    - v_sum_dist_prem;
                     v_ann_dist_tsi := p_ann_tsi_amt - v_sum_ann_dist_tsi;
                  END IF;
                   v_share_cd      := c.share_cd;
                  INSERT_TO_WPOLICYDS_DTL;
                END LOOP;
                IF v_sum_dist_spct != 100 THEN
                   v_dist_spct    := 100            - v_sum_dist_spct;
                   v_dist_tsi     := p_tsi_amt     - v_sum_dist_tsi;
                   v_dist_prem    := p_prem_amt    - v_sum_dist_prem;
                   v_ann_dist_tsi := p_ann_tsi_amt - v_sum_ann_dist_tsi;
                   v_share_cd     := '999';
                   INSERT_TO_WPOLICYDS_DTL;
                END IF;
             ELSE 
                 /* Create the default distribution records based on the 100%
                 ** NET RETENTION and 0% FACULTATIVE hard code defaults. */
                 v_share_cd     := 1;
                 v_dist_spct    := 100;
                 v_dist_tsi     := p_tsi_amt;
                 v_dist_prem    := p_prem_amt;
                 v_ann_dist_tsi := p_ann_tsi_amt;
                 FOR c IN 1..2
                 LOOP
                   INSERT_TO_WPOLICYDS_DTL;
                   v_share_cd     := 999;
                   v_dist_spct    := 0;
                   v_dist_tsi     := 0;
                   v_dist_prem    := 0;
                   v_ann_dist_tsi := 0;
                 END LOOP;          
             END IF;
          END IF;
    
    END insert_setup_dflt_group_values;  
    
    
    PROCEDURE insert_setup_dflt_peril_values (
      p_dist_no         IN  giuw_pol_dist.dist_no%TYPE,
      p_dist_seq_no     IN  giuw_policyds.dist_seq_no%TYPE ,
      p_rg_count        IN  NUMBER ,
      p_default_no      IN  giis_default_dist.default_no%TYPE ,
      p_default_type    IN  giis_default_dist.default_type%TYPE,
      p_line_cd         IN  giis_line.line_cd%TYPE ,
      p_peril_cd        IN  giis_peril.peril_cd%TYPE,      
      p_tsi_amt         IN  giuw_policyds.tsi_amt%TYPE,
      p_prem_amt        IN  giuw_policyds.prem_amt%TYPE,
      p_ann_tsi_amt     IN  giuw_policyds.ann_tsi_amt%TYPE,
      p_currency_rt     IN  gipi_item.currency_rt%TYPE
    )
    IS
      v_share_cd            giis_dist_share.share_cd%TYPE;
      v_dist_spct           giuw_wpolicyds_dtl.dist_spct%TYPE;
      v_dist_spct1          giuw_wpolicyds_dtl.dist_spct1%TYPE ; 
      v_ann_dist_spct       giuw_wpolicyds_dtl.ann_dist_spct%TYPE ;
      v_dist_tsi            giuw_wpolicyds_dtl.dist_tsi%TYPE;
      v_dist_prem           giuw_wpolicyds_dtl.dist_prem%TYPE;
      v_ann_dist_tsi        giuw_wpolicyds_dtl.ann_dist_tsi%TYPE;
      v_peril_cd            giis_peril.peril_cd%TYPE;
      v_use_share_amt2      VARCHAR2 (1)                              := 'N';
      v_share_amt           giis_default_dist_group.share_amt1%TYPE; 
      v_sum_dist_spct       giuw_wpolicyds_dtl.dist_spct%TYPE;
      v_sum_dist_tsi        giuw_wpolicyds.tsi_amt%TYPE;
      v_sum_dist_prem       giuw_wpolicyds.prem_amt%TYPE;
      v_sum_ann_dist_spct   giuw_wpolicyds_dtl.ann_dist_spct%TYPE;
      v_sum_ann_dist_tsi    giuw_wpolicyds_dtl.ann_dist_tsi%TYPE;
      v_dist_spct_limit     giuw_wpolicyds_dtl.dist_spct%TYPE;
      v_remaining_tsi       giuw_wpolicyds.tsi_amt%TYPE ;
      v_currency_rt         gipi_invoice.currency_rt%TYPE;

      CURSOR dist_peril_cur
      IS
         SELECT   a.share_cd, a.share_pct, a.share_amt1
             FROM giis_default_dist_peril a
            WHERE a.default_no = p_default_no
              AND a.line_cd = p_line_cd
              AND a.peril_cd = p_peril_cd
              AND a.share_cd <> 999
         ORDER BY a.SEQUENCE ASC;
         
      PROCEDURE insert_to_wperilds_dtl
      IS
      BEGIN
         INSERT INTO giuw_wperilds_dtl
                     (dist_no, dist_seq_no, line_cd, share_cd,
                      dist_spct, dist_tsi, dist_prem, ann_dist_spct,
                      ann_dist_tsi, dist_grp, peril_cd, dist_spct1
                     )
              VALUES (p_dist_no, p_dist_seq_no, p_line_cd, v_share_cd,
                      v_dist_spct, v_dist_tsi, v_dist_prem, v_dist_spct,
                      v_ann_dist_tsi, 1, p_peril_cd, v_dist_spct1
                     );
      END; -- end insert_to_wperilds_dtl     
    BEGIN
       v_currency_rt := NVL( p_currency_rt,1);
       
       IF p_rg_count = 0 THEN 

             /* Create the default distribution records based on the 100%
             ** NET RETENTION and 0% FACULTATIVE hard code defaults. */
             v_share_cd     := 1;
             v_dist_spct    := 100;
             --v_dist_spct1   := v_dist_spct; -- jhing commented out 12.16.2014
             v_dist_tsi     := p_tsi_amt;
             v_dist_prem    := p_prem_amt;
             v_ann_dist_tsi := p_ann_tsi_amt;
             FOR c IN 1..2
             LOOP
                INSERT_TO_WPERILDS_DTL;
                v_share_cd     := 999;
                v_dist_spct    := 0;
                --v_dist_spct1   := v_dist_spct; -- jhing commented out 12.16.2014 
                v_dist_tsi     := 0;
                v_dist_prem    := 0;
                v_ann_dist_tsi := 0;
             END LOOP; 

       ELSE
              /* Use AMOUNTS to create the default distribution records. */
              IF p_default_type = 1 THEN
                 v_remaining_tsi := p_tsi_amt * v_currency_rt ;
                 v_sum_dist_spct := 0 ;
                 v_sum_dist_tsi  := 0 ;
                 v_sum_dist_prem := 0 ;
                 v_sum_ann_dist_tsi := 0 ;    
                 
                 FOR c1 IN dist_peril_cur
                 LOOP
                   IF v_remaining_tsi >= c1.share_amt1 THEN
                      v_dist_tsi      := c1.share_amt1 / p_currency_rt;
                      v_remaining_tsi := v_remaining_tsi - c1.share_amt1;
                   ELSE
                      v_remaining_tsi := 0;
                   END IF;
                   IF v_remaining_tsi != 0 THEN
                      v_dist_spct        := ROUND(v_dist_tsi / p_tsi_amt * 100, 9);
                      --v_dist_spct1       := v_dist_spct;  -- jhing commented out 12.16.2014
                      v_dist_tsi         := ROUND(p_tsi_amt     * v_dist_spct / 100, 2);
                      v_dist_prem        := ROUND(p_prem_amt    * v_dist_spct / 100, 2);
                      v_ann_dist_tsi     := ROUND(p_ann_tsi_amt * v_dist_spct / 100, 2);
                      v_sum_dist_spct    := v_sum_dist_spct    + v_dist_spct;
                      v_sum_dist_tsi     := v_sum_dist_tsi     + v_dist_tsi;
                      v_sum_dist_prem    := v_sum_dist_prem    + v_dist_prem;
                      v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
                   ELSIF v_remaining_tsi = 0 THEN
                      v_dist_spct    := 100            - v_sum_dist_spct;
                     -- v_dist_spct1   := v_dist_spct;  -- jhing commented out 12.16.2014 
                      v_dist_prem    := p_prem_amt    - v_sum_dist_prem;
                      v_ann_dist_tsi := p_ann_tsi_amt - v_sum_ann_dist_tsi;
                      v_dist_tsi     := p_tsi_amt     - v_sum_dist_tsi;
                   END IF;
                   v_share_cd := c1.share_cd;
                   INSERT_TO_WPERILDS_DTL;
                   IF v_remaining_tsi = 0 THEN
                      EXIT;
                   END IF;
                 END LOOP;
                 
                 IF v_sum_dist_spct < 100 THEN 
                     IF v_remaining_tsi  != 0   THEN
                        v_dist_spct    := 100            - v_sum_dist_spct;
                        --  v_dist_spct1   := v_dist_spct;    -- jhing commented out 12.16.2014 
                        v_dist_prem    := p_prem_amt    - v_sum_dist_prem;
                        v_ann_dist_tsi := p_ann_tsi_amt - v_sum_ann_dist_tsi;
                        v_dist_tsi     := p_tsi_amt     - v_sum_dist_tsi;
                        v_share_cd     := '999';
                        INSERT_TO_WPERILDS_DTL;
                     END IF;                 
                 END IF;

              /* Use PERCENTAGES to create the default distribution records. */
              ELSIF p_default_type = 2 THEN
              
                v_sum_dist_spct := 0 ;
                v_sum_dist_tsi  := 0 ;
                v_sum_dist_prem := 0 ;
                v_sum_ann_dist_tsi := 0 ;    
                
                 FOR c1 IN dist_peril_cur
                 LOOP
                   v_dist_spct := c1.share_pct;
                  -- v_dist_spct1 := v_dist_spct;   -- jhing commented out 12.16.2014 
                   IF c1.share_amt1 IS NOT NULL THEN
                      v_dist_tsi        := c1.share_amt1 / p_currency_rt;
                      v_dist_spct_limit := ROUND(v_dist_tsi / p_tsi_amt * 100, 9);
                      IF v_dist_spct > v_dist_spct_limit THEN 
                         v_dist_spct := v_dist_spct_limit;
                        -- v_dist_spct1 := v_dist_spct;   -- jhing commented out 12.16.2014 
                      END IF;
                   END IF;
                   v_sum_dist_spct := v_sum_dist_spct + v_dist_spct;
                   IF v_sum_dist_spct != 100 THEN
                      v_dist_tsi         := ROUND(p_tsi_amt         * v_dist_spct / 100, 2);
                      v_dist_prem        := ROUND(p_prem_amt        * v_dist_spct / 100, 2);
                      v_ann_dist_tsi     := ROUND(p_ann_tsi_amt     * v_dist_spct / 100, 2);
                      v_sum_dist_tsi     := v_sum_dist_tsi     + v_dist_tsi;
                      v_sum_dist_prem    := v_sum_dist_prem    + v_dist_prem;
                      v_sum_ann_dist_tsi := v_sum_ann_dist_tsi + v_ann_dist_tsi;
                   ELSE
                      v_dist_tsi     := p_tsi_amt     - v_sum_dist_tsi;
                      v_dist_prem    := p_prem_amt    - v_sum_dist_prem;
                      v_ann_dist_tsi := p_ann_tsi_amt - v_sum_ann_dist_tsi;
                   END IF;
                   v_share_cd := c1.share_cd;
                   INSERT_TO_WPERILDS_DTL;
                 END LOOP;
                 IF v_sum_dist_spct  != 100 THEN
                    v_dist_spct    := 100            - v_sum_dist_spct;
                    -- v_dist_spct1   := v_dist_spct;                     -- jhing commented out 12.16.2014 
                    v_dist_tsi     := p_tsi_amt     - v_sum_dist_tsi;
                    v_dist_prem    := p_prem_amt    - v_sum_dist_prem;
                    v_ann_dist_tsi := p_ann_tsi_amt - v_sum_ann_dist_tsi;
                    v_share_cd     := '999';
                    INSERT_TO_WPERILDS_DTL;
                 END IF;
             END IF;
       END IF;
    
    END insert_setup_dflt_peril_values;    
    
    PROCEDURE get_default_dist_params (
      p_dist_no         IN  giuw_pol_dist.dist_no%TYPE,
      p_par_id          IN OUT giuw_pol_dist.par_id%TYPE,      
      p_post_flag       OUT giuw_pol_dist.post_flag%TYPE,
      p_line_cd         IN OUT giis_default_dist.line_cd%TYPE ,      
      p_default_no      OUT giis_default_dist.default_no%TYPE , 
      p_dist_type       OUT giis_default_dist.dist_type%TYPE , 
      p_default_type    OUT giis_default_dist.default_type%TYPE,
      p_orig_dist_no    OUT giuw_pol_dist.dist_no%TYPE 
    )
    IS
      v_pol_flag        gipi_polbasic.pol_flag%TYPE;
      v_par_type        gipi_parlist.par_type%TYPE ; 
      v_orig_dist_no    giuw_pol_dist.dist_no%TYPE := NULL  ;
      v_par_id          gipi_polbasic.par_id%TYPE; 
      v_line_cd         gipi_polbasic.line_cd%TYPE ;
      v_subline_cd      gipi_polbasic.subline_cd%TYPE;
      v_iss_cd          gipi_polbasic.iss_cd%TYPE ;
      v_issue_yy        gipi_polbasic.issue_yy%TYPE; 
      v_pol_seq_no      gipi_polbasic.pol_seq_no%TYPE;
      v_renew_no        gipi_polbasic.renew_no%TYPE;
      v_default_no      giis_default_dist.default_no%TYPE := NULL;
      v_dist_type       giis_default_dist.dist_type%TYPE := NULL ;
      v_default_type    giis_default_dist.default_type%TYPE := NULL ;     
      v_post_flag       giuw_pol_dist.post_flag%TYPE := NULL ;         
    BEGIN
    
        FOR curpol in (SELECT a.pol_flag, b.par_type, a.par_id, a.line_cd, a.subline_cd, a.iss_cd, a.issue_yy, a.pol_seq_no, a.renew_no
                        FROM gipi_wpolbas a, gipi_parlist b , giuw_pol_dist c
                            WHERE c.dist_no = p_dist_no
                                AND c.par_id = a.par_id
                                AND a.par_id = b.par_id )
        LOOP
            
            v_pol_flag := curpol.pol_flag;
            v_par_type  := curpol.par_type;
            v_par_id := curpol.par_id;
            v_line_cd   := curpol.line_cd;
            v_subline_cd := curpol.subline_cd;
            v_iss_cd     := curpol.iss_cd;
            v_issue_yy  := curpol.issue_yy;
            v_pol_seq_no    := curpol.pol_seq_no;
            v_renew_no      := curpol.renew_no;
            EXIT; 
        END LOOP;
        
        
        IF v_pol_flag = '2' THEN
              FOR post IN (SELECT post_flag , dist_flag, dist_no
                                   FROM GIUW_POL_DIST 
                                  WHERE dist_no = 
                                         (SELECT max(dist_no) 
                                            FROM GIUW_POL_DIST 
                                           WHERE policy_id = 
                                                    ( SELECT MAX(old_policy_id) 
                                                        FROM GIPI_WPOLNREP x , gipi_polbasic y
                                                       WHERE x.ren_rep_sw = '1'
                                                         AND x.par_id = v_par_id
                                                         AND x.old_policy_id = y.policy_id
                                                         AND y.pol_flag <> '5' )) )
               LOOP
                   IF post.dist_flag in ( '2', '3') THEN 
                      v_post_flag := post.post_flag;
                      v_orig_dist_no := post.dist_no; 
                   END IF;
                   EXIT;
               END LOOP;        
        ELSIF v_par_type = 'E' THEN        

            FOR post IN ( SELECT post_flag, dist_flag, dist_no 
                              FROM giuw_pol_dist
                             WHERE dist_no =
                                      (SELECT MAX(dist_no) 
                                        FROM GIUW_POL_DIST 
                                       WHERE par_id = (SELECT par_id
                                                         FROM gipi_polbasic
                                                        WHERE endt_seq_no = 0
                                                            AND line_cd = v_line_cd
                                                            AND subline_cd = v_subline_cd
                                                            AND iss_cd = v_iss_cd
                                                            AND issue_yy = v_issue_yy
                                                            AND pol_seq_no = v_pol_seq_no
                                                            AND renew_no  = v_renew_no 
                                                         )))
             LOOP
                 IF post.dist_flag in ( '2', '3') THEN 
                    v_post_flag := post.post_flag;
                    v_orig_dist_no := post.dist_no; 
                 END IF;
                 EXIT;          
             END LOOP;   
             
             FOR witemds IN ( SELECT 1 
                                FROM giuw_witemds 
                                    WHERE dist_no = p_dist_no 
                                        AND tsi_amt = 0 
                                        AND prem_amt = 0 )
             LOOP
                v_post_flag := 'O';     
                EXIT;         
             END LOOP;             
        END IF; 
        
        
        -- if post_flag is NULL, retrieve it from default distribution, and get the default distribution , else just retrieve the default distribution based on post_flag 
        IF v_post_flag IS NULL THEN
            v_post_flag := 'O' ; -- magdefault muna ng one risk then overwrite nlng ng default distribution if meron ngexists
            FOR defDist in (SELECT x.default_no, x.default_type, x.dist_type
                              FROM giis_default_dist x
                             WHERE x.line_cd = v_line_cd
                               AND x.subline_cd = v_subline_cd )
            LOOP 
                IF defDist.dist_type = '1' THEN
                    v_post_flag := 'O';
                ELSE
                    v_post_flag := 'P';
                END IF;                   
                v_default_no := defDist.default_no;        
                v_default_type := defDist.default_type;     
                v_dist_type := defDist.dist_type ;                             
            END LOOP;           
          
        ELSE
            FOR defDist in (SELECT x.default_no, x.default_type, x.dist_type
                              FROM giis_default_dist x
                             WHERE x.line_cd = v_line_cd
                               AND x.subline_cd = v_subline_cd 
                               AND x.dist_type = DECODE ( v_post_flag, 'O', '1', '2' ))
            LOOP                    
                v_default_no := defDist.default_no;        
                v_default_type := defDist.default_type;     
                v_dist_type := defDist.dist_type ;                             
            END LOOP;      
        END IF;   
       
        p_post_flag := NVL(v_post_flag,'O');
        p_default_no := v_default_no;
        p_dist_type  := v_dist_type;
        p_default_type := v_default_type;
        p_orig_dist_no := v_orig_dist_no;
        p_line_cd      := v_line_cd;
        p_par_id        := v_par_id;
    
    END get_default_dist_params ; 
    
    
    PROCEDURE populate_default_dist (
      p_dist_no         IN  giuw_pol_dist.dist_no%TYPE,
      p_post_flag       IN OUT giuw_pol_dist.post_flag%TYPE ,
      p_dist_type       IN OUT giuw_pol_dist.dist_type%TYPE
    )
    IS
      v_post_flag       giuw_pol_dist.post_flag%TYPE ;
      v_default_no      giis_default_dist.default_no%TYPE;
      v_dist_type       giis_default_dist.dist_type%TYPE;
      v_default_type    giis_default_dist.default_type%TYPE ;
      v_orig_dist_no    giuw_pol_dist.dist_no%TYPE;
      v_tsi_amt         giuw_wpolicyds.tsi_amt%TYPE;
      v_prem_amt        giuw_wpolicyds.prem_amt%TYPE;
      v_ann_tsi_amt     giuw_wpolicyds.ann_tsi_amt%TYPE;
      v_line_cd         giis_dist_share.line_cd%TYPE ; 
      v_peril_cd        giis_peril.peril_cd%TYPE;
      v_share_cd        giis_dist_share.share_cd%TYPE ;
      v_dist_tsi        giuw_wpolicyds_dtl.dist_tsi%TYPE;
      v_dist_prem       giuw_wpolicyds_dtl.dist_prem%TYPE;
      v_ann_dist_tsi    giuw_wpolicyds_dtl.ann_dist_tsi%TYPE;
      v_dist_spct       giuw_wpolicyds_dtl.dist_spct%TYPE;
      v_dist_spct1      giuw_wpolicyds_dtl.dist_spct1%TYPE;
      v_dist_seq_no     giuw_wpolicyds.dist_seq_no%TYPE;
      v_currency_rt     gipi_invoice.currency_rt%TYPE ;
      v_item_grp        gipi_invoice.item_grp%TYPE; 
      v_policy_id       gipi_polbasic.policy_id%TYPE;
      v_par_id          gipi_parlist.par_id%TYPE ;
      v_distributed_sw  VARCHAR2(1);
      v_rg_count        NUMBER;
      v_spct1_exists    VARCHAR2(1);   
 
      
      PROCEDURE INSERT_TO_WPOLICYDS_DTL IS
      BEGIN
        INSERT INTO  GIUW_WPOLICYDS_DTL
                    (dist_no     , dist_seq_no   , line_cd        ,
                     share_cd    , dist_spct     , dist_tsi       ,
                     dist_prem   , ann_dist_spct , ann_dist_tsi   ,
                     dist_grp    , dist_spct1)
             VALUES (p_dist_no   , v_dist_seq_no , v_line_cd      ,
                     v_share_cd  , v_dist_spct   , v_dist_tsi     ,
                     v_dist_prem , v_dist_spct   , v_ann_dist_tsi ,
                     1           , v_dist_spct1);
      END; -- end INSERT_TO_WPOLICYDS_DTL  
      
      PROCEDURE insert_to_wperilds_dtl
      IS
      BEGIN
         INSERT INTO giuw_wperilds_dtl
                     (dist_no, dist_seq_no, line_cd, share_cd,
                      dist_spct, dist_tsi, dist_prem, ann_dist_spct,
                      ann_dist_tsi, dist_grp, peril_cd, dist_spct1
                     )
              VALUES (p_dist_no, v_dist_seq_no, v_line_cd, v_share_cd,
                      v_dist_spct, v_dist_tsi, v_dist_prem, v_dist_spct,
                      v_ann_dist_tsi, 1, v_peril_cd, v_dist_spct1
                     ); 
      END ; -- end  insert_to_wperilds_dtl       
      
      FUNCTION get_currency_rt ( p_par_id gipi_wpolbas.par_id%TYPE, p_item_grp giuw_wpolicyds.item_grp%TYPE )
      RETURN NUMBER AS
        v_currency_rt gipi_winvoice.currency_rt%TYPE  := 1 ;
      BEGIN   
      
        FOR gipi_inv IN (SELECT currency_rt 
                            FROM gipi_winvoice
                                WHERE par_id = p_par_id
                                    AND item_grp = p_item_grp )
        LOOP
            v_currency_rt := gipi_inv.currency_rt;
            EXIT;
        END LOOP;
        
        RETURN v_currency_rt ; 
        
      END ;
    BEGIN
    
     
      GIUW_POL_DIST_PKG.GET_DEFAULT_DIST_PARAMS ( p_dist_no, v_par_id, v_post_flag, v_line_cd, v_default_no, v_dist_type, v_default_type, v_orig_dist_no );
      
      -- default distribution for one risk 
      IF v_post_flag = 'O' THEN
      
         DELETE FROM 
            giuw_wpolicyds_dtl 
                WHERE dist_no = p_dist_no;
                
         FOR polds IN (SELECT dist_no, dist_seq_no, NVL(tsi_amt,0) tsi_amt, NVL(prem_amt,0) prem_amt, NVL(ann_tsi_amt,0) ann_tsi_amt, item_grp 
                        FROM giuw_wpolicyds 
                            WHERE dist_no = p_dist_no
                                ORDER BY dist_seq_no )
         LOOP
                v_distributed_sw := 'N'; 
                v_tsi_amt := polds.tsi_amt;
                v_prem_amt :=polds.prem_amt;
                v_ann_tsi_amt := polds.ann_tsi_amt;
                v_dist_seq_no := polds.dist_seq_no;
                v_item_grp    := polds.item_grp; 
                v_currency_rt := get_currency_rt (v_par_id, v_item_grp );
                
                FOR oldDist in ( SELECT share_cd, dist_spct, dist_spct1 
                                    FROM giuw_policyds_dtl 
                                        WHERE DIST_NO = v_orig_dist_no AND dist_seq_no = polds.dist_seq_no  )                
                LOOP
                    v_share_cd := oldDist.share_cd;
                    v_dist_spct := oldDist.dist_spct;
                    v_dist_spct1 := oldDist.dist_spct1 ;
                    v_dist_tsi := ROUND (((v_tsi_amt * v_dist_spct) / 100), 2);
                    v_dist_prem := ROUND (((v_prem_amt * NVL(v_dist_spct1,v_dist_spct) ) / 100), 2);
                    v_ann_dist_tsi :=
                           ROUND (((v_ann_tsi_amt * v_dist_spct) / 100), 2);
                    
                    INSERT_TO_WPOLICYDS_DTL ;
                    v_distributed_sw := 'Y';
                END LOOP; 
                
                IF v_distributed_sw = 'N' THEN            
                   IF v_default_no IS NULL THEN 
                         v_rg_count := 0 ;
                   ELSIF v_dist_type = '1' THEN
                       v_rg_count := 0 ; 
                       FOR rg in (SELECT '1' FROM giis_default_dist_group
                                     WHERE default_no = v_default_no )
                       LOOP 
                            v_rg_count := v_rg_count + 1 ; 
                       END LOOP;
                   ELSE
                       v_rg_count := 0 ;                      
                   END IF;           
                  
                   GIUW_POL_DIST_PKG.INSERT_SETUP_DFLT_GROUP_VALUES ( p_dist_no, v_dist_seq_no, v_rg_count , v_default_no
                                        , v_default_type, v_line_cd, v_tsi_amt, v_prem_amt, v_ann_tsi_amt, v_currency_rt );          
                END IF;                
         END LOOP;
         
         v_spct1_exists := 'N'; 
         FOR exists1 in ( SELECT 1 
                            FROM giuw_wpolicyds_dtl
                                WHERE dist_no = p_dist_no
                                    AND dist_spct1 IS NOT NULL )
         LOOP
            v_spct1_exists := 'Y';
            EXIT;
         END LOOP;
         
         IF v_spct1_exists = 'Y' THEN
            UPDATE giuw_wpolicyds_dtl
                SET dist_spct1 = dist_spct
                    WHERE dist_no = p_dist_no
                        AND dist_spct1 IS NULL; 
                        
         END IF;
      
      -- default distribution for peril distribution 
      ELSE

         DELETE FROM 
            giuw_wperilds_dtl 
                WHERE dist_no = p_dist_no;
                      
         FOR polds IN (SELECT dist_no, dist_seq_no, item_grp 
                        FROM giuw_wpolicyds 
                            WHERE dist_no = p_dist_no
                                ORDER BY dist_seq_no )
         LOOP            
             v_item_grp    := polds.item_grp; 
             v_currency_rt := get_currency_rt (v_policy_id, v_item_grp );
             
             FOR curperil in (SELECT x.dist_seq_no, x.line_cd , x.peril_cd , x.tsi_amt, x.prem_amt, x.ann_tsi_amt 
                                        FROM giuw_wperilds x
                                            WHERE x.dist_no = polds.dist_no 
                                                AND x.dist_seq_no = polds.dist_seq_no
                                             ORDER BY x.dist_seq_no, x.peril_cd )
             LOOP
                 v_distributed_sw := 'N'; 
                 v_tsi_amt := curperil.tsi_amt;
                 v_prem_amt :=curperil.prem_amt;
                 v_ann_tsi_amt := curperil.ann_tsi_amt;         
                 v_peril_cd    := curperil.peril_cd;    
                 v_dist_seq_no := curperil.dist_seq_no;  
                   
                 FOR old_perildist in ( SELECT share_cd, dist_spct, dist_spct1   
                                          FROM giuw_perilds_dtl a
                                            WHERE a.dist_seq_no = v_dist_seq_no
                                              AND a.peril_cd = v_peril_cd
                                              AND dist_no = v_orig_dist_no )
                 LOOP
                      v_distributed_sw := 'Y'; 
                      v_share_cd := old_perildist.share_cd;
                      v_dist_spct := old_perildist.dist_spct;
                      v_dist_spct1 := old_perildist.dist_spct1 ;
                      v_dist_tsi := ROUND (((v_tsi_amt * v_dist_spct) / 100), 2);
                      v_dist_prem := ROUND (((v_prem_amt * NVL(v_dist_spct1,v_dist_spct)) / 100), 2);
                      v_ann_dist_tsi := ROUND (((v_ann_tsi_amt * v_dist_spct) / 100), 2);                              
                      
                      INSERT_TO_WPERILDS_DTL  ;                      
                 END LOOP;
       

                 IF v_distributed_sw = 'N' THEN
                      IF v_default_no IS NULL THEN 
                           v_rg_count := 0 ;
                      ELSIF v_dist_type = '2' THEN
                           v_rg_count := 0 ; 
                           FOR rg in (SELECT '1' FROM giis_default_dist_peril
                                          WHERE default_no = v_default_no
                                              AND line_cd = v_line_cd 
                                              AND peril_cd = v_peril_cd  )
                           LOOP 
                               v_rg_count := v_rg_count + 1 ; 
                           END LOOP;
                      ELSE
                           v_rg_count := 0 ;                      
                      END IF;           
                             
                      GIUW_POL_DIST_PKG.INSERT_SETUP_DFLT_PERIL_VALUES ( p_dist_no, v_dist_seq_no, v_rg_count , v_default_no
                                            , v_default_type, v_line_cd, v_peril_cd, v_tsi_amt, v_prem_amt, v_ann_tsi_amt, v_currency_rt ); 


                 END IF;              
             END LOOP;
        END LOOP;
        
        v_spct1_exists := 'N'; 
        FOR exists1 in ( SELECT 1 
                            FROM giuw_wperilds_dtl
                                WHERE dist_no = p_dist_no
                                    AND dist_spct1 IS NOT NULL )
         LOOP
            v_spct1_exists := 'Y';
            EXIT;
         END LOOP;
         
         IF v_spct1_exists = 'Y' THEN
            UPDATE giuw_wperilds_dtl
                SET dist_spct1 = dist_spct
                    WHERE dist_no = p_dist_no
                        AND dist_spct1 IS NULL; 
                        
         END IF;
      END IF;      
      
      -- based on the post_flag, populate the other distribution tables and do the correponding adjustment  
     -- jhing 04.06.2016  populate other distribution tables and to adjust it based on post_flag 
      IF NVL(v_post_flag,'O') = 'O' THEN    
            GIUW_POL_DIST_PKG.populate_oth_tbls_one_risk ( p_dist_no );
            GIUW_POL_DIST_PKG.ADJUST_ALL_WTABLES_GIUWS004(p_dist_no);
      ELSE 
            GIUW_POL_DIST_PKG.populate_oth_tbls_peril_dist( p_dist_no );
            ADJUST_DISTRIBUTION_PERIL_PKG.ADJUST_DISTRIBUTION(p_dist_no);
      END IF;
      
      p_post_flag := v_post_flag;
          
    END populate_default_dist;  
    
    
    PROCEDURE CRTE_PRELIM_REGRPED_DIST_RECS
         (p_dist_no       IN giuw_pol_dist.dist_no%TYPE    ,
          p_par_id        IN gipi_parlist.par_id%TYPE  ,
          p_line_cd       IN gipi_parlist.line_cd%TYPE    ,
          p_subline_cd    IN gipi_wpolbas.subline_cd%TYPE ,
          p_iss_cd        IN gipi_wpolbas.iss_cd%TYPE     ,
          p_pack_pol_flag IN gipi_wpolbas.pack_pol_flag%TYPE) IS  
          
          v_line_cd             gipi_polbasic.line_cd%TYPE;
          v_subline_cd          gipi_polbasic.subline_cd%TYPE;
          v_currency_rt         gipi_item.currency_rt%TYPE;
          v_dist_seq_no         giuw_wpolicyds.dist_seq_no%TYPE := 0;
          rg_count              NUMBER;
          v_exist               VARCHAR2(1);
          v_default_no          giis_default_dist.default_no%TYPE;
          v_default_type        giis_default_dist.default_type%TYPE;
          v_dflt_netret_pct     giis_default_dist.dflt_netret_pct%TYPE;
          v_dist_type           giis_default_dist.dist_type%TYPE;
          v_post_flag           VARCHAR2(1)  := 'O';
          v_package_policy_sw   VARCHAR2(1)  := 'Y';
          v_exist2              VARCHAR2(1);
          v_item                giuw_witemds.item_no%TYPE;
          dist_cnt              NUMBER;
          dist_max              giuw_pol_dist.dist_no%type;
          v_item_grp            giuw_pol_dist.item_grp%type;       
    BEGIN    
     FOR c1 IN (SELECT dist_seq_no , tsi_amt  , prem_amt ,
                        ann_tsi_amt , item_grp , rowid 
                   FROM GIUW_WPOLICYDS
                  WHERE dist_no = p_dist_no)
      LOOP
        
        FOR c2 IN (SELECT currency_rt , pack_line_cd , pack_subline_cd
                     FROM GIPI_WITEM
                    WHERE item_grp  = c1.item_grp
                      AND par_id = p_par_id)
        LOOP

          v_currency_rt := c2.currency_rt;

          IF p_pack_pol_flag = 'N' THEN
             v_line_cd    := p_line_cd;
             v_subline_cd := p_subline_cd;
          ELSE
             v_line_cd           := c2.pack_line_cd;
             v_subline_cd        := c2.pack_subline_cd;
             v_package_policy_sw := 'Y';
          END IF;
          EXIT;
        END LOOP;


       GIUW_POL_DIST_PKG.RECRTE_GRP_DFLT_DIST_DS
                   (p_dist_no      , c1.dist_seq_no , '2'            ,
                    c1.tsi_amt     , c1.prem_amt    , c1.ann_tsi_amt ,
                    c1.item_grp    , v_line_cd      , rg_count       ,
                    v_default_type , v_currency_rt  , p_par_id, v_default_no);

      
      END LOOP;
      
      

 
      GIUW_POL_DIST_PKG.POPULATE_DEFAULT_DIST ( p_dist_no, v_post_flag, v_dist_type );
      IF v_post_flag = 'O' 
      THEN
        GIUW_POL_DIST_PKG.ADJUST_ALL_WTABLES_GIUWS004(p_dist_no);
      ELSIF v_post_flag = 'P' 
      THEN
        ADJUST_DISTRIBUTION_PERIL_PKG.ADJUST_DISTRIBUTION(p_dist_no);
      END IF;        
 
      /* Set the value of the DIST_FLAG back 
      ** to Undistributed after recreation. */
      
      UPDATE GIUW_POL_DIST
         SET dist_flag = '1',
             post_flag = v_post_flag,
             dist_type = '1' ,
             special_dist_sw = 'N' 
       WHERE par_id = p_par_id
         AND dist_no   = p_dist_no;


    END;        

    PROCEDURE RECRTE_GRP_DFLT_DIST_DS
        (p_dist_no        IN    GIUW_WPOLICYDS.dist_no%TYPE,
         p_dist_seq_no    IN    GIUW_WPOLICYDS.dist_seq_no%TYPE,
         p_dist_flag      IN    GIUW_WPOLICYDS.dist_flag%TYPE,
         p_policy_tsi     IN    GIUW_WPOLICYDS.tsi_amt%TYPE,
         p_policy_premium IN    GIUW_WPOLICYDS.prem_amt%TYPE,
         p_policy_ann_tsi IN    GIUW_WPOLICYDS.ann_tsi_amt%TYPE,
         p_item_grp       IN    GIUW_WPOLICYDS.item_grp%TYPE,
         p_line_cd        IN    GIIS_LINE.line_cd%TYPE,
         p_rg_count       IN OUT NUMBER,
         p_default_type   IN    GIIS_DEFAULT_DIST.default_type%TYPE,
         p_currency_rt    IN    GIPI_ITEM.currency_rt%TYPE,
         p_par_id         IN    GIPI_WPOLBAS.par_id%TYPE,
         p_v_default_no   IN    GIIS_DEFAULT_DIST.default_no%TYPE) IS
         

    ---------------
    dist_cnt        NUMBER;
    dist_max        GIUW_POL_DIST.dist_no%type;
    v_peril_exists  VARCHAR2(1); 
    -- jhing 11.26.2014 
    v_current_takeup    giuw_pol_dist.takeup_seq_no%TYPE;
    v_max_takeup        giuw_pol_dist.takeup_seq_no%TYPE;
    v_redist_sw      VARCHAR2(1);
    v_err_in_seq     VARCHAR2(1); 
    v_err_exists     VARCHAR2(1) ; -- jhing 12.11.2014
    ---------------

    BEGIN
        SELECT COUNT(dist_no), MAX(dist_no)
          INTO dist_cnt, dist_max
          FROM GIUW_POL_DIST
         WHERE par_id = p_par_id
           AND item_grp = p_item_grp
           AND dist_flag NOT IN (4,5);
           
      -- jhing 11.27.2014 added codes to retrieve takeup info
      SELECT nvl(takeup_seq_no,1)
        INTO v_current_takeup
            FROM giuw_pol_dist 
                WHERE dist_no = p_dist_no;
                
      SELECT nvl(MAX(takeup_seq_no),1)
        INTO v_max_takeup
            FROM giuw_pol_dist
                WHERE par_id = p_par_id;  
 
           
        
      IF dist_cnt = 0 AND dist_max IS NULL THEN
        BEGIN
            SELECT COUNT(dist_no), MAX(dist_no)
                  INTO dist_cnt, dist_max
                  FROM GIUW_POL_DIST
                  WHERE par_id = p_par_id
                  AND item_grp IS NULL
                  AND dist_flag NOT IN (4,5);
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                NULL;
        END;
      END IF;


       -- jhing 12.11.2014 prompt an error when dist_seq_no is insequential
      v_err_in_seq := 'N';
      GIUW_POL_DIST_PKG.val_sequential_distGrp (p_dist_no , 'GIUWS010', v_err_in_seq) ; 
      IF v_err_in_seq = 'Y' THEN
          RAISE_APPLICATION_ERROR (-20004 , 'Geniisys Exception#E#There are non-sequential distribution group nos. Please recreate the items then try to regroup the items again. '); 
 
      END IF;
      
      GIUW_POL_DIST_PKG.val_multipleBillGrp_perDist (p_dist_no , p_par_id, v_err_in_seq) ; 
      IF v_err_in_seq = 'Y' THEN
          RAISE_APPLICATION_ERROR (-20004 , 'Geniisys Exception#E#Cannot proceed with the setup of distribution. There are multiple bill groups which were grouped into a single distribution no. Please recreate the items and try to re-grouped the records again.'); 
 
      END IF;      


      FOR c2 IN (SELECT item_no     , tsi_amt , prem_amt ,
                        ann_tsi_amt
                   FROM GIUW_WITEMDS
                  WHERE dist_seq_no = p_dist_seq_no
                    AND dist_no     = p_dist_no)
      LOOP

                FOR c3 IN (SELECT B380.tsi_amt     itmperil_tsi     ,
                                  B380.prem_amt    itmperil_premium ,
                                  B380.ann_tsi_amt itmperil_ann_tsi ,
                                  B380.peril_cd    peril_cd
                             FROM GIPI_WITMPERL B380, GIPI_WITEM B340
                            WHERE B380.item_no   = B340.item_no
                              AND B380.par_id = B340.par_id
                              AND B340.item_no   = c2.item_no
                              AND B340.par_id = p_par_id)                
                  LOOP

                  /* Create records in table GIUW_WITEMPERILDS and GIUW_WITEMPERILDS_DTL
                  ** for the specified DIST_SEQ_NO. */
                  IF  v_current_takeup = v_max_takeup THEN 
                            c3.itmperil_tsi     := NVL(c3.itmperil_tsi,0)     ;
                            c3.itmperil_premium := NVL(c3.itmperil_premium,0) - (ROUND((NVL(c3.itmperil_premium,0)/v_max_takeup  ),2) * (v_max_takeup - 1));
                            c3.itmperil_ann_tsi := NVL(c3.itmperil_ann_tsi,0) ;
                        ELSE
                            IF dist_cnt = 0 THEN
                                dist_cnt := 1;
                            END IF;
                            c3.itmperil_tsi     := ROUND((NVL(c3.itmperil_tsi,0)    ),2);
                            c3.itmperil_premium := ROUND((NVL(c3.itmperil_premium,0)/ v_max_takeup ),2);
                            c3.itmperil_ann_tsi := ROUND((NVL(c3.itmperil_ann_tsi,0)),2);
                   END IF;  
                  
                      INSERT INTO  GIUW_WITEMPERILDS  
                                    (dist_no             , dist_seq_no    , item_no         ,
                                     peril_cd            , line_cd        , tsi_amt         ,
                                     prem_amt            , ann_tsi_amt)
                             VALUES (p_dist_no           , p_dist_seq_no  , c2.item_no      ,
                                     c3.peril_cd         , p_line_cd      , c3.itmperil_tsi , 
                                     c3.itmperil_premium , c3.itmperil_ann_tsi);
               END LOOP;          
        
      END LOOP;
       
       -- jhing  12.01.2014 insert GIUW_WPERILDS based on the record on GIUW_WITEMPERILDS
      FOR c4 IN ( SELECT SUM(tsi_amt)     tsi_amt     ,
                                  SUM(prem_amt)    prem_amt    ,
                                  SUM(ann_tsi_amt) ann_tsi_amt ,
                                  dist_no          dist_no     ,
                                  dist_seq_no      dist_seq_no ,
                                  line_cd          line_cd     ,
                                  peril_cd         peril_cd    
                             FROM GIUW_WITEMPERILDS
                            WHERE dist_seq_no = p_dist_seq_no
                              AND dist_no     = p_dist_no
                            GROUP BY dist_no, dist_seq_no, line_cd, peril_cd)
      LOOP

                /* Create records in table GIUW_WPERILDS and GIUW_WPERILDS_DTL
                ** for the specified DIST_SEQ_NO. */            
                
           INSERT INTO  GIUW_WPERILDS  
                  (dist_no    , dist_seq_no    , peril_cd    ,
                   line_cd    , tsi_amt        , prem_amt    ,
                   ann_tsi_amt)
              VALUES 
                    (p_dist_no  , p_dist_seq_no  , c4.peril_cd ,
                   p_line_cd  , c4.tsi_amt     , c4.prem_amt ,
                   c4.ann_tsi_amt);              
         
      END LOOP;  
     
      -- jhing 12.11.2014 added validation on amounts during saving of dist records (DS)
      --    RAISE_APPLICATION_ERROR (-20003 , 'Geniisys Exception#E#REIKOH TEST.'); 
 

      v_err_exists := 'N';
      GIUW_POL_DIST_PKG.check_missing_dist_rec_item (p_dist_no, p_par_id , v_err_exists );
      IF v_err_exists = 'Y' THEN
           RAISE_APPLICATION_ERROR (-20003 , 'Geniisys Exception#E#There are missing distribution records. Please recreate the items before re-grouping the items.'); 
      END IF;            

    END RECRTE_GRP_DFLT_DIST_DS;     

    PROCEDURE val_sequential_distGrp (
      p_dist_no         IN giuw_pol_dist.dist_no%TYPE ,
      p_module_id       IN giis_modules.module_id%TYPE,
      p_result          OUT VARCHAR2
    )
    IS
    /** ====================================================================================================
    **  Created by : Jhing Factor  04.06.2016
    **  Purpose    : This procedure will if the generated dist seq no is sequential
    ** ================================================================================================== */
    
    v_dist_seq_no giuw_wpolicyds.dist_seq_no%TYPE := 0 ; 
    v_error varchar2(1) := 'N'; 
    BEGIN

        IF p_module_id = 'GIUWS010' THEN
            v_dist_seq_no := 0 ; 
            FOR cur IN (SELECT DISTINCT dist_seq_no
                           FROM giuw_witemds
                          WHERE dist_no = p_dist_no
                       ORDER BY dist_seq_no)
            LOOP
                v_dist_seq_no := v_dist_seq_no + 1 ;
                
                IF cur.dist_seq_no <> v_dist_seq_no THEN
                    v_error := 'Y';
                    EXIT;
                END IF;
            
            END LOOP;
        
        ELSIF p_module_id = 'GIUWS018' THEN
            v_dist_seq_no := 0 ; 
            FOR cur IN (SELECT DISTINCT dist_seq_no
                           FROM giuw_wperilds
                          WHERE dist_no = p_dist_no
                       ORDER BY dist_seq_no)
            LOOP
                v_dist_seq_no := v_dist_seq_no + 1 ;
                
                IF cur.dist_seq_no <> v_dist_seq_no THEN
                    v_error := 'Y';
                    EXIT;
                END IF;
            
            END LOOP;        
        END IF; 
        
        p_result := v_error; 
      
    
    END ;      
         
    PROCEDURE val_multipleBillGrp_perDist (
      p_dist_no         IN giuw_pol_dist.dist_no%TYPE ,
      p_par_id          IN gipi_parlist.par_id%TYPE,
      p_result          OUT VARCHAR2
    )
    IS
    /** ====================================================================================================
    **  Created by : Jhing Factor 04.06.2016
    **  Purpose    : This procedure will check if multiple bill groups were grouped into a single distribution group.
    ** ================================================================================================== */
     v_error varchar2(1) := 'N';
    BEGIN
    
        FOR cur IN (SELECT   b.dist_seq_no, COUNT (DISTINCT a.item_grp) cnt_itemgrp
                        FROM gipi_witem a, giuw_witemds b
                       WHERE a.par_id = p_par_id AND b.dist_no = p_dist_no
                             AND a.item_no = b.item_no
                    GROUP BY b.dist_seq_no
                      HAVING COUNT (DISTINCT a.item_grp) > 1)
        LOOP
            v_error := 'Y';
            EXIT;        
        END LOOP; 
       
        p_result := v_error; 
    END val_multipleBillGrp_perDist;   

           
    PROCEDURE check_missing_dist_rec_item (
          p_dist_no         IN giuw_pol_dist.dist_no%TYPE ,
          p_par_id          IN gipi_parlist.par_id%TYPE,
          p_result          OUT VARCHAR2
    )                                         
    IS
     /** ====================================================================================================
    **  Created by : Jhing Factor 04.06.2016
    **  Purpose    : This procedure will check if there are missing records between gipi_itmperil and 
    **               GIUW_WITEMDS. 
    ** ================================================================================================== */
    v_redist_flag   VARCHAR2(1) := 'N'; 
    v_max_takeup    giuw_pol_dist.takeup_seq_no%TYPE;
    v_error         VARCHAR2(1) := 'N'; 
    v_discrep       VARCHAR2(1) := 'N';
    v_tsi_amt       giuw_wperilds.tsi_amt%TYPE;
    v_prem_amt      giuw_wperilds.prem_amt%TYPE; 
    v_exists        varchar2(1);
    v_posted_bndr   VARCHAR2(1); 
    BEGIN
    
        v_posted_bndr := 'N';
        FOR curbinder IN ( SELECT 1 
                            FROM giri_distfrps 
                                  WHERE dist_no = p_dist_no )
        LOOP
            v_posted_bndr := 'Y';
            EXIT;
        END LOOP;
        
        
        IF v_posted_bndr = 'N' THEN   
             -- get the maximum takeup seq no to identify if the policy has multiple takeups 
            FOR cur2 in (SELECT NVL(MAX(takeup_seq_no),1) max_takeup 
                            FROM giuw_pol_dist 
                                WHERE par_id = p_par_id )
            LOOP
                v_max_takeup := cur2.max_takeup ;
                EXIT;
            END LOOP;
            
            
            -- for now only check the non-redistributed, single takeup policies. For long term and redistributed check the TSI only. 
            IF v_max_takeup = 1 THEN            
       
                FOR curitmperil IN (SELECT   a.item_no, SUM (DECODE( b.peril_type, 'B', NVL(a.tsi_amt,0), 0 )) tsi_amt,
                                             SUM (NVL(a.prem_amt,0)) prem_amt, SUM (NVL(a.ann_tsi_amt,0)) ann_tsi_amt
                                        FROM gipi_witmperl a, giis_peril b 
                                       WHERE a.par_id = p_par_id
                                        AND a.line_cd = b.line_cd
                                        AND a.peril_cd = b.peril_cd
                                    GROUP BY a.item_no
                                    ORDER BY a.item_no )
                LOOP
                     v_discrep := 'N'; 
                     v_tsi_amt := 0 ;
                     v_prem_amt := 0 ; 
                     FOR curdist IN (SELECT   a.item_no , SUM (NVL (a.tsi_amt, 0)) tsi_amt,
                                             SUM (NVL (a.prem_amt, 0)) prem_amt,
                                             SUM (NVL (a.ann_tsi_amt, 0)) ann_tsi_amt
                                        FROM giuw_witemds a
                                       WHERE a.dist_no = p_dist_no
                                        AND a.item_no = curitmperil.item_no
                                    GROUP BY a.item_no)
                     LOOP

                             v_tsi_amt := curdist.tsi_amt ;
                             v_prem_amt := curdist.prem_amt ; 
                            EXIT;                            
                        
                     END LOOP;
                
                     v_exists := 'N';
                     FOR cur in (SELECT 1 
                                     FROM giuw_witemds a
                                     WHERE a.dist_no = p_dist_no
                                       AND a.item_no = curitmperil.item_no )
                     LOOP
                        v_exists := 'Y';
                        EXIT;
                     END LOOP; 
                
                      IF ((curitmperil.tsi_amt <> v_tsi_amt 
                           OR curitmperil.prem_amt <> v_prem_amt) OR v_exists = 'N' ) THEN                            
                                    v_discrep := 'Y';                             
                      END IF;
                      
                      IF v_discrep = 'Y' THEN
                        exit;
                      END IF;
                END LOOP;   
                
                IF v_discrep = 'Y' THEN
                    v_error := 'Y';
                END IF; 
            ELSE
               -- for now let's validate the TSI for long term and redistributed. After the saving and recreation, premium would be corrected. It is just important
               -- to ensure there are no missing records in GIUW_WPERILDS in comparison with GIPI_ITMPERIL 
     
               FOR curitmperil IN (SELECT   a.item_no, SUM (DECODE( b.peril_type, 'B', NVL(a.tsi_amt,0), 0 )) tsi_amt,
                                             SUM (NVL(a.prem_amt,0)) prem_amt, SUM (NVL(a.ann_tsi_amt,0)) ann_tsi_amt
                                        FROM gipi_witmperl a, giis_peril b 
                                       WHERE a.par_id = p_par_id
                                        AND a.line_cd = b.line_cd
                                        AND a.peril_cd = b.peril_cd
                                    GROUP BY a.item_no
                                    ORDER BY a.item_no)
                LOOP
                     v_discrep := 'N'; 
                     v_tsi_amt := 0 ;
                     v_prem_amt := 0 ; 
                     FOR curdist IN (SELECT   a.item_no , SUM (NVL (a.tsi_amt, 0)) tsi_amt,
                                             SUM (NVL (a.prem_amt, 0)) prem_amt,
                                             SUM (NVL (a.ann_tsi_amt, 0)) ann_tsi_amt
                                        FROM giuw_witemds a
                                       WHERE a.dist_no = p_dist_no
                                        AND a.item_no = curitmperil.item_no
                                    GROUP BY a.item_no)
                     LOOP

                             v_tsi_amt := curdist.tsi_amt ;
                             v_prem_amt := curdist.prem_amt ; 
                            EXIT;                            
                        
                     END LOOP;

                     v_exists := 'N';
                     FOR cur in (SELECT 1 
                                     FROM giuw_witemds a
                                     WHERE a.dist_no = p_dist_no
                                       AND a.item_no = curitmperil.item_no )
                     LOOP
                        v_exists := 'Y';
                        EXIT;
                     END LOOP;            
                
                
                     IF ( ( curitmperil.tsi_amt <> v_tsi_amt )OR v_exists = 'N' )   THEN                            
                         v_discrep := 'Y';                             
                     END IF;
                      
                     IF v_discrep = 'Y' THEN
                        EXIT;
                     END IF;
                END LOOP;   
                
                IF v_discrep = 'Y' THEN
                    v_error := 'Y';
                END IF; 
               
            END IF;             
       END IF;
       p_result := v_error;    
    END check_missing_dist_rec_item;     
END giuw_pol_dist_pkg;
/


