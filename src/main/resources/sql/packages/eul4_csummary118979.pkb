CREATE OR REPLACE PACKAGE BODY CPI.EUL4_CSUMMARY118979 IS

PROCEDURE UPDATE_SUMMARY_STATE(SID IN NUMBER, STATE IN NUMBER) IS
BEGIN
  UPDATE CPI.EUL4_SUMMARY_OBJS
  SET EMS_STATE = STATE
  WHERE SUMO_ID = SID;
  COMMIT;
END;

PROCEDURE UPDATE_SUMMARY_STATE(SID IN NUMBER, ERROR_TEXT IN VARCHAR2, ERROR_CODE IN NUMBER) IS
  ERROR_CODE_VAR NUMBER;
BEGIN
  ERROR_CODE_VAR := ERROR_CODE;
  IF (SIGN(ERROR_CODE_VAR) = -1) THEN
    ERROR_CODE_VAR := ABS(ERROR_CODE_VAR);
  END IF;
  UPDATE CPI.EUL4_SUMMARY_OBJS
  SET MSDO_SVR_ERR_CODE = ERROR_CODE_VAR,
      MSDO_SVR_ERR_TEXT = ERROR_TEXT
      WHERE SUMO_ID = SID;
  COMMIT;
END;

FUNCTION GET_SUMMARY_STATE(SID IN NUMBER) RETURN NUMBER IS
  RET_STATE NUMBER;
BEGIN
  SELECT EMS_STATE INTO RET_STATE
  FROM CPI.EUL4_SUMMARY_OBJS
  WHERE SUMO_ID = SID;
  RETURN RET_STATE;
EXCEPTION
  WHEN OTHERS THEN
    RETURN 4;
END;

FUNCTION IS_SDO_REFRESH_COMPLETE(SID IN NUMBER) RETURN BOOLEAN IS
  SUMO_TYPE_MV NUMBER;
BEGIN
  SELECT DECODE(SUMO_TYPE, 'SMS', 1, 0) INTO SUMO_TYPE_MV
  FROM CPI.EUL4_SUMMARY_OBJS
  WHERE SUMO_ID = SID;
  IF (SUMO_TYPE_MV = 1) THEN
    RETURN TRUE;
  END IF;
  IF (GET_SUMMARY_STATE(SID) = 3) THEN
    RETURN TRUE;
  ELSE
    RETURN FALSE;
  END IF;
END;

PROCEDURE UPDATE_SUMMARY_SET_STATE(SID IN NUMBER, STATE IN NUMBER) IS
BEGIN
  UPDATE CPI.EUL4_SUM_RFSH_SETS
  SET SRS_STATE = STATE
  WHERE SRS_ID = SID;
  COMMIT;
END;

FUNCTION GET_SUMMARY_SET_STATE(SID IN NUMBER) RETURN NUMBER IS
  RET_STATE NUMBER;
BEGIN
  SELECT SRS_STATE INTO RET_STATE
  FROM CPI.EUL4_SUM_RFSH_SETS
  WHERE SRS_ID = SID;
  RETURN RET_STATE;
EXCEPTION
  WHEN OTHERS THEN
    RETURN 4;
END;

PROCEDURE UPDATE_SUMMARY_SET_DATES(SID IN NUMBER, NEXT_DATE IN DATE) IS
BEGIN
  UPDATE CPI.EUL4_SUM_RFSH_SETS
  SET SRS_LAST_REFRESH = sysdate,
      SRS_NEXT_REFRESH = NEXT_DATE
  WHERE SRS_ID = SID;
  COMMIT;
END;

PROCEDURE INITIALIZE_SUMMARY_SET_COUNT(SID IN NUMBER) IS
BEGIN
  UPDATE CPI.EUL4_SUM_RFSH_SETS
  SET SRS_REFRESH_COUNT = 0
  WHERE SRS_ID = SID;
  COMMIT;
END;

PROCEDURE INCREMENT_SUMMARY_SET_COUNT(SID IN NUMBER) IS
BEGIN
  UPDATE CPI.EUL4_SUM_RFSH_SETS
  SET SRS_REFRESH_COUNT = SRS_REFRESH_COUNT + 1
  WHERE SRS_ID = SID;
  COMMIT;
END;

PROCEDURE GET_REFRESH_INFO(EUL_SRS_ID IN NUMBER, DBMS_JOB_NO IN NUMBER, NEXT_REFRESH_DATE IN OUT DATE, NUM_FREQ_UNITS IN OUT NUMBER, REFRESH_EXPRESSION IN OUT VARCHAR2, EUL_JOB_NO IN OUT NUMBER) IS
BEGIN
  SELECT NEXT_DATE INTO NEXT_REFRESH_DATE
  FROM USER_JOBS
  WHERE JOB = DBMS_JOB_NO;
  SELECT SRS.SRS_NUM_FREQ_UNITS,
         SRS.SRS_JOB_ID,
         FU.RFU_SQL_EXPRESSION
         INTO NUM_FREQ_UNITS,
         EUL_JOB_NO,
         REFRESH_EXPRESSION
  FROM CPI.EUL4_SUM_RFSH_SETS SRS,
       CPI.EUL4_FREQ_UNITS FU
  WHERE SRS.SRS_ID = EUL_SRS_ID
  AND SRS.SRS_RFU_ID = FU.RFU_ID;
  REFRESH_EXPRESSION := REPLACE(REFRESH_EXPRESSION, '''''', '?');
  REFRESH_EXPRESSION := REPLACE(REFRESH_EXPRESSION, '''', '');
  REFRESH_EXPRESSION := REPLACE(REFRESH_EXPRESSION, '?', '''');
  REFRESH_EXPRESSION := REPLACE(REFRESH_EXPRESSION, '&', ':');
END;

PROCEDURE CALC_NEXT_DATE(NEXT_REFRESH_DATE IN OUT DATE, NUM_FREQ_UNITS IN NUMBER, REFRESH_EXPRESSION IN VARCHAR2) IS
  DATE_EXPRESSION VARCHAR2(2000);
  DATE_CUR        INTEGER;
  IGNORE          INTEGER;
  NO_ROWS         INTEGER;
BEGIN
  DATE_EXPRESSION := 'SELECT ' || REFRESH_EXPRESSION || ' FROM SYS.DUAL';
  DATE_CUR := DBMS_SQL.OPEN_CURSOR;
  DBMS_SQL.PARSE(DATE_CUR, DATE_EXPRESSION, DBMS_SQL.V7);
  DBMS_SQL.DEFINE_COLUMN(DATE_CUR, 1, NEXT_REFRESH_DATE);
  LOOP
    DBMS_SQL.BIND_VARIABLE(DATE_CUR, 'bind_num_units', NUM_FREQ_UNITS);
    DBMS_SQL.BIND_VARIABLE(DATE_CUR, 'bind_date', NEXT_REFRESH_DATE);
    IGNORE := DBMS_SQL.EXECUTE(DATE_CUR);
    NO_ROWS := DBMS_SQL.FETCH_ROWS(DATE_CUR);
    DBMS_SQL.COLUMN_VALUE(DATE_CUR, 1, NEXT_REFRESH_DATE);
    IF (NEXT_REFRESH_DATE > SYSDATE) THEN
      EXIT;
    END IF;
  END LOOP;
  DBMS_SQL.CLOSE_CURSOR(DATE_CUR);
END;

PROCEDURE SCHEDULE_REFRESH(EUL_SRS_ID IN NUMBER, JOB IN NUMBER, NEXT_DATE IN OUT DATE) IS
  NEXT_REFRESH_DATE  DATE;
  NUM_FREQ_UNITS     NUMBER;
  REFRESH_EXPRESSION VARCHAR2(2000);
  EUL_JOB_NO         NUMBER;
  IGNORE             NUMBER;
BEGIN
  IF (JOB <> -1) THEN
    GET_REFRESH_INFO(EUL_SRS_ID,
                     JOB,
                     NEXT_REFRESH_DATE,
                     NUM_FREQ_UNITS,
                     REFRESH_EXPRESSION,
                     EUL_JOB_NO);
    IF (EUL_JOB_NO IS NOT NULL) AND (JOB = EUL_JOB_NO) THEN
      CALC_NEXT_DATE(NEXT_REFRESH_DATE,
                     NUM_FREQ_UNITS,
                     REFRESH_EXPRESSION);
      NEXT_DATE := NEXT_REFRESH_DATE;
    END IF;
  END IF;
  EXCEPTION
    WHEN OTHERS THEN
      IGNORE := 1;
END;

FUNCTION GET_NUM_ROWS(SUM_OWNER IN VARCHAR2, SUM_NAME IN VARCHAR2) RETURN NUMBER IS
  RET_NUM_ROWS NUMBER;
BEGIN
   SELECT NUM_ROWS INTO RET_NUM_ROWS
   FROM ALL_TABLES
   WHERE OWNER = SUM_OWNER
   AND TABLE_NAME = SUM_NAME;
   RETURN RET_NUM_ROWS;
END;

FUNCTION GET_DATA_DICT_REFRESH_TYPE(MATVIEW_OWNER IN VARCHAR2, MATVIEW_NAME IN VARCHAR2) RETURN NUMBER IS
  REFRESH_TYPE NUMBER;
BEGIN
  SELECT DECODE(REFRESH_METHOD, 'FORCE', 1, 'FAST', 2, 'COMPLETE', 3) INTO REFRESH_TYPE
  FROM ALL_MVIEWS
  WHERE OWNER = MATVIEW_OWNER
  AND MVIEW_NAME = MATVIEW_NAME;
  RETURN REFRESH_TYPE;
END;

FUNCTION IS_MV_EMPTY(MATVIEW_OWNER IN VARCHAR2, MATVIEW_NAME IN VARCHAR2) RETURN BOOLEAN IS
  MV_EMPTY NUMBER;
BEGIN
  SELECT DECODE(LAST_REFRESH_TYPE, 'NA', 1, 0) INTO MV_EMPTY
  FROM ALL_MVIEWS
  WHERE OWNER = MATVIEW_OWNER
  AND MVIEW_NAME = MATVIEW_NAME;
  IF (MV_EMPTY = 1) THEN
    RETURN TRUE;
  ELSE
    RETURN FALSE;
  END IF;
END;

FUNCTION IS_REFRESH_ON_COMMIT(MATVIEW_OWNER IN VARCHAR2, MATVIEW_NAME IN VARCHAR2) RETURN BOOLEAN IS
  ON_COMMIT NUMBER;
BEGIN
  SELECT DECODE(REFRESH_MODE, 'COMMIT', 1, 0) INTO ON_COMMIT
  FROM ALL_SNAPSHOTS
  WHERE NAME = MATVIEW_NAME
  AND OWNER = MATVIEW_OWNER;
  IF (ON_COMMIT = 1) THEN
    RETURN TRUE;
  ELSE
    RETURN FALSE;
  END IF;
END;

PROCEDURE TRANSLATE_REFRESH_TYPE(REFRESH_TYPE IN OUT NUMBER) IS
BEGIN
  IF (REFRESH_TYPE = 2) THEN
    REFRESH_TYPE := 1;
  ELSIF (REFRESH_TYPE = 3) THEN
    REFRESH_TYPE := 4;
  END IF;
END;

FUNCTION GET_CALCULATED_REFRESH_TYPE(MATVIEW_OWNER IN VARCHAR2, MATVIEW_NAME IN VARCHAR2) RETURN NUMBER IS
  REFRESH_TYPE NUMBER;
BEGIN
  REFRESH_TYPE := GET_DATA_DICT_REFRESH_TYPE(MATVIEW_OWNER,
                                             MATVIEW_NAME);
  TRANSLATE_REFRESH_TYPE(REFRESH_TYPE);
  IF ((REFRESH_TYPE = 1) AND
      (IS_MV_EMPTY(MATVIEW_OWNER, MATVIEW_NAME))) THEN
    REFRESH_TYPE := 4;
  END IF;
  IF ((REFRESH_TYPE != 4)
      AND (GET_STALENESS(MATVIEW_OWNER, MATVIEW_NAME) = 2)) THEN
    REFRESH_TYPE := 4;
  END IF;
  RETURN REFRESH_TYPE;
END;

PROCEDURE SET_REFRESH_LOG(SID IN NUMBER) IS
  LOG_FILE_NAME VARCHAR2(2000) := 'EUL4_MV';
BEGIN
  LOG_FILE_NAME := LOG_FILE_NAME || TO_CHAR(SID) || '.LOG';
  DBMS_OLAP.SET_LOGFILE_NAME(LOG_FILE_NAME);
END;

PROCEDURE REFRESH_MV(MATVIEW_OWNER IN VARCHAR2, MATVIEW_NAME IN VARCHAR2, REFRESH_TYPE IN NUMBER) IS
  REFRESH_TYPE_CHAR CHAR(1);
  QUALIFIED_MVIEW_NAME VARCHAR2(2000);
BEGIN
  IF (REFRESH_TYPE = 4) THEN
    REFRESH_TYPE_CHAR := 'A';
  ELSE
    REFRESH_TYPE_CHAR := '?';
  END IF;
  QUALIFIED_MVIEW_NAME := MATVIEW_OWNER || '.' || MATVIEW_NAME;
    DBMS_MVIEW.REFRESH(QUALIFIED_MVIEW_NAME, REFRESH_TYPE_CHAR, '', TRUE, FALSE, 0, 0, 0, TRUE);

END;

PROCEDURE ENABLE_QUERY_REWRITE(MATVIEW_OWNER IN VARCHAR2, MATVIEW_NAME IN VARCHAR2, SRS IN NUMBER) IS
  QUALIFIED_MVIEW_NAME VARCHAR2(2000);
  ONLINE_BOOL          BOOLEAN;
BEGIN
  QUALIFIED_MVIEW_NAME := MATVIEW_OWNER || '.' || MATVIEW_NAME;
  ONLINE_BOOL := IS_ONLINE(SRS);
  IF (ONLINE_BOOL = TRUE) THEN
    EXECUTE IMMEDIATE 'ALTER MATERIALIZED VIEW ' || QUALIFIED_MVIEW_NAME || ' ENABLE QUERY REWRITE';
  ELSE
    EXECUTE IMMEDIATE 'ALTER MATERIALIZED VIEW ' || QUALIFIED_MVIEW_NAME || ' DISABLE QUERY REWRITE';
  END IF;
END;

PROCEDURE UPDATE_SUMMARY_ROWS(SID IN NUMBER, NO_ROWS IN NUMBER) IS
BEGIN
  UPDATE CPI.EUL4_SUMMARY_OBJS
  SET SDO_NUM_ROWS = NO_ROWS
  WHERE SUMO_ID  = SID;
  COMMIT;
END;

FUNCTION IS_ONLINE(SRS IN NUMBER) RETURN BOOLEAN IS
  ONLINE_RET NUMBER;
BEGIN
  SELECT SRS_ONLINE INTO ONLINE_RET
  FROM CPI.EUL4_SUM_RFSH_SETS
  WHERE SRS_ID = SRS;
  IF (ONLINE_RET = 1) THEN
    RETURN TRUE;
  END IF;
  RETURN FALSE;
END;

FUNCTION GET_STALENESS(MATVIEW_OWNER IN VARCHAR2, MATVIEW_NAME IN VARCHAR2) RETURN NUMBER IS
  STALENESS_RET NUMBER;
BEGIN
  SELECT DECODE(STALENESS, 'FRESH', 0,
                           'STALE', 1,
                           'UNUSABLE', 2,
                           'UNKNOWN', 3,
                           'UNDEFINED', 4) INTO STALENESS_RET
  FROM ALL_MVIEWS
  WHERE OWNER = MATVIEW_OWNER
  AND MVIEW_NAME = MATVIEW_NAME;
  RETURN STALENESS_RET;
END;

END EUL4_CSUMMARY118979;
/

DROP PACKAGE BODY CPI.EUL4_CSUMMARY118979;


