CREATE OR REPLACE PACKAGE BODY CPI.compute_uwtaxes
AS
/*
**  Created by :    Edgar Nobleza
**  Date Created:   02-07-2014
**  Created to correct the tax amount generated by CREATE_WINVOICE procedure
*/
/*function for computing DOC STAMPS taxes*/
   FUNCTION compute_dst (
      p_par_id          NUMBER,
      p_int_premium     NUMBER,
      p_int_tsi         NUMBER,
      p_tax_type        VARCHAR2,
      p_line_cd         VARCHAR2,
      p_iss_cd          VARCHAR2,
      p_tax_cd          NUMBER,
      p_tax_id          NUMBER,
      p_rate            NUMBER,
      p_peril_sw        VARCHAR2,
      p_currency_rt     NUMBER,
      p_item_grp        NUMBER,
      p_takeup_seq_no   NUMBER
   --p_takeup_term NUMBER
   )
      RETURN NUMBER
   IS
      v_par_id          NUMBER                               := p_par_id;
      v_menu_line_cd    VARCHAR2 (2);
      v_tax_amt         NUMBER;
      v_sum_tsi         NUMBER;
      v_sum_premium     NUMBER;
      v_currency_rt     NUMBER                               := p_currency_rt;
      v_rate            NUMBER                               := p_rate;
      v_peril_sw        VARCHAR2 (1)                         := p_peril_sw;
      v_line_cd         VARCHAR2 (2)                         := p_line_cd;
      v_iss_cd          VARCHAR2 (2)                         := p_iss_cd;
      v_tax_cd          NUMBER                               := p_tax_cd;
      v_tax_id          NUMBER                               := p_tax_id;
      v_item_grp        NUMBER                               := p_item_grp;
      v_takeup_seq_no   NUMBER                             := p_takeup_seq_no;
      v_param_old_doc   giis_parameters.param_value_v%TYPE
                                        := giisp.v ('COMPUTE_OLD_DOC_STAMPS');
      v_param_pa_doc    giis_parameters.param_value_v%TYPE
                                         := giisp.v ('COMPUTE_PA_DOC_STAMPS');
      v_peril_dep_prem  gipi_winvoice.prem_amt%TYPE := 0  ; 
      v_line_ac_param   giis_parameters.param_value_v%TYPE
                                        := giisp.v ('LINE_CODE_AH');
      v_act_menu_line_cd giis_line.menu_line_cd%TYPE ;
      v_act_line_cd      giis_line.line_cd%TYPE ; 
      CURSOR compute_tsi 
        IS
            SELECT SUM (NVL (a.tsi_amt, 0)) tsi_amt
              FROM gipi_witmperl a, gipi_witem b, giis_peril c
             WHERE a.par_id = b.par_id
               AND a.item_no = b.item_no
               AND a.line_cd = c.line_cd
               AND a.peril_cd = c.peril_cd
               AND c.peril_type = 'B'
               AND a.par_id = p_par_id
               AND b.item_grp = p_item_grp ; 
   BEGIN
      SELECT NVL (a.menu_line_cd, a.line_cd) , a.menu_line_cd, a.line_cd 
        INTO v_menu_line_cd, v_act_menu_line_cd, v_act_line_cd
        FROM giis_line a, gipi_wpolbas b
       WHERE a.line_cd = b.line_cd
         AND a.line_cd = v_line_cd
         AND b.iss_cd = v_iss_cd
         AND b.par_id = v_par_id;
     -- jhing 10.28.2014 added code for peril dependent premium. For PA_DOCStamps = 2 , peril dependency should also be considered                 
     v_sum_premium := 0 ; 
     IF p_peril_sw = 'Y' THEN 
         FOR curx in ( SELECT SUM (a.prem_amt) prem_amt
                          FROM gipi_witmperl a, giis_tax_peril b, gipi_witem c
                              WHERE a.line_cd = b.line_cd
                                AND a.peril_cd = b.peril_cd
                                AND a.par_id = c.par_id
                                AND a.item_no = c.item_no
                                AND c.item_grp = p_item_grp
                                AND a.par_id = p_par_id
                                AND b.tax_cd = p_tax_cd
                                AND b.line_cd = p_line_cd
                                AND b.iss_cd = p_iss_cd
                                AND b.tax_id = p_tax_id)
          LOOP
              v_sum_premium := v_sum_premium + NVL(curx.prem_amt,0) ;
          END LOOP;  
      ELSE 
         FOR curx in ( SELECT SUM (a.prem_amt) prem_amt
                          FROM gipi_witmperl a, gipi_witem c
                              WHERE a.par_id = c.par_id
                                AND a.item_no = c.item_no
                                AND c.item_grp = v_item_grp
                                AND a.par_id = p_par_id )
          LOOP
              v_sum_premium := v_sum_premium + NVL(curx.prem_amt,0) ;
          END LOOP;  
      END IF;                     
      IF p_tax_type = 'N' AND /* v_menu_line_cd = 'AC'  -- jhing 10.28.2014 replace with :*/ (v_act_menu_line_cd = 'AC' OR (v_act_menu_line_cd IS NULL and v_act_line_cd = v_line_ac_param ) ) AND v_param_pa_doc = '3'
      THEN
         -- v_sum_tsi := p_int_tsi; -- jhing 10.28.2014 replaced with:
         FOR curx in compute_tsi
         LOOP
            v_sum_tsi := NVL(curx.tsi_amt,0); 
         END LOOP;
         v_tax_amt :=
            compute_uwtaxes.get_tax_range (v_sum_tsi,
                                           v_currency_rt,
                                           v_line_cd,
                                           v_iss_cd,
                                           v_tax_cd,
                                           v_tax_id
                                          );
      ELSE
         --v_sum_premium := p_int_premium;  -- jhing 10.30.2014 commented out due to discrep on comparing with RCM version.v_sum_premium is already computed in the code changes above
         IF /* v_menu_line_cd = 'AC'  -- jhing 10.28.2014 replaced with: */  (v_act_menu_line_cd = 'AC' OR (v_act_menu_line_cd IS NULL and v_act_line_cd = v_line_ac_param ) )
         THEN                                                        --for PA
            IF v_param_pa_doc = '2'
            THEN
               /*Modified to if condition edgar 10/10/2014*/
               IF v_sum_premium > 0 THEN
                    --v_tax_amt := CEIL ((v_sum_premium / 200) * 0.5); --modified by pol cruz 01.22.2015
                    v_tax_amt := CEIL (v_sum_premium / 200) * 0.5;  
               ELSE
                    --v_tax_amt := FLOOR ((v_sum_premium / 200) * 0.5); --modified by pol cruz 01.22.2015
                    v_tax_amt := FLOOR (v_sum_premium / 200) * 0.5;  
               END IF; 
            ELSIF  v_param_pa_doc = '1' THEN  -- jhing 10.28.2014 added PA_DOCStamps = 1     
               v_tax_amt :=
                     compute_uwtaxes.get_fixed_rate (v_par_id,
                                                     v_item_grp,
                                                     v_takeup_seq_no,
                                                     v_sum_premium,
                                                     v_rate,
                                                     v_peril_sw,
                                                     v_line_cd,
                                                     v_iss_cd,
                                                     v_tax_cd,
                                                     v_tax_id
                                                    );
            ELSE
               IF v_param_old_doc = 'Y'
               THEN             
                   /*Modified to if condition edgar 10/10/2014*/
                   IF v_sum_premium > 0 THEN
                        v_tax_amt := CEIL ((v_sum_premium / 200) * 0.5);  
                   ELSE
                        v_tax_amt := FLOOR ((v_sum_premium / 200) * 0.5);  
                   END IF; 
               ELSE
                  v_tax_amt :=
                     compute_uwtaxes.get_fixed_rate (v_par_id,
                                                     v_item_grp,
                                                     v_takeup_seq_no,
                                                     --p_takeup_term,
                                                     v_sum_premium,
                                                     v_rate,
                                                     v_peril_sw,--'N',   --Gzelle 10222014 as per maam vj, it should be based from giis_tax_charges
                                                     v_line_cd,
                                                     v_iss_cd,
                                                     v_tax_cd,
                                                     v_tax_id
                                                    );
               END IF;
            END IF;
         ELSE                                                     --for NON-PA
            IF v_param_old_doc = 'Y'
            THEN
               /*Modified to if condition edgar 10/10/2014*/
               IF v_sum_premium > 0 THEN
                    --v_tax_amt := CEIL ((v_sum_premium / 4) * 0.5); --modified by pol cruz 01.22.2015
                    v_tax_amt := CEIL (v_sum_premium / 4) * 0.5;
               ELSE
                    --v_tax_amt := FLOOR ((v_sum_premium / 4) * 0.5); --modified by pol cruz 01.22.2015
                    v_tax_amt := FLOOR (v_sum_premium / 4) * 0.5;
               END IF;
            ELSE
               v_tax_amt :=
                  compute_uwtaxes.get_fixed_rate (v_par_id,
                                                  v_item_grp,
                                                  v_takeup_seq_no,
                                                  --p_takeup_term,
                                                  v_sum_premium,
                                                  v_rate,
                                                  v_peril_sw,--'N',   --Gzelle 10222014 as per maam vj, it should be based from giis_tax_charges
                                                  v_line_cd,
                                                  v_iss_cd,
                                                  v_tax_cd,
                                                  v_tax_id
                                                 );
            END IF;
         END IF;
      END IF;
      RETURN (v_tax_amt);
   END;
/*function for computing EVAT taxes*/
   FUNCTION compute_evat (
      p_par_id          NUMBER,
      p_vat_tag         VARCHAR2,
      p_rate            NUMBER,
      p_int_prem        NUMBER,
      p_peril_sw        VARCHAR2,
      p_line_cd         VARCHAR2,
      p_iss_cd          VARCHAR2,
      p_tax_cd          NUMBER,
      p_tax_id          NUMBER,
      p_item_grp        NUMBER,
      p_takeup_seq_no   NUMBER
   )
      RETURN NUMBER
   IS
      v_par_id          NUMBER       := p_par_id;
      v_vat_tag         VARCHAR2 (1) := p_vat_tag;
      v_rate            NUMBER       := p_rate;
      v_int_prem        NUMBER       := p_int_prem;
      v_peril_sw        VARCHAR2 (1) := p_peril_sw;
      v_line_cd         VARCHAR2 (2) := p_line_cd;
      v_iss_cd          VARCHAR2 (2) := p_iss_cd;
      v_tax_cd          NUMBER       := p_tax_cd;
      v_tax_id          NUMBER       := p_tax_id;
      v_item_grp        NUMBER       := p_item_grp;
      v_takeup_seq_no   NUMBER       := p_takeup_seq_no;
      v_tax_amt         NUMBER;
      v_prem_amt        NUMBER;
   BEGIN
      DBMS_OUTPUT.PUT_LINE ('Vat Rate : ' || p_rate ); 
      IF p_vat_tag IN ('1', '2')
      THEN
         v_tax_amt := 0;
      ELSE
         DBMS_OUTPUT.PUT_LINE ('Rate computation for VAT ......'  ); 
         v_tax_amt :=
            compute_uwtaxes.get_fixed_rate (v_par_id,
                                            v_item_grp,
                                            v_takeup_seq_no,
                                            --v_takeup_term NUMBER,
                                            v_int_prem,
                                            v_rate,
                                            v_peril_sw,
                                            v_line_cd,
                                            v_iss_cd,
                                            v_tax_cd,
                                            v_tax_id
                                           );
      END IF;
      RETURN (v_tax_amt);
   END;
/*function for getting the amount base on rate maintained on tax charges*/
   FUNCTION get_fixed_rate (
      p_par_id          NUMBER,
      p_item_grp        NUMBER,
      p_takeup_seq_no   NUMBER,
      --p_takeup_term NUMBER,
      p_int_prem        NUMBER,
      p_rate            NUMBER,
      p_peril_sw        VARCHAR2,
      p_line_cd         VARCHAR2,
      p_iss_cd          VARCHAR2,
      p_tax_cd          NUMBER,
      p_tax_id          NUMBER
   )
      RETURN NUMBER
   IS
      v_tax_amt    NUMBER;
      v_prem_amt   NUMBER;
   BEGIN
      v_prem_amt := 0 ; 
      IF p_peril_sw = 'Y'
      THEN
         DBMS_OUTPUT.PUT_LINE ('Peril Dependent Fixed Rate : Premium = ' || v_prem_amt || ' .....' ) ; 
         FOR peril_dep in ( 
                 SELECT SUM (NVL(a.prem_amt,0)) prem_amt-- jhing 10.28.2014 added NVL just in case there would be an anomalous record with NULL Prem_amt         
                   FROM gipi_witmperl a, giis_tax_peril b, gipi_witem c
                  WHERE a.line_cd = b.line_cd
                    AND a.peril_cd = b.peril_cd
                    AND a.par_id = c.par_id
                    AND a.item_no = c.item_no
                    AND c.item_grp = p_item_grp
                    AND a.par_id = p_par_id
                    AND b.tax_cd = p_tax_cd
                    AND b.line_cd = p_line_cd
                    AND b.iss_cd = p_iss_cd
                    AND b.tax_id = p_tax_id)
         LOOP
            v_prem_amt := NVL(peril_dep.prem_amt,0); 
         END LOOP;          
         DBMS_OUTPUT.PUT_LINE ('Peril Dependent Fixed Rate : Premium = ' || v_prem_amt || ' .....' ) ;          
      ELSE
         DBMS_OUTPUT.PUT_LINE ('Non-Peril Dependent Fixed Rate .....' ) ; 
         --v_prem_amt := p_int_prem; -- jhing 10.28.2014 replaced with query so as to easily enable recomputation of prorate cancellation 
         FOR nonperil_dep in ( SELECT SUM (NVL(a.prem_amt,0)) prem_amt
                                   FROM gipi_witmperl a, gipi_witem c
                                  WHERE a.par_id = c.par_id
                                    AND a.item_no = c.item_no
                                    AND c.item_grp = p_item_grp
                                    AND a.par_id = p_par_id )
         LOOP
            v_prem_amt := NVL(nonperil_dep.prem_amt,0); 
         END LOOP;
      END IF;      
      v_tax_amt := v_prem_amt * (NVL(p_rate,0) / 100);
      RETURN (v_tax_amt);
   END;
/*function for getting the tax amount base on range*/
   FUNCTION get_tax_range (
      p_amount        NUMBER,
      p_currency_rt   NUMBER,
      p_line_cd       VARCHAR2,
      p_iss_cd        VARCHAR2,
      p_tax_cd        NUMBER,
      p_tax_id        NUMBER
   )
      RETURN NUMBER
   IS
      v_amount        NUMBER := p_amount;
      v_currency_rt   NUMBER := p_currency_rt;
      v_tax_amt       NUMBER;
   BEGIN
      SELECT tax_amount / v_currency_rt
        INTO v_tax_amt
        FROM giis_tax_range
       WHERE line_cd = p_line_cd
         AND iss_cd = p_iss_cd
         AND tax_cd = p_tax_cd
         AND tax_id = p_tax_id
         AND (v_amount * v_currency_rt) BETWEEN min_value AND max_value;
      
      -- SR 3759 FULLWEB SIT - apollo cruz 05.19.2015
      IF NVL(p_amount, 0) = 0 THEN
         RETURN 0;
      ELSE   
         RETURN (v_tax_amt);
      END IF; 
      
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         raise_application_error
            (-20002,
             'NO RECORDS EXIST IN THIS LINE AND ISSUE SOURCE (GIIS_TAX_RANGE).',
             TRUE
            );
   END;
/*Main Procedure for recomputing tax amounts*/
   PROCEDURE compute_tax (p_par_id IN NUMBER)
   IS
/*CURSOR a1 IS (SELECT  a.line_cd line_cd,
                        a.iss_cd iss_cd,
                        a.tax_cd tax_cd,
                        a.tax_id tax_id,
                        a.item_grp item_grp,
                        a.takeup_seq_no takeup_seq_no,
                        a.tax_amt tax_amt,
                        --NVL(b.tax_amount,0) fix_amt,
                        --b.tax_type tax_type,
                        --NVL(b.rate, 0) rate,
                        --b.peril_sw peril_sw,
                        c.place_cd place_cd,
                        C.EFF_DATE eff_date,
                        C.INCEPT_DATE incept_date,
                        C.ISSUE_DATE issue_date,
                        NVL(d.vat_tag,3) vat_tag,
                        e.par_type par_type
                    FROM   gipi_winv_tax a,
                        --giis_tax_charges b,
                        gipi_wpolbas c,
                        giis_assured d,
                        gipi_parlist e
                    WHERE --a.line_cd = b.line_cd
                    --AND a.iss_cd = b.iss_cd
                    --AND a.tax_cd = b.tax_cd
                    --AND a.tax_id = b.tax_id
                    a.par_id = c.par_id
                    AND a.line_cd = c.line_cd
                    AND a.iss_cd = c.iss_cd
                    AND c.assd_no = d.assd_no
                    AND a.par_id = e.par_id
                    and a.line_cd = e.line_cd
                    AND a.iss_cd = e.iss_cd
                    AND c.assd_no = e.assd_no
                    --AND DECODE(b.issue_date_tag, 'Y', c.eff_date, 'N', c.issue_date) BETWEEN b.eff_start_date AND b.eff_end_date
                    AND a.par_id = p_par_id);*/
      v_sum_premium         NUMBER;
      v_sum_tsi             NUMBER;
      v_tax_amt             NUMBER;
      v_sign_tsi            NUMBER;
      v_sign_prem           NUMBER;
      v_prev_tax_amt        NUMBER;
      v_sum_tax_amt         NUMBER;
      v_cancelled_endt_id   gipi_wpolbas.cancelled_endt_id%TYPE;
      v_cancel_type         gipi_wpolbas.cancel_type%TYPE;
      v_pol_flag            gipi_wpolbas.pol_flag%TYPE;
      v_exists              VARCHAR2 (1)                          := 'N';
      v_line_cd             gipi_wpolbas.line_cd%TYPE;
      v_iss_cd              gipi_wpolbas.iss_cd%TYPE;
      v_subline_cd          gipi_wpolbas.subline_cd%TYPE;
      v_issue_yy            gipi_wpolbas.issue_yy%TYPE;
      v_pol_seq_no          gipi_wpolbas.pol_seq_no%TYPE;
      v_renew_no            gipi_wpolbas.renew_no%TYPE;
      v_flatrate            gipi_winv_tax.rate%TYPE               := 0;
      v_takeup_term         gipi_wpolbas.takeup_term%TYPE;
      v_par_id              gipi_wpolbas.par_id%TYPE              := p_par_id;
      v_diff_item           VARCHAR2 (1)                          := 'N';  -- jhing 10.27.2014 added changes done by edgar 08/22/2014
      v_item_grp_cnt        NUMBER                                := 0;    --added edgar 08/22/2014  -- integrated by jhing 10.27.2014 
      v_multiple_bill       VARCHAR2 (1)                          := 'N';  --added edgar 08/22/2014   -- integrated by jhing 10.27.2014  
      -- jhing 10.28.2014 additional variables  
      v_recomp_tax_amt      gipi_winv_tax.tax_amt%TYPE            := 0 ; 
      v_prorate_tax         gipi_winv_tax.tax_amt%TYPE ; 
      v_assd_vat_tag        giis_assured.vat_tag%TYPE ;                    
      v_prorate_flag        gipi_wpolbas.prorate_flag%TYPE  ;               
      v_count_bill_grp      number ;                                      
      v_issue_date          gipi_wpolbas.issue_date%TYPE ;                   
      v_eff_date            gipi_wpolbas.eff_date%TYPE ;        
      v_new_tax_id          gipi_winv_tax.tax_id%TYPE ;
      v_new_tax_allocation  gipi_winv_tax.tax_allocation%TYPE ;
      v_new_fixed_tax_alloc gipi_winv_tax.fixed_tax_allocation%TYPE;   
      v_new_tax_type        giis_tax_charges.tax_type%TYPE;
      v_new_no_rate_tag     giis_tax_charges.no_rate_tag%TYPE ;   
      v_new_peril_sw        giis_tax_charges.peril_sw%TYPE; 
      v_new_rate            giis_tax_charges.rate%TYPE ;   
      v_max_takeup_seq      gipi_winvoice.takeup_seq_no%TYPE;   
      v_new_takeup_alloc    giis_tax_charges.takeup_alloc_tag%TYPE;   
      v_deleted_tax         BOOLEAN; 
      v_place_cd            gipi_wpolbas.place_cd%TYPE ; 
      v_curr_takeup_prem    gipi_winvoice.prem_amt%TYPE ;
      v_temp_multp          NUMBER ; 
      v_comp_cancellation   boolean := FALSE ;   
      v_tax_rate            gipi_winv_tax.RATE%TYPE; --edgar 11/12/2014          
	  v_return_nondef_tax   GIIS_PARAMETERS.param_value_v%TYPE := NVL(giisp.v('RETURN_NONDEF_TAX'),'1');  --added by robert GENQA 4844 08.10.15 
      -- jhing 10.28.2014 cursor to get taxes applicable for the current cancellation endorsement. These 
      -- cursors will be used by non-required taxes which were not inserted during the initial call of 
      -- create_winvoice
      CURSOR get_tax_cd ( p_line_cd      giis_tax_charges.line_cd%TYPE,
                          p_iss_cd       giis_tax_charges.iss_cd%TYPE,
                          p_tax_cd       giis_tax_charges.tax_cd%TYPE,
                          p_issue_date   gipi_wpolbas.issue_date%TYPE,
                          p_eff_date     gipi_wpolbas.eff_date%TYPE ,
                          p_place_cd     gipi_wpolbas.place_cd%TYPE  )
                       IS
                          SELECT DISTINCT a.tax_cd, a.tax_id, a.tax_type, a.tax_amount,
                                          a.allocation_tag, a.peril_sw, 
                                          a.issue_date_tag, NVL(a.no_rate_tag, 'N') no_rate_tag ,
                                          NVL(b.rate, NVL(a.rate,0)) rate , NVL(a.takeup_alloc_tag,'F') takeup_alloc_tag ,
                                          DECODE(a.allocation_tag,'N','N','Y') fixed_tax_alloc 
                                     FROM giis_tax_charges a , giis_tax_issue_place b 
                                    WHERE a.line_cd = p_line_cd
                                      AND a.iss_cd = p_iss_cd
                                      AND a.tax_cd = p_tax_cd
                                      AND TRUNC (a.eff_start_date) <= TRUNC (p_issue_date)
                                      AND TRUNC (a.eff_end_date) >= TRUNC (p_issue_date)
                                      AND NVL (a.issue_date_tag, 'N') = 'Y'
                                      AND a.tax_cd = b.tax_cd (+)
                                      AND a.tax_id = b.tax_id (+)
                                      AND a.line_cd = b.line_cd (+)
                                      AND a.iss_cd = b.iss_cd (+) 
                                      AND b.place_cd(+)  = p_place_cd                                     
									  AND (DECODE (v_return_nondef_tax,'1', refund_sw,'3', primary_sw, 1) = DECODE (v_return_nondef_tax,'1', 'Y','3', 'Y', 1)
                          				   OR primary_sw = DECODE (v_return_nondef_tax, '1', 'Y')) --added by robert GENQA 4844 08.10.15									                                      
                          UNION
                          SELECT DISTINCT a.tax_cd, a.tax_id, a.tax_type, a.tax_amount,
                                          a.allocation_tag, a.peril_sw, 
                                          a.issue_date_tag, NVL(a.no_rate_tag, 'N') no_rate_tag,
                                          NVL(b.rate, NVL(a.rate,0)) rate , NVL(a.takeup_alloc_tag,'F') takeup_alloc_tag,
                                          DECODE(a.allocation_tag,'N','N','Y') fixed_tax_alloc
                                     FROM giis_tax_charges a, giis_tax_issue_place b 
                                    WHERE a.line_cd = p_line_cd
                                      AND a.iss_cd = p_iss_cd
                                      AND a.tax_cd = p_tax_cd
                                      AND TRUNC (a.eff_start_date) <= TRUNC (p_eff_date)
                                      AND TRUNC (a.eff_end_date) >= TRUNC (p_eff_date)
                                      AND NVL (a.issue_date_tag, 'N') = 'N'
                                      AND a.tax_cd = b.tax_cd (+)
                                      AND a.tax_id = b.tax_id (+)
                                      AND a.line_cd = b.line_cd (+)
                                      AND a.iss_cd = b.iss_cd (+) 
                                      AND b.place_cd(+)= p_place_cd
									  AND (DECODE (v_return_nondef_tax,'1', refund_sw,'3', primary_sw, 1) = DECODE (v_return_nondef_tax,'1', 'Y','3', 'Y', 1)
                          				   OR primary_sw = DECODE (v_return_nondef_tax, '1', 'Y')) --added by robert GENQA 4844 08.10.15     
                          ORDER BY 2 ;
       CURSOR tax_from_old_pol (
          p_tax_cd        gipi_winv_tax.tax_cd%TYPE,
          p_currency_cd   gipi_winvoice.currency_cd%TYPE,
          p_currency_rt   gipi_winvoice.currency_rt%TYPE ,
          p_place_cd      gipi_wpolbas.place_cd%TYPE 
       )
       IS
          SELECT DISTINCT a.tax_cd, a.tax_id, a.iss_cd, a.line_cd,
                          c.allocation_tag, NVL(c.no_rate_tag, 'N') no_rate_tag, c.tax_type,
                          c.peril_sw, NVL(e.rate, NVL(c.rate,0)) rate, NVL(c.takeup_alloc_tag,'F') takeup_alloc_tag,
                          DECODE(c.allocation_tag,'N','N','Y') fixed_tax_alloc
                     FROM gipi_inv_tax a,
                          gipi_invoice b,
                          giis_tax_charges c,
                          gipi_polbasic d,
                          giis_tax_issue_place e 
                    WHERE a.iss_cd = b.iss_cd
                      AND a.prem_seq_no = b.prem_seq_no
                      AND a.line_cd = c.line_cd
                      AND a.iss_cd = c.iss_cd
                      AND a.tax_cd = c.tax_cd
                      AND a.tax_id = c.tax_id
                      AND b.policy_id = d.policy_id
                      AND b.currency_cd = p_currency_cd
                      AND b.currency_rt = p_currency_rt
                      AND a.tax_cd = p_tax_cd
                      AND c.line_cd = e.line_cd (+)
                      AND c.iss_cd = e.iss_cd (+)
                      AND c.tax_cd = e.tax_cd (+)
                      AND c.tax_id = e.tax_id (+)
                      AND e.place_cd(+) = p_place_cd 
                      AND d.pol_flag <> '5'
                      AND (d.line_cd,
                           d.subline_cd,
                           d.iss_cd,
                           d.issue_yy,
                           d.pol_seq_no,
                           d.renew_no
                          ) IN (
                             SELECT x.line_cd, x.subline_cd, x.iss_cd, x.issue_yy,
                                    x.pol_seq_no, x.renew_no
                               FROM gipi_wpolbas x
                              WHERE x.par_id = p_par_id)
					  AND (DECODE (v_return_nondef_tax,'1', refund_sw,'3', primary_sw, 1) = DECODE (v_return_nondef_tax,'1', 'Y','3', 'Y', 1)
                          				   OR primary_sw = DECODE (v_return_nondef_tax, '1', 'Y')) --added by robert GENQA 4844 08.10.15
                 ORDER BY a.tax_id;      
       CURSOR tax_from_old_pol2 (
          p_tax_cd        gipi_winv_tax.tax_cd%TYPE,
          p_currency_cd   gipi_winvoice.currency_cd%TYPE,
          p_currency_rt   gipi_winvoice.currency_rt%TYPE ,
          p_place_cd      gipi_wpolbas.place_cd%TYPE ,
          p_eff_date      gipi_wpolbas.eff_date%TYPE 
       )
       IS
          SELECT DISTINCT a.tax_cd, a.tax_id, a.iss_cd, a.line_cd,
                          c.allocation_tag, NVL(c.no_rate_tag, 'N') no_rate_tag, c.tax_type,
                          c.peril_sw, NVL(e.rate, NVL(c.rate,0)) rate, NVL(c.takeup_alloc_tag,'F') takeup_alloc_tag,
                          DECODE(c.allocation_tag,'N','N','Y') fixed_tax_alloc
                     FROM gipi_inv_tax a,
                          gipi_invoice b,
                          giis_tax_charges c,
                          gipi_polbasic d,
                          giis_tax_issue_place e 
                    WHERE a.iss_cd = b.iss_cd
                      AND a.prem_seq_no = b.prem_seq_no
                      AND a.line_cd = c.line_cd
                      AND a.iss_cd = c.iss_cd
                      AND a.tax_cd = c.tax_cd
                      AND a.tax_id = c.tax_id
                      AND b.policy_id = d.policy_id
                      AND b.currency_cd = p_currency_cd
                      AND b.currency_rt = p_currency_rt
                      AND a.tax_cd = p_tax_cd
                      AND c.line_cd = e.line_cd (+)
                      AND c.iss_cd = e.iss_cd (+)
                      AND c.tax_cd = e.tax_cd (+)
                      AND c.tax_id = e.tax_id (+)
                      AND e.place_cd(+) = p_place_cd 
                      AND d.pol_flag <> '5'
                      AND TRUNC(d.eff_date) <=  DECODE(nvl(d.endt_seq_no,0),0,TRUNC(d.eff_date), TRUNC(v_eff_date ))
                               AND TRUNC (NVL(d.endt_expiry_date, d.expiry_date ))  >= DECODE(nvl(d.endt_seq_no,0),0,TRUNC(d.eff_date), TRUNC(v_eff_date ))
                      AND (d.line_cd,
                           d.subline_cd,
                           d.iss_cd,
                           d.issue_yy,
                           d.pol_seq_no,
                           d.renew_no
                          ) IN (
                             SELECT x.line_cd, x.subline_cd, x.iss_cd, x.issue_yy,
                                    x.pol_seq_no, x.renew_no
                               FROM gipi_wpolbas x
                              WHERE x.par_id = p_par_id)
					  AND (DECODE (v_return_nondef_tax,'1', refund_sw,'3', primary_sw, 1) = DECODE (v_return_nondef_tax,'1', 'Y','3', 'Y', 1)
                          				   OR primary_sw = DECODE (v_return_nondef_tax, '1', 'Y')) --added by robert GENQA 4844 08.10.15
                 ORDER BY a.tax_id;      
        CURSOR tax_not_in_orig_pol_endt (
              p_item_grp      gipi_winvoice.item_grp%TYPE,
              p_currency_cd   gipi_winvoice.currency_cd%TYPE,
              p_currency_rt   gipi_winvoice.currency_rt%TYPE
           )
           IS
              SELECT DISTINCT yy.tax_cd, yy.line_cd, yy.iss_cd
                         FROM gipi_winv_tax yy
                        WHERE yy.par_id = p_par_id
                          AND yy.item_grp = p_item_grp
                          AND NOT EXISTS (
                                 SELECT DISTINCT a.tax_cd
                                            FROM gipi_inv_tax a,
                                                 gipi_invoice b,
                                                 gipi_polbasic c
                                           WHERE a.iss_cd = b.iss_cd
                                             AND a.prem_seq_no = b.prem_seq_no
                                             AND b.policy_id = c.policy_id
                                             AND b.currency_cd = p_currency_cd
                                             AND b.currency_rt = p_currency_rt
                                             AND a.tax_cd = yy.tax_cd
                                             AND a.line_cd = yy.line_cd
                                             AND a.iss_cd = yy.iss_cd
                                             AND c.pol_flag <> '5'
                                             AND (c.line_cd,
                                                  c.subline_cd,
                                                  c.iss_cd,
                                                  c.issue_yy,
                                                  c.pol_seq_no,
                                                  c.renew_no
                                                 ) IN (
                                                    SELECT x.line_cd, x.subline_cd,
                                                           x.iss_cd, x.issue_yy,
                                                           x.pol_seq_no, x.renew_no
                                                      FROM gipi_wpolbas x
                                                     WHERE x.par_id = p_par_id));               
        CURSOR tax_not_in_orig_pol_endt2 (
              p_item_grp      gipi_winvoice.item_grp%TYPE,
              p_currency_cd   gipi_winvoice.currency_cd%TYPE,
              p_currency_rt   gipi_winvoice.currency_rt%TYPE,
              p_eff_date      gipi_wpolbas.eff_date%TYPE 
           )
           IS
              SELECT DISTINCT yy.tax_cd, yy.line_cd, yy.iss_cd
                         FROM gipi_winv_tax yy
                        WHERE yy.par_id = p_par_id
                          AND yy.item_grp = p_item_grp
                          AND NOT EXISTS (
                                 SELECT DISTINCT a.tax_cd
                                            FROM gipi_inv_tax a,
                                                 gipi_invoice b,
                                                 gipi_polbasic c
                                           WHERE a.iss_cd = b.iss_cd
                                             AND a.prem_seq_no = b.prem_seq_no
                                             AND b.policy_id = c.policy_id
                                             AND b.currency_cd = p_currency_cd
                                             AND b.currency_rt = p_currency_rt
                                             AND a.tax_cd = yy.tax_cd
                                             AND a.line_cd = yy.line_cd
                                             AND a.iss_cd = yy.iss_cd
                                             AND c.pol_flag <> '5'
                                             AND TRUNC(c.eff_date) <=  DECODE(nvl(c.endt_seq_no,0),0,TRUNC(c.eff_date), TRUNC(v_eff_date ))
                                             AND TRUNC (NVL(c.endt_expiry_date, c.expiry_date ))  
                                                        >= DECODE(nvl(c.endt_seq_no,0),0,TRUNC(c.eff_date), TRUNC(v_eff_date ))                                             
                                             AND (c.line_cd,
                                                  c.subline_cd,
                                                  c.iss_cd,
                                                  c.issue_yy,
                                                  c.pol_seq_no,
                                                  c.renew_no
                                                 ) IN (
                                                    SELECT x.line_cd, x.subline_cd,
                                                           x.iss_cd, x.issue_yy,
                                                           x.pol_seq_no, x.renew_no
                                                      FROM gipi_wpolbas x
                                                     WHERE x.par_id = p_par_id));   
   BEGIN
      -- jhing 10.28.2014 added fields ( line_cd, subline_cd, iss_cd, issue_yy, pol_seq_no ,renew_no , eff_date and issue_date) 
      SELECT SIGN (tsi_amt), SIGN (prem_amt), issue_date, eff_date 
            , line_cd , subline_cd, iss_cd , issue_yy , pol_seq_no , renew_no , place_cd 
        INTO v_sign_tsi, v_sign_prem, v_issue_date , v_eff_date ,
             v_line_cd, v_subline_cd , v_iss_cd, v_issue_yy, v_pol_seq_no , v_renew_no , v_place_cd
        FROM gipi_wpolbas
       WHERE par_id = p_par_id;
      SELECT a.vat_tag 
        INTO v_assd_vat_tag
        FROM giis_assured a, gipi_parlist b 
       WHERE a.assd_no = b.assd_no
       and b.par_id = p_par_id; 
      -- jhing 10.27.2014 moved the codes here so that tax computation for regular policy/endorsement will not fire if the 
      -- PAR is a cancellation type 
      FOR x IN (SELECT cancelled_endt_id, cancel_type, pol_flag, takeup_term,
                       ann_tsi_amt, /* jhing 10.27.2014 added incept_date and eff_date from edgar's changes from temp soln proj */
                       incept_date, eff_date, prorate_flag 
                  FROM gipi_wpolbas
                 WHERE par_id = p_par_id)
      LOOP
         v_cancelled_endt_id := x.cancelled_endt_id;
         v_cancel_type := x.cancel_type;
         v_pol_flag := x.pol_flag;
         v_prorate_flag := x.prorate_flag; 
         IF v_cancel_type = '3' OR v_cancel_type = '4'
         THEN   
           -- DELETE FROM cpi.gipi_winv_tax --added by steven 08.29.2014
           --     WHERE par_id = p_par_id;    --commented out by Gzelle 10142014 old SIT solution
            v_comp_cancellation := true; --  jhing 10.27.2014 
            FOR cncl IN (SELECT policy_id
                           FROM gipi_polbasic
                          WHERE policy_id = v_cancelled_endt_id)
            LOOP
               v_diff_item := 'N'; -- jhing 10.27.2014 
               -- jhing 10.27.2014 added edgar's changes to compute_uwtaxes which checks whether there are changes in 
               -- bill grouping between the original endorsement or policy and the endorsement cancellation PAR/COI Cancellation PAR.
               -- if the item and bill grouping does not match then the calculation for cancellation type of PAR will not be 
               -- triggered. 
                 BEGIN
                  FOR item IN (SELECT item_grp, item_no
                                 FROM gipi_item
                                WHERE policy_id = cncl.policy_id)
                  LOOP
                     FOR witem IN (SELECT item_grp, item_no
                                     FROM gipi_witem
                                    WHERE par_id = p_par_id
                                      AND item_no = item.item_no)
                     LOOP
                        IF item.item_grp != witem.item_grp
                        THEN
                           v_diff_item := 'Y';
                           EXIT;
                        ELSE
                           v_diff_item := 'N';
                        END IF;
                     END LOOP;
                     IF v_diff_item = 'Y'
                     THEN
                        EXIT;
                     END IF;
                  END LOOP;
                  IF v_diff_item = 'Y'
                  THEN
                     v_comp_cancellation := FALSE ;  -- jhing 10.27.2014 
                     EXIT;
                  END IF;
               END;
               -- jhing 10.27.2014 added edgar's changes 08.27.2014 ( from temp solution proj). Automatic computation of taxes for endorsement cancellation
               -- and/or COI cancellation will not be triggered if user regrouped the bills ( current cancellation PAR has different bill grouping than the 
               -- policy/endorsement beging cancelled )
               IF   v_diff_item = 'N' THEN 
              -- jhing 10.27.2014 uncommented out to ensure no new taxes set as required will be added 
              -- for the endorsement cancellation or COI Cancellation 
                  DELETE FROM cpi.gipi_winv_tax 
                   WHERE par_id = p_par_id;    
                  FOR inv IN (SELECT iss_cd, prem_seq_no, takeup_seq_no, item_grp,
                                      currency_cd, currency_rt /* jhing 10.27.2014 from edgar 08.26.2014 additional fields item_grp, currency_cd and currency_rt */                                    
                                 FROM gipi_invoice
                                WHERE policy_id = cncl.policy_id)
                   LOOP
                      FOR tax IN (SELECT item_grp, tax_allocation,
                                         fixed_tax_allocation, iss_cd, tax_cd,
                                         tax_id, (tax_amt * (-1)) tax_amt, rate,
                                         line_cd
                                    FROM gipi_inv_tax
                                   WHERE iss_cd = inv.iss_cd
                                     AND prem_seq_no = inv.prem_seq_no)
                      LOOP
                         v_exists := 'N';
                         FOR exist IN (SELECT tax_cd
                                         FROM gipi_winv_tax
                                        WHERE par_id = p_par_id
                                          AND tax_cd = tax.tax_cd
                                          AND tax_id = tax.tax_id
                                          -- jhing 10.27.2014 added edgar's changes 08.27.2014 
                                          AND item_grp = inv.item_grp
                                          AND takeup_seq_no = inv.takeup_seq_no )
                         LOOP
                            v_exists := 'Y';
                            EXIT;
                         END LOOP;
                         IF v_exists = 'N'
                         THEN
						 	IF v_sign_prem = -1 THEN --added by robert GENQA 4844 08.18.15
                                FOR old_tax in tax_from_old_pol ( tax.tax_cd , inv.currency_cd  , inv.currency_rt, v_place_cd )
                                LOOP
                                    v_exists := 'Y';                                      
                                END LOOP;  
                            ELSE
                                v_exists := 'Y';
                            END IF; 
                            IF v_exists = 'Y' THEN
								INSERT INTO cpi.gipi_winv_tax
											(par_id, item_grp, tax_cd,
											 line_cd, tax_allocation,
											 fixed_tax_allocation, iss_cd,
											 tax_amt, tax_id, rate,
											 takeup_seq_no
											)
									 VALUES (p_par_id, inv.item_grp /* jhing 10.27.2014 replaced from tax.item_grp to inv.item_grp*/, tax.tax_cd,
											 tax.line_cd, tax.tax_allocation,
											 tax.fixed_tax_allocation, tax.iss_cd,
											 tax.tax_amt, tax.tax_id, tax.rate,
											 inv.takeup_seq_no
											);
							END IF; 
							--end robert GENQA 4844 08.18.15
                         ELSE
                            UPDATE cpi.gipi_winv_tax
                               SET tax_amt = tax.tax_amt ,
                               -- jhing 10.27.2014 added additional fields 
                                 tax_allocation = tax.tax_allocation ,
                                 rate = tax.rate 
                             WHERE par_id = p_par_id
                               AND tax_cd = tax.tax_cd
                               AND tax_id = tax.tax_id
                               -- jhing 10.27.2014 added edgar's changes 08.27.2014 ( from temp solution proj )
                               AND item_grp = inv.item_grp 
                               AND takeup_seq_no = inv.takeup_seq_no;
                         END IF;
                         -- jhing 10.28.2014 commented out code. Moved the code below. Instead of checking for every tax record
                         -- it is better to check the negative DST after all taxes has been added.  
                        /* IF     tax.tax_cd = giacp.n ('DOC_STAMPS') --added by steven 08.29.2014
                            AND NVL (giisp.v ('ALLOW_NEGATIVE_DST'), 'Y') = 'N'
                         THEN
                            DELETE FROM cpi.gipi_winv_tax
                                  WHERE par_id = p_par_id
                                    AND item_grp = tax.item_grp
                                    AND tax_cd = giacp.n ('DOC_STAMPS')
                                    AND takeup_seq_no = inv.takeup_seq_no ;
                         END IF; */
                      END LOOP;                      
                   END LOOP;
               END IF; 
            END LOOP;
         ELSIF 
            --v_cancel_type = '1'  OR  v_pol_flag = '4' -- jhing 10.28.2014 replaced condition:
            -- OR ( x.ann_tsi_amt = 0 AND TRUNC (x.incept_date) = TRUNC(x.eff_date) /* manual flat cancellation */ ) -- jhing 10.28.2014 integrated edgar's changes ( added condition edgar 08.22.2014 )
             ( v_pol_flag = '4' and v_prorate_flag = '2'   /* jhing 10.30.2014 restricted logic to system generated flat cancellation - tagging in basic info */ ) 
         THEN
             dbms_output.put_line ('Generating taxes for flat cancellation  .... .'); 
             v_comp_cancellation := true ; --  jhing 10.27.2014 
        --    DELETE FROM cpi.gipi_winv_tax --added by steven 08.29.2014
        --      WHERE par_id = p_par_id;    --commented out by Gzelle 10142014 old SIT solution
            --  Jhing 10.28.2014 replaced with new query which checks if there are multiple bill group per currency code and rate 
            -- jhing 10.27.2014 integrated edgar's changes on temp soln in compute_uwtaxes 
           /* BEGIN
               SELECT COUNT (DISTINCT item_grp)
                 INTO v_item_grp_cnt
                 FROM gipi_winvoice
                WHERE par_id = p_par_id;
               IF v_item_grp_cnt > 1
               THEN
                  EXIT;
               END IF;
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  v_item_grp_cnt := 1;
            END;  */
            -- jhing 10.28.2014 new code for checking if there are multiple bill for set of currency_cd and currency_rt 
            v_multiple_bill := 'N'; 
            FOR curr_inv in ( SELECT distinct currency_cd, currency_rt from gipi_witem where par_id = p_par_id )
            LOOP    
                v_count_bill_grp := 0 ;                 
                SELECT COUNT (DISTINCT item_grp)
                  INTO v_count_bill_grp
                  FROM gipi_winvoice
                 WHERE par_id = p_par_id
                   AND currency_cd = curr_inv.currency_cd
                   AND currency_rt = curr_inv.currency_rt;
                IF NVL(v_count_bill_grp,0) > 1 THEN
                    v_multiple_bill := 'Y' ;
                    v_comp_cancellation := false ;
                    EXIT;
                END IF; 
            END LOOP;   
            -- jhing 10.28.2014 do not process flat cancellation if there are multiple bill group per set of currency code and currency rate              
            IF  v_multiple_bill = 'N' THEN 
                    -- jhing 10.28.2014 moved the code to the upper section so that variables can be used by other cancellations  
                   /* SELECT line_cd, subline_cd, iss_cd, issue_yy,
                           pol_seq_no, renew_no
                      INTO v_line_cd, v_subline_cd, v_iss_cd, v_issue_yy,
                           v_pol_seq_no, v_renew_no
                      FROM gipi_wpolbas
                     WHERE par_id = p_par_id; */
                    dbms_output.put_line ('Start computation of flat cancellation taxes...... '); 
                    -- jhing 10.28.2014 added codes to calculate total taxes per currency code and rate 
                    FOR winv_grp in (SELECT distinct item_grp, currency_cd, currency_rt  from gipi_winvoice where par_id = p_par_id ) 
                    LOOP    
                            dbms_output.put_line ('Retrieving distinct bill groups for the current PAR ...... ');
                            -- jhing 10.28.2014 added takeup for the computation for long term 
                            v_max_takeup_seq := 1 ; 
                            FOR takeup in (SELECT max(NVL(takeup_seq_no,1)) max_takeup 
                                    FROM gipi_winvoice where par_id = p_par_id AND item_grp = winv_grp.item_grp )
                            LOOP
                                v_max_takeup_seq := takeup.max_takeup ;
                            END LOOP;
                            FOR flatax IN (SELECT   (SUM (a.tax_amt) * -1) tax_amt, a.tax_cd,
                                                    --reverted changes made by ma'am jhing by gab 03.31.2016 SR21333
                                                    a.tax_id, a.item_grp, -- jhing 10.28.2014 commented out 
                                                    --a.iss_cd, a.line_cd, 
                                                    a.tax_allocation, a.fixed_tax_allocation,
                                                    b.takeup_seq_no  -- jhing 10.28.2014 commented out
                                               FROM gipi_inv_tax a, gipi_invoice b
                                              WHERE a.iss_cd = b.iss_cd
                                                AND a.prem_seq_no = b.prem_seq_no
                                                -- jhing 10.28.2014 added currency_cd and currency_rate 
                                                AND b.currency_cd = winv_grp.currency_cd
                                                AND b.currency_rt = winv_grp.currency_rt 
                                                AND b.policy_id IN (
                                                       SELECT policy_id
                                                         FROM gipi_polbasic
                                                        WHERE line_cd = v_line_cd
                                                          AND subline_cd = v_subline_cd
                                                          AND iss_cd = v_iss_cd
                                                          AND issue_yy = v_issue_yy
                                                          AND pol_seq_no = v_pol_seq_no
                                                          AND renew_no = v_renew_no
                                                          AND pol_flag <> '5' /* jhing 10.28.2014 added condition to exclude spoiled */ )
                                           GROUP BY a.tax_cd,
                                                    a.tax_id,
                                                    a.item_grp,  -- jhing 10.28.2014 commented out 
                                                    --a.iss_cd,
                                                    --a.line_cd,
                                                    a.tax_allocation,
                                                    a.fixed_tax_allocation,
                                                    b.takeup_seq_no -- jhing 10.28.2014 commented out
                                                    --end gab 03.31.2016 SR213333
                                           ORDER BY a.tax_cd  )
                            LOOP
                               dbms_output.put_line ('Retrieving taxes from policy and endorsements .... .'); 
                               v_exists := 'N';
                               --reverted changes made by ma'am jhing by gab 03.31.2016 SR 21333
--                               v_flatrate := NULL;  -- jhing 10.30.2014 temporary set gipi_winvtax.rate to null for tax cancellations due to 
                                                    -- additional complexities in computation especially for long term 
                             /*added edgar 08/28/2014*/ --to recompute tax rate for tax type RATE  -- integrated by jhing 10.27.2014                                
                              FOR inv2 IN (SELECT   SUM (prem_amt) sum_prem_amt, item_grp,
                                                     takeup_seq_no
                                                FROM gipi_winvoice
                                               WHERE par_id = p_par_id
                                                 AND item_grp = flatax.item_grp
                                                 AND takeup_seq_no = flatax.takeup_seq_no
                                            GROUP BY item_grp, takeup_seq_no)
                               LOOP
                               
                                  FOR tax_charge IN (SELECT tax_type, no_rate_tag --added by gab 5.13.2016 SR21333
                                                       FROM giis_tax_charges
                                                      WHERE line_cd = v_line_cd
                                                        AND iss_cd = v_iss_cd
                                                        AND tax_cd = flatax.tax_cd
                                                        AND tax_id = flatax.tax_id)
                                  LOOP
                                     IF NVL (tax_charge.tax_type, 'R') = 'R' 
                                     THEN
                                        -- jhing 10.28.2014 added condition for zero premium to prevent divide by zero 
                                        IF ABS (inv2.sum_prem_amt) = 0 THEN 
                                            v_flatrate := 0 ; 
                                        ELSE 
                                            v_flatrate :=
                                                 (ABS (flatax.tax_amt) / ABS (inv2.sum_prem_amt)
                                                 )
                                               * 100;
                                        END IF; 
                                        
                                     ELSE
                                        v_flatrate := NULL; -- jhing 10.28.2014 added NULL flatrate for non-fixed rate tax type 
                                     END IF;
                                     --added by gab 06.02.2016 SR 21333
                                     IF tax_charge.no_rate_tag = 'Y' THEN
                                        v_flatrate := 0 ;
                                     END IF;
                                     
                                     EXIT;
                                  END LOOP;
                                  EXIT;
                               END LOOP;
                               -- end of integrated code from edgar - jhing 10.27.2014 
                               FOR exist IN (SELECT tax_cd
                                               FROM gipi_winv_tax
                                              WHERE par_id = p_par_id
                                                AND tax_cd = flatax.tax_cd
                                                -- jhing 10.28.2014 commented out since it is possible to have multiple tax_id per tax_cd in policy net of endorsement. Endt might also have different tax_id
                                               /* AND tax_id = flatax.tax_id  
                                                AND item_grp = flatax.item_grp
                                                AND takeup_seq_no = flatax.takeup_seq_no */
                                                AND item_grp = winv_grp.item_grp /* jhing 10.28.2014 new condition*/ )
                               LOOP
                                  v_exists := 'Y';
                                  EXIT;
                               END LOOP;
                               IF v_exists = 'N'
                               THEN
                                    v_new_tax_id := NULL;
                                    v_new_tax_allocation := NULL;
                                    v_new_fixed_tax_alloc := NULL; 
                                    v_new_takeup_alloc := NULL;
                                    FOR new_tax in get_tax_cd ( v_line_cd  , v_iss_cd  , flatax.tax_cd , v_issue_date , v_eff_date, v_place_cd  )
                                    LOOP
                                        v_exists := 'Y' ;
                                        v_new_tax_id := new_tax.tax_id ;
                                        IF new_tax.allocation_tag = 'N' THEN 
                                            v_new_tax_allocation := 'F'; 
                                        ELSE
                                            v_new_tax_allocation := new_tax.allocation_tag; 
                                        END IF; 
                                        v_new_fixed_tax_alloc := new_tax.fixed_tax_alloc; 
                                        v_new_takeup_alloc := new_tax.takeup_alloc_tag; 
                                        EXIT;
                                    END LOOP;
                                    -- jhing 10.28.2014 if no taxes can be applied based on effectivity dates, retrieved the first tax record
                                    -- from policy and/or endorsements
                                    IF v_exists = 'N' THEN 
                                        FOR old_tax in tax_from_old_pol ( flatax.tax_cd , winv_grp.currency_cd  , winv_grp.currency_rt, v_place_cd )
                                        LOOP
											v_exists := 'Y'; --added by robert GENQA 4844 08.10.15 
                                            v_new_tax_id := old_tax.tax_id ;
                                            IF old_tax.allocation_tag = 'N' THEN 
                                                v_new_tax_allocation := 'F'; 
                                            ELSE
                                                v_new_tax_allocation := old_tax.allocation_tag; 
                                            END IF;
                                            v_new_fixed_tax_alloc := old_tax.fixed_tax_alloc; 
                                            v_new_takeup_alloc := old_tax.takeup_alloc_tag; 
                                            EXIT;                                        
                                        END LOOP;                                   
                                    END IF;
									IF v_exists = 'Y' THEN --added by robert GENQA 4844 08.10.15     
                                    -- jhing 10.28.2014 replaced fields from variables instead of from flatax cursor and consider 
                                    -- long term computation 
--                                    v_flatrate := NULL; -- jhing 10.30.2014 temporary set gipi_winvtax.rate to NULL for cancellation  --commented out by gab 03.31.2016 SR 21333
                                    FOR tkup in 1 .. v_max_takeup_seq 
                                    LOOP 
                                        IF v_new_takeup_alloc = 'S' AND tkup < v_max_takeup_seq THEN 
                                                INSERT INTO cpi.gipi_winv_tax
                                                          (par_id, item_grp, tax_cd,
                                                           line_cd, tax_allocation,
                                                           fixed_tax_allocation, iss_cd,
                                                           tax_amt, tax_id, rate,
                                                           takeup_seq_no
                                                          )
                                                   VALUES (p_par_id, /*flatax.item_grp*/ winv_grp.item_grp , flatax.tax_cd,
                                                           /*flatax.line_cd*/ v_line_cd , /*flatax.tax_allocation*/ v_new_tax_allocation,
                                                           /*flatax.fixed_tax_allocation */ v_new_fixed_tax_alloc, /*flatax.iss_cd */ v_iss_cd,
                                                           ROUND((flatax.tax_amt/v_max_takeup_seq),2), /*flatax.tax_id */ v_new_tax_id , v_flatrate,
                                                           /*flatax.takeup_seq_no*/ tkup
                                                          );  
                                        ELSIF  v_new_takeup_alloc = 'S' AND tkup =  v_max_takeup_seq AND v_max_takeup_seq <> 1  THEN
                                                INSERT INTO cpi.gipi_winv_tax
                                                          (par_id, item_grp, tax_cd,
                                                           line_cd, tax_allocation,
                                                           fixed_tax_allocation, iss_cd,
                                                           tax_amt, tax_id, rate,
                                                           takeup_seq_no
                                                          )
                                                   VALUES (p_par_id, winv_grp.item_grp , flatax.tax_cd,
                                                           v_line_cd , v_new_tax_allocation,
                                                           v_new_fixed_tax_alloc, v_iss_cd,
                                                           flatax.tax_amt - ( ROUND((flatax.tax_amt/v_max_takeup_seq),2) * (v_max_takeup_seq - 1 )), v_new_tax_id , v_flatrate,
                                                           tkup
                                                          );  
                                        ELSIF (  v_new_takeup_alloc = 'F' AND tkup = 1 ) 
                                            OR (v_new_takeup_alloc = 'L' AND tkup = v_max_takeup_seq  ) 
                                            OR ( v_max_takeup_seq = 1 )   THEN
                                                 INSERT INTO cpi.gipi_winv_tax
                                                          (par_id, item_grp, tax_cd,
                                                           line_cd, tax_allocation,
                                                           fixed_tax_allocation, iss_cd,
                                                           tax_amt, tax_id, rate,
                                                           takeup_seq_no
                                                          )
                                                   VALUES (p_par_id, winv_grp.item_grp , flatax.tax_cd,
                                                           v_line_cd , v_new_tax_allocation,
                                                           v_new_fixed_tax_alloc, v_iss_cd,
                                                           flatax.tax_amt , v_new_tax_id , v_flatrate , tkup );  
                                        ELSE 
                                                INSERT INTO cpi.gipi_winv_tax
                                                          (par_id, item_grp, tax_cd,
                                                           line_cd, tax_allocation,
                                                           fixed_tax_allocation, iss_cd,
                                                           tax_amt, tax_id, rate,
                                                           takeup_seq_no
                                                          )
                                                   VALUES (p_par_id, winv_grp.item_grp , flatax.tax_cd,
                                                           v_line_cd , v_new_tax_allocation,
                                                           v_new_fixed_tax_alloc, v_iss_cd,
                                                           0 , v_new_tax_id , v_flatrate , tkup );  
                                        END IF; 
                                   END LOOP;
							   	   END IF; --added by robert GENQA 4844 08.10.15                
                               ELSE
                                  dbms_output.put_line ('Updating tax amounts for flat cancellation .... .');        
--                                  v_flatrate := NULL;     --reverted by gab 03.31.2016 SR 21333 
                                  FOR tkup in 1 .. v_max_takeup_seq 
                                    LOOP 
                                        IF v_new_takeup_alloc = 'S' AND tkup < v_max_takeup_seq THEN 
                                                 UPDATE cpi.gipi_winv_tax
                                                     SET tax_amt = ROUND((flatax.tax_amt / v_max_takeup_seq ),2) , rate = v_flatrate
                                                   WHERE par_id = p_par_id
                                                     AND tax_cd = flatax.tax_cd
                                                    -- AND tax_id = flatax.tax_id  -- jhing 10.28.2014 commented out 
                                                     AND item_grp = /*flatax.item_grp  -- jhing 10.28.2014 replaced with*/ winv_grp.item_grp 
                                                     AND takeup_seq_no = /*flatax.takeup_seq_no -- jhing 10.28.2014 replaced with */ tkup ;
                                        ELSIF  v_new_takeup_alloc = 'S' AND tkup =  v_max_takeup_seq AND v_max_takeup_seq <> 1 THEN
                                                UPDATE cpi.gipi_winv_tax
                                                     SET tax_amt = flatax.tax_amt - ( ROUND((flatax.tax_amt/v_max_takeup_seq),2) * (v_max_takeup_seq - 1 ))
                                                            , rate = v_flatrate
                                                   WHERE par_id = p_par_id
                                                     AND tax_cd = flatax.tax_cd                                                   
                                                     AND item_grp = winv_grp.item_grp 
                                                     AND takeup_seq_no = tkup ;
                                        ELSIF (  v_new_takeup_alloc = 'F' AND tkup = 1 ) 
                                            OR (v_new_takeup_alloc = 'L' AND tkup = v_max_takeup_seq  )  
                                            OR ( v_max_takeup_seq = 1 )  THEN
                                                  UPDATE cpi.gipi_winv_tax
                                                     SET tax_amt = flatax.tax_amt , rate = v_flatrate
                                                   WHERE par_id = p_par_id
                                                     AND tax_cd = flatax.tax_cd                                                   
                                                     AND item_grp = winv_grp.item_grp 
                                                     AND takeup_seq_no = tkup ;
                                        ELSE 
                                                   UPDATE cpi.gipi_winv_tax
                                                             SET tax_amt = 0 , rate = v_flatrate
                                                           WHERE par_id = p_par_id
                                                             AND tax_cd = flatax.tax_cd                                                   
                                                             AND item_grp = winv_grp.item_grp 
                                                             AND takeup_seq_no = tkup ;
                                        END IF; 
                                   END LOOP;  
                               END IF;
                               -- jhing 10.27.2014 commented out and will place the code outside of the loop. 
                              /* IF     flatax.tax_cd = giacp.n ('DOC_STAMPS') --added by steven 08.29.2014
                                        AND NVL (giisp.v ('ALLOW_NEGATIVE_DST'), 'Y') = 'N'
                               THEN
                                    DELETE FROM cpi.gipi_winv_tax
                                          WHERE par_id = p_par_id
                                            AND item_grp = flatax.item_grp
                                            AND tax_cd = giacp.n ('DOC_STAMPS');
                               END IF; */
                            END LOOP;
                            -- jhing 10.28.2014 delete taxes which are inserted by create_winvoice since they are required but these taxes
                            -- were not originally included in the policy and endorsements 
                            FOR invalid_tax in tax_not_in_orig_pol_endt ( winv_grp.item_grp  ,  winv_grp.currency_cd ,  winv_grp.currency_rt ) 
                            LOOP
                                DELETE FROM gipi_winv_tax
                                      WHERE par_id = p_par_id
                                        AND line_cd = invalid_tax.line_cd
                                        AND iss_cd = invalid_tax.iss_cd
                                        AND tax_cd = invalid_tax.tax_cd
                                        AND item_grp = winv_grp.item_grp;
                            END LOOP;
                   END LOOP; 
            END IF; -- end if for checking of multiple bill group
         --  jhing 10.28.2014 commented the whole else-if block. Same logic will be used for computation of manual cancellation  
         --  whether it is flat or prorated 
        /* ELSIF x.ann_tsi_amt = 0               
         THEN
         --   DELETE FROM cpi.gipi_winv_tax --added by steven 08.29.2014
         --         WHERE par_id = p_par_id;    --commented out by Gzelle 10142014 old SIT solution
            v_comp_cancellation := true ; --  jhing 10.27.2014 
            SELECT line_cd, subline_cd, iss_cd, issue_yy,
                   pol_seq_no, renew_no
              INTO v_line_cd, v_subline_cd, v_iss_cd, v_issue_yy,
                   v_pol_seq_no, v_renew_no
              FROM gipi_wpolbas
             WHERE par_id = p_par_id;
            FOR flatax2 IN (SELECT   (SUM (a.tax_amt) * -1) tax_amt, a.tax_cd,
                                     a.tax_id, a.item_grp, a.iss_cd,
                                     a.line_cd, a.tax_allocation,
                                     a.fixed_tax_allocation, b.takeup_seq_no
                                FROM gipi_inv_tax a, gipi_invoice b
                               WHERE a.iss_cd = b.iss_cd
                                 AND a.prem_seq_no = b.prem_seq_no
                                 AND b.policy_id IN (
                                        SELECT policy_id
                                          FROM gipi_polbasic
                                         WHERE line_cd = v_line_cd
                                           AND subline_cd = v_subline_cd
                                           AND iss_cd = v_iss_cd
                                           AND issue_yy = v_issue_yy
                                           AND pol_seq_no = v_pol_seq_no
                                           AND renew_no = v_renew_no )
                            GROUP BY a.tax_cd,
                                     a.tax_id,
                                     a.item_grp,
                                     a.iss_cd,
                                     a.line_cd,
                                     a.tax_allocation,
                                     a.fixed_tax_allocation,
                                     b.takeup_seq_no)
            LOOP
               v_exists := 'N';
               FOR exist IN (SELECT tax_cd
                               FROM gipi_winv_tax
                              WHERE par_id = p_par_id
                                AND tax_cd = flatax2.tax_cd
                                AND tax_id = flatax2.tax_id
                                AND item_grp = flatax2.item_grp
                                AND takeup_seq_no = flatax2.takeup_seq_no)
               LOOP
                  v_exists := 'Y';
                  EXIT;
               END LOOP;
               IF v_exists = 'N'
               THEN
                  INSERT INTO cpi.gipi_winv_tax
                              (par_id, item_grp, tax_cd,
                               line_cd, tax_allocation,
                               fixed_tax_allocation, iss_cd,
                               tax_amt, tax_id, rate,
                               takeup_seq_no
                              )
                       VALUES (p_par_id, flatax2.item_grp, flatax2.tax_cd,
                               flatax2.line_cd, flatax2.tax_allocation,
                               flatax2.fixed_tax_allocation, flatax2.iss_cd,
                               flatax2.tax_amt, flatax2.tax_id, v_flatrate,
                               flatax2.takeup_seq_no
                              );
               ELSE
                  UPDATE cpi.gipi_winv_tax
                     SET tax_amt = flatax2.tax_amt
                   WHERE par_id = p_par_id
                     AND tax_cd = flatax2.tax_cd
                     AND tax_id = flatax2.tax_id
                     AND item_grp = flatax2.item_grp
                     AND takeup_seq_no = flatax2.takeup_seq_no;
               END IF;
               IF     flatax2.tax_cd = giacp.n ('DOC_STAMPS') --added by steven 08.29.2014
                        AND NVL (giisp.v ('ALLOW_NEGATIVE_DST'), 'Y') = 'N'
               THEN
                    DELETE FROM cpi.gipi_winv_tax
                          WHERE par_id = p_par_id
                            AND item_grp = flatax2.item_grp
                            AND tax_cd = giacp.n ('DOC_STAMPS');
               END IF;
            END LOOP; 
         */ -- jhing 10.28.2014 end of commented out else-if block
      -- jhing 10.28.2014 added codes to auto-compute taxes for system generated prorate cancellation . Here are the rules:
      -- for prorate cancellation, fixed rate tax types would be computed automatically ( without rate is not tagged ). For tax range and fixed amount tax types, 
      -- these taxes would be summed up.       
      --   ELSIF ( v_cancel_type = '2' AND  v_pol_flag = '4' ) OR (x.ann_tsi_amt = 0  AND TRUNC (x.incept_date) !=  TRUNC(x.eff_date)  ) THEN   -- jhing 10.29.2014 replaced with:
         ELSIF (  v_pol_flag = '4' AND v_prorate_flag <> '2' )  THEN   -- should only handle system prorated cancellation 
            v_comp_cancellation := true ;         
         -- *******************************************************************************************************************************************  
            v_multiple_bill := 'N'; 
            FOR curr_inv in ( SELECT distinct currency_cd, currency_rt from gipi_witem where par_id = p_par_id )
            LOOP    
                v_count_bill_grp := 0 ;                 
                SELECT COUNT (DISTINCT item_grp)
                  INTO v_count_bill_grp
                  FROM gipi_winvoice
                 WHERE par_id = p_par_id
                   AND currency_cd = curr_inv.currency_cd
                   AND currency_rt = curr_inv.currency_rt;
                IF v_count_bill_grp > 1 THEN
                    v_multiple_bill := 'Y' ;
                    v_comp_cancellation := false ;
                    EXIT;
                END IF; 
            END LOOP;   
            IF  v_multiple_bill = 'N' THEN 
                dbms_output.put_line ('Start computation of prorate cancellation taxes...... '); 
                FOR winv_grp in (SELECT distinct item_grp, currency_cd, currency_rt from gipi_winvoice where par_id = p_par_id ) 
                    LOOP
                            dbms_output.put_line ('Retrieving distinct bill groups for the current PAR ...... '); 
                            v_max_takeup_seq := 1 ; 
                            FOR takeup in (SELECT max(NVL(takeup_seq_no,1)) max_takeup 
                                    FROM gipi_winvoice where par_id = p_par_id AND item_grp = winv_grp.item_grp )
                            LOOP
                                v_max_takeup_seq := takeup.max_takeup ;
                            END LOOP;                           
                            FOR flatax IN (SELECT   (SUM (a.tax_amt) * -1) tax_amt, a.tax_cd, a.iss_cd, a.line_cd                                                    
                                               FROM gipi_inv_tax a, gipi_invoice b
                                              WHERE a.iss_cd = b.iss_cd
                                                AND a.prem_seq_no = b.prem_seq_no
                                                AND b.currency_cd = winv_grp.currency_cd
                                                AND b.currency_rt = winv_grp.currency_rt 
                                                AND b.policy_id IN (
                                                       SELECT policy_id
                                                         FROM gipi_polbasic
                                                        WHERE line_cd = v_line_cd
                                                          AND subline_cd = v_subline_cd
                                                          AND iss_cd = v_iss_cd
                                                          AND issue_yy = v_issue_yy
                                                          AND pol_seq_no = v_pol_seq_no
                                                          AND renew_no = v_renew_no
                                                          AND pol_flag <> '5' )
                                           GROUP BY a.tax_cd,                                                  
                                                    a.iss_cd,
                                                    a.line_cd 
                                           ORDER BY a.tax_cd  )
                            LOOP
                                dbms_output.put_line ('Retrieving taxes from policy and endorsements .... .'); 
                               v_exists := 'N';
                               v_flatrate := NULL;
                               v_new_tax_type := NULL ;
                               v_new_no_rate_tag := NULL ; 
                               --v_recomp_tax_amt := flatax.tax_amt ; --commented out edgar 11/11/2014
                               v_new_peril_sw := NULL;
                               v_new_rate := NULL; 
                               v_new_takeup_alloc := NULL;
                               --v_prorate_tax := flatax.tax_amt; --commented out edgar 11/11/2014
                               dbms_output.put_line ('...Checking tax code: ' || flatax.tax_cd || ' .................. ');  
                               FOR exist IN (SELECT a.tax_cd , b.tax_type , NVL(b.no_rate_tag,'N') no_rate_tag,
                                                b.peril_sw , NVL(c.rate, NVL(b.rate,0)) rate  , NVL(b.takeup_alloc_tag, 'F') takeup_alloc_tag ,
                                                DECODE(b.allocation_tag,'N','N','Y') fixed_tax_alloc
                                               FROM gipi_winv_tax a, giis_tax_charges b , giis_tax_issue_place c 
                                              WHERE a.par_id = p_par_id
                                                AND a.tax_cd = flatax.tax_cd                                                
                                                AND a.item_grp = winv_grp.item_grp
                                                AND a.line_cd = b.line_cd
                                                AND a.iss_cd =  b.iss_cd
                                                AND a.tax_cd = b.tax_cd
                                                AND a.tax_id = b.tax_id
                                                AND b.line_cd = c.line_cd (+)
                                                AND b.iss_cd = c.iss_cd (+)
                                                AND b.tax_cd = c.tax_cd (+)
                                                AND b.tax_id = c.tax_id (+)
                                                AND c.place_cd (+) = v_place_cd   )
                               LOOP
                                  v_exists := 'Y';
                                  v_new_tax_type := exist.tax_type;
                                  v_new_no_rate_tag := exist.no_rate_tag; 
                                  v_new_peril_sw := exist.peril_sw;
                                  v_new_rate := exist.rate; 
                                  v_new_takeup_alloc := exist.takeup_alloc_tag ; 
                                  v_new_fixed_tax_alloc := exist.fixed_tax_alloc; 
                                  EXIT;
                               END LOOP;
                               /*recomputation of tax base on prorate cancellation of premium : edgar 11/11/2014*/ 
                               compute_uwtaxes.get_prorate_tax(p_par_id, flatax.tax_cd, flatax.iss_cd, flatax.line_cd, NULL, winv_grp.item_grp, winv_grp.currency_cd, winv_grp.currency_rt, v_prorate_tax);                               
                               /*ended edgar 11/11/2014*/
                               IF v_exists = 'N'
                               THEN
                                    v_new_tax_id := NULL;
                                    v_new_tax_allocation := NULL;
                                    v_new_fixed_tax_alloc := NULL; 
                                    v_new_peril_sw := NULL;
                                    v_new_rate := NULL; 
                                    v_new_takeup_alloc := NULL;
                                    FOR new_tax in get_tax_cd ( v_line_cd  , v_iss_cd  , flatax.tax_cd , v_issue_date , v_eff_date, v_place_cd  )
                                    LOOP
                                        v_exists := 'Y' ;
                                        v_new_tax_id := new_tax.tax_id ;
                                        IF new_tax.allocation_tag = 'N' THEN 
                                            v_new_tax_allocation := 'F'; 
                                        ELSE
                                            v_new_tax_allocation := new_tax.allocation_tag; 
                                        END IF; 
                                        v_new_fixed_tax_alloc := new_tax.fixed_tax_alloc; 
                                        v_new_tax_type := new_tax.tax_type;
                                        v_new_no_rate_tag := new_tax.no_rate_tag; 
                                        v_new_peril_sw := new_tax.peril_sw;
                                        v_new_rate := new_tax.rate ; 
                                        v_new_takeup_alloc := new_tax.takeup_alloc_tag; 
                                        EXIT;
                                    END LOOP;
                                    -- jhing 10.28.2014 if no taxes can be applied based on effectivity dates, retrieved the first tax record
                                    -- from policy and/or endorsements
                                    IF v_exists = 'N' THEN 
                                        FOR old_tax in tax_from_old_pol ( flatax.tax_cd , winv_grp.currency_cd  , winv_grp.currency_rt, v_place_cd )
                                        LOOP
											v_exists := 'Y'; --added by robert GENQA 4844 08.10.15 
                                            v_new_tax_id := old_tax.tax_id ;
                                            IF old_tax.allocation_tag = 'N' THEN 
                                                v_new_tax_allocation := 'F'; 
                                            ELSE
                                                v_new_tax_allocation := old_tax.allocation_tag; 
                                            END IF;
                                            v_new_fixed_tax_alloc := old_tax.fixed_tax_alloc;
                                            v_new_tax_type := old_tax.tax_type;
                                            v_new_no_rate_tag := old_tax.no_rate_tag;
                                            v_new_peril_sw := old_tax.peril_sw;
                                            v_new_rate := old_tax.rate ;
                                            v_new_takeup_alloc := old_tax.takeup_alloc_tag;
                                            EXIT;
                                        END LOOP;
                                    END IF;                                       
									IF v_exists = 'Y' THEN  --added by robert GENQA 4844 08.10.15                               
                                    /*edgar 11/13/2014 for tax rate*/
                                    IF v_new_tax_type = 'R' AND v_new_no_rate_tag <> 'Y' THEN
                                        v_flatrate := v_new_rate;
                                    ELSE
                                        v_flatrate := 0;
                                    END IF;
                                    /*ended edgar 11/13/2014*/
                                    /*IF v_new_tax_type = 'R' AND ( v_new_no_rate_tag <> 'Y' OR (v_new_no_rate_tag = 'Y' AND v_new_rate <> 0  ) ) THEN
                                          dbms_output.put_line ('.........Recomputing taxes based on maintenance  .... .'); 
                                          IF flatax.tax_cd = giacp.n('DOC_STAMPS') THEN
                                                v_recomp_tax_amt :=  compute_uwtaxes.compute_dst (p_par_id,
                                                                              v_sum_premium,
                                                                              v_sum_tsi,
                                                                              v_new_tax_type,
                                                                              v_line_cd,
                                                                              v_iss_cd,
                                                                              flatax.tax_cd,
                                                                              v_new_tax_id,
                                                                              v_new_rate ,
                                                                              v_new_peril_sw ,
                                                                              winv_grp.currency_rt,
                                                                              winv_grp.item_grp,
                                                                              NULL
                                                                             );     
                                                dbms_output.put_line ('...Tax Code: ' || flatax.tax_cd || ' - ' || v_recomp_tax_amt ||  ' - ' || v_prorate_tax || ' ; ');                              
                                           ELSIF flatax.tax_cd = giacp.n('EVAT') THEN 
                                                 v_recomp_tax_amt := compute_uwtaxes.compute_evat (p_par_id,
                                                                               v_assd_vat_tag,
                                                                               v_new_rate,
                                                                               v_sum_premium,
                                                                               v_new_peril_sw,
                                                                               v_line_cd,
                                                                               v_iss_cd,
                                                                               flatax.tax_cd,
                                                                               v_new_tax_id,
                                                                               winv_grp.item_grp,
                                                                               NULL
                                                                              );
                                                 dbms_output.put_line ('...Tax Code: ' || flatax.tax_cd || ' - ' || v_recomp_tax_amt ||  ' - ' || v_prorate_tax || ' ; ');                              
                                         ELSE
                                                v_recomp_tax_amt := compute_uwtaxes.get_fixed_rate (p_par_id,
                                                                                   winv_grp.item_grp,
                                                                                   NULL,
                                                                                    --p_takeup_term,
                                                                                    v_sum_premium,
                                                                                    v_new_rate,
                                                                                    v_new_peril_sw,
                                                                                    v_line_cd,
                                                                                    v_iss_cd,
                                                                                    flatax.tax_cd,
                                                                                    v_new_tax_id
                                                                                   );
                                                  dbms_output.put_line ('...Tax Code: ' || flatax.tax_cd || ' - ' || v_recomp_tax_amt ||  ' - ' || v_prorate_tax || ' ; ');                              
                                         END IF;   
                                           -- jhing 10.28.2014 added condition to handle scenarios wherein computed tax refund is greater than
                                           --- actual placed taxes. We will only use computed tax amount if computed tax is less than the actual tax 
                                           IF    abs(v_recomp_tax_amt) <= abs(flatax.tax_amt) THEN
                                              v_prorate_tax :=   v_recomp_tax_amt; 
                                           END IF;                                 
                                    END IF;*/ --commented out edgar 11/11/2014 for new computation  
                                    -- for fixed rate ( excluded are without rate taxes), recompute taxes. If recomputed taxes are greater than the total 
                                    -- tax from original policy and endorsement, then retain the total tax from the policy/endorsement, otherwise use the 
                                    -- recomputed tax proportional to the premium 
                                    FOR tkup in 1 .. v_max_takeup_seq 
                                    LOOP 
                                        /*commented v_flatrate code below : edgar 11/13/2014*/
                                        --v_flatrate := NULL;  -- jhing 10.30.2014 temporary set all gipi_winvtax to NULL for tax automatically computed through tax cancellation
                                        IF v_new_takeup_alloc = 'S' AND tkup < v_max_takeup_seq THEN 
                                              INSERT INTO cpi.gipi_winv_tax
                                                      (par_id, item_grp, tax_cd,
                                                       line_cd, tax_allocation,
                                                       fixed_tax_allocation, iss_cd,
                                                       tax_amt, tax_id, rate,
                                                       takeup_seq_no
                                                      )
                                               VALUES (p_par_id, winv_grp.item_grp , flatax.tax_cd,
                                                       v_line_cd , v_new_tax_allocation,
                                                        v_new_fixed_tax_alloc, v_iss_cd,
                                                        ROUND((v_prorate_tax/v_max_takeup_seq),2) ,  v_new_tax_id ,
                                                        v_flatrate , tkup );   
                                        ELSIF  v_new_takeup_alloc = 'S' AND tkup =  v_max_takeup_seq AND v_max_takeup_seq <> 1  THEN
                                              INSERT INTO cpi.gipi_winv_tax
                                                      (par_id, item_grp, tax_cd,
                                                       line_cd, tax_allocation,
                                                       fixed_tax_allocation, iss_cd,
                                                       tax_amt, tax_id, rate,
                                                       takeup_seq_no
                                                      )
                                               VALUES (p_par_id, winv_grp.item_grp , flatax.tax_cd,
                                                       v_line_cd , v_new_tax_allocation,
                                                        v_new_fixed_tax_alloc, v_iss_cd,
                                                        (v_prorate_tax - ( ROUND((v_prorate_tax/v_max_takeup_seq),2) * (v_max_takeup_seq - 1 )))
                                                           ,  v_new_tax_id , v_flatrate, tkup ); 
                                        ELSIF (  v_new_takeup_alloc = 'F' AND tkup = 1 ) 
                                            OR (v_new_takeup_alloc = 'L' AND tkup = v_max_takeup_seq  )
                                            OR ( v_max_takeup_seq = 1 )    THEN
                                              INSERT INTO cpi.gipi_winv_tax
                                                      (par_id, item_grp, tax_cd,
                                                       line_cd, tax_allocation,
                                                       fixed_tax_allocation, iss_cd,
                                                       tax_amt, tax_id, rate,
                                                       takeup_seq_no
                                                      )
                                               VALUES (p_par_id, winv_grp.item_grp , flatax.tax_cd,
                                                       v_line_cd , v_new_tax_allocation,
                                                        v_new_fixed_tax_alloc, v_iss_cd,
                                                        v_prorate_tax ,  v_new_tax_id , v_flatrate, tkup );  
                                        ELSE 
                                              INSERT INTO cpi.gipi_winv_tax
                                                      (par_id, item_grp, tax_cd,
                                                       line_cd, tax_allocation,
                                                       fixed_tax_allocation, iss_cd,
                                                       tax_amt, tax_id, rate,
                                                       takeup_seq_no
                                                      )
                                               VALUES (p_par_id, winv_grp.item_grp , flatax.tax_cd,
                                                       v_line_cd , v_new_tax_allocation,
                                                        v_new_fixed_tax_alloc, v_iss_cd,
                                                        0 ,  v_new_tax_id , v_flatrate , tkup ); 
                                        END IF;                                    
                                    END LOOP; 
								    END IF; --added by robert GENQA 4844 08.10.15 
                               ELSE
                                  dbms_output.put_line ('Updating tax amounts for prorate cancellation .... .'); 
                                   /* IF v_new_tax_type = 'R' AND v_new_no_rate_tag <> 'Y' THEN
                                          dbms_output.put_line ('.........Recomputing taxes based on maintenance  .... .'); 
                                          IF flatax.tax_cd = giacp.n('DOC_STAMPS') THEN
                                                v_recomp_tax_amt :=  compute_uwtaxes.compute_dst (p_par_id,
                                                                              v_sum_premium,
                                                                              v_sum_tsi,
                                                                              v_new_tax_type,
                                                                              v_line_cd,
                                                                              v_iss_cd,
                                                                              flatax.tax_cd,
                                                                              v_new_tax_id,
                                                                              v_new_rate ,
                                                                              v_new_peril_sw ,
                                                                              winv_grp.currency_rt,
                                                                              winv_grp.item_grp,
                                                                              v_max_takeup_seq
                                                                             );     
                                               dbms_output.put_line ('...Tax Code: ' || flatax.tax_cd || ' - ' || v_recomp_tax_amt ||  ' - ' || v_prorate_tax || ' ; ');                              
                                           ELSIF flatax.tax_cd = giacp.n('EVAT') THEN 
                                                 v_recomp_tax_amt := compute_uwtaxes.compute_evat (p_par_id,
                                                                               v_assd_vat_tag,
                                                                               v_new_rate,
                                                                               v_sum_premium,
                                                                               v_new_peril_sw,
                                                                               v_line_cd,
                                                                               v_iss_cd,
                                                                               flatax.tax_cd,
                                                                               v_new_tax_id,
                                                                               winv_grp.item_grp,
                                                                               v_max_takeup_seq
                                                                              );
                                              dbms_output.put_line ('...Tax Code: ' || flatax.tax_cd || ' - ' || v_recomp_tax_amt ||  ' - ' || v_prorate_tax || ' ; ');                              
                                          ELSE
                                                v_recomp_tax_amt := compute_uwtaxes.get_fixed_rate (p_par_id,
                                                                                   winv_grp.item_grp,
                                                                                    v_max_takeup_seq,
                                                                                    --p_takeup_term,
                                                                                    v_sum_premium,
                                                                                    v_new_rate,
                                                                                    v_new_peril_sw,
                                                                                    v_line_cd,
                                                                                    v_iss_cd,
                                                                                    flatax.tax_cd,
                                                                                    v_new_tax_id
                                                                                   );
                                             dbms_output.put_line ('...Tax Code: ' || flatax.tax_cd || ' - ' || v_recomp_tax_amt ||  ' - ' || v_prorate_tax || ' ; ');                              
                                          END IF;   
                                           -- jhing 10.28.2014 added condition to handle scenarios wherein computed tax refund is greater than
                                           --- actual placed taxes. We will only use computed tax amount if computed tax is less than the actual tax 
                                           IF    abs(v_recomp_tax_amt) <= abs(flatax.tax_amt) THEN
                                              v_prorate_tax :=   v_recomp_tax_amt; 
                                           END IF;                                    
                                    END IF; */--commented out edgar 11/11/2014 for new computation of tax amount  
                                    /*edgar 11/13/2014 for tax rate*/
                                    IF v_new_tax_type = 'R' AND v_new_no_rate_tag <> 'Y' THEN
                                        v_flatrate := v_new_rate;
                                    ELSE
                                        v_flatrate := 0;
                                    END IF;
                                    /*ended edgar 11/13/2014*/
                                    --v_flatrate := NULL; --commented out edgar 11/13/2014
                                    FOR tkup in 1 .. v_max_takeup_seq 
                                    LOOP 
                                        IF v_new_takeup_alloc = 'S' AND tkup < v_max_takeup_seq THEN 
                                             UPDATE cpi.gipi_winv_tax
                                                 SET tax_amt = round((v_prorate_tax / v_max_takeup_seq ) , 2 ) , rate = v_flatrate
                                               WHERE par_id = p_par_id
                                                 AND tax_cd = flatax.tax_cd                                    
                                                 AND item_grp = winv_grp.item_grp 
                                                 AND takeup_seq_no = tkup ; 
                                        ELSIF  v_new_takeup_alloc = 'S' AND tkup =  v_max_takeup_seq AND v_max_takeup_seq <> 1  THEN
                                             UPDATE cpi.gipi_winv_tax
                                                 SET tax_amt = v_prorate_tax - (round((v_prorate_tax / v_max_takeup_seq ) , 2 ) - (v_max_takeup_seq - 1 ) ) 
                                                        , rate = v_flatrate
                                               WHERE par_id = p_par_id
                                                 AND tax_cd = flatax.tax_cd                                    
                                                 AND item_grp = winv_grp.item_grp 
                                                 AND takeup_seq_no = tkup ; 
                                        ELSIF (  v_new_takeup_alloc = 'F' AND tkup = 1 ) 
                                            OR (v_new_takeup_alloc = 'L' AND tkup = v_max_takeup_seq  ) 
                                            OR ( v_max_takeup_seq = 1 )  THEN
                                             UPDATE cpi.gipi_winv_tax
                                                 SET tax_amt = v_prorate_tax , rate = v_flatrate
                                               WHERE par_id = p_par_id
                                                 AND tax_cd = flatax.tax_cd                                    
                                                 AND item_grp = winv_grp.item_grp 
                                                 AND takeup_seq_no = tkup ; 
                                        ELSE 
                                             UPDATE cpi.gipi_winv_tax
                                                 SET tax_amt = 0, rate = v_flatrate
                                               WHERE par_id = p_par_id
                                                 AND tax_cd = flatax.tax_cd                                    
                                                 AND item_grp = winv_grp.item_grp 
                                                 AND takeup_seq_no = tkup ; 
                                        END IF;                             
                                   END LOOP; -- end for loop update of tax update                                      
                               END IF;                               
                            END LOOP;
                            -- jhing 10.28.2014 delete taxes which are inserted by create_winvoice since they are required but these taxes
                            -- were not originally included in the policy and endorsements 
                            FOR invalid_tax in tax_not_in_orig_pol_endt ( winv_grp.item_grp  ,  winv_grp.currency_cd ,  winv_grp.currency_rt ) 
                            LOOP
                                DELETE FROM gipi_winv_tax
                                      WHERE par_id = p_par_id
                                        AND line_cd = invalid_tax.line_cd
                                        AND iss_cd = invalid_tax.iss_cd
                                        AND tax_cd = invalid_tax.tax_cd
                                        AND item_grp = winv_grp.item_grp;
                            END LOOP;
                   END LOOP; 
            END IF; -- end if for checking of multiple bill group         
         -- *******************************************************************************************************************************************
          ELSIF (  x.ann_tsi_amt = 0    )  AND TRUNC(x.incept_date) = TRUNC(x.eff_date) THEN /*added condition eff_date = incept_date : edgar 10/12/2014*/    -- jhing 10.29.2014 should handle all manual cancellations ( manual flat or manual prorated cancellation ) . Logig is same
                                                   -- with system prorate cancellation however effectivity dates should matter in manual cancellation 
            v_comp_cancellation := true ;         
            v_multiple_bill := 'N'; 
            FOR curr_inv in ( SELECT distinct currency_cd, currency_rt from gipi_witem where par_id = p_par_id )
            LOOP    
                v_count_bill_grp := 0 ;                 
                SELECT COUNT (DISTINCT item_grp)
                  INTO v_count_bill_grp
                  FROM gipi_winvoice
                 WHERE par_id = p_par_id
                   AND currency_cd = curr_inv.currency_cd
                   AND currency_rt = curr_inv.currency_rt;
                IF v_count_bill_grp > 1 THEN
                    v_multiple_bill := 'Y' ;
                    v_comp_cancellation := false ;
                    EXIT;
                END IF; 
            END LOOP;   
            IF  v_multiple_bill = 'N' THEN 
                dbms_output.put_line ('Start computation of manual cancellation ( prorate and flat )...... '); 
                FOR winv_grp in (SELECT distinct item_grp, currency_cd, currency_rt from gipi_winvoice where par_id = p_par_id ) 
                    LOOP
                            dbms_output.put_line ('Retrieving distinct bill groups for the current PAR ...... '); 
                            v_max_takeup_seq := 1 ; 
                            FOR takeup in (SELECT max(NVL(takeup_seq_no,1)) max_takeup 
                                    FROM gipi_winvoice where par_id = p_par_id AND item_grp = winv_grp.item_grp )
                            LOOP
                                v_max_takeup_seq := takeup.max_takeup ;
                            END LOOP;                           
                            FOR flatax IN (SELECT   (SUM (a.tax_amt) * -1) tax_amt, a.tax_cd, a.iss_cd, a.line_cd                                                    
                                               FROM gipi_inv_tax a, gipi_invoice b
                                              WHERE a.iss_cd = b.iss_cd
                                                AND a.prem_seq_no = b.prem_seq_no
                                                AND b.currency_cd = winv_grp.currency_cd
                                                AND b.currency_rt = winv_grp.currency_rt 
                                                AND b.policy_id IN (
                                                       SELECT policy_id
                                                         FROM gipi_polbasic
                                                        WHERE line_cd = v_line_cd
                                                          AND subline_cd = v_subline_cd
                                                          AND iss_cd = v_iss_cd
                                                          AND issue_yy = v_issue_yy
                                                          AND pol_seq_no = v_pol_seq_no
                                                          AND renew_no = v_renew_no
                                                          AND pol_flag <> '5' 
                                                          AND TRUNC(eff_date) <=  DECODE(nvl(endt_seq_no,0),0,TRUNC(eff_date), TRUNC(v_eff_date ))
                                                          AND TRUNC (NVL(endt_expiry_date, expiry_date )) 
                                                                            >= DECODE(nvl(endt_seq_no,0),0,TRUNC(eff_date), TRUNC(v_eff_date )) )
                                           GROUP BY a.tax_cd,                                                  
                                                    a.iss_cd,
                                                    a.line_cd 
                                           ORDER BY a.tax_cd  )
                            LOOP
                                dbms_output.put_line ('Retrieving taxes from policy and endorsements .... .'); 
                               v_exists := 'N';
                               v_flatrate := 0;
                               v_new_tax_type := NULL ;
                               v_new_no_rate_tag := NULL ; 
                               --v_recomp_tax_amt := flatax.tax_amt ;--comment out edgar 11/11/2014 
                               v_new_peril_sw := NULL;
                               v_new_rate := NULL; 
                               v_new_takeup_alloc := NULL;
                               v_prorate_tax := flatax.tax_amt;
                               dbms_output.put_line ('...Checking tax code: ' || flatax.tax_cd || ' .................. ');  
                               FOR exist IN (SELECT a.tax_cd , b.tax_type , NVL(b.no_rate_tag,'N') no_rate_tag,
                                                b.peril_sw , b.rate  , NVL(b.takeup_alloc_tag, 'F') takeup_alloc_tag ,
                                                DECODE(b.allocation_tag,'N','N','Y') fixed_tax_alloc
                                               FROM gipi_winv_tax a, giis_tax_charges b 
                                              WHERE a.par_id = p_par_id
                                                AND a.tax_cd = flatax.tax_cd                                                
                                                AND a.item_grp = winv_grp.item_grp
                                                AND a.line_cd = b.line_cd
                                                AND a.iss_cd =  b.iss_cd
                                                AND a.tax_cd = b.tax_cd
                                                AND a.tax_id = b.tax_id  )
                               LOOP
                                  v_exists := 'Y';
                                  v_new_tax_type := exist.tax_type;
                                  v_new_no_rate_tag := exist.no_rate_tag; 
                                  v_new_peril_sw := exist.peril_sw;
                                  v_new_rate := exist.rate; 
                                  v_new_takeup_alloc := exist.takeup_alloc_tag ; 
                                  v_new_fixed_tax_alloc := exist.fixed_tax_alloc;
                                  EXIT;
                               END LOOP;
                               
                               compute_uwtaxes.get_prorate_tax2(p_par_id, flatax.tax_cd, flatax.iss_cd, flatax.line_cd, v_eff_date, winv_grp.item_grp, winv_grp.currency_cd, winv_grp.currency_rt, v_new_rate, v_prorate_tax); -- Dren 12.15.2015 SR-0020357 : Wrong prorate computation for manual cancellation. 
                               
                               IF v_exists = 'N'
                               THEN
                                    v_new_tax_id := NULL;
                                    v_new_tax_allocation := NULL;
                                    v_new_fixed_tax_alloc := NULL; 
                                    v_new_peril_sw := NULL;
                                    v_new_rate := NULL; 
                                    v_new_takeup_alloc := NULL;
                                    FOR new_tax in get_tax_cd ( v_line_cd  , v_iss_cd  , flatax.tax_cd , v_issue_date , v_eff_date, v_place_cd  )
                                    LOOP
                                        v_exists := 'Y' ;
                                        v_new_tax_id := new_tax.tax_id ;
                                        IF new_tax.allocation_tag = 'N' THEN 
                                            v_new_tax_allocation := 'F'; 
                                        ELSE
                                            v_new_tax_allocation := new_tax.allocation_tag; 
                                        END IF; 
                                        v_new_fixed_tax_alloc := new_tax.fixed_tax_alloc; 
                                        v_new_tax_type := new_tax.tax_type;
                                        v_new_no_rate_tag := new_tax.no_rate_tag; 
                                        v_new_peril_sw := new_tax.peril_sw;
                                        v_new_rate := new_tax.rate ; 
                                        v_new_takeup_alloc := new_tax.takeup_alloc_tag; 
                                        EXIT;
                                    END LOOP;
                                    -- jhing 10.28.2014 if no taxes can be applied based on effectivity dates, retrieved the first tax record
                                    -- from policy and/or endorsements
                                    IF v_exists = 'N' THEN 
                                        FOR old_tax in tax_from_old_pol2 ( flatax.tax_cd , winv_grp.currency_cd  , winv_grp.currency_rt, v_place_cd, v_eff_date )
                                        LOOP
                                            v_exists := 'Y'; --added by robert GENQA 4844 08.10.15 
											v_new_tax_id := old_tax.tax_id ;
                                            IF old_tax.allocation_tag = 'N' THEN 
                                                v_new_tax_allocation := 'F'; 
                                            ELSE
                                                v_new_tax_allocation := old_tax.allocation_tag; 
                                            END IF;
                                            v_new_fixed_tax_alloc := old_tax.fixed_tax_alloc;
                                            v_new_tax_type := old_tax.tax_type;
                                            v_new_no_rate_tag := old_tax.no_rate_tag;  
                                            v_new_peril_sw := old_tax.peril_sw;
                                            v_new_rate := old_tax.rate ;
                                            v_new_takeup_alloc := old_tax.takeup_alloc_tag; 
                                            EXIT;                                        
                                        END LOOP;                                   
                                    END IF;
									IF v_exists = 'Y' THEN --added by robert GENQA 4844 08.10.15                                        
                                    /*edgar 11/13/2014 for correct tax rate*/     
                                    IF v_new_tax_type = 'R' AND v_new_no_rate_tag <> 'Y' THEN
                                        v_flatrate := v_new_rate;
                                    ELSE
                                        v_flatrate := 0;
                                    END IF;   
                                    /*end edgar 11/13/2014*/                                      
                                    /*IF v_new_tax_type = 'R' AND ( v_new_no_rate_tag <> 'Y'  OR ( v_new_no_rate_tag = 'Y' AND v_new_rate <> 0 ) ) THEN
                                          dbms_output.put_line ('.........Recomputing taxes based on maintenance  .... .'); 
                                          IF flatax.tax_cd = giacp.n('DOC_STAMPS') THEN
                                                v_recomp_tax_amt :=  compute_uwtaxes.compute_dst (p_par_id,
                                                                              v_sum_premium,
                                                                              v_sum_tsi,
                                                                              v_new_tax_type,
                                                                              v_line_cd,
                                                                              v_iss_cd,
                                                                              flatax.tax_cd,
                                                                              v_new_tax_id,
                                                                              v_new_rate ,
                                                                              v_new_peril_sw ,
                                                                              winv_grp.currency_rt,
                                                                              winv_grp.item_grp,
                                                                              NULL
                                                                             );     
                                                dbms_output.put_line ('...Tax Code: ' || flatax.tax_cd || ' - ' || v_recomp_tax_amt ||  ' - ' || v_prorate_tax || ' ; ');                              
                                           ELSIF flatax.tax_cd = giacp.n('EVAT') THEN 
                                                 v_recomp_tax_amt := compute_uwtaxes.compute_evat (p_par_id,
                                                                               v_assd_vat_tag,
                                                                               v_new_rate,
                                                                               v_sum_premium,
                                                                               v_new_peril_sw,
                                                                               v_line_cd,
                                                                               v_iss_cd,
                                                                               flatax.tax_cd,
                                                                               v_new_tax_id,
                                                                               winv_grp.item_grp,
                                                                               NULL
                                                                              );
                                                 dbms_output.put_line ('...Tax Code: ' || flatax.tax_cd || ' - ' || v_recomp_tax_amt ||  ' - ' || v_prorate_tax || ' ; ');                              
                                         ELSE
                                                v_recomp_tax_amt := compute_uwtaxes.get_fixed_rate (p_par_id,
                                                                                   winv_grp.item_grp,
                                                                                   NULL,
                                                                                    --p_takeup_term,
                                                                                    v_sum_premium,
                                                                                    v_new_rate,
                                                                                    v_new_peril_sw,
                                                                                    v_line_cd,
                                                                                    v_iss_cd,
                                                                                    flatax.tax_cd,
                                                                                    v_new_tax_id
                                                                                   );
                                                  dbms_output.put_line ('...Tax Code: ' || flatax.tax_cd || ' - ' || v_recomp_tax_amt ||  ' - ' || v_prorate_tax || ' ; ');                              
                                         END IF;   
                                           -- jhing 10.28.2014 added condition to handle scenarios wherein computed tax refund is greater than
                                           --- actual placed taxes. We will only use computed tax amount if computed tax is less than the actual tax 
                                           IF    abs(v_recomp_tax_amt) <= abs(flatax.tax_amt) THEN
                                              v_prorate_tax :=   v_recomp_tax_amt; 
                                           END IF;                                 
                                    END IF; */--commented out edgar 11/11/2014 for new computation of tax amount  
                                    -- for fixed rate ( excluded are without rate taxes), recompute taxes. If recomputed taxes are greater than the total 
                                    -- tax from original policy and endorsement, then retain the total tax from the policy/endorsement, otherwise use the 
                                    -- recomputed tax proportional to the premium 
                                    --v_flatrate := NULL; --edgar 11/13/2014
                                    FOR tkup in 1 .. v_max_takeup_seq 
                                    LOOP 
                                        IF v_new_takeup_alloc = 'S' AND tkup < v_max_takeup_seq THEN 
                                              INSERT INTO cpi.gipi_winv_tax
                                                      (par_id, item_grp, tax_cd,
                                                       line_cd, tax_allocation,
                                                       fixed_tax_allocation, iss_cd,
                                                       tax_amt, tax_id, rate,
                                                       takeup_seq_no
                                                      )
                                               VALUES (p_par_id, winv_grp.item_grp , flatax.tax_cd,
                                                       v_line_cd , v_new_tax_allocation,
                                                        v_new_fixed_tax_alloc, v_iss_cd,
                                                        ROUND((v_prorate_tax/v_max_takeup_seq),2) ,  v_new_tax_id , v_flatrate, tkup );   
                                        ELSIF  v_new_takeup_alloc = 'S' AND tkup =  v_max_takeup_seq AND v_max_takeup_seq <> 1  THEN
                                              INSERT INTO cpi.gipi_winv_tax
                                                      (par_id, item_grp, tax_cd,
                                                       line_cd, tax_allocation,
                                                       fixed_tax_allocation, iss_cd,
                                                       tax_amt, tax_id, rate,
                                                       takeup_seq_no
                                                      )
                                               VALUES (p_par_id, winv_grp.item_grp , flatax.tax_cd,
                                                       v_line_cd , v_new_tax_allocation,
                                                        v_new_fixed_tax_alloc, v_iss_cd,
                                                        v_prorate_tax - ( ROUND((v_prorate_tax/v_max_takeup_seq),2) * (v_max_takeup_seq - 1 )) ,  v_new_tax_id , v_flatrate, tkup ); 
                                        ELSIF (  v_new_takeup_alloc = 'F' AND tkup = 1 ) 
                                            OR (v_new_takeup_alloc = 'L' AND tkup = v_max_takeup_seq  )
                                            OR ( v_max_takeup_seq = 1 )    THEN
                                              INSERT INTO cpi.gipi_winv_tax
                                                      (par_id, item_grp, tax_cd,
                                                       line_cd, tax_allocation,
                                                       fixed_tax_allocation, iss_cd,
                                                       tax_amt, tax_id, rate,
                                                       takeup_seq_no
                                                      )
                                               VALUES (p_par_id, winv_grp.item_grp , flatax.tax_cd,
                                                       v_line_cd , v_new_tax_allocation,
                                                        v_new_fixed_tax_alloc, v_iss_cd,
                                                        v_prorate_tax ,  v_new_tax_id , v_flatrate, tkup );  
                                        ELSE 
                                              INSERT INTO cpi.gipi_winv_tax
                                                      (par_id, item_grp, tax_cd,
                                                       line_cd, tax_allocation,
                                                       fixed_tax_allocation, iss_cd,
                                                       tax_amt, tax_id, rate,
                                                       takeup_seq_no
                                                      )
                                               VALUES (p_par_id, winv_grp.item_grp , flatax.tax_cd,
                                                       v_line_cd , v_new_tax_allocation,
                                                        v_new_fixed_tax_alloc, v_iss_cd,
                                                        0 ,  v_new_tax_id , v_flatrate , tkup ); 
                                        END IF;                                    
                                    END LOOP; 
								    END IF; --added by robert GENQA 4844 08.10.15 
                               ELSE
                                  dbms_output.put_line ('Updating tax amounts for prorate cancellation .... .'); 
                                    /*edgar 11/13/2014 for correct tax rate*/     
                                    IF v_new_tax_type = 'R' AND v_new_no_rate_tag <> 'Y' THEN
                                        v_flatrate := v_new_rate;
                                    ELSE
                                        v_flatrate := 0;
                                    END IF;   
                                    /*end edgar 11/13/2014*/                                    
                                    /*IF v_new_tax_type = 'R' AND v_new_no_rate_tag <> 'Y' THEN
                                          dbms_output.put_line ('.........Recomputing taxes based on maintenance  .... .'); 
                                          IF flatax.tax_cd = giacp.n('DOC_STAMPS') THEN
                                                v_recomp_tax_amt :=  compute_uwtaxes.compute_dst (p_par_id,
                                                                              v_sum_premium,
                                                                              v_sum_tsi,
                                                                              v_new_tax_type,
                                                                              v_line_cd,
                                                                              v_iss_cd,
                                                                              flatax.tax_cd,
                                                                              v_new_tax_id,
                                                                              v_new_rate ,
                                                                              v_new_peril_sw ,
                                                                              winv_grp.currency_rt,
                                                                              winv_grp.item_grp,
                                                                              v_max_takeup_seq
                                                                             );     
                                               dbms_output.put_line ('...Tax Code: ' || flatax.tax_cd || ' - ' || v_recomp_tax_amt ||  ' - ' || v_prorate_tax || ' ; ');                              
                                           ELSIF flatax.tax_cd = giacp.n('EVAT') THEN 
                                                 v_recomp_tax_amt := compute_uwtaxes.compute_evat (p_par_id,
                                                                               v_assd_vat_tag,
                                                                               v_new_rate,
                                                                               v_sum_premium,
                                                                               v_new_peril_sw,
                                                                               v_line_cd,
                                                                               v_iss_cd,
                                                                               flatax.tax_cd,
                                                                               v_new_tax_id,
                                                                               winv_grp.item_grp,
                                                                               v_max_takeup_seq
                                                                              );
                                              dbms_output.put_line ('...Tax Code: ' || flatax.tax_cd || ' - ' || v_recomp_tax_amt ||  ' - ' || v_prorate_tax || ' ; ');                              
                                          ELSE
                                                v_recomp_tax_amt := compute_uwtaxes.get_fixed_rate (p_par_id,
                                                                                   winv_grp.item_grp,
                                                                                    v_max_takeup_seq,
                                                                                    --p_takeup_term,
                                                                                    v_sum_premium,
                                                                                    v_new_rate,
                                                                                    v_new_peril_sw,
                                                                                    v_line_cd,
                                                                                    v_iss_cd,
                                                                                    flatax.tax_cd,
                                                                                    v_new_tax_id
                                                                                   );
                                             dbms_output.put_line ('...Tax Code: ' || flatax.tax_cd || ' - ' || v_recomp_tax_amt ||  ' - ' || v_prorate_tax || ' ; ');                              
                                          END IF;   
                                           -- jhing 10.28.2014 added condition to handle scenarios wherein computed tax refund is greater than
                                           --- actual placed taxes. We will only use computed tax amount if computed tax is less than the actual tax 
                                           IF    abs(v_recomp_tax_amt) <= abs(flatax.tax_amt) THEN
                                              v_prorate_tax :=   v_recomp_tax_amt; 
                                           END IF;                                    
                                    END IF; */ --commented out edgar 11/11/2014 for new computation of tax amount
                                    --v_flatrate := NULL; --edgar 11/13/2014
                                    FOR tkup in 1 .. v_max_takeup_seq 
                                    LOOP 
                                        IF v_new_takeup_alloc = 'S' AND tkup < v_max_takeup_seq THEN 
                                             UPDATE cpi.gipi_winv_tax
                                                 SET tax_amt = round((v_prorate_tax / v_max_takeup_seq ) , 2 ) , rate = v_flatrate
                                               WHERE par_id = p_par_id
                                                 AND tax_cd = flatax.tax_cd                                    
                                                 AND item_grp = winv_grp.item_grp 
                                                 AND takeup_seq_no = tkup ; 
                                        ELSIF  v_new_takeup_alloc = 'S' AND tkup =  v_max_takeup_seq AND v_max_takeup_seq <> 1  THEN
                                             UPDATE cpi.gipi_winv_tax
                                                 SET tax_amt = v_prorate_tax - (round((v_prorate_tax / v_max_takeup_seq ) , 2 ) - (v_max_takeup_seq - 1 ) ) 
                                                        , rate = v_flatrate
                                               WHERE par_id = p_par_id
                                                 AND tax_cd = flatax.tax_cd                                    
                                                 AND item_grp = winv_grp.item_grp 
                                                 AND takeup_seq_no = tkup ; 
                                        ELSIF (  v_new_takeup_alloc = 'F' AND tkup = 1 ) 
                                            OR (v_new_takeup_alloc = 'L' AND tkup = v_max_takeup_seq  ) 
                                            OR ( v_max_takeup_seq = 1 )  THEN
                                             UPDATE cpi.gipi_winv_tax
                                                 SET tax_amt = v_prorate_tax , rate = v_flatrate
                                               WHERE par_id = p_par_id
                                                 AND tax_cd = flatax.tax_cd                                    
                                                 AND item_grp = winv_grp.item_grp 
                                                 AND takeup_seq_no = tkup ; 
                                        ELSE 
                                             UPDATE cpi.gipi_winv_tax
                                                 SET tax_amt = 0, rate = v_flatrate
                                               WHERE par_id = p_par_id
                                                 AND tax_cd = flatax.tax_cd                                    
                                                 AND item_grp = winv_grp.item_grp 
                                                 AND takeup_seq_no = tkup ; 
                                        END IF;                             
                                   END LOOP; -- end for loop update of tax update                                      
                               END IF;                               
                            END LOOP;
                            -- jhing 10.28.2014 delete taxes which are inserted by create_winvoice since they are required but these taxes
                            -- were not originally included in the policy and endorsements 
                            FOR invalid_tax in tax_not_in_orig_pol_endt2 ( winv_grp.item_grp  ,  winv_grp.currency_cd ,  winv_grp.currency_rt, v_eff_date ) 
                            LOOP
                                DELETE FROM gipi_winv_tax
                                      WHERE par_id = p_par_id
                                        AND line_cd = invalid_tax.line_cd
                                        AND iss_cd = invalid_tax.iss_cd
                                        AND tax_cd = invalid_tax.tax_cd
                                        AND item_grp = winv_grp.item_grp;
                            END LOOP;
                   END LOOP; 
            END IF; -- end if for checking of multiple bill group         
          ELSIF (  x.ann_tsi_amt = 0    ) THEN/* codes for manual prorate cancellation : edgar 11/13/2014*/
            v_comp_cancellation := true ;         
            v_multiple_bill := 'N'; 
            FOR curr_inv in ( SELECT distinct currency_cd, currency_rt from gipi_witem where par_id = p_par_id )
            LOOP    
                v_count_bill_grp := 0 ;                 
                SELECT COUNT (DISTINCT item_grp)
                  INTO v_count_bill_grp
                  FROM gipi_winvoice
                 WHERE par_id = p_par_id
                   AND currency_cd = curr_inv.currency_cd
                   AND currency_rt = curr_inv.currency_rt;
                IF v_count_bill_grp > 1 THEN
                    v_multiple_bill := 'Y' ;
                    v_comp_cancellation := false ;
                    EXIT;
                END IF; 
            END LOOP;  
            IF  v_multiple_bill = 'N' THEN 
                dbms_output.put_line ('Start computation of manual cancellation ( prorate and flat )...... '); 
                FOR winv_grp in (SELECT distinct item_grp, currency_cd, currency_rt from gipi_winvoice where par_id = p_par_id ) 
                    LOOP
                            dbms_output.put_line ('Retrieving distinct bill groups for the current PAR ...... '); 
                            v_max_takeup_seq := 1 ; 
                            FOR takeup in (SELECT max(NVL(takeup_seq_no,1)) max_takeup 
                                    FROM gipi_winvoice where par_id = p_par_id AND item_grp = winv_grp.item_grp )
                            LOOP
                                v_max_takeup_seq := takeup.max_takeup ;
                            END LOOP;                           
                            FOR flatax IN (SELECT   (SUM (a.tax_amt) * -1) tax_amt, a.tax_cd, a.iss_cd, a.line_cd                                                    
                                               FROM gipi_inv_tax a, gipi_invoice b
                                              WHERE a.iss_cd = b.iss_cd
                                                AND a.prem_seq_no = b.prem_seq_no
                                                AND b.currency_cd = winv_grp.currency_cd
                                                AND b.currency_rt = winv_grp.currency_rt 
                                                AND b.policy_id IN (
                                                       SELECT policy_id
                                                         FROM gipi_polbasic
                                                        WHERE line_cd = v_line_cd
                                                          AND subline_cd = v_subline_cd
                                                          AND iss_cd = v_iss_cd
                                                          AND issue_yy = v_issue_yy
                                                          AND pol_seq_no = v_pol_seq_no
                                                          AND renew_no = v_renew_no
                                                          AND pol_flag <> '5' 
                                                          AND TRUNC(eff_date) <=  DECODE(nvl(endt_seq_no,0),0,TRUNC(eff_date), TRUNC(v_eff_date ))
                                                          AND TRUNC (NVL(endt_expiry_date, expiry_date )) 
                                                                            >= DECODE(nvl(endt_seq_no,0),0,TRUNC(eff_date), TRUNC(v_eff_date )) )
                                           GROUP BY a.tax_cd,                                                  
                                                    a.iss_cd,
                                                    a.line_cd 
                                           ORDER BY a.tax_cd  )
                            LOOP
                                dbms_output.put_line ('Retrieving taxes from policy and endorsements .... .'); 
                               v_exists := 'N';
                               v_flatrate := 0;
                               v_new_tax_type := NULL ;
                               v_new_no_rate_tag := NULL ;
                               v_new_peril_sw := NULL;
                               v_new_rate := NULL; 
                               v_new_takeup_alloc := NULL;
                               v_prorate_tax := flatax.tax_amt;
                               dbms_output.put_line ('...Checking tax code: ' || flatax.tax_cd || ' .................. ');  
                               FOR exist IN (SELECT a.tax_cd , b.tax_type , NVL(b.no_rate_tag,'N') no_rate_tag,
                                                b.peril_sw , b.rate  , NVL(b.takeup_alloc_tag, 'F') takeup_alloc_tag ,
                                                DECODE(b.allocation_tag,'N','N','Y') fixed_tax_alloc
                                               FROM gipi_winv_tax a, giis_tax_charges b 
                                              WHERE a.par_id = p_par_id
                                                AND a.tax_cd = flatax.tax_cd                                                
                                                AND a.item_grp = winv_grp.item_grp
                                                AND a.line_cd = b.line_cd
                                                AND a.iss_cd =  b.iss_cd
                                                AND a.tax_cd = b.tax_cd
                                                AND a.tax_id = b.tax_id  )
                               LOOP
                                  v_exists := 'Y';
                                  v_new_tax_type := exist.tax_type;
                                  v_new_no_rate_tag := exist.no_rate_tag; 
                                  v_new_peril_sw := exist.peril_sw;
                                  v_new_rate := exist.rate; 
                                  v_new_takeup_alloc := exist.takeup_alloc_tag ; 
                                  v_new_fixed_tax_alloc := exist.fixed_tax_alloc;
                                  EXIT;
                               END LOOP;
                               /*recomputation of tax base on prorate cancellation of premium : edgar 11/11/2014*/ 
                               --compute_uwtaxes. (p_par_id, flatax.tax_cd, flatax.iss_cd, flatax.line_cd, v_eff_date, winv_grp.item_grp, winv_grp.currency_cd, winv_grp.currency_rt, v_prorate_tax);
                               compute_uwtaxes.get_prorate_tax2(p_par_id, flatax.tax_cd, flatax.iss_cd, flatax.line_cd, v_eff_date, winv_grp.item_grp, winv_grp.currency_cd, winv_grp.currency_rt, v_new_rate, v_prorate_tax); -- Dren 12.15.2015 SR-0020357 : Wrong prorate computation for manual cancellation.                             
                               /*ended edgar 11/11/2014*/ 
                               IF v_exists = 'N'
                               THEN
                                    v_new_tax_id := NULL;
                                    v_new_tax_allocation := NULL;
                                    v_new_fixed_tax_alloc := NULL; 
                                    v_new_peril_sw := NULL;
                                    v_new_rate := NULL; 
                                    v_new_takeup_alloc := NULL;
                                    FOR new_tax in get_tax_cd ( v_line_cd  , v_iss_cd  , flatax.tax_cd , v_issue_date , v_eff_date, v_place_cd  )
                                    LOOP
                                        v_exists := 'Y' ;
                                        v_new_tax_id := new_tax.tax_id ;
                                        IF new_tax.allocation_tag = 'N' THEN 
                                            v_new_tax_allocation := 'F'; 
                                        ELSE
                                            v_new_tax_allocation := new_tax.allocation_tag; 
                                        END IF; 
                                        v_new_fixed_tax_alloc := new_tax.fixed_tax_alloc; 
                                        v_new_tax_type := new_tax.tax_type;
                                        v_new_no_rate_tag := new_tax.no_rate_tag; 
                                        v_new_peril_sw := new_tax.peril_sw;
                                        v_new_rate := new_tax.rate ; 
                                        v_new_takeup_alloc := new_tax.takeup_alloc_tag; 
                                        EXIT;
                                    END LOOP;
                                    -- if no taxes can be applied based on effectivity dates, retrieved the first tax record
                                    -- from policy and/or endorsements
                                    IF v_exists = 'N' THEN 
                                        FOR old_tax in tax_from_old_pol2 ( flatax.tax_cd , winv_grp.currency_cd  , winv_grp.currency_rt, v_place_cd, v_eff_date )
                                        LOOP
											v_exists := 'Y'; --added by robert GENQA 4844 08.10.15 
                                            v_new_tax_id := old_tax.tax_id ;
                                            IF old_tax.allocation_tag = 'N' THEN 
                                                v_new_tax_allocation := 'F'; 
                                            ELSE
                                                v_new_tax_allocation := old_tax.allocation_tag; 
                                            END IF;
                                            v_new_fixed_tax_alloc := old_tax.fixed_tax_alloc;
                                            v_new_tax_type := old_tax.tax_type;
                                            v_new_no_rate_tag := old_tax.no_rate_tag;  
                                            v_new_peril_sw := old_tax.peril_sw;
                                            v_new_rate := old_tax.rate ;
                                            v_new_takeup_alloc := old_tax.takeup_alloc_tag; 
                                            EXIT;                                        
                                        END LOOP;                                   
                                    END IF;                                       
									IF v_exists = 'Y' THEN --added by robert GENQA 4844 08.10.15                                      
                                    IF v_new_tax_type = 'R' AND v_new_no_rate_tag <> 'Y' THEN
                                        v_flatrate := v_new_rate;
                                    ELSE
                                        v_flatrate := 0;
                                    END IF;                                  
                                    -- for fixed rate ( excluded are without rate taxes), recompute taxes. If recomputed taxes are greater than the total 
                                    -- tax from original policy and endorsement, then retain the total tax from the policy/endorsement, otherwise use the 
                                    -- recomputed tax proportional to the premium 
                                    FOR tkup in 1 .. v_max_takeup_seq 
                                    LOOP 
                                        IF v_new_takeup_alloc = 'S' AND tkup < v_max_takeup_seq THEN 
                                              INSERT INTO cpi.gipi_winv_tax
                                                      (par_id, item_grp, tax_cd,
                                                       line_cd, tax_allocation,
                                                       fixed_tax_allocation, iss_cd,
                                                       tax_amt, tax_id, rate,
                                                       takeup_seq_no
                                                      )
                                               VALUES (p_par_id, winv_grp.item_grp , flatax.tax_cd,
                                                       v_line_cd , v_new_tax_allocation,
                                                        v_new_fixed_tax_alloc, v_iss_cd,
                                                        ROUND((v_prorate_tax/v_max_takeup_seq),2) ,  v_new_tax_id , v_flatrate, tkup );   
                                        ELSIF  v_new_takeup_alloc = 'S' AND tkup =  v_max_takeup_seq AND v_max_takeup_seq <> 1  THEN
                                              INSERT INTO cpi.gipi_winv_tax
                                                      (par_id, item_grp, tax_cd,
                                                       line_cd, tax_allocation,
                                                       fixed_tax_allocation, iss_cd,
                                                       tax_amt, tax_id, rate,
                                                       takeup_seq_no
                                                      )
                                               VALUES (p_par_id, winv_grp.item_grp , flatax.tax_cd,
                                                       v_line_cd , v_new_tax_allocation,
                                                        v_new_fixed_tax_alloc, v_iss_cd,
                                                        v_prorate_tax - ( ROUND((v_prorate_tax/v_max_takeup_seq),2) * (v_max_takeup_seq - 1 )) ,  v_new_tax_id , v_flatrate, tkup ); 
                                        ELSIF (  v_new_takeup_alloc = 'F' AND tkup = 1 ) 
                                            OR (v_new_takeup_alloc = 'L' AND tkup = v_max_takeup_seq  )
                                            OR ( v_max_takeup_seq = 1 )    THEN
                                              INSERT INTO cpi.gipi_winv_tax
                                                      (par_id, item_grp, tax_cd,
                                                       line_cd, tax_allocation,
                                                       fixed_tax_allocation, iss_cd,
                                                       tax_amt, tax_id, rate,
                                                       takeup_seq_no
                                                      )
                                               VALUES (p_par_id, winv_grp.item_grp , flatax.tax_cd,
                                                       v_line_cd , v_new_tax_allocation,
                                                        v_new_fixed_tax_alloc, v_iss_cd,
                                                        v_prorate_tax ,  v_new_tax_id , v_flatrate, tkup );  
                                        ELSE 
                                              INSERT INTO cpi.gipi_winv_tax
                                                      (par_id, item_grp, tax_cd,
                                                       line_cd, tax_allocation,
                                                       fixed_tax_allocation, iss_cd,
                                                       tax_amt, tax_id, rate,
                                                       takeup_seq_no
                                                      )
                                               VALUES (p_par_id, winv_grp.item_grp , flatax.tax_cd,
                                                       v_line_cd , v_new_tax_allocation,
                                                        v_new_fixed_tax_alloc, v_iss_cd,
                                                        0 ,  v_new_tax_id , v_flatrate , tkup ); 
                                        END IF;                                    
                                    END LOOP; 
									END IF; --added by robert GENQA 4844 08.10.15 
                               ELSE
                                  dbms_output.put_line ('Updating tax amounts for prorate cancellation .... .'); 
                                    IF v_new_tax_type = 'R' AND v_new_no_rate_tag <> 'Y' THEN
                                        v_flatrate := v_new_rate;
                                    ELSE
                                        v_flatrate := 0;
                                    END IF; 
                                    FOR tkup in 1 .. v_max_takeup_seq 
                                    LOOP 
                                        IF v_new_takeup_alloc = 'S' AND tkup < v_max_takeup_seq THEN 
                                             UPDATE cpi.gipi_winv_tax
                                                 SET tax_amt = round((v_prorate_tax / v_max_takeup_seq ) , 2 ) , rate = v_flatrate
                                               WHERE par_id = p_par_id
                                                 AND tax_cd = flatax.tax_cd                                    
                                                 AND item_grp = winv_grp.item_grp 
                                                 AND takeup_seq_no = tkup ; 
                                        ELSIF  v_new_takeup_alloc = 'S' AND tkup =  v_max_takeup_seq AND v_max_takeup_seq <> 1  THEN
                                             UPDATE cpi.gipi_winv_tax
                                                 SET tax_amt = v_prorate_tax - (round((v_prorate_tax / v_max_takeup_seq ) , 2 ) - (v_max_takeup_seq - 1 ) ) 
                                                        , rate = v_flatrate
                                               WHERE par_id = p_par_id
                                                 AND tax_cd = flatax.tax_cd                                    
                                                 AND item_grp = winv_grp.item_grp 
                                                 AND takeup_seq_no = tkup ; 
                                        ELSIF (  v_new_takeup_alloc = 'F' AND tkup = 1 ) 
                                            OR (v_new_takeup_alloc = 'L' AND tkup = v_max_takeup_seq  ) 
                                            OR ( v_max_takeup_seq = 1 )  THEN
                                             UPDATE cpi.gipi_winv_tax
                                                 SET tax_amt = v_prorate_tax , rate = v_flatrate
                                               WHERE par_id = p_par_id
                                                 AND tax_cd = flatax.tax_cd                                    
                                                 AND item_grp = winv_grp.item_grp 
                                                 AND takeup_seq_no = tkup ; 
                                        ELSE 
                                             UPDATE cpi.gipi_winv_tax
                                                 SET tax_amt = 0, rate = v_flatrate
                                               WHERE par_id = p_par_id
                                                 AND tax_cd = flatax.tax_cd                                    
                                                 AND item_grp = winv_grp.item_grp 
                                                 AND takeup_seq_no = tkup ; 
                                        END IF;                             
                                   END LOOP; -- end for loop update of tax update                                      
                               END IF;                               
                            END LOOP;
                            -- delete taxes which are inserted by create_winvoice since they are required but these taxes
                            -- were not originally included in the policy and endorsements 
                            FOR invalid_tax in tax_not_in_orig_pol_endt2 ( winv_grp.item_grp  ,  winv_grp.currency_cd ,  winv_grp.currency_rt, v_eff_date ) 
                            LOOP
                                DELETE FROM gipi_winv_tax
                                      WHERE par_id = p_par_id
                                        AND line_cd = invalid_tax.line_cd
                                        AND iss_cd = invalid_tax.iss_cd
                                        AND tax_cd = invalid_tax.tax_cd
                                        AND item_grp = winv_grp.item_grp;
                            END LOOP;
                   END LOOP; 
            END IF; -- end if for checking of multiple bill group         
         END IF;            
         -- *******************************************************************************************************************************************             
         -- jhing 10.28.2014 added codes to update gipi_winvoice after 
         -- recomputation of taxes. Did not include gipi_winstallment since there are no records in gipi_winstallment
         -- yet during calling of create_winvoice 
         IF v_comp_cancellation THEN 
            -- delete docstamps for negative premium if client is not allowed to return docstamps 
            -- jhing 10.28.2014 integrated ed's changes for temp solution /*added edgar 08/27/2014*/
            FOR inv IN (SELECT   SUM (prem_amt) prem_amt, item_grp
                            FROM gipi_winvoice
                           WHERE par_id = p_par_id
                        GROUP BY item_grp)
            LOOP
               v_sum_premium := 0;
               FOR peril IN (SELECT b.peril_type peril_type,
                                    a.prem_amt premium, a.tsi_amt tsi
                               FROM gipi_witmperl a,
                                    giis_peril b,
                                    gipi_witem c
                              WHERE a.line_cd = b.line_cd
                                AND a.peril_cd = b.peril_cd
                                AND a.item_no = c.item_no
                                AND a.par_id = c.par_id
                                AND NVL (c.item_grp, 1) = inv.item_grp
                                AND a.par_id = p_par_id)
               LOOP
                  v_sum_premium := v_sum_premium + peril.premium;
               END LOOP;
               IF     v_sum_premium < 0
                  AND NVL (giisp.v ('ALLOW_NEGATIVE_DST'), 'Y') = 'N'
               THEN
                  DELETE FROM gipi_winv_tax
                        WHERE par_id = p_par_id
                          AND tax_cd = giacp.n ('DOC_STAMPS')
                          AND item_grp = inv.item_grp;
               END IF;
            END LOOP;
            -- update gipi_winvoice tax amount based on the recomputed amounts 
            FOR i IN (SELECT   SUM (NVL(tax_amt,0)) tax_amt, par_id, takeup_seq_no,
                                    item_grp
                               FROM gipi_winv_tax
                              WHERE par_id = p_par_id
                           GROUP BY par_id, item_grp, takeup_seq_no)
             LOOP
                    v_sum_tax_amt := i.tax_amt;
                    UPDATE gipi_winvoice
                       SET tax_amt = v_sum_tax_amt
                     WHERE par_id = p_par_id
                       AND takeup_seq_no = i.takeup_seq_no
                       AND item_grp = i.item_grp;
            END LOOP;
         END IF;
      END LOOP;       
      -- end of added codes jhing 10.27.2014  
     -- jhing 10.27.2014 added condition to check if tax for cancellation has been computed.
     -- If tax for cancellation type of PAR has been computed, the normal or regular process 
     -- of the computation of tax will not be computed. Computation should consider long term taxes
     IF NOT ( v_comp_cancellation) THEN 
          FOR inv IN (SELECT  par_id, item_grp, /* takeup_seq_no, */ currency_rt , sum(nvl(prem_amt,0)) prem_amt    -- jhing 10.29.2014 added sum and removed takeup_seq_no
                        FROM gipi_winvoice
                            WHERE par_id = p_par_id
                             GROUP BY par_id , item_grp , currency_rt /* jhing 10.29.2014 added grouping */ 
                                ORDER BY item_grp   )
          LOOP
             v_sum_premium := /* 0 -- replaced with */ inv.prem_amt ;  -- jhing 09.29.2014 
             v_sum_tsi := 0;
             v_sum_tax_amt := 0;
             v_sign_prem := SIGN (inv.prem_amt); -- jhing 10.29.2014 sign should be checked per item group (bill group) and not per wpolbas record 
             v_max_takeup_seq := 1 ; 
             FOR takeup in (SELECT max(NVL(takeup_seq_no,1)) max_takeup 
                                FROM gipi_winvoice where par_id = p_par_id AND item_grp = inv.item_grp )
             LOOP
                    v_max_takeup_seq := takeup.max_takeup ;
             END LOOP;               
           /*FOR peril IN (SELECT b.peril_type peril_type, a.prem_amt premium,
                                  a.tsi_amt tsi,
                             FROM gipi_witmperl a, giis_peril b, gipi_witem c
                            WHERE a.line_cd = b.line_cd
                              AND a.peril_cd = b.peril_cd
                              AND a.item_no = c.item_no
                              AND a.par_id = c.par_id
                              AND NVL (c.item_grp, 1) = inv.item_grp
                              AND a.par_id = p_par_id)
             LOOP
                   v_sum_premium := v_sum_premium + peril.premium;   
                IF peril.peril_type = 'B'
                THEN
                   v_sum_tsi := v_sum_tsi + peril.tsi;
                END IF;
             END LOOP;*/  --moved codes below Gzelle 10222014
             -- jhing 10.29.2014 considered computation for long term taxes 
             FOR pol IN (SELECT DISTINCT a.line_cd line_cd, a.iss_cd iss_cd,
                                a.tax_cd tax_cd, a.tax_id tax_id,
                                a.item_grp item_grp,
                                /*a.takeup_seq_no takeup_seq_no, a.tax_amt tax_amt, */ -- jhing 10.29.2014 commented out 
                                c.place_cd place_cd, c.eff_date eff_date,
                                c.incept_date incept_date,
                                c.issue_date issue_date,
                                NVL (d.vat_tag, 3) vat_tag, e.par_type par_type,
                                f.currency_rt
                           FROM gipi_winv_tax a,
                                --giis_tax_charges b,
                                gipi_wpolbas c,
                                giis_assured d,
                                gipi_parlist e,
                                gipi_winvoice f
                          WHERE a.par_id = c.par_id
                            AND a.line_cd = c.line_cd
                            AND a.iss_cd = c.iss_cd
                           -- AND c.assd_no = d.assd_no  -- jhing 10.29.2014 replaced with:
                            AND e.assd_no = d.assd_no    -- jhing 10.29.2014 
                            AND a.par_id = e.par_id
                            AND a.line_cd = e.line_cd
                            AND a.iss_cd = e.iss_cd
                           -- AND c.assd_no = e.assd_no  -- jhing 10.29.2014 commented out. in case that there is anomaly in gipi_wpolbas and gipi_parlist assd, follow gipi_parlist
                            AND a.par_id = f.par_id
                            AND a.takeup_seq_no = f.takeup_seq_no  
                            AND a.item_grp = f.item_grp
                            AND a.par_id = p_par_id
                           -- AND a.takeup_seq_no = inv.takeup_seq_no  -- jhing 10.29.2014 commented out 
                            AND a.item_grp = inv.item_grp
                            ORDER BY a.item_grp, a.tax_cd, a.tax_id )
             LOOP
                FOR tax IN
                   (SELECT DISTINCT b.tax_cd tax_cd,
                                    NVL (NVL (c.rate, b.rate), 0) rate,
                                    b.tax_id tax_id, b.tax_type tax_type,
                                    b.tax_amount fix_amt, b.peril_sw peril_sw , NVL(b.takeup_alloc_tag,'F') takeup_alloc_tag, NVL(b.no_rate_tag,'N') no_rate_tag --added edgar 11/12/2014
                               FROM /*giis_tax_peril a, -- jhing 10.29.2014 commented out */ 
                                    giis_tax_charges b,
                                    giis_tax_issue_place c
                              WHERE b.line_cd = pol.line_cd
                                AND b.iss_cd = pol.iss_cd
                                AND b.tax_cd = pol.tax_cd
                                AND b.tax_id = pol.tax_id
                                AND b.iss_cd = c.iss_cd(+)
                                AND b.line_cd = c.line_cd(+)
                                AND b.tax_cd = c.tax_cd(+)
                                AND b.tax_id = c.tax_id (+) -- jhing 10.29.2014 
                                AND c.place_cd(+) = pol.place_cd 
                                -- jhing 10.29.2014 commented out. There is no need to requery the records since 
                                -- they were already added/included by create_winvoice. This package should only update
                                -- tax amount for regular policy/endorsement ( non-cancellation type ) 
                               /* AND (   (    NVL (pol.eff_date, pol.incept_date)
                                                BETWEEN b.eff_start_date
                                                    AND b.eff_end_date
                                         AND NVL (b.issue_date_tag, 'N') = 'N'
                                        )
                                     OR (    pol.issue_date BETWEEN b.eff_start_date
                                                                AND b.eff_end_date
                                         AND NVL (b.issue_date_tag, 'N') = 'Y'
                                        )
                                    ) */ )
                LOOP
                   v_tax_amt := 0;
                   v_tax_rate := 0; --edgar 11/12/2014   
                   /*edgar 11/12/2014 for correct tax rate*/
                      IF tax.tax_type IN ('A', 'N') OR (tax.tax_type = 'R' AND NVL(tax.no_rate_tag,'N') = 'Y')
                      THEN
                        v_tax_rate := 0;     
                      ELSE
                        v_tax_rate := tax.rate;
                      END IF;                   
                   /*end edgar 11/12/2014*/   
                   -- jhing 10.29.2014 commented out computation of premium. Computation of premium
                   -- will be set inside the procedure for computation of taxes e.g. compute_dst and compute_evat 
                 /*  IF tax.peril_sw = 'Y' 
                   THEN
                        v_sum_premium := 0;
                        FOR pol_per IN (SELECT b.peril_type peril_type, a.prem_amt premium,
                                               a.tsi_amt tsi, a.peril_cd		--added by Gzelle 10212014
                                          FROM gipi_witmperl a, giis_peril b, gipi_witem c
                                         WHERE a.line_cd = b.line_cd
                                           AND a.peril_cd = b.peril_cd
                                           AND a.item_no = c.item_no
                                           AND a.par_id = c.par_id
                                           AND NVL (c.item_grp, 1) = inv.item_grp
                                           AND a.par_id = p_par_id)
                        LOOP
                            FOR tax_per IN (SELECT peril_cd
                                              FROM giis_tax_peril
                                             WHERE tax_cd = tax.tax_cd
                                               AND line_cd = pol.line_cd
                                               AND iss_cd = pol.iss_cd)
                            LOOP
                                IF tax_per.peril_cd = pol_per.peril_cd
                                THEN
                                    v_sum_premium := v_sum_premium + pol_per.premium;
                                END IF;
                                IF pol_per.peril_type = 'B'
                                THEN
                                   v_sum_tsi := v_sum_tsi + pol_per.tsi;
                                END IF;
                            END LOOP;
                        END LOOP;
                   ELSE
                        v_sum_premium := 0;
                        FOR peril IN (SELECT b.peril_type peril_type, a.prem_amt premium,
                                              a.tsi_amt tsi, a.peril_cd		--added by Gzelle 10212014
                                         FROM gipi_witmperl a, giis_peril b, gipi_witem c
                                        WHERE a.line_cd = b.line_cd
                                          AND a.peril_cd = b.peril_cd
                                          AND a.item_no = c.item_no
                                          AND a.par_id = c.par_id
                                          AND NVL (c.item_grp, 1) = inv.item_grp
                                          AND a.par_id = p_par_id)
                        LOOP
                            v_sum_premium := v_sum_premium + peril.premium;   
                            IF peril.peril_type = 'B'
                            THEN
                               v_sum_tsi := v_sum_tsi + peril.tsi;
                            END IF;
                        END LOOP;               
                   END IF; */
                   v_deleted_tax := FALSE ;   -- jhing 10.29.2014 
                   IF tax.tax_cd = giacp.n ('DOC_STAMPS')
                   THEN
                      -- jhing 10.27.2014 moved codes below. Validation on the existence 
                      -- of range for PA Docstamps should not fire if ALLOW_NEGATIVE_DST = N
                      -- for negative premium 
--                      v_tax_amt :=
--                         compute_uwtaxes.compute_dst (p_par_id,
--                                                      v_sum_premium,
--                                                      v_sum_tsi,
--                                                      tax.tax_type,
--                                                      pol.line_cd,
--                                                      pol.iss_cd,
--                                                      tax.tax_cd,
--                                                      tax.tax_id,
--                                                      tax.rate,
--                                                      tax.peril_sw,
--                                                      pol.currency_rt,
--                                                      inv.item_grp,
--                                                      inv.takeup_seq_no
--                                                     );
                      IF     v_sum_premium < 0
                         AND NVL (giisp.v ('ALLOW_NEGATIVE_DST'), 'Y') = 'N'
                      THEN
                         v_deleted_tax := TRUE; 
                         DELETE FROM gipi_winv_tax
                               WHERE par_id = p_par_id
                                 AND item_grp = inv.item_grp
                                 AND tax_cd = giacp.n ('DOC_STAMPS');
                          -- jhing 10.29.2014 commented out. gipi_winvoice will be reupdated after all taxes has been computed 
                        /* UPDATE gipi_winvoice
                            SET tax_amt = tax_amt - v_tax_amt
                          WHERE par_id = p_par_id AND item_grp = inv.item_grp;  */
                         -- jhing 10.29.2014 commented out. There are no records which can ever be updated. Create_winvoice deletes data
                         -- on gipi_winstallment but never populate it. Bill modules are the ones which populates installment 
                        /* UPDATE gipi_winstallment
                            SET tax_amt = tax_amt - v_tax_amt
                          WHERE 1 = 1
                            AND inst_no = 1
                            AND par_id = p_par_id
                            AND item_grp = inv.item_grp; */
                      ELSE /* jhing 10.27.2014 added the codes in the computation of docstamps here so that validations and calculations 
                              will no longer be triggered for negative premium when parameter ALLOW_NEGATIVE_DST = 'N' */
                          v_tax_amt :=  compute_uwtaxes.compute_dst (p_par_id,
                                                      v_sum_premium,
                                                      v_sum_tsi,
                                                      tax.tax_type,
                                                      pol.line_cd,
                                                      pol.iss_cd,
                                                      tax.tax_cd,
                                                      tax.tax_id,
                                                      tax.rate,
                                                      tax.peril_sw,
                                                      pol.currency_rt,
                                                      inv.item_grp,
                                                      /*inv.takeup_seq_no --  jhing 10.29.2014 replaced with*/ NULL 
                                                     );     
                      END IF;
                   ELSIF tax.tax_cd = giacp.n ('EVAT')
                   THEN
                      v_tax_amt :=
                         compute_uwtaxes.compute_evat (p_par_id,
                                                       pol.vat_tag,
                                                       tax.rate,
                                                       v_sum_premium,
                                                       tax.peril_sw,
                                                       pol.line_cd,
                                                       pol.iss_cd,
                                                       tax.tax_cd,
                                                       tax.tax_id,
                                                       inv.item_grp,
                                                       /*inv.takeup_seq_no  --  jhing 10.29.2014 replaced with*/ NULL
                                                      );
                   ELSE
                      IF tax.tax_type = 'A'
                      THEN
                         IF v_sum_premium = 0
                         THEN
                            v_tax_amt := 0;
                         ELSE
                            v_tax_amt :=
                                    (tax.fix_amt * NVL(v_sign_prem,1)) / pol.currency_rt; 
                         END IF;
                      ELSIF tax.tax_type = 'N'
                      THEN
                         v_tax_amt :=
                            compute_uwtaxes.get_tax_range (v_sum_premium,
                                                           pol.currency_rt,
                                                           pol.line_cd,
                                                           pol.iss_cd,
                                                           tax.tax_cd,
                                                           tax.tax_id
                                                          );
                      ELSE
                         v_tax_amt :=
                            compute_uwtaxes.get_fixed_rate (p_par_id,
                                                            inv.item_grp,
                                                            /* inv.takeup_seq_no, --  jhing 10.29.2014 replaced with*/ NULL , 
                                                            --p_takeup_term,
                                                            v_sum_premium,
                                                            tax.rate,
                                                            tax.peril_sw,
                                                            pol.line_cd,
                                                            pol.iss_cd,
                                                            tax.tax_cd,
                                                            tax.tax_id
                                                           );
                      END IF;
                   END IF;
                   -- jhing 10.29.2014 commented out and replaced codes which considers long term computation 
                   --update gipi_winv_tax
                  /* UPDATE gipi_winv_tax
                      SET tax_amt = NVL (v_tax_amt, 0)
                    WHERE par_id = p_par_id
                      AND item_grp = pol.item_grp
                     AND takeup_seq_no = pol.takeup_seq_no
                      AND tax_cd = pol.tax_cd; */
                   IF NOT v_deleted_tax
                   THEN
                      FOR tkup IN 1 .. v_max_takeup_seq
                      LOOP
                         IF tax.takeup_alloc_tag = 'S' AND tkup < v_max_takeup_seq
                         THEN
                            UPDATE cpi.gipi_winv_tax
                               SET tax_amt = ROUND ((v_tax_amt / v_max_takeup_seq), 2)
                                   , rate = NVL(v_tax_rate,0) --edgar 11/12/2014
                             WHERE par_id = p_par_id
                               AND tax_cd = tax.tax_cd
                               AND item_grp = inv.item_grp
                               AND takeup_seq_no = tkup;
                         ELSIF tax.takeup_alloc_tag = 'S' AND tkup = v_max_takeup_seq AND v_max_takeup_seq <> 1 
                         THEN
                            UPDATE cpi.gipi_winv_tax
                               SET tax_amt =
                                        v_tax_amt
                                      - (  ROUND ((v_tax_amt / v_max_takeup_seq), 2)
                                         - (v_max_takeup_seq - 1)
                                        )
                                   , rate = NVL(v_tax_rate,0) --edgar 11/12/2014
                             WHERE par_id = p_par_id
                               AND tax_cd = tax.tax_cd
                               AND item_grp = inv.item_grp
                               AND takeup_seq_no = tkup;
                         ELSIF    (tax.takeup_alloc_tag = 'F' AND tkup = 1)
                               OR (tax.takeup_alloc_tag = 'L' AND tkup = v_max_takeup_seq)
                               OR ( v_max_takeup_seq = 1 ) 
                         THEN
                            UPDATE cpi.gipi_winv_tax
                               SET tax_amt = v_tax_amt
                                   , rate = NVL(v_tax_rate,0) --edgar 11/12/2014
                             WHERE par_id = p_par_id
                               AND tax_cd = tax.tax_cd
                               AND item_grp = inv.item_grp
                               AND takeup_seq_no = tkup;
                         ELSE
                            UPDATE cpi.gipi_winv_tax
                               SET tax_amt = 0
                                   , rate = NVL(v_tax_rate,0) --edgar 11/12/2014
                             WHERE par_id = p_par_id
                               AND tax_cd = tax.tax_cd
                               AND item_grp = inv.item_grp
                               AND takeup_seq_no = tkup;
                         END IF;
                      END LOOP;                           -- end for loop update of tax update
                   END IF;                                
                END LOOP;
             END LOOP;                                                     --taxes
			--added by robert GENQA 4844 08.10.15
			IF v_sign_prem = -1
			THEN
			   FOR winv_grp IN (SELECT DISTINCT item_grp, currency_cd,
												currency_rt
										   FROM gipi_winvoice
										  WHERE par_id = p_par_id)
			   LOOP
				  v_max_takeup_seq := 1;
			
				  FOR takeup IN (SELECT MAX (NVL (takeup_seq_no, 1)
											) max_takeup
								   FROM gipi_winvoice
								  WHERE par_id = p_par_id
									AND item_grp = winv_grp.item_grp)
				  LOOP
					 v_max_takeup_seq := takeup.max_takeup;
				  END LOOP;
			
				  FOR tax IN (SELECT   (SUM (a.tax_amt) * -1) tax_amt,
									   a.tax_cd, a.iss_cd, a.line_cd
								  FROM gipi_inv_tax a, gipi_invoice b
								 WHERE a.iss_cd = b.iss_cd
								   AND a.prem_seq_no = b.prem_seq_no
								   AND b.currency_cd = winv_grp.currency_cd
								   AND b.currency_rt = winv_grp.currency_rt
								   AND b.policy_id IN (
										  SELECT policy_id
											FROM gipi_polbasic
										   WHERE line_cd = v_line_cd
											 AND subline_cd = v_subline_cd
											 AND iss_cd = v_iss_cd
											 AND issue_yy = v_issue_yy
											 AND pol_seq_no = v_pol_seq_no
											 AND renew_no = v_renew_no
											 AND pol_flag <> '5')
							  GROUP BY a.tax_cd, a.iss_cd, a.line_cd
							  ORDER BY a.tax_cd)
				  LOOP
					 v_exists := 'N';
			
					 FOR exist IN (SELECT tax_cd
									 FROM gipi_winv_tax
									WHERE par_id = p_par_id
									  AND tax_cd = tax.tax_cd
									  AND item_grp = winv_grp.item_grp)
					 LOOP
						v_exists := 'Y';
						EXIT;
					 END LOOP;
			
					 IF v_exists = 'N'
					 THEN
						v_new_tax_id := NULL;
						v_new_tax_allocation := NULL;
						v_new_fixed_tax_alloc := NULL;
						v_new_takeup_alloc := NULL;
			
						FOR new_tax IN get_tax_cd (v_line_cd,
												   v_iss_cd,
												   tax.tax_cd,
												   v_issue_date,
												   v_eff_date,
												   v_place_cd
												  )
						LOOP
						   v_exists := 'Y';
						   v_new_tax_id := new_tax.tax_id;
			
						   IF new_tax.allocation_tag = 'N'
						   THEN
							  v_new_tax_allocation := 'F';
						   ELSE
							  v_new_tax_allocation := new_tax.allocation_tag;
						   END IF;
			
						   v_new_fixed_tax_alloc := new_tax.fixed_tax_alloc;
						   v_new_takeup_alloc := new_tax.takeup_alloc_tag;
						   v_new_tax_type := new_tax.tax_type;
						   EXIT;
						END LOOP;
			
						IF v_exists = 'N'
						THEN
						   FOR old_tax IN
							  tax_from_old_pol (tax.tax_cd,
												winv_grp.currency_cd,
												winv_grp.currency_rt,
												v_place_cd
											   )
						   LOOP
							  v_exists := 'Y';
							  v_new_tax_id := old_tax.tax_id;
			
							  IF old_tax.allocation_tag = 'N'
							  THEN
								 v_new_tax_allocation := 'F';
							  ELSE
								 v_new_tax_allocation :=
													   old_tax.allocation_tag;
							  END IF;
			
							  v_new_fixed_tax_alloc := old_tax.fixed_tax_alloc;
							  v_new_takeup_alloc := old_tax.takeup_alloc_tag;
							  v_new_tax_type := old_tax.tax_type;
							  EXIT;
						   END LOOP;
						END IF;
			
						IF v_exists = 'Y'
						THEN
						   IF v_new_tax_type = 'A'
						   THEN
                               IF tax.tax_cd = giacp.n ('DOC_STAMPS') AND v_sign_prem = -1 AND NVL (giisp.v ('ALLOW_NEGATIVE_DST'), 'Y') = 'N' -- Dren 11.04.2015 SR-002087 : To return 0 amount for DOC STAMPS when Premium AMt. is negative. - Start                         
							   THEN
                                    v_tax_amt := 0; 
                               ELSE                               
                                    v_tax_amt := gipi_winvoice_pkg.get_fixed_amount_tax (tax.tax_cd,
                                                                                         v_new_tax_id,
                                                                                         p_par_id,
                                                                                         v_sum_premium,
                                                                                         tax.tax_amt,
                                                                                         winv_grp.item_grp,
                                                                                         v_max_takeup_seq,
                                                                                         v_new_takeup_alloc
                                                                                        );
                               END IF;
                                                                                        
						   ELSIF v_new_tax_type = 'N'
						   THEN
                               IF tax.tax_cd = giacp.n ('DOC_STAMPS') AND v_sign_prem = -1 AND NVL (giisp.v ('ALLOW_NEGATIVE_DST'), 'Y') = 'N' 
                               THEN 
                                    v_tax_amt := 0; 
                               ELSE
                                    v_tax_amt := gipi_winvoice_pkg.get_range_amt (tax.tax_cd,
                                                                                  v_new_tax_id,
                                                                                  p_par_id, 
                                                                                  v_sum_premium,
                                                                                  winv_grp.item_grp,
                                                                                  v_max_takeup_seq,
                                                                                  v_new_takeup_alloc
                                                                                 );
                               END IF;

						   ELSIF v_new_tax_type = 'R'
						   THEN
                               IF tax.tax_cd = giacp.n ('DOC_STAMPS') AND v_sign_prem = -1 AND NVL (giisp.v ('ALLOW_NEGATIVE_DST'), 'Y') = 'N'
                               THEN 
                                    v_tax_amt := 0;
                               ELSE 
							        v_tax_amt := gipi_winvoice_pkg.get_rate_amt (tax.tax_cd,
                                                                                 v_new_tax_id,
                                                                                 p_par_id,
                                                                                 winv_grp.item_grp,
                                                                                 v_max_takeup_seq
                                                                                );
                               END IF;   
                                                                             
						   END IF; -- Dren 11.04.2015 SR-002087 : To return 0 amount for DOC STAMPS when Premium AMt. is negative. - End
			
						   FOR tkup IN 1 .. v_max_takeup_seq
						   LOOP
							  INSERT INTO cpi.gipi_winv_tax
										  (par_id, item_grp,
										   tax_cd, line_cd,
										   tax_allocation,
										   fixed_tax_allocation, iss_cd,
										   tax_amt, tax_id,
										   rate, takeup_seq_no
										  )
								   VALUES (p_par_id, winv_grp.item_grp,
										   tax.tax_cd, v_line_cd,
										   v_new_tax_allocation,
										   v_new_fixed_tax_alloc, v_iss_cd,
										   v_tax_amt, v_new_tax_id,
										   v_flatrate, v_max_takeup_seq
										  );
						   END LOOP;
						END IF;
					 END IF;
				  END LOOP;
			
				  FOR invalid_tax IN
					 tax_not_in_orig_pol_endt (winv_grp.item_grp,
											   winv_grp.currency_cd,
											   winv_grp.currency_rt
											  )
				  LOOP
					 DELETE FROM gipi_winv_tax
						   WHERE par_id = p_par_id
							 AND line_cd = invalid_tax.line_cd
							 AND iss_cd = invalid_tax.iss_cd
							 AND tax_cd = invalid_tax.tax_cd
							 AND item_grp = winv_grp.item_grp;
				  END LOOP;
			   END LOOP;
			END IF;
			--end robert GENQA 4844 08.10.15
             FOR i IN (SELECT   SUM (NVL(tax_amt,0)) tax_amt, par_id, takeup_seq_no,  -- jhing 10.29.2014 added NVL
                                item_grp
                           FROM gipi_winv_tax
                          WHERE par_id = p_par_id
                       GROUP BY par_id, item_grp, takeup_seq_no)
             LOOP
                v_sum_tax_amt := i.tax_amt;
                -- jhing 10.28.2014 commented out..during calling of create_winvoice, there are no records in 
                -- gipi_winstallment yet 
--                UPDATE gipi_winstallment
--                   SET tax_amt = v_sum_tax_amt
--                 WHERE par_id = p_par_id
--                   AND takeup_seq_no = i.takeup_seq_no
--                   AND item_grp = i.item_grp;
                UPDATE gipi_winvoice
                   SET tax_amt = v_sum_tax_amt
                 WHERE par_id = p_par_id
                   AND takeup_seq_no = i.takeup_seq_no
                   AND item_grp = i.item_grp;
             END LOOP;
          END LOOP;                                                      --invoice
    END IF;  -- end if condition for v_comp_cancellation
      -- jhing 10.27.2014 moved the codes above so that tax computation for regular policy/endorsement will not fire if the 
      -- PAR is a cancellation type 
      /*FOR x IN (SELECT cancelled_endt_id, cancel_type, pol_flag, takeup_term,
                       ann_tsi_amt
                  FROM gipi_wpolbas
                 WHERE par_id = p_par_id)
      LOOP
         v_cancelled_endt_id := x.cancelled_endt_id;
         v_cancel_type := x.cancel_type;
         v_pol_flag := x.pol_flag;
         IF v_cancel_type = '3' OR v_cancel_type = '4'
         THEN
--            DELETE FROM cpi.gipi_winv_tax --added by steven 08.29.2014
--                WHERE par_id = p_par_id;    --commented out by Gzelle 10142014 old SIT solution
            FOR cncl IN (SELECT policy_id
                           FROM gipi_polbasic
                          WHERE policy_id = v_cancelled_endt_id)
            LOOP
               FOR inv IN (SELECT iss_cd, prem_seq_no, takeup_seq_no
                             FROM gipi_invoice
                            WHERE policy_id = cncl.policy_id)
               LOOP
                  FOR tax IN (SELECT item_grp, tax_allocation,
                                     fixed_tax_allocation, iss_cd, tax_cd,
                                     tax_id, (tax_amt * (-1)) tax_amt, rate,
                                     line_cd
                                FROM gipi_inv_tax
                               WHERE iss_cd = inv.iss_cd
                                 AND prem_seq_no = inv.prem_seq_no)
                  LOOP
                     v_exists := 'N';
                     FOR exist IN (SELECT tax_cd
                                     FROM gipi_winv_tax
                                    WHERE par_id = p_par_id
                                      AND tax_cd = tax.tax_cd
                                      AND tax_id = tax.tax_id)
                     LOOP
                        v_exists := 'Y';
                        EXIT;
                     END LOOP;
                     IF v_exists = 'N'
                     THEN
                        INSERT INTO cpi.gipi_winv_tax
                                    (par_id, item_grp, tax_cd,
                                     line_cd, tax_allocation,
                                     fixed_tax_allocation, iss_cd,
                                     tax_amt, tax_id, rate,
                                     takeup_seq_no
                                    )
                             VALUES (p_par_id, tax.item_grp, tax.tax_cd,
                                     tax.line_cd, tax.tax_allocation,
                                     tax.fixed_tax_allocation, tax.iss_cd,
                                     tax.tax_amt, tax.tax_id, tax.rate,
                                     inv.takeup_seq_no
                                    );
                     ELSE
                        UPDATE cpi.gipi_winv_tax
                           SET tax_amt = tax.tax_amt
                         WHERE par_id = p_par_id
                           AND tax_cd = tax.tax_cd
                           AND tax_id = tax.tax_id;
                     END IF;
                     IF     tax.tax_cd = giacp.n ('DOC_STAMPS') --added by steven 08.29.2014
                        AND NVL (giisp.v ('ALLOW_NEGATIVE_DST'), 'Y') = 'N'
                     THEN
                        DELETE FROM cpi.gipi_winv_tax
                              WHERE par_id = p_par_id
                                AND item_grp = tax.item_grp
                                AND tax_cd = giacp.n ('DOC_STAMPS');
                     END IF;
                  END LOOP;
               END LOOP;
            END LOOP;
         ELSIF v_cancel_type = '1' OR v_pol_flag = '4'
         THEN
--            DELETE FROM cpi.gipi_winv_tax --added by steven 08.29.2014
--                WHERE par_id = p_par_id;    --commented out by Gzelle 10142014 old SIT solution
            SELECT line_cd, subline_cd, iss_cd, issue_yy,
                   pol_seq_no, renew_no
              INTO v_line_cd, v_subline_cd, v_iss_cd, v_issue_yy,
                   v_pol_seq_no, v_renew_no
              FROM gipi_wpolbas
             WHERE par_id = p_par_id;
            FOR flatax IN (SELECT   (SUM (a.tax_amt) * -1) tax_amt, a.tax_cd,
                                    a.tax_id, a.item_grp, a.iss_cd, a.line_cd,
                                    a.tax_allocation, a.fixed_tax_allocation,
                                    b.takeup_seq_no
                               FROM gipi_inv_tax a, gipi_invoice b
                              WHERE a.iss_cd = b.iss_cd
                                AND a.prem_seq_no = b.prem_seq_no
                                AND b.policy_id IN (
                                       SELECT policy_id
                                         FROM gipi_polbasic
                                        WHERE line_cd = v_line_cd
                                          AND subline_cd = v_subline_cd
                                          AND iss_cd = v_iss_cd
                                          AND issue_yy = v_issue_yy
                                          AND pol_seq_no = v_pol_seq_no
                                          AND renew_no = v_renew_no)
                           GROUP BY a.tax_cd,
                                    a.tax_id,
                                    a.item_grp,
                                    a.iss_cd,
                                    a.line_cd,
                                    a.tax_allocation,
                                    a.fixed_tax_allocation,
                                    b.takeup_seq_no)
            LOOP
               v_exists := 'N';
               FOR exist IN (SELECT tax_cd
                               FROM gipi_winv_tax
                              WHERE par_id = p_par_id
                                AND tax_cd = flatax.tax_cd
                                AND tax_id = flatax.tax_id
                                AND item_grp = flatax.item_grp
                                AND takeup_seq_no = flatax.takeup_seq_no)
               LOOP
                  v_exists := 'Y';
                  EXIT;
               END LOOP;
               IF v_exists = 'N'
               THEN
                  INSERT INTO cpi.gipi_winv_tax
                              (par_id, item_grp, tax_cd,
                               line_cd, tax_allocation,
                               fixed_tax_allocation, iss_cd,
                               tax_amt, tax_id, rate,
                               takeup_seq_no
                              )
                       VALUES (p_par_id, flatax.item_grp, flatax.tax_cd,
                               flatax.line_cd, flatax.tax_allocation,
                               flatax.fixed_tax_allocation, flatax.iss_cd,
                               flatax.tax_amt, flatax.tax_id, v_flatrate,
                               flatax.takeup_seq_no
                              );
               ELSE
                  UPDATE cpi.gipi_winv_tax
                     SET tax_amt = flatax.tax_amt
                   WHERE par_id = p_par_id
                     AND tax_cd = flatax.tax_cd
                     AND tax_id = flatax.tax_id
                     AND item_grp = flatax.item_grp
                     AND takeup_seq_no = flatax.takeup_seq_no;
               END IF;
               IF     flatax.tax_cd = giacp.n ('DOC_STAMPS') --added by steven 08.29.2014
                        AND NVL (giisp.v ('ALLOW_NEGATIVE_DST'), 'Y') = 'N'
               THEN
                    DELETE FROM cpi.gipi_winv_tax
                          WHERE par_id = p_par_id
                            AND item_grp = flatax.item_grp
                            AND tax_cd = giacp.n ('DOC_STAMPS');
               END IF;
            END LOOP;
         ELSIF x.ann_tsi_amt = 0
         THEN
--            DELETE FROM cpi.gipi_winv_tax --added by steven 08.29.2014
--                WHERE par_id = p_par_id;    --commented out by Gzelle 10142014 old SIT solution
            SELECT line_cd, subline_cd, iss_cd, issue_yy,
                   pol_seq_no, renew_no
              INTO v_line_cd, v_subline_cd, v_iss_cd, v_issue_yy,
                   v_pol_seq_no, v_renew_no
              FROM gipi_wpolbas
             WHERE par_id = p_par_id;
            FOR flatax2 IN (SELECT   (SUM (a.tax_amt) * -1) tax_amt, a.tax_cd,
                                     a.tax_id, a.item_grp, a.iss_cd,
                                     a.line_cd, a.tax_allocation,
                                     a.fixed_tax_allocation, b.takeup_seq_no
                                FROM gipi_inv_tax a, gipi_invoice b
                               WHERE a.iss_cd = b.iss_cd
                                 AND a.prem_seq_no = b.prem_seq_no
                                 AND b.policy_id IN (
                                        SELECT policy_id
                                          FROM gipi_polbasic
                                         WHERE line_cd = v_line_cd
                                           AND subline_cd = v_subline_cd
                                           AND iss_cd = v_iss_cd
                                           AND issue_yy = v_issue_yy
                                           AND pol_seq_no = v_pol_seq_no
                                           AND renew_no = v_renew_no)
                            GROUP BY a.tax_cd,
                                     a.tax_id,
                                     a.item_grp,
                                     a.iss_cd,
                                     a.line_cd,
                                     a.tax_allocation,
                                     a.fixed_tax_allocation,
                                     b.takeup_seq_no)
            LOOP
               v_exists := 'N';
               FOR exist IN (SELECT tax_cd
                               FROM gipi_winv_tax
                              WHERE par_id = p_par_id
                                AND tax_cd = flatax2.tax_cd
                                AND tax_id = flatax2.tax_id
                                AND item_grp = flatax2.item_grp
                                AND takeup_seq_no = flatax2.takeup_seq_no)
               LOOP
                  v_exists := 'Y';
                  EXIT;
               END LOOP;
               IF v_exists = 'N'
               THEN
                  INSERT INTO cpi.gipi_winv_tax
                              (par_id, item_grp, tax_cd,
                               line_cd, tax_allocation,
                               fixed_tax_allocation, iss_cd,
                               tax_amt, tax_id, rate,
                               takeup_seq_no
                              )
                       VALUES (p_par_id, flatax2.item_grp, flatax2.tax_cd,
                               flatax2.line_cd, flatax2.tax_allocation,
                               flatax2.fixed_tax_allocation, flatax2.iss_cd,
                               flatax2.tax_amt, flatax2.tax_id, v_flatrate,
                               flatax2.takeup_seq_no
                              );
               ELSE
                  UPDATE cpi.gipi_winv_tax
                     SET tax_amt = flatax2.tax_amt
                   WHERE par_id = p_par_id
                     AND tax_cd = flatax2.tax_cd
                     AND tax_id = flatax2.tax_id
                     AND item_grp = flatax2.item_grp
                     AND takeup_seq_no = flatax2.takeup_seq_no;
               END IF;
               IF     flatax2.tax_cd = giacp.n ('DOC_STAMPS') --added by steven 08.29.2014
                        AND NVL (giisp.v ('ALLOW_NEGATIVE_DST'), 'Y') = 'N'
               THEN
                    DELETE FROM cpi.gipi_winv_tax
                          WHERE par_id = p_par_id
                            AND item_grp = flatax2.item_grp
                            AND tax_cd = giacp.n ('DOC_STAMPS');
               END IF;
            END LOOP;
         END IF;
      END LOOP;  */
   END;
   PROCEDURE compute_longtermtax (p_par_id IN NUMBER)
   IS
      v_sum_premium         NUMBER                                := 0;
      v_sum_tsi             NUMBER                                := 0;
      v_sum_tax_amt         NUMBER                                := 0;
      v_count               NUMBER                                := 0;
      v_tax_amt             NUMBER                                := 0;
      v_sign_tsi            NUMBER;
      v_sign_prem           NUMBER;
      v_cancelled_endt_id   gipi_wpolbas.cancelled_endt_id%TYPE;
      v_cancel_type         gipi_wpolbas.cancel_type%TYPE;
      v_pol_flag            gipi_wpolbas.pol_flag%TYPE;
      v_exists              VARCHAR2 (1)                          := 'N';
      v_line_cd             gipi_wpolbas.line_cd%TYPE;
      v_iss_cd              gipi_wpolbas.iss_cd%TYPE;
      v_subline_cd          gipi_wpolbas.subline_cd%TYPE;
      v_issue_yy            gipi_wpolbas.issue_yy%TYPE;
      v_pol_seq_no          gipi_wpolbas.pol_seq_no%TYPE;
      v_renew_no            gipi_wpolbas.renew_no%TYPE;
      v_flatrate            gipi_winv_tax.rate%TYPE               := 0;
      v_takeup_term         gipi_wpolbas.takeup_term%TYPE;
      v_par_id              gipi_wpolbas.par_id%TYPE              := p_par_id;
   BEGIN
      SELECT SIGN (tsi_amt), SIGN (prem_amt)
        INTO v_sign_tsi, v_sign_prem
        FROM gipi_wpolbas
       WHERE par_id = p_par_id;
      FOR inv IN (SELECT par_id, item_grp, takeup_seq_no, currency_rt
                    FROM gipi_winvoice
                   WHERE par_id = p_par_id)
      LOOP
         v_tax_amt := 0;
         v_sum_premium := 0;
         v_sum_tsi := 0;
         v_sum_tax_amt := 0;
         FOR peril IN (SELECT b.peril_type peril_type, a.prem_amt premium,
                              a.tsi_amt tsi
                         FROM gipi_witmperl a, giis_peril b, gipi_witem c
                        WHERE a.line_cd = b.line_cd
                          AND a.peril_cd = b.peril_cd
                          AND a.item_no = c.item_no
                          AND a.par_id = c.par_id
                          AND NVL (c.item_grp, 1) = inv.item_grp
                          AND a.par_id = p_par_id)
         LOOP
            v_sum_premium := v_sum_premium + peril.premium;
            IF peril.peril_type = 'B'
            THEN
               v_sum_tsi := v_sum_tsi + peril.tsi;
            END IF;
         END LOOP;
         FOR pol IN (SELECT a.line_cd line_cd, a.iss_cd iss_cd,
                            a.tax_cd tax_cd, a.tax_id tax_id,
                            a.item_grp item_grp,
                            a.takeup_seq_no takeup_seq_no, a.tax_amt tax_amt,
                            c.place_cd place_cd, c.eff_date eff_date,
                            c.incept_date incept_date,
                            c.issue_date issue_date,
                            NVL (d.vat_tag, 3) vat_tag, e.par_type par_type,
                            f.currency_rt
                       FROM gipi_winv_tax a,
                            --giis_tax_charges b,
                            gipi_wpolbas c,
                            giis_assured d,
                            gipi_parlist e,
                            gipi_winvoice f
                      WHERE a.par_id = c.par_id
                        AND a.line_cd = c.line_cd
                        AND a.iss_cd = c.iss_cd
                        AND c.assd_no = d.assd_no
                        AND a.par_id = e.par_id
                        AND a.line_cd = e.line_cd
                        AND a.iss_cd = e.iss_cd
                        AND c.assd_no = e.assd_no
                        AND a.par_id = f.par_id
                        AND a.takeup_seq_no = f.takeup_seq_no
                        AND a.item_grp = f.item_grp
                        AND a.par_id = p_par_id
                        AND a.takeup_seq_no = inv.takeup_seq_no
                        AND a.item_grp = inv.item_grp)
         LOOP
            FOR tax IN
               (SELECT DISTINCT b.tax_cd tax_cd,
                                NVL (NVL (c.rate, b.rate), 0) rate,
                                b.tax_id tax_id, b.tax_type tax_type,
                                b.tax_amount fix_amt, b.peril_sw peril_sw,
                                b.takeup_alloc_tag
                           FROM giis_tax_peril a,
                                giis_tax_charges b,
                                giis_tax_issue_place c
                          WHERE b.line_cd = pol.line_cd
                            AND b.iss_cd(+) = pol.iss_cd
                            AND b.tax_cd = pol.tax_cd
                            AND b.tax_id = pol.tax_id
                            AND b.iss_cd = c.iss_cd(+)
                            AND b.line_cd = c.line_cd(+)
                            AND b.tax_cd = c.tax_cd(+)
                            AND c.place_cd(+) = pol.place_cd
                            AND (   (    NVL (pol.eff_date, pol.incept_date)
                                            BETWEEN b.eff_start_date
                                                AND b.eff_end_date
                                     AND NVL (b.issue_date_tag, 'N') = 'N'
                                    )
                                 OR (    pol.issue_date BETWEEN b.eff_start_date
                                                            AND b.eff_end_date
                                     AND NVL (b.issue_date_tag, 'N') = 'Y'
                                    )
                                ))
            LOOP
               v_tax_amt := 0;
               IF tax.tax_cd = giacp.n ('DOC_STAMPS')
               THEN
                  v_tax_amt :=
                     compute_uwtaxes.compute_dst (p_par_id,
                                                  v_sum_premium,
                                                  v_sum_tsi,
                                                  tax.tax_type,
                                                  pol.line_cd,
                                                  pol.iss_cd,
                                                  tax.tax_cd,
                                                  tax.tax_id,
                                                  tax.rate,
                                                  tax.peril_sw,
                                                  pol.currency_rt,
                                                  inv.item_grp,
                                                  inv.takeup_seq_no
                                                 );
                  IF     v_sum_premium < 0
                     AND NVL (giisp.v ('ALLOW_NEGATIVE_DST'), 'Y') = 'N'
                  THEN
                     DELETE FROM gipi_winv_tax
                           WHERE par_id = p_par_id
                             AND item_grp = inv.item_grp
                             AND tax_cd = giacp.n ('DOC_STAMPS')
                             AND takeup_seq_no = inv.takeup_seq_no;
                     UPDATE gipi_winvoice
                        SET tax_amt = tax_amt - v_tax_amt
                      WHERE par_id = p_par_id
                        AND item_grp = inv.item_grp
                        AND takeup_seq_no = inv.takeup_seq_no;
                     UPDATE gipi_winstallment
                        SET tax_amt = tax_amt - v_tax_amt
                      WHERE 1 = 1
                        AND inst_no = 1
                        AND par_id = p_par_id
                        AND item_grp = inv.item_grp
                        AND takeup_seq_no = inv.takeup_seq_no;
                  END IF;
               ELSIF tax.tax_cd = giacp.n ('EVAT')
               THEN
                  v_tax_amt :=
                     compute_uwtaxes.compute_evat (p_par_id,
                                                   pol.vat_tag,
                                                   tax.rate,
                                                   v_sum_premium,
                                                   tax.peril_sw,
                                                   pol.line_cd,
                                                   pol.iss_cd,
                                                   tax.tax_cd,
                                                   tax.tax_id,
                                                   inv.item_grp,
                                                   inv.takeup_seq_no
                                                  );
               ELSE
                  IF tax.tax_type = 'A'
                  THEN
                     IF v_sum_premium = 0
                     THEN
                        v_tax_amt := 0;
                     ELSE
                        v_tax_amt :=
                                (tax.fix_amt * NVL(v_sign_prem,1)) / pol.currency_rt;
                     END IF;
                  ELSIF tax.tax_type = 'N'
                  THEN
                     v_tax_amt :=
                        compute_uwtaxes.get_tax_range (v_sum_premium,
                                                       pol.currency_rt,
                                                       pol.line_cd,
                                                       pol.iss_cd,
                                                       tax.tax_cd,
                                                       tax.tax_id
                                                      );
                  ELSE
                     v_tax_amt :=
                        compute_uwtaxes.get_fixed_rate (p_par_id,
                                                        inv.item_grp,
                                                        inv.takeup_seq_no,
                                                        --p_takeup_term,
                                                        v_sum_premium,
                                                        tax.rate,
                                                        tax.peril_sw,
                                                        pol.line_cd,
                                                        pol.iss_cd,
                                                        tax.tax_cd,
                                                        tax.tax_id
                                                       );
                  END IF;
               END IF;
               IF tax.takeup_alloc_tag = 'S'
               THEN
                  SELECT COUNT (DISTINCT takeup_seq_no)
                    INTO v_count
                    FROM gipi_winvoice
                   WHERE par_id = p_par_id;
                  --update gipi_winv_tax
                  UPDATE gipi_winv_tax
                     SET tax_amt = NVL (v_tax_amt, 0) / v_count
                   WHERE par_id = p_par_id
                     AND item_grp = inv.item_grp
                     AND takeup_seq_no = inv.takeup_seq_no
                     AND tax_cd = pol.tax_cd
                     AND tax_id = pol.tax_id;
               ELSIF tax.takeup_alloc_tag = 'F'
               THEN
                  UPDATE gipi_winv_tax
                     SET tax_amt = 0
                   WHERE par_id = p_par_id
                     AND item_grp = inv.item_grp
                     AND takeup_seq_no = inv.takeup_seq_no
                     AND tax_cd = pol.tax_cd
                     AND tax_id = pol.tax_id;
                  UPDATE gipi_winv_tax
                     SET tax_amt = NVL (v_tax_amt, 0)
                   WHERE par_id = p_par_id
                     AND item_grp = inv.item_grp
                     AND takeup_seq_no = (SELECT MIN (takeup_seq_no)
                                            FROM gipi_winvoice
                                           WHERE par_id = p_par_id)
                     AND tax_cd = pol.tax_cd
                     AND tax_id = pol.tax_id;
               ELSIF tax.takeup_alloc_tag = 'L'
               THEN
                  UPDATE gipi_winv_tax
                     SET tax_amt = 0
                   WHERE par_id = p_par_id
                     AND item_grp = inv.item_grp
                     AND takeup_seq_no = inv.takeup_seq_no
                     AND tax_cd = pol.tax_cd
                     AND tax_id = pol.tax_id;
                  UPDATE gipi_winv_tax
                     SET tax_amt = NVL (v_tax_amt, 0)
                   WHERE par_id = p_par_id
                     AND item_grp = inv.item_grp
                     AND takeup_seq_no = (SELECT MAX (takeup_seq_no)
                                            FROM gipi_winvoice
                                           WHERE par_id = p_par_id)
                     AND tax_cd = pol.tax_cd
                     AND tax_id = pol.tax_id;
               END IF;
            END LOOP;
         END LOOP;
         FOR i IN (SELECT   SUM (tax_amt) tax_amt, par_id, takeup_seq_no,
                            item_grp
                       FROM gipi_winv_tax
                      WHERE par_id = p_par_id
                   GROUP BY par_id, item_grp, takeup_seq_no)
         LOOP
            v_sum_tax_amt := i.tax_amt;
            UPDATE gipi_winstallment
               SET tax_amt = v_sum_tax_amt
             WHERE par_id = p_par_id
               AND takeup_seq_no = i.takeup_seq_no
               AND item_grp = i.item_grp;
            UPDATE gipi_winvoice
               SET tax_amt = v_sum_tax_amt
             WHERE par_id = p_par_id
               AND takeup_seq_no = i.takeup_seq_no
               AND item_grp = i.item_grp;
         END LOOP;
      END LOOP;
      FOR valid IN (SELECT 1
                      FROM giis_parameters
                     WHERE param_name = 'VALIDATE_CANCELLATION'
                       AND param_value_v = 'Y'
                    UNION
                    SELECT 1
                      FROM DUAL)
      LOOP
         FOR x IN (SELECT cancelled_endt_id, cancel_type, pol_flag,
                          takeup_term, ann_tsi_amt
                     FROM gipi_wpolbas
                    WHERE par_id = p_par_id)
         LOOP
            v_cancelled_endt_id := x.cancelled_endt_id;
            v_cancel_type := x.cancel_type;
            v_pol_flag := x.pol_flag;
            IF v_cancel_type = '3' OR v_cancel_type = '4'
            THEN
--               DELETE FROM cpi.gipi_winv_tax --added by steven 08.29.2014
--                WHERE par_id = p_par_id;    --commented out by Gzelle 10142014 old SIT solution
               FOR cncl IN (SELECT policy_id
                              FROM gipi_polbasic
                             WHERE policy_id = v_cancelled_endt_id)
               LOOP
                  FOR inv IN (SELECT iss_cd, prem_seq_no, takeup_seq_no
                                FROM gipi_invoice
                               WHERE policy_id = cncl.policy_id)
                  LOOP
                     FOR tax IN (SELECT item_grp, tax_allocation,
                                        fixed_tax_allocation, iss_cd, tax_cd,
                                        tax_id, (tax_amt * (-1)) tax_amt,
                                        rate, line_cd
                                   FROM gipi_inv_tax
                                  WHERE iss_cd = inv.iss_cd
                                    AND prem_seq_no = inv.prem_seq_no)
                     LOOP
                        v_exists := 'N';
                        FOR exist IN (SELECT tax_cd
                                        FROM gipi_winv_tax
                                       WHERE par_id = p_par_id
                                         AND tax_cd = tax.tax_cd
                                         AND tax_id = tax.tax_id)
                        LOOP
                           v_exists := 'Y';
                           EXIT;
                        END LOOP;
                        IF v_exists = 'N'
                        THEN
                           INSERT INTO cpi.gipi_winv_tax
                                       (par_id, item_grp, tax_cd,
                                        line_cd, tax_allocation,
                                        fixed_tax_allocation,
                                        iss_cd, tax_amt, tax_id,
                                        rate, takeup_seq_no
                                       )
                                VALUES (p_par_id, tax.item_grp, tax.tax_cd,
                                        tax.line_cd, tax.tax_allocation,
                                        tax.fixed_tax_allocation,
                                        tax.iss_cd, tax.tax_amt, tax.tax_id,
                                        tax.rate, inv.takeup_seq_no
                                       );
                        ELSE
                           UPDATE cpi.gipi_winv_tax
                              SET tax_amt = tax.tax_amt
                            WHERE par_id = p_par_id
                              AND tax_cd = tax.tax_cd
                              AND tax_id = tax.tax_id;
                        END IF;
                        IF     tax.tax_cd = giacp.n ('DOC_STAMPS') --added by steven 08.29.2014
                                AND NVL (giisp.v ('ALLOW_NEGATIVE_DST'), 'Y') = 'N'
                        THEN
                            DELETE FROM cpi.gipi_winv_tax
                                  WHERE par_id = p_par_id
                                    AND item_grp = tax.item_grp
                                    AND tax_cd = giacp.n ('DOC_STAMPS')
                                    AND takeup_seq_no = inv.takeup_seq_no;
                        END IF;
                     END LOOP;
                  END LOOP;
               END LOOP;
            ELSIF v_cancel_type = '1' OR v_pol_flag = '4'
            THEN
--               DELETE FROM cpi.gipi_winv_tax --added by steven 08.29.2014
--                WHERE par_id = p_par_id;    --commented out by Gzelle 10142014 old SIT solution
               SELECT line_cd, subline_cd, iss_cd, issue_yy,
                      pol_seq_no, renew_no
                 INTO v_line_cd, v_subline_cd, v_iss_cd, v_issue_yy,
                      v_pol_seq_no, v_renew_no
                 FROM gipi_wpolbas
                WHERE par_id = p_par_id;
               FOR flatax IN (SELECT   (SUM (a.tax_amt) * -1) tax_amt,
                                       a.tax_cd, a.tax_id, a.item_grp,
                                       a.iss_cd, a.line_cd, a.tax_allocation,
                                       a.fixed_tax_allocation,
                                       b.takeup_seq_no
                                  FROM gipi_inv_tax a, gipi_invoice b
                                 WHERE a.iss_cd = b.iss_cd
                                   AND a.prem_seq_no = b.prem_seq_no
                                   AND b.policy_id IN (
                                          SELECT policy_id
                                            FROM gipi_polbasic
                                           WHERE line_cd = v_line_cd
                                             AND subline_cd = v_subline_cd
                                             AND iss_cd = v_iss_cd
                                             AND issue_yy = v_issue_yy
                                             AND pol_seq_no = v_pol_seq_no
                                             AND renew_no = v_renew_no)
                              GROUP BY a.tax_cd,
                                       a.tax_id,
                                       a.item_grp,
                                       a.iss_cd,
                                       a.line_cd,
                                       a.tax_allocation,
                                       a.fixed_tax_allocation,
                                       b.takeup_seq_no)
               LOOP
                  v_exists := 'N';
                  FOR exist IN (SELECT tax_cd
                                  FROM gipi_winv_tax
                                 WHERE par_id = p_par_id
                                   AND tax_cd = flatax.tax_cd
                                   AND tax_id = flatax.tax_id
                                   AND item_grp = flatax.item_grp
                                   AND takeup_seq_no = flatax.takeup_seq_no)
                  LOOP
                     v_exists := 'Y';
                     EXIT;
                  END LOOP;
                  IF v_exists = 'N'
                  THEN
                     INSERT INTO cpi.gipi_winv_tax
                                 (par_id, item_grp, tax_cd,
                                  line_cd, tax_allocation,
                                  fixed_tax_allocation,
                                  iss_cd, tax_amt,
                                  tax_id, rate,
                                  takeup_seq_no
                                 )
                          VALUES (p_par_id, flatax.item_grp, flatax.tax_cd,
                                  flatax.line_cd, flatax.tax_allocation,
                                  flatax.fixed_tax_allocation,
                                  flatax.iss_cd, flatax.tax_amt,
                                  flatax.tax_id, v_flatrate,
                                  flatax.takeup_seq_no
                                 );
                  ELSE
                     UPDATE cpi.gipi_winv_tax
                        SET tax_amt = flatax.tax_amt
                      WHERE par_id = p_par_id
                        AND tax_cd = flatax.tax_cd
                        AND tax_id = flatax.tax_id
                        AND item_grp = flatax.item_grp
                        AND takeup_seq_no = flatax.takeup_seq_no;
                  END IF;
                  IF     flatax.tax_cd = giacp.n ('DOC_STAMPS') --added by steven 08.29.2014
                        AND NVL (giisp.v ('ALLOW_NEGATIVE_DST'), 'Y') = 'N'
                  THEN
                    DELETE FROM cpi.gipi_winv_tax
                          WHERE par_id = p_par_id
                            AND item_grp = flatax.item_grp
                            AND tax_cd = giacp.n ('DOC_STAMPS')
                            AND takeup_seq_no = flatax.takeup_seq_no;
                  END IF;
               END LOOP;
            ELSIF x.ann_tsi_amt = 0
            THEN
--               DELETE FROM cpi.gipi_winv_tax --added by steven 08.29.2014
--                WHERE par_id = p_par_id;  --commented out by Gzelle 10142014 old SIT solution
               SELECT line_cd, subline_cd, iss_cd, issue_yy,
                      pol_seq_no, renew_no
                 INTO v_line_cd, v_subline_cd, v_iss_cd, v_issue_yy,
                      v_pol_seq_no, v_renew_no
                 FROM gipi_wpolbas
                WHERE par_id = p_par_id;
               FOR flatax2 IN (SELECT   (SUM (a.tax_amt) * -1) tax_amt,
                                        a.tax_cd, a.tax_id, a.item_grp,
                                        a.iss_cd, a.line_cd, a.tax_allocation,
                                        a.fixed_tax_allocation,
                                        b.takeup_seq_no
                                   FROM gipi_inv_tax a, gipi_invoice b
                                  WHERE a.iss_cd = b.iss_cd
                                    AND a.prem_seq_no = b.prem_seq_no
                                    AND b.policy_id IN (
                                           SELECT policy_id
                                             FROM gipi_polbasic
                                            WHERE line_cd = v_line_cd
                                              AND subline_cd = v_subline_cd
                                              AND iss_cd = v_iss_cd
                                              AND issue_yy = v_issue_yy
                                              AND pol_seq_no = v_pol_seq_no
                                              AND renew_no = v_renew_no)
                               GROUP BY a.tax_cd,
                                        a.tax_id,
                                        a.item_grp,
                                        a.iss_cd,
                                        a.line_cd,
                                        a.tax_allocation,
                                        a.fixed_tax_allocation,
                                        b.takeup_seq_no)
               LOOP
                  v_exists := 'N';
                  FOR exist IN (SELECT tax_cd
                                  FROM gipi_winv_tax
                                 WHERE par_id = p_par_id
                                   AND tax_cd = flatax2.tax_cd
                                   AND tax_id = flatax2.tax_id
                                   AND item_grp = flatax2.item_grp
                                   AND takeup_seq_no = flatax2.takeup_seq_no)
                  LOOP
                     v_exists := 'Y';
                     EXIT;
                  END LOOP;
                  IF v_exists = 'N'
                  THEN
                     INSERT INTO cpi.gipi_winv_tax
                                 (par_id, item_grp,
                                  tax_cd, line_cd,
                                  tax_allocation,
                                  fixed_tax_allocation,
                                  iss_cd, tax_amt,
                                  tax_id, rate,
                                  takeup_seq_no
                                 )
                          VALUES (p_par_id, flatax2.item_grp,
                                  flatax2.tax_cd, flatax2.line_cd,
                                  flatax2.tax_allocation,
                                  flatax2.fixed_tax_allocation,
                                  flatax2.iss_cd, flatax2.tax_amt,
                                  flatax2.tax_id, v_flatrate,
                                  flatax2.takeup_seq_no
                                 );
                  ELSE
                     UPDATE cpi.gipi_winv_tax
                        SET tax_amt = flatax2.tax_amt
                      WHERE par_id = p_par_id
                        AND tax_cd = flatax2.tax_cd
                        AND tax_id = flatax2.tax_id
                        AND item_grp = flatax2.item_grp
                        AND takeup_seq_no = flatax2.takeup_seq_no;
                  END IF;
                  IF     flatax2.tax_cd = giacp.n ('DOC_STAMPS') --added by steven 08.29.2014
                        AND NVL (giisp.v ('ALLOW_NEGATIVE_DST'), 'Y') = 'N'
                  THEN
                    DELETE FROM cpi.gipi_winv_tax
                          WHERE par_id = p_par_id
                            AND item_grp = flatax2.item_grp
                            AND tax_cd = giacp.n ('DOC_STAMPS')
                            AND takeup_seq_no = flatax2.takeup_seq_no;
                  END IF;
               END LOOP;
            END IF;
         END LOOP;
      END LOOP;
   END;
   PROCEDURE compute_taxes (p_par_id IN NUMBER)
   IS
      v_takeup_term   gipi_wpolbas.takeup_term%TYPE;
      v_par_id        gipi_wpolbas.par_id%TYPE        := p_par_id;
      v_count         NUMBER                          := 0;
   BEGIN
      SELECT takeup_term
        INTO v_takeup_term
        FROM gipi_wpolbas
       WHERE par_id = v_par_id;
      -- jhing 10.29.2014 commented out if condition. Regardless if it's long term or single takeup 
      -- compute_uwtaxes.compute_tax should be called to prevent redundancy of code and reduce difficulty in maintenance 
     /*( IF v_takeup_term = 'ST'
      THEN */
         compute_uwtaxes.compute_tax (v_par_id);
    /*  ELSE
         compute_uwtaxes.compute_longtermtax (v_par_id);
      END IF; */
      --based on computation onn create_winvoice  with modifications
      FOR c IN (SELECT pack_pol_flag
                  FROM gipi_wpolbas
                 WHERE par_id = p_par_id AND pack_pol_flag = 'Y')
      LOOP
         FOR d IN (SELECT DISTINCT item_grp
                              FROM gipi_winvoice
                             WHERE par_id = p_par_id)
         LOOP
            FOR a IN (SELECT par_id, prem_seq_no, prem_amt, tax_amt,
                             other_charges, item_grp, takeup_seq_no
                        FROM gipi_winvoice
                       WHERE par_id = p_par_id AND item_grp = d.item_grp)
            LOOP
               FOR b IN (SELECT DISTINCT pack_line_cd
                                    FROM gipi_witem
                                   WHERE par_id = p_par_id
                                     AND item_grp = a.item_grp)
               LOOP
                  UPDATE gipi_wpackage_inv_tax
                     SET prem_amt = a.prem_amt,
                         tax_amt = a.tax_amt
                   WHERE par_id = p_par_id
                     AND item_grp = a.item_grp
                     AND takeup_seq_no = a.takeup_seq_no;
               END LOOP;
            END LOOP;
         END LOOP;
         EXIT;
      END LOOP;
      FOR pack IN (SELECT b.pack_par_id, b.line_cd
                     FROM gipi_pack_parlist b, gipi_parlist a
                    WHERE b.pack_par_id = a.pack_par_id
                      AND a.pack_par_id IS NOT NULL
                      AND a.par_id = p_par_id)
      LOOP
         DELETE FROM gipi_pack_winv_tax
               WHERE pack_par_id = pack.pack_par_id;
        DELETE FROM gipi_pack_winvperl
               WHERE pack_par_id = pack.pack_par_id; 
         DELETE FROM gipi_pack_winstallment
               WHERE pack_par_id = pack.pack_par_id;
         DELETE FROM gipi_pack_winvoice
               WHERE pack_par_id = pack.pack_par_id; 
         FOR pack_gw IN (SELECT   pack.pack_par_id, item_grp,
                                  SUM (prem_amt) prem_amt,
                                  SUM (tax_amt) tax_amt,
                                  SUM (ri_comm_amt) ri_comm_amt,
                                  currency_cd, -- Added by Jerome Bautista SR 19574 07.06.2015      
                                  currency_rt, -- Added by Jerome Bautista SR 19574 07.06.2015
                                  SUM (other_charges) other_charges,
                                  SUM (bond_tsi_amt) bond_tsi_amt,
                                  SUM (ri_comm_vat) ri_comm_vat,
                                  takeup_seq_no
                             FROM gipi_winvoice a
                            WHERE EXISTS (
                                     SELECT 1
                                       FROM gipi_parlist gp
                                      WHERE gp.par_id = a.par_id
                                        AND gp.pack_par_id = pack.pack_par_id)
                         GROUP BY pack.pack_par_id,
                                  item_grp,
                                  takeup_seq_no,
                                  currency_cd,
                                   currency_rt -- Added by Jerome Bautista SR 19574 07.06.2015
                         ORDER BY item_grp)
         LOOP
            INSERT INTO gipi_pack_winvoice
                        (pack_par_id, item_grp,
                         prem_amt, tax_amt,
                         ri_comm_amt, currency_cd, currency_rt, other_charges, -- (currency_cd, currency_rt) Added by Jerome Bautista SR 19574 07.06.2015
                         bond_tsi_amt, ri_comm_vat,
                         takeup_seq_no
                        )
                 VALUES (pack.pack_par_id, pack_gw.item_grp,
                         pack_gw.prem_amt, pack_gw.tax_amt,
                         pack_gw.ri_comm_amt, pack_gw.currency_cd, pack_gw.currency_rt, pack_gw.other_charges, -- (pack_gw.currency_cd, pack_gw.currency_rt) Added by Jerome Bautista SR 19574 07.06.2015
                         pack_gw.bond_tsi_amt, pack_gw.ri_comm_vat,
                         pack_gw.takeup_seq_no
                        );
         END LOOP; 
         /*INSERT INTO GIPI_PACK_WINVOICE(pack_par_id, item_grp, prem_amt, tax_amt, ri_comm_amt, other_charges, bond_tsi_amt, ri_comm_vat, takeup_seq_no)
         SELECT pack.pack_par_id, item_grp, SUM(prem_amt), SUM(tax_amt), SUM(ri_comm_amt), SUM(other_charges), SUM(bond_tsi_amt), SUM(ri_comm_vat), takeup_seq_no
           FROM GIPI_WINVOICE A
          WHERE EXISTS (SELECT 1
                         FROM GIPI_PARLIST gp
                        WHERE gp.par_id = A.par_id
                          AND gp.pack_par_id = pack.pack_par_id)
          GROUP BY pack.pack_par_id, item_grp, takeup_seq_no;*/
         FOR gw IN (SELECT item_grp, payt_terms, prem_seq_no,
                           'VARIOUS' property, insured, due_date,
                           notarial_fee, currency_cd, currency_rt, remarks,
                           ref_inv_no, policy_currency, bond_rate, pay_type,
                           card_name, card_no, approval_cd, expiry_date
                      FROM gipi_winvoice a
                     WHERE EXISTS (
                              SELECT 1
                                FROM gipi_parlist gp
                               WHERE gp.par_id = a.par_id
                                 AND gp.pack_par_id = pack.pack_par_id))
         LOOP
            UPDATE gipi_pack_winvoice
               SET payt_terms = gw.payt_terms,
                   prem_seq_no = gw.prem_seq_no,
--             property = gw.property,
                   insured = gw.insured,
                   due_date = gw.due_date,
                   notarial_fee = gw.notarial_fee,
                   currency_cd = gw.currency_cd,
                   currency_rt = gw.currency_rt,
                   remarks = gw.remarks,
                   ref_inv_no = gw.ref_inv_no,
                   policy_currency = gw.policy_currency,
                   bond_rate = gw.bond_rate,
                   pay_type = gw.pay_type,
                   card_name = gw.card_name,
                   card_no = gw.card_no,
                   approval_cd = gw.approval_cd,
                   expiry_date = gw.expiry_date
             WHERE pack_par_id = pack.pack_par_id
               AND item_grp = gw.item_grp
               AND currency_cd = gw.currency_cd;
            SELECT COUNT (item_grp)
              INTO v_count
              FROM gipi_winvoice a
             WHERE EXISTS (
                      SELECT 1
                        FROM gipi_parlist gp
                       WHERE gp.par_id = a.par_id
                         AND gp.pack_par_id = pack.pack_par_id)
               AND item_grp = gw.item_grp;
            IF v_count > 1
            THEN
               UPDATE gipi_pack_winvoice
                  SET property = 'VARIOUS'
                WHERE pack_par_id = pack.pack_par_id
                  AND item_grp = gw.item_grp
                  AND currency_cd = gw.currency_cd;
            END IF;
         END LOOP;
         INSERT INTO gipi_pack_winstallment
                     (pack_par_id, item_grp, inst_no, share_pct, prem_amt,
                      tax_amt, due_date, takeup_seq_no)
            SELECT   pack.pack_par_id, item_grp, inst_no, share_pct,
                     SUM (prem_amt), SUM (tax_amt), due_date, takeup_seq_no
                FROM gipi_winstallment a
               WHERE EXISTS (
                        SELECT 1
                          FROM gipi_parlist gp
                         WHERE gp.par_id = a.par_id
                           AND gp.pack_par_id = pack.pack_par_id)
            GROUP BY pack.pack_par_id,
                     item_grp,
                     inst_no,
                     share_pct,
                     takeup_seq_no,
                     due_date;
         INSERT INTO gipi_pack_winvperl
                     (pack_par_id, line_cd, peril_cd, item_grp, takeup_seq_no,
                      tsi_amt, prem_amt, ri_comm_amt, ri_comm_rt)
            SELECT   pack.pack_par_id, pack_line_cd, peril_cd, item_grp,
                     takeup_seq_no, SUM (tsi_amt), SUM (prem_amt),
                     SUM (ri_comm_amt), SUM (ri_comm_rt)
                FROM gipi_winvperl a, gipi_wpack_line_subline b
               WHERE a.par_id = b.par_id
                 AND EXISTS (
                        SELECT 1
                          FROM gipi_parlist gp
                         WHERE gp.par_id = a.par_id
                           AND gp.pack_par_id = pack.pack_par_id)
            GROUP BY pack.pack_par_id,
                     pack_line_cd,
                     peril_cd,
                     item_grp,
                     takeup_seq_no;
         FOR gwt1 IN (SELECT   item_grp, takeup_seq_no, tax_cd,
                               SUM (tax_amt) tax_amt, AVG (rate) rate
                          FROM gipi_winv_tax a
                         WHERE EXISTS (
                                  SELECT 1
                                    FROM gipi_parlist gp
                                   WHERE gp.par_id = a.par_id
                                     AND gp.pack_par_id = pack.pack_par_id)
                      GROUP BY item_grp, takeup_seq_no, tax_cd)
         LOOP
            FOR gwt2 IN (SELECT line_cd, tax_allocation,
                                fixed_tax_allocation, iss_cd, tax_id
                           FROM gipi_winv_tax a
                          WHERE EXISTS (
                                   SELECT 1
                                     FROM gipi_parlist gp
                                    WHERE gp.par_id = a.par_id
                                      AND gp.pack_par_id = pack.pack_par_id)
                            AND a.item_grp = gwt1.item_grp
                            AND a.tax_cd = gwt1.tax_cd
                            AND a.takeup_seq_no = gwt1.takeup_seq_no)
            LOOP
               INSERT INTO gipi_pack_winv_tax
                           (pack_par_id, item_grp, tax_cd,
                            takeup_seq_no, line_cd,
                            tax_allocation, fixed_tax_allocation,
                            iss_cd, tax_amt, tax_id, rate
                           )
                    VALUES (pack.pack_par_id, gwt1.item_grp, gwt1.tax_cd,
                            gwt1.takeup_seq_no, pack.line_cd,
                            gwt2.tax_allocation, gwt2.fixed_tax_allocation,
                            gwt2.iss_cd, gwt1.tax_amt, gwt2.tax_id, gwt1.rate
                           );
               EXIT;
            END LOOP;
            FOR gwt3 IN (SELECT   rate, tax_cd, takeup_seq_no, item_grp
                             FROM gipi_winv_tax a
                            WHERE EXISTS (
                                     SELECT 1
                                       FROM gipi_parlist gp
                                      WHERE gp.par_id = a.par_id
                                        AND gp.pack_par_id = pack.pack_par_id)
                         GROUP BY item_grp, takeup_seq_no, tax_cd, rate)
            LOOP
               UPDATE gipi_pack_winv_tax
                  SET rate = gwt3.rate
                WHERE item_grp = gwt3.item_grp
                  AND takeup_seq_no = gwt3.takeup_seq_no
                  AND tax_cd = gwt3.tax_cd
                  AND pack_par_id = pack.pack_par_id; --added by VJ 01.04.2017 SR-5896
            END LOOP;
         END LOOP;
      END LOOP;
   END;
    PROCEDURE get_prorate_tax (
       p_par_id        IN       gipi_polbasic.par_id%TYPE,
       p_tax_cd        IN       gipi_winv_tax.tax_cd%TYPE,
       p_iss_cd        IN       gipi_winv_tax.iss_cd%TYPE,
       p_line_cd       IN       gipi_winv_tax.line_cd%TYPE,
       p_eff_date      IN       gipi_polbasic.eff_date%TYPE,
       p_item_grp      IN       gipi_invoice.item_grp%TYPE,
       p_currency_cd   IN       gipi_invoice.currency_cd%TYPE,
       p_currency_rt   IN       gipi_invoice.currency_rt%TYPE,
       p_prorate_tax   OUT      gipi_winv_tax.tax_amt%TYPE
    )
    AS
       v_prorate_tax      gipi_winv_tax.tax_amt%TYPE;
       v_recomp_tax_amt   gipi_winv_tax.tax_amt%TYPE;
       v_line_cd          gipi_polbasic.line_cd%TYPE;
       v_subline_cd       gipi_polbasic.subline_cd%TYPE;
       v_iss_cd           gipi_polbasic.iss_cd%TYPE;
       v_issue_yy         gipi_polbasic.issue_yy%TYPE;
       v_pol_seq_no       gipi_polbasic.pol_seq_no%TYPE;
       v_renew_no         gipi_polbasic.renew_no%TYPE;
       v_eff_date         gipi_polbasic.eff_date%TYPE;
       v_prorate_flag     gipi_polbasic.prorate_flag%TYPE;
       v_comp_sw          gipi_polbasic.comp_sw%TYPE;
       v_no_of_days       NUMBER;
       v_days_of_policy   NUMBER;
       v_short_rt_percent   gipi_wpolbas.short_rt_percent%TYPE; -- SR-18683 :: shan 07.22.2015
    BEGIN
       SELECT line_cd, subline_cd, iss_cd, issue_yy, pol_seq_no,
              renew_no, prorate_flag, comp_sw, eff_date, short_rt_percent    -- SR-18683 :: shan 07.22.2015
         INTO v_line_cd, v_subline_cd, v_iss_cd, v_issue_yy, v_pol_seq_no,
              v_renew_no, v_prorate_flag, v_comp_sw, v_eff_date, v_short_rt_percent  -- SR-18683 :: shan 07.22.2015
         FROM gipi_wpolbas
        WHERE par_id = p_par_id;
       IF p_eff_date IS NULL
       THEN
          v_prorate_tax := 0;
          FOR a2 IN (SELECT a.eff_date, a.endt_expiry_date, a.expiry_date,
                            a.prorate_flag,
                            DECODE (NVL (a.comp_sw, 'N'),
                                    'Y', 1,
                                    'M', -1,
                                    0
                                   ) comp_sw,
                            a.short_rt_percent short_rt, a.incept_date,
                            (c.tax_amt * -1) tax_amt
                       FROM gipi_polbasic a, gipi_invoice b, gipi_inv_tax c
                      WHERE a.line_cd = v_line_cd
                        AND a.subline_cd = v_subline_cd
                        AND a.iss_cd = v_iss_cd
                        AND a.issue_yy = v_issue_yy
                        AND a.pol_seq_no = v_pol_seq_no
                        AND a.renew_no = v_renew_no
                        AND a.policy_id = b.policy_id
                        AND b.iss_cd = c.iss_cd
                        AND b.prem_seq_no = c.prem_seq_no
                        AND a.pol_flag NOT IN ('4', '5')
                        AND c.tax_cd = p_tax_cd
                        AND c.line_cd = p_line_cd
                        AND c.iss_cd = p_iss_cd
                        AND b.item_grp = p_item_grp
                        AND b.currency_cd = p_currency_cd
                        AND b.currency_rt = p_currency_rt)
          LOOP
            IF v_prorate_flag = 3 THEN  -- added IF-ELSE ::: SR-18683 : shan 07.22.2015
                FOR tax IN (SELECT *
                              FROM giis_tax_charges
                             WHERE iss_cd = p_iss_cd
                               AND line_cd = p_line_cd
                               AND tax_cd = p_tax_cd)
                LOOP
                    IF tax.tax_type = 'A' THEN
                        v_prorate_tax := -(tax.tax_amount * (v_short_rt_percent/100));
                    ELSIF tax.tax_type = 'R' THEN
                        v_prorate_tax := (a2.tax_amt * (v_short_rt_percent/100));
                    END IF;
                END LOOP;
            ELSE
                 v_days_of_policy := TRUNC (a2.expiry_date) - TRUNC (a2.eff_date);
                 IF v_prorate_flag = 1
                 THEN
                    v_days_of_policy := v_days_of_policy + a2.comp_sw;
                 END IF;
                 --get no. of days that will be returned
                 -- retrieve dates from gipi_wpolbas ::: AFPGEN SR-18683 : shan 07.16.2015
                 FOR aa IN (SELECT *
                              FROM gipi_wpolbas
                             WHERE par_id = p_par_id) 
                 LOOP
                     IF v_comp_sw = 'Y'
                     THEN
                        v_no_of_days := (TRUNC (NVL(aa.endt_expiry_date, a2.expiry_date)) - TRUNC (v_eff_date)) + 1;    -- added NVL ::  AFPGEN SR-18683 : shan 07.16.2015
                     ELSIF v_comp_sw = 'M'
                     THEN
                        v_no_of_days := (TRUNC (NVL(aa.endt_expiry_date, a2.expiry_date)) - TRUNC (v_eff_date)) - 1;   -- added NVL ::  AFPGEN SR-18683 : shan 07.16.2015
                     ELSE
                        v_no_of_days := TRUNC (NVL(aa.endt_expiry_date, a2.expiry_date)) - TRUNC (v_eff_date);   -- added NVL ::  AFPGEN SR-18683 : shan 07.16.2015
                     END IF;
                  END LOOP;
                 --for policy or endt with no of days less than the no. of days of cancelling
                 --endt. no_of days of cancelling endt. should be equal to the no_of days
                 --of policy/endt. on process
                 IF NVL (v_no_of_days, 0) > NVL (v_days_of_policy, 0)
                 THEN
                    v_no_of_days := v_days_of_policy;
                 END IF;
                 --accumulated tax amount
                 v_prorate_tax :=
                    v_prorate_tax
                    + ((a2.tax_amt / v_days_of_policy) * (v_no_of_days));                
            END IF;
          END LOOP;
       ELSE
          v_prorate_tax := 0;
          FOR a2 IN (SELECT a.eff_date, a.endt_expiry_date, a.expiry_date,
                            a.prorate_flag,
                            DECODE (NVL (a.comp_sw, 'N'),
                                    'Y', 1,
                                    'M', -1,
                                    0
                                   ) comp_sw,
                            a.short_rt_percent short_rt, a.incept_date,
                            (c.tax_amt * -1) tax_amt
                       FROM gipi_polbasic a, gipi_invoice b, gipi_inv_tax c
                      WHERE a.line_cd = v_line_cd
                        AND a.subline_cd = v_subline_cd
                        AND a.iss_cd = v_iss_cd
                        AND a.issue_yy = v_issue_yy
                        AND a.pol_seq_no = v_pol_seq_no
                        AND a.renew_no = v_renew_no
                        AND a.policy_id = b.policy_id
                        AND b.iss_cd = c.iss_cd
                        AND b.prem_seq_no = c.prem_seq_no
                        AND a.pol_flag NOT IN ('4', '5')
                        AND c.tax_cd = p_tax_cd
                        AND c.line_cd = p_line_cd
                        AND c.iss_cd = p_iss_cd
                        AND b.item_grp = p_item_grp
                        AND b.currency_cd = p_currency_cd
                        AND b.currency_rt = p_currency_rt
                        AND TRUNC (a.eff_date) <=
                               DECODE (NVL (a.endt_seq_no, 0),
                                       0, TRUNC (a.eff_date),
                                       TRUNC (p_eff_date)
                                      )
                        AND TRUNC (NVL (a.endt_expiry_date, a.expiry_date)) >=
                               DECODE (NVL (a.endt_seq_no, 0),
                                       0, TRUNC (a.eff_date),
                                       TRUNC (p_eff_date)
                                      ))
          LOOP
            IF v_prorate_flag = 3 THEN  -- added IF-ELSE ::: SR-18683 : shan 07.22.2015
                FOR tax IN (SELECT *
                              FROM giis_tax_charges
                             WHERE iss_cd = p_iss_cd
                               AND line_cd = p_line_cd
                               AND tax_cd = p_tax_cd)
                LOOP
                    IF tax.tax_type = 'A' THEN
                        v_prorate_tax := -(tax.tax_amount * (v_short_rt_percent/100));
                    ELSIF tax.tax_type = 'R' THEN
                        v_prorate_tax := (a2.tax_amt * (v_short_rt_percent/100));
                    END IF;
                END LOOP;
            ELSE
                 v_days_of_policy := TRUNC (a2.expiry_date) - TRUNC (a2.eff_date);
                 IF v_prorate_flag = 1
                 THEN
                    v_days_of_policy := v_days_of_policy + a2.comp_sw;
                 END IF;
                 --get no. of days that will be returned
                 -- retrieve dates from gipi_wpolbas ::: AFPGEN SR-18683 : shan 07.16.2015
                 FOR aa IN (SELECT *
                              FROM gipi_wpolbas
                             WHERE par_id = p_par_id) 
                 LOOP
                     IF v_comp_sw = 'Y'
                     THEN
                        v_no_of_days := (TRUNC (NVL(aa.endt_expiry_date, a2.expiry_date)) - TRUNC (v_eff_date)) + 1;   -- added NVL ::  AFPGEN SR-18683 : shan 07.16.2015
                     ELSIF v_comp_sw = 'M'
                     THEN
                        v_no_of_days := (TRUNC (NVL(aa.endt_expiry_date, a2.expiry_date)) - TRUNC (v_eff_date)) - 1;   -- added NVL ::  AFPGEN SR-18683 : shan 07.16.2015
                     ELSE
                        v_no_of_days := TRUNC (NVL(aa.endt_expiry_date, a2.expiry_date)) - TRUNC (v_eff_date);   -- added NVL ::  AFPGEN SR-18683 : shan 07.16.2015
                     END IF;
                 END LOOP;
                 --for policy or endt with no of days less than the no. of days of cancelling
                 --endt. no_of days of cancelling endt. should be equal to the no_of days
                 --of policy/endt. on process
                 IF NVL (v_no_of_days, 0) > NVL (v_days_of_policy, 0)
                 THEN
                    v_no_of_days := v_days_of_policy;
                 END IF;
                 --accumulated tax amount
                 v_prorate_tax :=
                    v_prorate_tax
                    + ((a2.tax_amt / v_days_of_policy) * (v_no_of_days));
            END IF;
          END LOOP;
       END IF;
       p_prorate_tax := v_prorate_tax;
    END get_prorate_tax;   

    PROCEDURE get_prorate_tax2 ( -- Dren 12.15.2015 SR-0020357 : Wrong prorate computation for manual cancellation. - Start
       p_par_id        IN       gipi_polbasic.par_id%TYPE,
       p_tax_cd        IN       gipi_winv_tax.tax_cd%TYPE,
       p_iss_cd        IN       gipi_winv_tax.iss_cd%TYPE,
       p_line_cd       IN       gipi_winv_tax.line_cd%TYPE,
       p_eff_date      IN       gipi_polbasic.eff_date%TYPE,
       p_item_grp      IN       gipi_invoice.item_grp%TYPE,
       p_currency_cd   IN       gipi_invoice.currency_cd%TYPE,
       p_currency_rt   IN       gipi_invoice.currency_rt%TYPE,
       p_rate          IN       gipi_winv_tax.rate%TYPE,
       p_prorate_tax   OUT      gipi_winv_tax.tax_amt%TYPE
    )
    AS
       v_prorate_tax            gipi_winv_tax.tax_amt%TYPE;
       v_recomp_tax_amt         gipi_winv_tax.tax_amt%TYPE;
       v_line_cd                gipi_polbasic.line_cd%TYPE;
       v_subline_cd             gipi_polbasic.subline_cd%TYPE;
       v_iss_cd                 gipi_polbasic.iss_cd%TYPE;
       v_issue_yy               gipi_polbasic.issue_yy%TYPE;
       v_pol_seq_no             gipi_polbasic.pol_seq_no%TYPE;
       v_renew_no               gipi_polbasic.renew_no%TYPE;
       v_eff_date               gipi_polbasic.eff_date%TYPE;
       v_prorate_flag           gipi_polbasic.prorate_flag%TYPE;
       v_comp_sw                gipi_polbasic.comp_sw%TYPE;
       v_no_of_days             NUMBER;
       v_days_of_policy         NUMBER;
       v_short_rt_percent       gipi_wpolbas.short_rt_percent%TYPE;       
       v_sum_premium            NUMBER;
       v_sum_tsi                NUMBER;
       v_sum_tax_amt            NUMBER;
       v_sign_prem              NUMBER;
       v_max_takeup_seq         gipi_winvoice.takeup_seq_no%TYPE;   
       v_tax_amt                NUMBER;
       v_deleted_tax            BOOLEAN;
       v_exists                 VARCHAR2 (1)  := 'N';
       v_new_tax_id             gipi_winv_tax.tax_id%TYPE ;
       v_new_tax_allocation     gipi_winv_tax.tax_allocation%TYPE ;
       v_new_fixed_tax_alloc    gipi_winv_tax.fixed_tax_allocation%TYPE;
       v_new_takeup_alloc       giis_tax_charges.takeup_alloc_tag%TYPE;    
       v_new_tax_type           giis_tax_charges.tax_type%TYPE;
       v_return_nondef_tax      GIIS_PARAMETERS.param_value_v%TYPE := NVL(giisp.v('RETURN_NONDEF_TAX'),'1'); 
       v_issue_date             gipi_wpolbas.issue_date%TYPE ; 
       v_place_cd               gipi_wpolbas.place_cd%TYPE ; 
       v_sign_tsi               NUMBER;
       v_assd_vat_tag           giis_assured.vat_tag%TYPE ;  
       v_param_old_doc          giis_parameters.param_value_v%TYPE := giisp.v ('COMPUTE_OLD_DOC_STAMPS');
       v_param_pa_doc           giis_parameters.param_value_v%TYPE := giisp.v ('COMPUTE_PA_DOC_STAMPS');  
       v_rate                   NUMBER := p_rate;       
       v_currency_rt            NUMBER := p_currency_rt;
       v_tax_cd                 NUMBER := p_tax_cd;
       
    CURSOR get_tax_cd2 (p_line_cd      giis_tax_charges.line_cd%TYPE,
                        p_iss_cd       giis_tax_charges.iss_cd%TYPE,
                        p_tax_cd       giis_tax_charges.tax_cd%TYPE,
                        p_issue_date   gipi_wpolbas.issue_date%TYPE,
                        p_eff_date     gipi_wpolbas.eff_date%TYPE,
                        p_place_cd     gipi_wpolbas.place_cd%TYPE)
    IS
       SELECT DISTINCT a.tax_cd, a.tax_id, a.tax_type, a.tax_amount,
                       a.allocation_tag, a.peril_sw, 
                       a.issue_date_tag, NVL(a.no_rate_tag, 'N') no_rate_tag ,
                       NVL(b.rate, NVL(a.rate,0)) rate , NVL(a.takeup_alloc_tag,'F') takeup_alloc_tag ,
                       DECODE(a.allocation_tag,'N','N','Y') fixed_tax_alloc 
                  FROM giis_tax_charges a , giis_tax_issue_place b 
                 WHERE a.line_cd = p_line_cd
                   AND a.iss_cd = p_iss_cd
                   AND a.tax_cd = p_tax_cd
                   AND TRUNC (a.eff_start_date) <= TRUNC (p_issue_date)
                   AND TRUNC (a.eff_end_date) >= TRUNC (p_issue_date)
                   AND NVL (a.issue_date_tag, 'N') = 'Y'
                   AND a.tax_cd = b.tax_cd (+)
                   AND a.tax_id = b.tax_id (+)
                   AND a.line_cd = b.line_cd (+)
                   AND a.iss_cd = b.iss_cd (+) 
                   AND b.place_cd(+)  = p_place_cd                                     
                   AND (DECODE (v_return_nondef_tax,'1', refund_sw,'3', primary_sw, 1) = DECODE (v_return_nondef_tax,'1', 'Y','3', 'Y', 1)
                       OR primary_sw = DECODE (v_return_nondef_tax, '1', 'Y')) 					                                      
       UNION
       SELECT DISTINCT a.tax_cd, a.tax_id, a.tax_type, a.tax_amount,
                       a.allocation_tag, a.peril_sw, 
                       a.issue_date_tag, NVL(a.no_rate_tag, 'N') no_rate_tag,
                       NVL(b.rate, NVL(a.rate,0)) rate , NVL(a.takeup_alloc_tag,'F') takeup_alloc_tag,
                       DECODE(a.allocation_tag,'N','N','Y') fixed_tax_alloc
                  FROM giis_tax_charges a, giis_tax_issue_place b 
                 WHERE a.line_cd = p_line_cd
                   AND a.iss_cd = p_iss_cd
                   AND a.tax_cd = p_tax_cd
                   AND TRUNC (a.eff_start_date) <= TRUNC (p_eff_date)
                   AND TRUNC (a.eff_end_date) >= TRUNC (p_eff_date)
                   AND NVL (a.issue_date_tag, 'N') = 'N'
                   AND a.tax_cd = b.tax_cd (+)
                   AND a.tax_id = b.tax_id (+)
                   AND a.line_cd = b.line_cd (+)
                   AND a.iss_cd = b.iss_cd (+) 
                   AND b.place_cd(+)= p_place_cd
                   AND (DECODE (v_return_nondef_tax,'1', refund_sw,'3', primary_sw, 1) = DECODE (v_return_nondef_tax,'1', 'Y','3', 'Y', 1)
                       OR primary_sw = DECODE (v_return_nondef_tax, '1', 'Y')) 
              ORDER BY 2;   
                          
    CURSOR tax_from_old_pol2 (p_tax_cd        gipi_winv_tax.tax_cd%TYPE,
                              p_currency_cd   gipi_winvoice.currency_cd%TYPE,
                              p_currency_rt   gipi_winvoice.currency_rt%TYPE,
                              p_place_cd      gipi_wpolbas.place_cd%TYPE)
    IS
      SELECT DISTINCT a.tax_cd, a.tax_id, a.iss_cd, a.line_cd,
                      c.allocation_tag, NVL(c.no_rate_tag, 'N') no_rate_tag, c.tax_type,
                      c.peril_sw, NVL(e.rate, NVL(c.rate,0)) rate, NVL(c.takeup_alloc_tag,'F') takeup_alloc_tag,
                      DECODE(c.allocation_tag,'N','N','Y') fixed_tax_alloc
                 FROM gipi_inv_tax a,
                      gipi_invoice b,
                      giis_tax_charges c,
                      gipi_polbasic d,
                      giis_tax_issue_place e 
                WHERE a.iss_cd = b.iss_cd
                  AND a.prem_seq_no = b.prem_seq_no
                  AND a.line_cd = c.line_cd
                  AND a.iss_cd = c.iss_cd
                  AND a.tax_cd = c.tax_cd
                  AND a.tax_id = c.tax_id
                  AND b.policy_id = d.policy_id
                  AND b.currency_cd = p_currency_cd
                  AND b.currency_rt = p_currency_rt
                  AND a.tax_cd = p_tax_cd
                  AND c.line_cd = e.line_cd (+)
                  AND c.iss_cd = e.iss_cd (+)
                  AND c.tax_cd = e.tax_cd (+)
                  AND c.tax_id = e.tax_id (+)
                  AND e.place_cd(+) = p_place_cd 
                  AND d.pol_flag <> '5'
                  AND (d.line_cd, d.subline_cd, d.iss_cd, d.issue_yy, d.pol_seq_no, d.renew_no) 
                      IN (SELECT x.line_cd, x.subline_cd, x.iss_cd, x.issue_yy,
                                 x.pol_seq_no, x.renew_no
                            FROM gipi_wpolbas x
                           WHERE x.par_id = p_par_id)
                  AND (DECODE (v_return_nondef_tax,'1', refund_sw,'3', primary_sw, 1) = DECODE (v_return_nondef_tax,'1', 'Y','3', 'Y', 1)
                      OR primary_sw = DECODE (v_return_nondef_tax, '1', 'Y')) --added by robert GENQA 4844 08.10.15
             ORDER BY a.tax_id;         
             
    CURSOR compute_tsi 
    IS
      SELECT SUM (NVL (a.tsi_amt, 0)) tsi_amt
        FROM gipi_witmperl a, gipi_witem b, giis_peril c
       WHERE a.par_id = b.par_id
         AND a.item_no = b.item_no
         AND a.line_cd = c.line_cd
         AND a.peril_cd = c.peril_cd
         AND c.peril_type = 'B'
         AND a.par_id = p_par_id
         AND b.item_grp = p_item_grp ;                                                              
       
    BEGIN
          SELECT SIGN (tsi_amt), SIGN (prem_amt), issue_date, eff_date, line_cd , subline_cd, iss_cd , issue_yy , pol_seq_no , renew_no , place_cd 
            INTO v_sign_tsi, v_sign_prem, v_issue_date , v_eff_date ,
                 v_line_cd, v_subline_cd , v_iss_cd, v_issue_yy, v_pol_seq_no , v_renew_no , v_place_cd
            FROM gipi_wpolbas
           WHERE par_id = p_par_id;
               
          SELECT a.vat_tag 
            INTO v_assd_vat_tag
            FROM giis_assured a, gipi_parlist b 
           WHERE a.assd_no = b.assd_no
             AND b.par_id = p_par_id; 
    
          FOR inv IN (SELECT par_id, item_grp, currency_rt , sum(nvl(prem_amt,0)) prem_amt
                        FROM gipi_winvoice
                       WHERE par_id = p_par_id
                    GROUP BY par_id , item_grp , currency_rt 
                    ORDER BY item_grp)
          LOOP
              v_sum_premium := inv.prem_amt;
              v_sum_tsi := 0;
              v_sum_tax_amt := 0;
              v_max_takeup_seq := 1 ; 
              
              FOR takeup in (SELECT max(NVL(takeup_seq_no,1)) max_takeup 
                               FROM gipi_winvoice where par_id = p_par_id AND item_grp = inv.item_grp)                               
              LOOP
                  v_max_takeup_seq := takeup.max_takeup ;
              END LOOP;               
            
			  FOR winv_grp IN (SELECT DISTINCT item_grp, currency_cd, currency_rt
							     FROM gipi_winvoice
								WHERE par_id = p_par_id)
			  LOOP
				  v_max_takeup_seq := 1;                                   
			
				  FOR takeup IN (SELECT MAX (NVL (takeup_seq_no, 1)) max_takeup
								   FROM gipi_winvoice
								  WHERE par_id = p_par_id
									AND item_grp = winv_grp.item_grp)
				  LOOP
					 v_max_takeup_seq := takeup.max_takeup;
				  END LOOP;
			
				  FOR tax IN (SELECT (SUM (a.tax_amt) * -1) tax_amt, a.tax_cd, a.iss_cd, a.line_cd
							    FROM gipi_inv_tax a, gipi_invoice b
							   WHERE a.iss_cd = b.iss_cd
								 AND a.prem_seq_no = b.prem_seq_no
                                 AND b.currency_cd = winv_grp.currency_cd
                                 AND b.currency_rt = winv_grp.currency_rt
                                 AND b.policy_id IN (SELECT policy_id
                                                       FROM gipi_polbasic
                                                      WHERE line_cd = v_line_cd
                                                        AND subline_cd = v_subline_cd
                                                        AND iss_cd = v_iss_cd
                                                        AND issue_yy = v_issue_yy
                                                        AND pol_seq_no = v_pol_seq_no
                                                        AND renew_no = v_renew_no
                                                        AND pol_flag <> '5')
                                AND a.tax_cd = p_tax_cd
                           GROUP BY a.tax_cd, a.iss_cd, a.line_cd
                           ORDER BY a.tax_cd)                              
				  LOOP
                      v_exists := 'N';
			
                      IF v_exists = 'N' 
                      THEN
                          v_new_tax_id := NULL;
                          v_new_tax_allocation := NULL;
                          v_new_fixed_tax_alloc := NULL;
                          v_new_takeup_alloc := NULL;
    			
                          FOR new_tax IN get_tax_cd2(v_line_cd, v_iss_cd, tax.tax_cd, v_issue_date, v_eff_date, v_place_cd)
                          LOOP
                              v_exists := 'Y';
                              v_new_tax_id := new_tax.tax_id;
    			
                              IF new_tax.allocation_tag = 'N'
                              THEN
                                  v_new_tax_allocation := 'F';
                              ELSE
                                  v_new_tax_allocation := new_tax.allocation_tag;
                              END IF;
    			
                              v_new_fixed_tax_alloc := new_tax.fixed_tax_alloc;
                              v_new_takeup_alloc := new_tax.takeup_alloc_tag;
                              v_new_tax_type := new_tax.tax_type;
                              EXIT;
                          END LOOP;
    			
                          IF v_exists = 'N'
                          THEN
                              FOR old_tax IN tax_from_old_pol2(tax.tax_cd, winv_grp.currency_cd, winv_grp.currency_rt, v_place_cd)
                              LOOP
                                  v_exists := 'Y';
                                  v_new_tax_id := old_tax.tax_id;
    			
                                  IF old_tax.allocation_tag = 'N'
                                  THEN
                                      v_new_tax_allocation := 'F';
                                  ELSE
                                      v_new_tax_allocation := old_tax.allocation_tag;
                                  END IF;
    			
                                  v_new_fixed_tax_alloc := old_tax.fixed_tax_alloc;
                                  v_new_takeup_alloc := old_tax.takeup_alloc_tag;
                                  v_new_tax_type := old_tax.tax_type;
                                  EXIT;
                               END LOOP;
                          END IF;
    			
                          IF v_exists = 'Y'
                          THEN
                              IF v_new_tax_type = 'A'
                              THEN
                                  IF tax.tax_cd = giacp.n ('DOC_STAMPS') AND v_sign_prem = -1 AND NVL (giisp.v ('ALLOW_NEGATIVE_DST'), 'Y') = 'N'                          
                                  THEN
                                      v_tax_amt := 0; 
                                  ELSIF tax.tax_cd = giacp.n ('DOC_STAMPS') AND v_line_cd = 'PA'
                                  THEN
                                        IF v_param_pa_doc = '1'
                                        THEN
                                            v_tax_amt := (v_sum_premium * v_rate)/100;
                                        ELSIF v_param_pa_doc = '2'
                                        THEN
                                            v_tax_amt := CEIL (v_sum_premium / 200) * 0.5; 
                                        ELSE
                                            IF v_param_old_doc = 'Y'
                                            THEN             
                                                v_tax_amt := CEIL (v_sum_premium / 200) * 0.5;  
                                            ELSE
                                                v_tax_amt := (v_sum_premium * v_rate)/100;
                                            END IF;   
                                        END IF;                                           
                                  ELSIF tax.tax_cd = giacp.n ('DOC_STAMPS') AND v_param_old_doc = 'Y'
                                  THEN
                                      v_tax_amt := CEIL (v_sum_premium / 4) * 0.5;                                        
                                  ELSE                               
                                      v_tax_amt := gipi_winvoice_pkg.get_fixed_amount_tax (tax.tax_cd, v_new_tax_id,
                                                                                           p_par_id, v_sum_premium,
                                                                                           tax.tax_amt, winv_grp.item_grp,
                                                                                           v_max_takeup_seq, v_new_takeup_alloc);
                                  END IF;
                                                                                            
                              ELSIF v_new_tax_type = 'N'
                              THEN
                                  IF tax.tax_cd = giacp.n ('DOC_STAMPS') AND v_sign_prem = -1 AND NVL (giisp.v ('ALLOW_NEGATIVE_DST'), 'Y') = 'N' 
                                  THEN 
                                      v_tax_amt := 0;
                                  ELSIF tax.tax_cd = giacp.n ('DOC_STAMPS') AND v_line_cd = 'PA'
                                  THEN
                                        IF v_param_pa_doc = '1'
                                        THEN
                                            v_tax_amt := (v_sum_premium * v_rate)/100;
                                        ELSIF v_param_pa_doc = '2'
                                        THEN
                                            --v_tax_amt := CEIL (v_sum_premium / 200) * 0.5;
                                            -- bonok :: 3.22.2016 :: SR 21494 :: use floor for negative premium
                                            IF v_sign_prem = -1 THEN
                                               v_tax_amt := FLOOR(v_sum_premium / 200) * 0.5;
                                            ELSE
                                               v_tax_amt := CEIL(v_sum_premium / 200) * 0.5;
                                            END IF;                                             
                                        ELSE
                                            FOR curx in compute_tsi
                                            LOOP
                                                v_sum_tsi := NVL(curx.tsi_amt,0); 
                                            END LOOP;
                                           
                                            v_tax_amt := compute_uwtaxes.get_tax_range (v_sum_tsi, v_currency_rt,
                                                                                        v_line_cd, v_iss_cd,
                                                                                        v_tax_cd, v_new_tax_id);
                                        END IF;     
                                  ELSIF tax.tax_cd = giacp.n ('DOC_STAMPS') AND v_param_old_doc = 'Y'
                                  THEN
                                      v_tax_amt := CEIL (v_sum_premium / 4) * 0.5;                                        
                                  ELSE
                                      v_tax_amt := gipi_winvoice_pkg.get_range_amt (tax.tax_cd, v_new_tax_id,
                                                                                    p_par_id, v_sum_premium,
                                                                                    winv_grp.item_grp, v_max_takeup_seq,
                                                                                    v_new_takeup_alloc);
                                  END IF;

                              ELSIF v_new_tax_type = 'R'
                              THEN
                                  IF tax.tax_cd = giacp.n ('DOC_STAMPS') AND v_sign_prem = -1 AND NVL (giisp.v ('ALLOW_NEGATIVE_DST'), 'Y') = 'N'
                                  THEN 
                                      v_tax_amt := 0;
                                  ELSIF tax.tax_cd = giacp.n ('DOC_STAMPS') AND v_line_cd = 'PA'
                                  THEN
                                        IF v_param_pa_doc = '1'
                                        THEN
                                            v_tax_amt := (v_sum_premium * v_rate)/100;
                                        ELSIF v_param_pa_doc = '2'
                                        THEN
                                            v_tax_amt := CEIL (v_sum_premium / 200) * 0.5; 
                                        ELSE
                                            IF v_param_old_doc = 'Y'
                                            THEN             
                                                v_tax_amt := CEIL (v_sum_premium / 200) * 0.5;   
                                            ELSE
                                                v_tax_amt := (v_sum_premium * v_rate)/100;
                                            END IF;   
                                        END IF;                                           
                                  ELSIF tax.tax_cd = giacp.n ('DOC_STAMPS') AND v_param_old_doc = 'Y'
                                  THEN
                                      v_tax_amt := CEIL (v_sum_premium / 4) * 0.5;                                                                         
                                  ELSE  
                                      v_tax_amt := gipi_winvoice_pkg.get_rate_amt (tax.tax_cd, v_new_tax_id,
                                                                                   p_par_id, winv_grp.item_grp,
                                                                                   v_max_takeup_seq);                                                                        
                                  END IF;   
                                                                                 
                              END IF; 
                          END IF;
                      END IF;
                     
                      SELECT line_cd, subline_cd, iss_cd, issue_yy, pol_seq_no,
                             renew_no, prorate_flag, comp_sw, eff_date, short_rt_percent 
                        INTO v_line_cd, v_subline_cd, v_iss_cd, v_issue_yy, v_pol_seq_no,
                             v_renew_no, v_prorate_flag, v_comp_sw, v_eff_date, v_short_rt_percent
                        FROM gipi_wpolbas
                       WHERE par_id = p_par_id;

                      v_prorate_tax := 0;
                      
                      FOR a2 IN (SELECT a.eff_date, a.endt_expiry_date, a.expiry_date,
                                        a.prorate_flag,
                                        DECODE (NVL (a.comp_sw, 'N'), 'Y', 1, 'M', -1, 0) comp_sw,
                                        a.short_rt_percent short_rt, a.incept_date,
                                        (c.tax_amt * -1) tax_amt
                                   FROM gipi_polbasic a, gipi_invoice b, gipi_inv_tax c
                                  WHERE a.line_cd = v_line_cd
                                    AND a.subline_cd = v_subline_cd
                                    AND a.iss_cd = v_iss_cd
                                    AND a.issue_yy = v_issue_yy
                                    AND a.pol_seq_no = v_pol_seq_no
                                    AND a.renew_no = v_renew_no
                                    AND a.policy_id = b.policy_id
                                    AND b.iss_cd = c.iss_cd
                                    AND b.prem_seq_no = c.prem_seq_no
                                    AND a.pol_flag NOT IN ('4', '5')
                                    AND c.tax_cd = p_tax_cd
                                    AND c.line_cd = p_line_cd
                                    AND c.iss_cd = p_iss_cd
                                    AND b.item_grp = p_item_grp
                                    AND b.currency_cd = p_currency_cd
                                    AND b.currency_rt = p_currency_rt
                                    AND TRUNC (a.eff_date) <= DECODE (NVL (a.endt_seq_no, 0), 0, TRUNC (a.eff_date), TRUNC (p_eff_date))
                                    AND TRUNC (NVL (a.endt_expiry_date, a.expiry_date)) >=
                                        DECODE (NVL (a.endt_seq_no, 0), 0, TRUNC (a.eff_date), TRUNC (p_eff_date)))
                      LOOP
                          IF v_prorate_flag = 3 
                          THEN 
                             FOR tax IN (SELECT *
                                           FROM giis_tax_charges
                                          WHERE iss_cd = p_iss_cd
                                            AND line_cd = p_line_cd
                                            AND tax_cd = p_tax_cd)
                             LOOP
                                 IF tax.tax_type = 'A' THEN
                                    v_prorate_tax := -(tax.tax_amount * (v_short_rt_percent/100));
                                 ELSIF tax.tax_type = 'R' THEN
                                    v_prorate_tax := (a2.tax_amt * (v_short_rt_percent/100));
                                 END IF;
                             END LOOP;
                             
                          ELSE
                             v_days_of_policy := TRUNC (a2.expiry_date) - TRUNC (a2.eff_date);
                             
                             IF v_prorate_flag = 1
                             THEN
                                v_days_of_policy := v_days_of_policy + a2.comp_sw;
                             END IF;

                             FOR aa IN (SELECT *
                                          FROM gipi_wpolbas
                                         WHERE par_id = p_par_id) 
                             LOOP
                                 IF v_comp_sw = 'Y'
                                 THEN
                                     v_no_of_days := (TRUNC (NVL(aa.endt_expiry_date, a2.expiry_date)) - TRUNC (v_eff_date)) + 1;   
                                 ELSIF v_comp_sw = 'M'
                                 THEN
                                     v_no_of_days := (TRUNC (NVL(aa.endt_expiry_date, a2.expiry_date)) - TRUNC (v_eff_date)) - 1;   
                                 ELSE
                                     v_no_of_days := TRUNC (NVL(aa.endt_expiry_date, a2.expiry_date)) - TRUNC (v_eff_date);   
                                 END IF;
                             END LOOP;

                             IF NVL (v_no_of_days, 0) > NVL (v_days_of_policy, 0)
                             THEN
                                 v_no_of_days := v_days_of_policy;
                             END IF;
                             
                             -- bonok :: 3.3.2016 :: UCPB SR 21494 :: for fixed rate taxes in manual prorate cancellation, computation will be (prorated prem * tax rate) 
                             IF v_new_tax_type = 'R' THEN
                                v_prorate_tax := v_tax_amt;
                             -- bonok :: 3.22.2016 :: UCPB SR 21494 :: to follow formula for tax_type 'N' for line PA
                             ELSIF v_new_tax_type = 'N' AND tax.tax_cd = giacp.n('DOC_STAMPS') AND v_line_cd = 'PA' THEN
                                v_prorate_tax := v_tax_amt;
                             ELSE
                                v_prorate_tax := v_prorate_tax + ((v_tax_amt / v_days_of_policy) * (v_no_of_days));
                             END IF;
                             
                             --v_prorate_tax := v_prorate_tax + ((v_tax_amt / v_days_of_policy) * (v_no_of_days));
                          END IF;
                      END LOOP; 
				  END LOOP;
			  END LOOP; 
          END LOOP;
                                     
        p_prorate_tax := v_prorate_tax;
        
    END get_prorate_tax2; -- Dren 12.15.2015 SR-0020357 : Wrong prorate computation for manual cancellation. - End
            
END compute_uwtaxes;
/


