<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd" >

<sqlMap namespace="GICLLossRatio">
	<resultMap id="Gicls204LineListing" class="com.geniisys.common.entity.GIISLine" >
	  	<result column="LINE_CD" 			property="lineCd" 			jdbcType="VARCHAR" />
	  	<result column="LINE_NAME"			property="lineName"			jdbcType="VARCHAR" />
	  	<result column="ROWNUM_"			property="rowNum" />
	  	<result column="COUNT_"				property="rowCount" />
  	</resultMap>
  	
  	<select id="getGicls204LineLOV"	resultMap="Gicls204LineListing" parameterClass="java.util.HashMap">  	
  		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT line_cd, line_name FROM TABLE(gicls204_pkg.get_line_gicls204_lov(#issCd#,#moduleId#,#userId#))
		          		  <isNotNull property="findText">
				         		WHERE (UPPER(line_cd) LIKE UPPER(#findText#) 
				         	 	   OR UPPER(line_name) LIKE UPPER(#findText#)
				         	   )
				          </isNotNull>
		          		  <isEqual property="sortColumn" compareValue="lineCd">
			              		ORDER BY line_cd
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="lineName">
			              		ORDER BY line_name
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>
		                  ) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE (gicls204_pkg.get_line_gicls204_lov(#issCd#,#moduleId#,#userId#))
		                  <isNotNull property="findText">
				         		WHERE (UPPER(line_cd) LIKE UPPER(#findText#) 
				         	 	   OR UPPER(line_name) LIKE UPPER(#findText#)
				         	   )
				          </isNotNull>
				          ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
  	</select>
  	
  	<resultMap id="Gicls204SublineListing" class="com.geniisys.common.entity.GIISSubline" >
	  	<result column="SUBLINE_CD" 		property="sublineCd"		jdbcType="VARCHAR" />
	  	<result column="SUBLINE_NAME"		property="sublineName"		jdbcType="VARCHAR" />
	  	<result column="ROWNUM_"			property="rowNum" />
	  	<result column="COUNT_"				property="rowCount" />
  	</resultMap>
  	
  	<select id="getGicls204SublineLOV"	resultMap="Gicls204SublineListing" parameterClass="java.util.HashMap">  	
  		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT subline_cd, subline_name FROM TABLE(gicls204_pkg.get_subline_gicls204_lov(#lineCd#))
		          		  <isNotNull property="findText">
				         		WHERE (UPPER(subline_cd) LIKE UPPER(#findText#) 
				         	 	   OR UPPER(subline_name) LIKE UPPER(#findText#)
				         	   )
				          </isNotNull>
		          		  <isEqual property="sortColumn" compareValue="sublineCd">
			              		ORDER BY subline_cd
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="sublineName">
			              		ORDER BY subline_name
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>
		                  ) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE (gicls204_pkg.get_subline_gicls204_lov(#lineCd#))
		                  <isNotNull property="findText">
				         		WHERE (UPPER(subline_cd) LIKE UPPER(#findText#) 
				         	 	   OR UPPER(subline_name) LIKE UPPER(#findText#)
				         	   )
				          </isNotNull>
				          ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
  	</select>
  	
  	<resultMap id="Gicls204IssListing" class="com.geniisys.common.entity.GIISISSource" >
	  	<result column="ISS_CD" 			property="issCd"			jdbcType="VARCHAR" />
	  	<result column="ISS_NAME"			property="issName"			jdbcType="VARCHAR" />
	  	<result column="ROWNUM_"			property="rowNum" />
	  	<result column="COUNT_"				property="rowCount" />
  	</resultMap>
  	
  	<select id="getGicls204IssLOV"	resultMap="Gicls204IssListing" parameterClass="java.util.HashMap">  	
  		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT iss_cd, iss_name FROM TABLE(gicls204_pkg.get_iss_gicls204_lov(#lineCd#,#moduleId#,#userId#))
		          		  <isNotNull property="findText">
				         		WHERE (UPPER(iss_cd) LIKE UPPER(#findText#) 
				         	 	   OR UPPER(iss_name) LIKE UPPER(#findText#)
				         	   )
				          </isNotNull>
		          		  <isEqual property="sortColumn" compareValue="issCd">
			              		ORDER BY iss_cd
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="issName">
			              		ORDER BY iss_name
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>
		                  ) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE (gicls204_pkg.get_iss_gicls204_lov(#lineCd#,#moduleId#,#userId#))
		                  <isNotNull property="findText">
				         		WHERE (UPPER(iss_cd) LIKE UPPER(#findText#) 
				         	 	   OR UPPER(iss_name) LIKE UPPER(#findText#)
				         	   )
				          </isNotNull>
				          ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
  	</select>
  	
  	<resultMap id="Gicls204IntmListing" class="com.geniisys.common.entity.GIISIntermediary" >
	  	<result column="INTM_NO" 			property="intmNo"			jdbcType="VARCHAR" />
	  	<result column="INTM_NAME"			property="intmName"			jdbcType="VARCHAR" />
	  	<result column="ROWNUM_"			property="rowNum" />
	  	<result column="COUNT_"				property="rowCount" />
  	</resultMap>
  	
  	<select id="getGicls204IntmLOV"	resultMap="Gicls204IntmListing" parameterClass="java.util.HashMap">  	
  		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT intm_no, intm_name FROM TABLE(gicls204_pkg.get_intm_gicls204_lov)
		          		  <isNotNull property="findText">
				         		WHERE (UPPER(intm_no) LIKE UPPER(#findText#) 
				         	 	   OR UPPER(intm_name) LIKE UPPER(#findText#)
				         	   )
				          </isNotNull>
		          		  <isEqual property="sortColumn" compareValue="intmNo">
			              		ORDER BY intm_no
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="intmName">
			              		ORDER BY intm_name
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>
		                  ) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE (gicls204_pkg.get_intm_gicls204_lov)
		                  <isNotNull property="findText">
				         		WHERE (UPPER(intm_no) LIKE UPPER(#findText#) 
				         	 	   OR UPPER(intm_name) LIKE UPPER(#findText#)
				         	   )
				          </isNotNull>
				          ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
  	</select>
  	
  	<resultMap id="Gicls204AssdListing" class="com.geniisys.common.entity.GIISAssured" >
	  	<result column="ASSD_NO" 			property="assdNo"			jdbcType="VARCHAR" />
	  	<result column="ASSD_NAME"			property="assdName"			jdbcType="VARCHAR" />
	  	<result column="ROWNUM_"			property="rowNum" />
	  	<result column="COUNT_"				property="rowCount" />
  	</resultMap>
  	
  	<select id="getGicls204AssdLOV"	resultMap="Gicls204AssdListing" parameterClass="java.util.HashMap">  	
  		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT assd_no, assd_name FROM TABLE(gicls204_pkg.get_assd_gicls204_lov)
		          		  <isNotNull property="findText">
				         		WHERE (UPPER(assd_no) LIKE UPPER(#findText#) 
				         	 	   OR UPPER(assd_name) LIKE UPPER(#findText#)
				         	   )
				          </isNotNull>
		          		  <isEqual property="sortColumn" compareValue="assdNo">
			              		ORDER BY assd_no
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="assdName">
			              		ORDER BY assd_name
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>
		                  ) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE (gicls204_pkg.get_assd_gicls204_lov)
		                  <isNotNull property="findText">
				         		WHERE (UPPER(assd_no) LIKE UPPER(#findText#) 
				         	 	   OR UPPER(assd_name) LIKE UPPER(#findText#)
				         	   )
				          </isNotNull>
				          ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
  	</select>
  	
  	<resultMap id="Gicls204PerilListing" class="com.geniisys.common.entity.GIISPeril" >
	  	<result column="PERIL_CD" 			property="perilCd"			jdbcType="VARCHAR" />
	  	<result column="PERIL_NAME"			property="perilName"		jdbcType="VARCHAR" />
	  	<result column="ROWNUM_"			property="rowNum" />
	  	<result column="COUNT_"				property="rowCount" />
  	</resultMap>
  	
  	<select id="getGicls204PerilLOV"	resultMap="Gicls204PerilListing" parameterClass="java.util.HashMap">  	
  		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT peril_cd, peril_name FROM TABLE(gicls204_pkg.get_peril_gicls204_lov(#lineCd#))
		          		  <isNotNull property="findText">
				         		WHERE (UPPER(peril_cd) LIKE UPPER(#findText#) 
				         	 	   OR UPPER(peril_name) LIKE UPPER(#findText#)
				         	   )
				          </isNotNull>
		          		  <isEqual property="sortColumn" compareValue="perilCd">
			              		ORDER BY peril_cd
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="perilName">
			              		ORDER BY peril_name
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>
		                  ) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE (gicls204_pkg.get_peril_gicls204_lov(#lineCd#))
		                  <isNotNull property="findText">
				         		WHERE (UPPER(peril_cd) LIKE UPPER(#findText#) 
				         	 	   OR UPPER(peril_name) LIKE UPPER(#findText#)
				         	   )
				          </isNotNull>
				          ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
  	</select>
  	
  	<select id="validateAssdNoGicls204" resultClass="java.lang.String">
  		SELECT gicls204_pkg.validate_assd_no_gicls204(#assdNo#) from dual
  	</select>
  	
  	<select id="validatePerilCdGicls204" resultClass="java.lang.String">
  		SELECT gicls204_pkg.validate_peril_cd_gicls204(#lineCd#,#perilCd#) from dual
  	</select>
  	
  	<parameterMap id="extractGicls204Map" class="map">
		<parameter property="assdNo"			jdbcType="INTEGER"		javaType="java.lang.Integer"	mode="IN" />
		<parameter property="date"				jdbcType="DATE"			javaType="java.util.Date"		mode="IN" />
		<parameter property="date24th"			jdbcType="VARCHAR"		javaType="java.lang.String"		mode="IN" />
		<parameter property="extractCat"		jdbcType="VARCHAR"		javaType="java.lang.String"		mode="IN" />
		<parameter property="extractProc"		jdbcType="VARCHAR"		javaType="java.lang.String"		mode="IN" />
		<parameter property="intmNo"			jdbcType="INTEGER"		javaType="java.lang.Integer"	mode="IN" />
		<parameter property="issCd"				jdbcType="VARCHAR"		javaType="java.lang.String"		mode="IN" />
		<parameter property="issueOption"		jdbcType="VARCHAR"		javaType="java.lang.String"		mode="IN" />
		<parameter property="lineCd"			jdbcType="VARCHAR"		javaType="java.lang.String"		mode="IN" />
		<parameter property="perilCd"			jdbcType="INTEGER"		javaType="java.lang.Integer"	mode="IN" />
		<parameter property="prntDate"			jdbcType="VARCHAR"		javaType="java.lang.String"		mode="IN" />
		<parameter property="prntOption"		jdbcType="VARCHAR"		javaType="java.lang.String"		mode="IN" />
		<parameter property="sublineCd"			jdbcType="VARCHAR"		javaType="java.lang.String"		mode="IN" />
		<parameter property="userId"			jdbcType="VARCHAR"		javaType="java.lang.String"		mode="IN" />
		<parameter property="count"				jdbcType="INTEGER"		javaType="java.lang.Integer"	mode="OUT" />
		<parameter property="curr24"			jdbcType="VARCHAR"		javaType="java.lang.String"		mode="OUT" />
		<parameter property="curr124"			jdbcType="VARCHAR"		javaType="java.lang.String"		mode="OUT" />
		<parameter property="currOsSw"			jdbcType="VARCHAR"		javaType="java.lang.String"		mode="OUT" />
		<parameter property="currPremSw"		jdbcType="VARCHAR"		javaType="java.lang.String"		mode="OUT" />
		<parameter property="lossPaidSw"		jdbcType="VARCHAR"		javaType="java.lang.String"		mode="OUT" />
		<parameter property="prev24"			jdbcType="VARCHAR"		javaType="java.lang.String"		mode="OUT" />
		<parameter property="prev124"			jdbcType="VARCHAR"		javaType="java.lang.String"		mode="OUT" />
		<parameter property="prevOsSw"			jdbcType="VARCHAR"		javaType="java.lang.String"		mode="OUT" />
		<parameter property="prevPremSw"		jdbcType="VARCHAR"		javaType="java.lang.String"		mode="OUT" />
		<parameter property="prevRecSw"			jdbcType="VARCHAR"		javaType="java.lang.String"		mode="OUT" />
		<parameter property="prevYear"			jdbcType="VARCHAR"		javaType="java.lang.String"		mode="OUT" />
		<parameter property="currRecSw"			jdbcType="VARCHAR"		javaType="java.lang.String"		mode="OUT" />
		<parameter property="sessionId"			jdbcType="INTEGER"		javaType="java.lang.Integer"	mode="OUT" />
	</parameterMap>
	
	<procedure id="extractGicls204" parameterMap="extractGicls204Map">
		BEGIN
			gicls204_pkg.extract_gicls204(?,?,?,?,?,?,?,?,?,?, <!-- 10 -->
									  	  ?,?,?,?,?,?,?,?,?,?, <!-- 20 -->
										  ?,?,?,?,?,?,?,?);
		END;
	</procedure>
	
	<parameterMap id="getDetailReportDateMap" class="map">
		<parameter property="date"				jdbcType="VARCHAR"		javaType="java.lang.String"		mode="INOUT" />
		<parameter property="extractProc"		jdbcType="VARCHAR"		javaType="java.lang.String"		mode="IN" />
		<parameter property="curr1Date"			jdbcType="VARCHAR"		javaType="java.lang.String"		mode="OUT" />
		<parameter property="curr2Date"			jdbcType="VARCHAR"		javaType="java.lang.String"		mode="OUT" />
		<parameter property="prevYear"			jdbcType="VARCHAR"		javaType="java.lang.String"		mode="OUT" />
		<parameter property="currYear"			jdbcType="VARCHAR"		javaType="java.lang.String"		mode="OUT" />
		<parameter property="prev1Date"			jdbcType="VARCHAR"		javaType="java.lang.String"		mode="OUT" />
		<parameter property="prev2Date"			jdbcType="VARCHAR"		javaType="java.lang.String"		mode="OUT" />
	</parameterMap>
	
	<procedure id="getDetailReportDate" parameterMap="getDetailReportDateMap">
		BEGIN
			gicls204_pkg.get_detail_report_date(?,?,?,?,?,?,?,?);
		END;
	</procedure>
	
	<resultMap class="java.util.HashMap" id="giclLossRatioSummaryMap"  extends="BaseEntity.TableGridResultMap">
		<result column="loss_paid_amt" 			property="lossPaidAmt" />
		<result column="curr_prem_amt" 			property="currPremAmt" />
		<result column="prev_loss_res" 			property="prevLossRes" />
		<result column="curr_loss_res" 			property="currLossRes" />
		<result column="curr_prem_res" 			property="currPremRes" />
		<result column="prev_prem_res" 			property="prevPremRes" />
		<result column="premium_earned" 		property="premiumEarned" />
		<result column="losses_incurred" 		property="lossesIncurred" />
		<result column="loss_ratio" 			property="lossRatio" />
		<result column="display" 				property="display" />
		<result column="display_label"			property="displayLabel" />
		<result column="sum_loss_paid_amt" 		property="sumLossPaidAmt" />
		<result column="sum_curr_prem_amt" 		property="sumCurrPremAmt" />
		<result column="sum_prev_loss_res" 		property="sumPrevLossRes" />
		<result column="sum_curr_loss_res" 		property="sumCurrLossRes" />
		<result column="sum_curr_prem_res" 		property="sumCurrPremRes" />
		<result column="sum_prev_prem_res" 		property="sumPrevPremRes" />
		<result column="sum_premium_earned" 	property="sumPremiumEarned" />
		<result column="sum_losses_incurred" 	property="sumLossesIncurred" />
		<result column="sum_loss_ratio" 		property="sumLossRatio" />
		<result column="rownum_" 				property="rowNum" />
		<result column="count_" 				property="rowCount" />
	</resultMap>
	
	<select id="getLossRatioSummaryList" resultMap="giclLossRatioSummaryMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, a.*,
		               (SELECT SUM(loss_paid_amt) 
		                  FROM TABLE (gicls205_pkg.get_gicl_loss_ratio_ext(#sessionId#,#prntOption#))
		                  ) sum_loss_paid_amt,
		               (SELECT SUM(curr_prem_amt) 
		                  FROM TABLE (gicls205_pkg.get_gicl_loss_ratio_ext(#sessionId#,#prntOption#))
		                  ) sum_curr_prem_amt,
		               (SELECT SUM(prev_loss_res) 
		                  FROM TABLE (gicls205_pkg.get_gicl_loss_ratio_ext(#sessionId#,#prntOption#))
		                  ) sum_prev_loss_res,
		               (SELECT SUM(curr_loss_res) 
		                  FROM TABLE (gicls205_pkg.get_gicl_loss_ratio_ext(#sessionId#,#prntOption#))
		                  ) sum_curr_loss_res,
		               (SELECT SUM(curr_prem_res) 
		                  FROM TABLE (gicls205_pkg.get_gicl_loss_ratio_ext(#sessionId#,#prntOption#))
		                  ) sum_curr_prem_res,
		               (SELECT SUM(prev_prem_res) 
		                  FROM TABLE (gicls205_pkg.get_gicl_loss_ratio_ext(#sessionId#,#prntOption#))
		                  ) sum_prev_prem_res,
		               (SELECT SUM(premium_earned) 
		                  FROM TABLE (gicls205_pkg.get_gicl_loss_ratio_ext(#sessionId#,#prntOption#))
		                  ) sum_premium_earned,
		               (SELECT SUM(losses_incurred) 
		                  FROM TABLE (gicls205_pkg.get_gicl_loss_ratio_ext(#sessionId#,#prntOption#))
		                  ) sum_losses_incurred,		                  
		               (SELECT (ROUND((SUM(losses_incurred)/SUM(premium_earned))*100,4)) <!-- Dren Niebres 06.03.2016 SR-21428 -->
		                  FROM TABLE (gicls205_pkg.get_gicl_loss_ratio_ext(#sessionId#,#prntOption#))
		                  ) sum_loss_ratio
		          FROM (SELECT * 
		                  FROM TABLE (gicls205_pkg.get_gicl_loss_ratio_ext(#sessionId#,#prntOption#))
		                  <isEqual property="sortColumn" compareValue="display">
			              		ORDER BY display
			              </isEqual>
		                  <isEqual property="sortColumn" compareValue="lossPaidAmt">
			              		ORDER BY loss_paid_amt
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="currLossRes">
			              		ORDER BY curr_loss_res
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="prevLossRes">
			              		ORDER BY prev_loss_res
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="currPremAmt">
			              		ORDER BY curr_prem_amt
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="currPremRes">
			              		ORDER BY curr_prem_res
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="prevPremRes">
			              		ORDER BY prev_prem_res
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="lossesIncurred">
			              		ORDER BY losses_incurred
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="premiumEarned">
			              		ORDER BY premium_earned
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="lossRatio">
			              		ORDER BY loss_ratio
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>) a, 
		               (SELECT count(*) count_
		                  FROM TABLE (gicls205_pkg.get_gicl_loss_ratio_ext(#sessionId#,#prntOption#))) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#	
	</select>
	
	<resultMap class="java.util.HashMap" id="giclPremWrittenCurrPrlMap"  extends="BaseEntity.TableGridResultMap">
		<result column="policy_no" 				property="policyNo" />
		<result column="prem_amt" 				property="premAmt" />
		<result column="incept_date" 			property="inceptDate" />
		<result column="expiry_date"			property="expiryDate" />
		<result column="tsi_amt" 				property="tsiAmt" />
		<result column="nbt_date" 				property="nbtDate" />
		<result column="nbt_assured" 			property="nbtAssured" />
		<result column="nbt_peril_name" 		property="nbtPerilName" />
		<result column="rownum_" 				property="rowNum" />
		<result column="count_" 				property="rowCount" />
	</resultMap>
	
	<select id="getPremiumsWrittenCurrPrl" resultMap="giclPremWrittenCurrPrlMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, a.*
		          FROM (SELECT * 
		                  FROM TABLE (gicls205_pkg.get_lr_curr_prem_prl(#sessionId#,#prntDate#))
		                  <isEqual property="sortColumn" compareValue="policyNo">
			              		ORDER BY policy_no
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtAssured">
			              		ORDER BY nbt_assured
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtPerilName">
			              		ORDER BY nbt_peril_name
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="inceptDate">
			              		ORDER BY incept_date
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="expiryDate">
			              		ORDER BY expiry_date
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtDate">
			              		ORDER BY nbt_date
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="tsiAmt">
			              		ORDER BY tsi_amt
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="premAmt">
			              		ORDER BY prem_amt
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>) a, 
		               (SELECT count(*) count_
		                  FROM TABLE (gicls205_pkg.get_lr_curr_prem_prl(#sessionId#,#prntDate#))) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#	
	</select>
	
	<resultMap class="java.util.HashMap" id="giclPremWrittenCurrIntmMap"  extends="BaseEntity.TableGridResultMap">
		<result column="policy_no" 				property="policyNo" />
		<result column="prem_amt" 				property="premAmt" />
		<result column="nbt_incept_date" 		property="nbtInceptDate" />
		<result column="nbt_expiry_date"		property="nbtExpiryDate" />
		<result column="nbt_tsi_amt" 			property="nbtTsiAmt" />
		<result column="nbt_date" 				property="nbtDate" />
		<result column="nbt_assured" 			property="nbtAssured" />
		<result column="nbt_intm" 				property="nbtIntm" />
		<result column="rownum_" 				property="rowNum" />
		<result column="count_" 				property="rowCount" />
	</resultMap>
	
	<select id="getPremiumsWrittenCurrIntm" resultMap="giclPremWrittenCurrIntmMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, a.*
		          FROM (SELECT * 
		                  FROM TABLE (gicls205_pkg.get_lr_curr_prem_intm(#sessionId#,#prntDate#))
		                  <isEqual property="sortColumn" compareValue="policyNo">
			              		ORDER BY policy_no
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtAssured">
			              		ORDER BY nbt_assured
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtIntm">
			              		ORDER BY nbt_intm
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtInceptDate">
			              		ORDER BY nbt_incept_date
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtExpiryDate">
			              		ORDER BY nbt_expiry_date
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtDate">
			              		ORDER BY nbt_date
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtTsiAmt">
			              		ORDER BY nbt_tsi_amt
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="premAmt">
			              		ORDER BY prem_amt
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>) a, 
		               (SELECT count(*) count_
		                  FROM TABLE (gicls205_pkg.get_lr_curr_prem_intm(#sessionId#,#prntDate#))) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#	
	</select>
	
	<resultMap class="java.util.HashMap" id="giclPremWrittenCurrMap"  extends="BaseEntity.TableGridResultMap">
		<result column="policy_no" 				property="policyNo" />
		<result column="prem_amt" 				property="premAmt" />
		<result column="nbt_incept_date" 		property="nbtInceptDate" />
		<result column="nbt_expiry_date"		property="nbtExpiryDate" />
		<result column="nbt_tsi_amt" 			property="nbtTsiAmt" />
		<result column="nbt_date" 				property="nbtDate" />
		<result column="nbt_assured" 			property="nbtAssured" />
		<result column="rownum_" 				property="rowNum" />
		<result column="count_" 				property="rowCount" />
	</resultMap>
	
	<select id="getPremiumsWrittenCurr" resultMap="giclPremWrittenCurrMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, a.*
		          FROM (SELECT * 
		                  FROM TABLE (gicls205_pkg.get_lr_curr_prem(#sessionId#,#prntDate#))
		                  <isEqual property="sortColumn" compareValue="policyNo">
			              		ORDER BY policy_no
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtAssured">
			              		ORDER BY nbt_assured
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtInceptDate">
			              		ORDER BY nbt_incept_date
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtExpiryDate">
			              		ORDER BY nbt_expiry_date
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtDate">
			              		ORDER BY nbt_date
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtTsiAmt">
			              		ORDER BY nbt_tsi_amt
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="premAmt">
			              		ORDER BY prem_amt
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>) a, 
		               (SELECT count(*) count_
		                  FROM TABLE (gicls205_pkg.get_lr_curr_prem(#sessionId#,#prntDate#))) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#	
	</select>
	
	<select id="getPremiumsWrittenPrevPrl" resultMap="giclPremWrittenCurrPrlMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, a.*
		          FROM (SELECT * 
		                  FROM TABLE (gicls205_pkg.get_lr_prev_prem_prl(#sessionId#,#prntDate#))
		                  <isEqual property="sortColumn" compareValue="policyNo">
			              		ORDER BY policy_no
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtAssured">
			              		ORDER BY nbt_assured
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtPerilName">
			              		ORDER BY nbt_peril_name
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="inceptDate">
			              		ORDER BY incept_date
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="expiryDate">
			              		ORDER BY expiry_date
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtDate">
			              		ORDER BY nbt_date
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="tsiAmt">
			              		ORDER BY tsi_amt
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="premAmt">
			              		ORDER BY prem_amt
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>) a, 
		               (SELECT count(*) count_
		                  FROM TABLE (gicls205_pkg.get_lr_prev_prem_prl(#sessionId#,#prntDate#))) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#	
	</select>
	
	<select id="getPremiumsWrittenPrevIntm" resultMap="giclPremWrittenCurrIntmMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, a.*
		          FROM (SELECT * 
		                  FROM TABLE (gicls205_pkg.get_lr_prev_prem_intm(#sessionId#,#prntDate#))
		                  <isEqual property="sortColumn" compareValue="policyNo">
			              		ORDER BY policy_no
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtAssured">
			              		ORDER BY nbt_assured
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtIntm">
			              		ORDER BY nbt_intm
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtInceptDate">
			              		ORDER BY nbt_incept_date
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtExpiryDate">
			              		ORDER BY nbt_expiry_date
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtDate">
			              		ORDER BY nbt_date
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtTsiAmt">
			              		ORDER BY nbt_tsi_amt
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="premAmt">
			              		ORDER BY prem_amt
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>) a, 
		               (SELECT count(*) count_
		                  FROM TABLE (gicls205_pkg.get_lr_prev_prem_intm(#sessionId#,#prntDate#))) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#	
	</select>
	
	<select id="getPremiumsWrittenPrev" resultMap="giclPremWrittenCurrMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, a.*
		          FROM (SELECT * 
		                  FROM TABLE (gicls205_pkg.get_lr_prev_prem(#sessionId#,#prntDate#))
		                  <isEqual property="sortColumn" compareValue="policyNo">
			              		ORDER BY policy_no
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtAssured">
			              		ORDER BY nbt_assured
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtInceptDate">
			              		ORDER BY nbt_incept_date
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtExpiryDate">
			              		ORDER BY nbt_expiry_date
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtDate">
			              		ORDER BY nbt_date
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtTsiAmt">
			              		ORDER BY nbt_tsi_amt
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="premAmt">
			              		ORDER BY prem_amt
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>) a, 
		               (SELECT count(*) count_
		                  FROM TABLE (gicls205_pkg.get_lr_prev_prem(#sessionId#,#prntDate#))) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#	
	</select>
	
	<resultMap class="java.util.HashMap" id="giclOutLossPrlMap"  extends="BaseEntity.TableGridResultMap">
		<result column="nbt_claim_no" 			property="nbtClaimNo" />
		<result column="nbt_assured" 			property="nbtAssured" />
		<result column="nbt_peril_name" 		property="nbtPerilName" />
		<result column="nbt_loss_date"			property="nbtLossDate" />
		<result column="nbt_file_date" 			property="nbtFileDate" />
		<result column="os_amt" 				property="osAmt" />
	</resultMap>
      
	<select id="getOutLossCurrPrl" resultMap="giclOutLossPrlMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, a.*
		          FROM (SELECT * 
		                  FROM TABLE (gicls205_pkg.get_lr_curr_os_prl(#sessionId#))
		                  <isEqual property="sortColumn" compareValue="nbtClaimNo">
			              		ORDER BY nbt_claim_no
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtAssured">
			              		ORDER BY nbt_assured
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtPerilName">
			              		ORDER BY nbt_peril_name
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtLossDate">
			              		ORDER BY nbt_loss_date
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtFileDate">
			              		ORDER BY nbt_file_date
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="osAmt">
			              		ORDER BY os_amt
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>) a, 
		               (SELECT count(*) count_
		                  FROM TABLE (gicls205_pkg.get_lr_curr_os_prl(#sessionId#))) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#	
	</select>
	
	<resultMap class="java.util.HashMap" id="giclOutLossIntmMap"  extends="BaseEntity.TableGridResultMap">
		<result column="nbt_claim_no" 			property="nbtClaimNo" />
		<result column="nbt_assured" 			property="nbtAssured" />
		<result column="nbt_intm" 				property="nbtIntm" />
		<result column="nbt_loss_date"			property="nbtLossDate" />
		<result column="nbt_file_date" 			property="nbtFileDate" />
		<result column="os_amt" 				property="osAmt" />
	</resultMap>
	
	<select id="getOutLossCurrIntm" resultMap="giclOutLossIntmMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, a.*
		          FROM (SELECT * 
		                  FROM TABLE (gicls205_pkg.get_lr_curr_os_intm(#sessionId#))
		                  <isEqual property="sortColumn" compareValue="nbtClaimNo">
			              		ORDER BY nbt_claim_no
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtAssured">
			              		ORDER BY nbt_assured
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtIntm">
			              		ORDER BY nbt_intm
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtLossDate">
			              		ORDER BY nbt_loss_date
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtFileDate">
			              		ORDER BY nbt_file_date
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="osAmt">
			              		ORDER BY os_amt
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>) a, 
		               (SELECT count(*) count_
		                  FROM TABLE (gicls205_pkg.get_lr_curr_os_intm(#sessionId#))) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#	
	</select>
	
	<resultMap class="java.util.HashMap" id="giclOutLossMap"  extends="BaseEntity.TableGridResultMap">
		<result column="nbt_claim_no" 			property="nbtClaimNo" />
		<result column="nbt_assured" 			property="nbtAssured" />
		<result column="nbt_loss_date"			property="nbtLossDate" />
		<result column="nbt_file_date" 			property="nbtFileDate" />
		<result column="os_amt" 				property="osAmt" />
	</resultMap>
	
	<select id="getOutLossCurr" resultMap="giclOutLossMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, a.*
		          FROM (SELECT * 
		                  FROM TABLE (gicls205_pkg.get_lr_curr_os(#sessionId#))
		                  <isEqual property="sortColumn" compareValue="nbtClaimNo">
			              		ORDER BY nbt_claim_no
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtAssured">
			              		ORDER BY nbt_assured
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtLossDate">
			              		ORDER BY nbt_loss_date
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtFileDate">
			              		ORDER BY nbt_file_date
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="osAmt">
			              		ORDER BY os_amt
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>) a, 
		               (SELECT count(*) count_
		                  FROM TABLE (gicls205_pkg.get_lr_curr_os(#sessionId#))) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#	
	</select>
	
	<select id="getOutLossPrevPrl" resultMap="giclOutLossPrlMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, a.*
		          FROM (SELECT * 
		                  FROM TABLE (gicls205_pkg.get_lr_prev_os_prl(#sessionId#))
		                  <isEqual property="sortColumn" compareValue="nbtClaimNo">
			              		ORDER BY nbt_claim_no
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtAssured">
			              		ORDER BY nbt_assured
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtPerilName">
			              		ORDER BY nbt_peril_name
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtLossDate">
			              		ORDER BY nbt_loss_date
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtFileDate">
			              		ORDER BY nbt_file_date
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="osAmt">
			              		ORDER BY os_amt
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>) a, 
		               (SELECT count(*) count_
		                  FROM TABLE (gicls205_pkg.get_lr_prev_os_prl(#sessionId#))) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#	
	</select>
	
	<select id="getOutLossPrevIntm" resultMap="giclOutLossIntmMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, a.*
		          FROM (SELECT * 
		                  FROM TABLE (gicls205_pkg.get_lr_prev_os_intm(#sessionId#))
		                  <isEqual property="sortColumn" compareValue="nbtClaimNo">
			              		ORDER BY nbt_claim_no
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtAssured">
			              		ORDER BY nbt_assured
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtIntm">
			              		ORDER BY nbt_intm
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtLossDate">
			              		ORDER BY nbt_loss_date
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtFileDate">
			              		ORDER BY nbt_file_date
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="osAmt">
			              		ORDER BY os_amt
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>) a, 
		               (SELECT count(*) count_
		                  FROM TABLE (gicls205_pkg.get_lr_prev_os_intm(#sessionId#))) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#	
	</select>
	
	<select id="getOutLossPrev" resultMap="giclOutLossMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, a.*
		          FROM (SELECT * 
		                  FROM TABLE (gicls205_pkg.get_lr_prev_os(#sessionId#))
		                  <isEqual property="sortColumn" compareValue="nbtClaimNo">
			              		ORDER BY nbt_claim_no
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtAssured">
			              		ORDER BY nbt_assured
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtLossDate">
			              		ORDER BY nbt_loss_date
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtFileDate">
			              		ORDER BY nbt_file_date
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="osAmt">
			              		ORDER BY os_amt
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>) a, 
		               (SELECT count(*) count_
		                  FROM TABLE (gicls205_pkg.get_lr_prev_os(#sessionId#))) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#	
	</select>
	
	<resultMap class="java.util.HashMap" id="giclLossPaidPrlMap"  extends="BaseEntity.TableGridResultMap">
		<result column="nbt_claim_no" 			property="nbtClaimNo" />
		<result column="nbt_assured" 			property="nbtAssured" />
		<result column="nbt_peril_name" 		property="nbtPerilName" />
		<result column="nbt_loss_date"			property="nbtLossDate" />
		<result column="loss_paid" 				property="lossPaid" />
	</resultMap>
      
	<select id="getLossPaidPrl" resultMap="giclLossPaidPrlMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, a.*
		          FROM (SELECT * 
		                  FROM TABLE (gicls205_pkg.get_lr_loss_paid_prl(#sessionId#))
		                  <isEqual property="sortColumn" compareValue="nbtClaimNo">
			              		ORDER BY nbt_claim_no
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtAssured">
			              		ORDER BY nbt_assured
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtPerilName">
			              		ORDER BY nbt_peril_name
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtLossDate">
			              		ORDER BY nbt_loss_date
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="lossPaid">
			              		ORDER BY loss_paid
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>) a, 
		               (SELECT count(*) count_
		                  FROM TABLE (gicls205_pkg.get_lr_loss_paid_prl(#sessionId#))) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#	
	</select>
	
	<resultMap class="java.util.HashMap" id="giclLossPaidIntmMap"  extends="BaseEntity.TableGridResultMap">
		<result column="nbt_claim_no" 			property="nbtClaimNo" />
		<result column="nbt_assured" 			property="nbtAssured" />
		<result column="nbt_intm" 				property="nbtIntm" />
		<result column="nbt_loss_date"			property="nbtLossDate" />
		<result column="loss_paid" 				property="lossPaid" />
	</resultMap>
      
	<select id="getLossPaidIntm" resultMap="giclLossPaidIntmMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, a.*
		          FROM (SELECT * 
		                  FROM TABLE (gicls205_pkg.get_lr_loss_paid_intm(#sessionId#))
		                  <isEqual property="sortColumn" compareValue="nbtClaimNo">
			              		ORDER BY nbt_claim_no
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtAssured">
			              		ORDER BY nbt_assured
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtIntm">
			              		ORDER BY nbt_intm
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtLossDate">
			              		ORDER BY nbt_loss_date
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="lossPaid">
			              		ORDER BY loss_paid
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>) a, 
		               (SELECT count(*) count_
		                  FROM TABLE (gicls205_pkg.get_lr_loss_paid_intm(#sessionId#))) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#	
	</select>
	
	<resultMap class="java.util.HashMap" id="giclLossPaidMap"  extends="BaseEntity.TableGridResultMap">
		<result column="nbt_claim_no" 			property="nbtClaimNo" />
		<result column="nbt_assured" 			property="nbtAssured" />
		<result column="nbt_loss_date"			property="nbtLossDate" />
		<result column="loss_paid" 				property="lossPaid" />
	</resultMap>
      
	<select id="getLossPaid" resultMap="giclLossPaidMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, a.*
		          FROM (SELECT * 
		                  FROM TABLE (gicls205_pkg.get_lr_loss_paid(#sessionId#))
		                  <isEqual property="sortColumn" compareValue="nbtClaimNo">
			              		ORDER BY nbt_claim_no
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtAssured">
			              		ORDER BY nbt_assured
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtLossDate">
			              		ORDER BY nbt_loss_date
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="lossPaid">
			              		ORDER BY loss_paid
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>) a, 
		               (SELECT count(*) count_
		                  FROM TABLE (gicls205_pkg.get_lr_loss_paid(#sessionId#))) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#	
	</select>
	
	<resultMap class="java.util.HashMap" id="giclLossRecPrlMap"  extends="BaseEntity.TableGridResultMap">
		<result column="nbt_rec_no" 			property="nbtRecNo" />
		<result column="nbt_assured" 			property="nbtAssured" />
		<result column="nbt_peril_name"			property="nbtPerilName" />
		<result column="nbt_rec_type" 			property="nbtRecType" />
		<result column="nbt_date_recovered" 	property="nbtDateRecovered" />
		<result column="recovered_amt" 			property="recoveredAmt" />
	</resultMap>
	
	<select id="getLossRecCurrPrl" resultMap="giclLossRecPrlMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, a.*
		          FROM (SELECT * 
		                  FROM TABLE (gicls205_pkg.get_lr_curr_rec_prl(#sessionId#))
		                  <isEqual property="sortColumn" compareValue="nbtClaimNo">
			              		ORDER BY nbt_rec_no
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtAssured">
			              		ORDER BY nbt_assured
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtPerilName">
			              		ORDER BY nbt_peril_name
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtRecType">
			              		ORDER BY nbt_rec_type
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtDateRecovered">
			              		ORDER BY nbt_date_recovered
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="recoveredAmt">
			              		ORDER BY recovered_amt
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>) a, 
		               (SELECT count(*) count_
		                  FROM TABLE (gicls205_pkg.get_lr_curr_rec_prl(#sessionId#))) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#	
	</select>
	
	<resultMap class="java.util.HashMap" id="giclLossRecIntmMap"  extends="BaseEntity.TableGridResultMap">
		<result column="nbt_rec_no" 			property="nbtRecNo" />
		<result column="nbt_assured" 			property="nbtAssured" />
		<result column="nbt_intm"				property="nbtIntm" />
		<result column="nbt_rec_type" 			property="nbtRecType" />
		<result column="nbt_date_recovered" 	property="nbtDateRecovered" />
		<result column="recovered_amt" 			property="recoveredAmt" />
	</resultMap>
	
	<select id="getLossRecCurrIntm" resultMap="giclLossRecIntmMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, a.*
		          FROM (SELECT * 
		                  FROM TABLE (gicls205_pkg.get_lr_curr_rec_intm(#sessionId#))
		                  <isEqual property="sortColumn" compareValue="nbtClaimNo">
			              		ORDER BY nbt_rec_no
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtAssured">
			              		ORDER BY nbt_assured
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtIntm">
			              		ORDER BY nbt_intm
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtRecType">
			              		ORDER BY nbt_rec_type
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtDateRecovered">
			              		ORDER BY nbt_date_recovered
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="recoveredAmt">
			              		ORDER BY recovered_amt
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>) a, 
		               (SELECT count(*) count_
		                  FROM TABLE (gicls205_pkg.get_lr_curr_rec_intm(#sessionId#))) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#	
	</select>
	
	<resultMap class="java.util.HashMap" id="giclLossRecMap"  extends="BaseEntity.TableGridResultMap">
		<result column="nbt_rec_no" 			property="nbtRecNo" />
		<result column="nbt_assured" 			property="nbtAssured" />
		<result column="nbt_rec_type" 			property="nbtRecType" />
		<result column="nbt_date_recovered" 	property="nbtDateRecovered" />
		<result column="recovered_amt" 			property="recoveredAmt" />
	</resultMap>
	
	<select id="getLossRecCurr" resultMap="giclLossRecMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, a.*
		          FROM (SELECT * 
		                  FROM TABLE (gicls205_pkg.get_lr_curr_rec(#sessionId#))
		                  <isEqual property="sortColumn" compareValue="nbtClaimNo">
			              		ORDER BY nbt_rec_no
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtAssured">
			              		ORDER BY nbt_assured
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtRecType">
			              		ORDER BY nbt_rec_type
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtDateRecovered">
			              		ORDER BY nbt_date_recovered
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="recoveredAmt">
			              		ORDER BY recovered_amt
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>) a, 
		               (SELECT count(*) count_
		                  FROM TABLE (gicls205_pkg.get_lr_curr_rec(#sessionId#))) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#	
	</select>
	
	<select id="getLossRecPrlPrev" resultMap="giclLossRecPrlMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, a.*
		          FROM (SELECT * 
		                  FROM TABLE (gicls205_pkg.get_lr_prev_rec_prl(#sessionId#))
		                  <isEqual property="sortColumn" compareValue="nbtClaimNo">
			              		ORDER BY nbt_rec_no
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtAssured">
			              		ORDER BY nbt_assured
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtPerilName">
			              		ORDER BY nbt_peril_name
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtRecType">
			              		ORDER BY nbt_rec_type
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtDateRecovered">
			              		ORDER BY nbt_date_recovered
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="recoveredAmt">
			              		ORDER BY recovered_amt
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>) a, 
		               (SELECT count(*) count_
		                  FROM TABLE (gicls205_pkg.get_lr_prev_rec_prl(#sessionId#))) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#	
	</select>
	
	<select id="getLossRecIntmPrev" resultMap="giclLossRecIntmMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, a.*
		          FROM (SELECT * 
		                  FROM TABLE (gicls205_pkg.get_lr_prev_rec_intm(#sessionId#))
		                  <isEqual property="sortColumn" compareValue="nbtClaimNo">
			              		ORDER BY nbt_rec_no
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtAssured">
			              		ORDER BY nbt_assured
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtIntm">
			              		ORDER BY nbt_intm
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtRecType">
			              		ORDER BY nbt_rec_type
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtDateRecovered">
			              		ORDER BY nbt_date_recovered
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="recoveredAmt">
			              		ORDER BY recovered_amt
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>) a, 
		               (SELECT count(*) count_
		                  FROM TABLE (gicls205_pkg.get_lr_prev_rec_intm(#sessionId#))) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#	
	</select>
	
	<select id="getLossRecPrev" resultMap="giclLossRecMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, a.*
		          FROM (SELECT * 
		                  FROM TABLE (gicls205_pkg.get_lr_prev_rec(#sessionId#))
		                  <isEqual property="sortColumn" compareValue="nbtClaimNo">
			              		ORDER BY nbt_rec_no
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtAssured">
			              		ORDER BY nbt_assured
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtRecType">
			              		ORDER BY nbt_rec_type
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="nbtDateRecovered">
			              		ORDER BY nbt_date_recovered
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="recoveredAmt">
			              		ORDER BY recovered_amt
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>) a, 
		               (SELECT count(*) count_
		                  FROM TABLE (gicls205_pkg.get_lr_prev_rec(#sessionId#))) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#	
	</select>
</sqlMap>