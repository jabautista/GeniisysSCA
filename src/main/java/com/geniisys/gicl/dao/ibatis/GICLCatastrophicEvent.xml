<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd" >
<sqlMap namespace="GICLCatastrophicEvent">
	<resultMap class="java.util.HashMap" id="gicls057CatastrophicLOVMap" extends="BaseEntity.TableGridResultMap">
		<result property="catastrophicCd" 	column="catastrophic_cd" />
		<result property="catastrophicDesc" column="catastrophic_desc" />
		<result property="rowNum" 			column="rownum_"/>
		<result property="rowCount" 		column="count_"/>
	</resultMap>
	
	<select id="getGicls057CatastrophicLOV" resultMap="gicls057CatastrophicLOVMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * 
		                  FROM TABLE (CPI.GICLS057_PKG.get_cat_lov)
		                 <isNotNull property="findText">
					         WHERE (UPPER(catastrophic_cd) LIKE UPPER(#findText#) 
					         	 OR UPPER(catastrophic_desc) LIKE UPPER(#findText#)
					         	 )
				         </isNotNull>          
			          	  <isNotNull property="sortColumn">
			                  <isEqual property="sortColumn" compareValue="catastrophicCd">
				              		ORDER BY catastrophic_cd
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="catastrophicDesc">
				              		ORDER BY catastrophic_desc
				              </isEqual>
				          	  <isNotNull property="sortColumn">
				              		<isEqual property="ascDescFlg" compareValue="ASC">
				              			ASC
				              		</isEqual>
				              		<isEqual property="ascDescFlg" compareValue="DESC">
				              			DESC
				              		</isEqual>
				              </isNotNull>
				          </isNotNull>    
		                  ) a, 
			               (SELECT count(*) count_ 
			                  FROM TABLE (CPI.GICLS057_PKG.get_cat_lov)
			              <isNotNull property="findText">
					          WHERE (UPPER(catastrophic_cd) LIKE UPPER(#findText#) 
					         	  OR UPPER(catastrophic_desc) LIKE UPPER(#findText#)
					         	  )
				          </isNotNull> 
		                  ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<resultMap class="java.util.HashMap" id="gicls057LineLOVMap" extends="BaseEntity.TableGridResultMap">
		<result property="lineCd" 		column="line_cd" />
		<result property="lineName" 	column="line_name" />
		<result property="rowNum" 		column="rownum_"/>
		<result property="rowCount" 	column="count_"/>
	</resultMap>
	
	<select id="getGicls057LineLOV" resultMap="gicls057LineLOVMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * 
		                  FROM TABLE (CPI.GICLS057_PKG.get_line_lov(#moduleId#,#userId#))
		                 <isNotNull property="findText">
					         WHERE (UPPER(line_cd) LIKE UPPER(#findText#) 
					         	 OR UPPER(line_name) LIKE UPPER(#findText#)
					         	 )
				         </isNotNull>          
			          	  <isNotNull property="sortColumn">
			                  <isEqual property="sortColumn" compareValue="lineCd">
				              		ORDER BY line_cd
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="lineName">
				              		ORDER BY line_name
				              </isEqual>
				          	  <isNotNull property="sortColumn">
				              		<isEqual property="ascDescFlg" compareValue="ASC">
				              			ASC
				              		</isEqual>
				              		<isEqual property="ascDescFlg" compareValue="DESC">
				              			DESC
				              		</isEqual>
				              </isNotNull>
				          </isNotNull>    
		                  ) a, 
			               (SELECT count(*) count_ 
			                  FROM TABLE (CPI.GICLS057_PKG.get_line_lov(#moduleId#,#userId#))
			              <isNotNull property="findText">
					          WHERE (UPPER(line_cd) LIKE UPPER(#findText#) 
					         	  OR UPPER(line_name) LIKE UPPER(#findText#)
					         	  )
				          </isNotNull> 
		                  ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<resultMap class="java.util.HashMap" id="gicls057BranchLOVMap" extends="BaseEntity.TableGridResultMap">
		<result property="issCd" 		column="iss_cd" />
		<result property="issName"		column="iss_name" />
		<result property="rowNum" 		column="rownum_"/>
		<result property="rowCount" 	column="count_"/>
	</resultMap>
	
	<select id="getGicls057BranchLOV" resultMap="gicls057BranchLOVMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * 
		                  FROM TABLE (CPI.GICLS057_PKG.get_branch_lov(#moduleId#,#userId#))
		                 <isNotNull property="findText">
					         WHERE (UPPER(iss_cd) LIKE UPPER(#findText#) 
					         	 OR UPPER(iss_name) LIKE UPPER(#findText#)
					         	 )
				         </isNotNull>          
			          	  <isNotNull property="sortColumn">
			                  <isEqual property="sortColumn" compareValue="issCd">
				              		ORDER BY iss_cd
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="issName">
				              		ORDER BY iss_name
				              </isEqual>
				          	  <isNotNull property="sortColumn">
				              		<isEqual property="ascDescFlg" compareValue="ASC">
				              			ASC
				              		</isEqual>
				              		<isEqual property="ascDescFlg" compareValue="DESC">
				              			DESC
				              		</isEqual>
				              </isNotNull>
				          </isNotNull>    
		                  ) a, 
			               (SELECT count(*) count_ 
			                  FROM TABLE (CPI.GICLS057_PKG.get_branch_lov(#moduleId#,#userId#))
			              <isNotNull property="findText">
					          WHERE (UPPER(iss_cd) LIKE UPPER(#findText#) 
					         	  OR UPPER(iss_name) LIKE UPPER(#findText#)
					         	  )
				          </isNotNull> 
		                  ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<resultMap class="java.util.HashMap" id="gicls057LossCatLOVMap" extends="BaseEntity.TableGridResultMap">
		<result property="lossCatCd" 	column="loss_cat_cd" />
		<result property="lossCatDes"	column="loss_cat_des" />
		<result property="rowNum" 		column="rownum_"/>
		<result property="rowCount" 	column="count_"/>
	</resultMap>
	
	<select id="getGicls057LossCatLOV" resultMap="gicls057LossCatLOVMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * 
		                  FROM TABLE (CPI.GICLS057_PKG.get_loss_cat_lov(#lineCd#))
		                 <isNotNull property="findText">
					         WHERE (UPPER(loss_cat_cd) LIKE UPPER(#findText#) 
					         	 OR UPPER(loss_cat_des) LIKE UPPER(#findText#)
					         	 )
				         </isNotNull>          
			          	  <isNotNull property="sortColumn">
			                  <isEqual property="sortColumn" compareValue="lossCatCd">
				              		ORDER BY loss_cat_cd
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="lossCatDes">
				              		ORDER BY loss_cat_des
				              </isEqual>
				          	  <isNotNull property="sortColumn">
				              		<isEqual property="ascDescFlg" compareValue="ASC">
				              			ASC
				              		</isEqual>
				              		<isEqual property="ascDescFlg" compareValue="DESC">
				              			DESC
				              		</isEqual>
				              </isNotNull>
				          </isNotNull>    
		                  ) a, 
			               (SELECT count(*) count_ 
			                  FROM TABLE (CPI.GICLS057_PKG.get_loss_cat_lov(#lineCd#))
			              <isNotNull property="findText">
					          WHERE (UPPER(loss_cat_cd) LIKE UPPER(#findText#) 
					         	  OR UPPER(loss_cat_des) LIKE UPPER(#findText#)
					         	  )
				          </isNotNull> 
		                  ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<resultMap class="java.util.HashMap" id="gicls057ProvinceLOVMap" extends="BaseEntity.TableGridResultMap">
		<result property="provinceCd" 	column="province_cd" />
		<result property="provinceDesc"	column="province_desc" />
		<result property="rowNum" 		column="rownum_"/>
		<result property="rowCount" 	column="count_"/>
	</resultMap>
	
	<select id="getGicls057ProvinceLOV" resultMap="gicls057ProvinceLOVMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * 
		                  FROM TABLE (CPI.GICLS057_PKG.get_province_lov)
		                 <isNotNull property="findText">
					         WHERE (UPPER(province_cd) LIKE UPPER(#findText#) 
					         	 OR UPPER(province_desc) LIKE UPPER(#findText#)
					         	 )
				         </isNotNull>          
			          	  <isNotNull property="sortColumn">
			                  <isEqual property="sortColumn" compareValue="provinceCd">
				              		ORDER BY province_cd
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="provinceDesc">
				              		ORDER BY province_desc
				              </isEqual>
				          	  <isNotNull property="sortColumn">
				              		<isEqual property="ascDescFlg" compareValue="ASC">
				              			ASC
				              		</isEqual>
				              		<isEqual property="ascDescFlg" compareValue="DESC">
				              			DESC
				              		</isEqual>
				              </isNotNull>
				          </isNotNull>    
		                  ) a, 
			               (SELECT count(*) count_ 
			                  FROM TABLE (CPI.GICLS057_PKG.get_province_lov)
			              <isNotNull property="findText">
					          WHERE (UPPER(province_cd) LIKE UPPER(#findText#) 
					         	  OR UPPER(province_desc) LIKE UPPER(#findText#)
					         	  )
				          </isNotNull> 
		                  ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<resultMap class="java.util.HashMap" id="gicls057CityLOVMap" extends="BaseEntity.TableGridResultMap">
		<result property="cityCd" 		column="city_cd" />
		<result property="city"			column="city" />
		<result property="rowNum" 		column="rownum_"/>
		<result property="rowCount" 	column="count_"/>
	</resultMap>
	
	<select id="getGicls057CityLOV" resultMap="gicls057CityLOVMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * 
		                  FROM TABLE (CPI.GICLS057_PKG.get_city_lov(#provinceCd#))
		                 <isNotNull property="findText">
					         WHERE (UPPER(city_cd) LIKE UPPER(#findText#) 
					         	 OR UPPER(city) LIKE UPPER(#findText#)
					         	 )
				         </isNotNull>          
			          	  <isNotNull property="sortColumn">
			                  <isEqual property="sortColumn" compareValue="cityCd">
				              		ORDER BY city_cd
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="city">
				              		ORDER BY city
				              </isEqual>
				          	  <isNotNull property="sortColumn">
				              		<isEqual property="ascDescFlg" compareValue="ASC">
				              			ASC
				              		</isEqual>
				              		<isEqual property="ascDescFlg" compareValue="DESC">
				              			DESC
				              		</isEqual>
				              </isNotNull>
				          </isNotNull>    
		                  ) a, 
			               (SELECT count(*) count_ 
			                  FROM TABLE (CPI.GICLS057_PKG.get_city_lov(#provinceCd#))
			              <isNotNull property="findText">
					          WHERE (UPPER(city_cd) LIKE UPPER(#findText#) 
					         	  OR UPPER(city) LIKE UPPER(#findText#)
					         	  )
				          </isNotNull> 
		                  ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<resultMap class="java.util.HashMap" id="gicls057DistrictLOVMap" extends="BaseEntity.TableGridResultMap">
		<result property="districtNo" 	column="district_no" />
		<result property="districtDesc" column="district_desc" />
		<result property="rowNum" 		column="rownum_"/>
		<result property="rowCount" 	column="count_"/>
	</resultMap>
	
	<select id="getGicls057DistrictLOV" resultMap="gicls057DistrictLOVMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * 
		                  FROM TABLE (CPI.GICLS057_PKG.get_district_lov(#provinceCd#,#cityCd#))
		                 <isNotNull property="findText">
					         WHERE (UPPER(district_no) LIKE UPPER(#findText#) 
					         	 OR UPPER(district_desc) LIKE UPPER(#findText#)
					         	 )
				         </isNotNull>          
			          	  <isNotNull property="sortColumn">
			                  <isEqual property="sortColumn" compareValue="districtNo">
				              		ORDER BY district_no
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="districtDesc">
				              		ORDER BY district_desc
				              </isEqual>
				          	  <isNotNull property="sortColumn">
				              		<isEqual property="ascDescFlg" compareValue="ASC">
				              			ASC
				              		</isEqual>
				              		<isEqual property="ascDescFlg" compareValue="DESC">
				              			DESC
				              		</isEqual>
				              </isNotNull>
				          </isNotNull>    
		                  ) a, 
			               (SELECT count(*) count_ 
			                  FROM TABLE (CPI.GICLS057_PKG.get_district_lov(#provinceCd#,#cityCd#))
			              <isNotNull property="findText">
					          WHERE (UPPER(district_no) LIKE UPPER(#findText#) 
					         	  OR UPPER(district_desc) LIKE UPPER(#findText#)
					         	  )
				          </isNotNull> 
		                  ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<resultMap class="java.util.HashMap" id="gicls057BlockLOVMap" extends="BaseEntity.TableGridResultMap">
		<result property="blockNo" 		column="block_no" />
		<result property="blockDesc" 	column="block_desc" />
		<result property="rowNum" 		column="rownum_"/>
		<result property="rowCount" 	column="count_"/>
	</resultMap>
	
	<select id="getGicls057BlockLOV" resultMap="gicls057BlockLOVMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * 
		                  FROM TABLE (CPI.GICLS057_PKG.get_block_lov(#provinceCd#,#cityCd#,#districtCd#))
		                 <isNotNull property="findText">
					         WHERE (UPPER(block_no) LIKE UPPER(#findText#) 
					         	 OR UPPER(block_desc) LIKE UPPER(#findText#)
					         	 )
				         </isNotNull>          
			          	  <isNotNull property="sortColumn">
			                  <isEqual property="sortColumn" compareValue="blockNo">
				              		ORDER BY block_no
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="blockDesc">
				              		ORDER BY block_desc
				              </isEqual>
				          	  <isNotNull property="sortColumn">
				              		<isEqual property="ascDescFlg" compareValue="ASC">
				              			ASC
				              		</isEqual>
				              		<isEqual property="ascDescFlg" compareValue="DESC">
				              			DESC
				              		</isEqual>
				              </isNotNull>
				          </isNotNull>    
		                  ) a, 
			               (SELECT count(*) count_ 
			                  FROM TABLE (CPI.GICLS057_PKG.get_block_lov(#provinceCd#,#cityCd#,#districtCd#))
			              <isNotNull property="findText">
					          WHERE (UPPER(block_no) LIKE UPPER(#findText#) 
					         	  OR UPPER(block_desc) LIKE UPPER(#findText#)
					         	  )
				          </isNotNull> 
		                  ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<parameterMap class="map" id="validateGicls057CatMap">
		<parameter property="catastrophicCd"		jdbcType="VARCHAR"	javaType="java.lang.String"	  mode="INOUT"/>
		<parameter property="catastrophicDesc"		jdbcType="VARCHAR"	javaType="java.lang.String"	  mode="INOUT"/>
	</parameterMap>
	
	<procedure id="validateGicls057Cat" parameterMap="validateGicls057CatMap">
		CALL GICLS057_PKG.validate_gicls057_cat_cd(?,?)
	</procedure>
	
	<parameterMap class="map" id="validateGicls057LineMap">
		<parameter property="lineCd"		jdbcType="VARCHAR"	javaType="java.lang.String"	  mode="INOUT"/>
		<parameter property="lineName"		jdbcType="VARCHAR"	javaType="java.lang.String"	  mode="INOUT"/>
	</parameterMap>
	
	<procedure id="validateGicls057Line" parameterMap="validateGicls057LineMap">
		CALL GICLS057_PKG.validate_gicls057_line_cd(?,?)
	</procedure>
	
	<parameterMap class="map" id="validateGicls057BranchMap">
		<parameter property="issCd"		jdbcType="VARCHAR"	javaType="java.lang.String"	  mode="INOUT"/>
		<parameter property="issName"	jdbcType="VARCHAR"	javaType="java.lang.String"	  mode="INOUT"/>
	</parameterMap>
	
	<procedure id="validateGicls057Branch" parameterMap="validateGicls057BranchMap">
		CALL GICLS057_PKG.validate_gicls057_branch_cd(?,?)
	</procedure>
	
	<resultMap class="java.util.HashMap" id="gicls057TableMap" extends="BaseEntity.TableGridResultMap">
		<result property="lineCd" 			column="line_cd" />
		<result property="claimNo" 			column="claim_no" />
		<result property="policyNo" 		column="policy_no" />
		<result property="lossCatCd" 		column="loss_cat_cd" />
		<result property="lossCatDes" 		column="loss_cat_des" />
		<result property="assdNo" 			column="assd_no"/>
		<result property="assdName" 		column="assd_name"/>
		<result property="inHouAdj" 		column="in_hou_adj"/>
		<result property="catastrophicCd" 	column="catastrophic_cd"/>
		<result property="catastrophicDesc" column="catastrophic_desc"/>
		<result property="lossDate" 		column="loss_date"/>
		<result property="location" 		column="location"/>
		<result property="clmStatCd" 		column="clm_stat_cd"/>
		<result property="clmStatDesc" 		column="clm_stat_desc"/>
		<result property="provinceCd"		column="province_cd"/>
		<result property="province"			column="province"/>
		<result property="cityCd"			column="city_cd"/>
		<result property="city"				column="city"/>
		<result property="districtNo"		column="district_no"/>
		<result property="districtDesc"		column="district_desc"/>
		<result property="blockNo"			column="block_no"/>
		<result property="blockDesc"		column="block_desc"/>
		<result property="lossResAmt"		column="loss_res_amt"/>
		<result property="lossPdAmt"		column="loss_pd_amt"/>
		<result property="expResAmt"		column="exp_res_amt"/>
		<result property="expPdAmt"			column="exp_pd_amt"/>
		<result property="netResAmt"		column="net_res_amt"/>
		<result property="trtyResAmt"		column="trty_res_amt"/>
		<result property="npTrtyResAmt"		column="np_trty_res_amt"/>
		<result property="faculResAmt"		column="facul_res_amt"/>
		<result property="netPdAmt"			column="net_pd_amt"/>
		<result property="trtyPdAmt"		column="trty_pd_amt"/>
		<result property="npTrtyPdAmt"		column="np_trty_pd_amt"/>
		<result property="faculPdAmt"		column="facul_pd_amt"/>
	</resultMap>
	
	<select id="showCatastrophicEventInquiry" resultMap="gicls057TableMap">
		SELECT *
			FROM (SELECT rownum rownum_,
						 b.count_, 
						 a.*
					FROM (SELECT *
							FROM TABLE (gicls057_pkg.get_gicls057_table(#selection#,#catastrophicCd#,#lineCd#,#issCd#,#location#,#lossCatCd#,#provinceCd#,#cityCd#,#districtNo#,#blockNo#,#fromDate#,#toDate#))
							<isEqual property="sortColumn" compareValue="resAmount">
								ORDER BY net_res_amt, trty_res_amt, np_trty_res_amt, facul_res_amt
							</isEqual>
							<isEqual property="sortColumn" compareValue="pdAmount">
								ORDER BY net_pd_amt, trty_pd_amt, np_trty_pd_amt, facul_pd_amt
							</isEqual>
							<isEqual property="sortColumn" compareValue="claimNo">
								ORDER BY claim_no	
							</isEqual>
							<isEqual property="sortColumn" compareValue="lossCatDes">
								ORDER BY loss_cat_des
							</isEqual>
							<isEqual property="sortColumn" compareValue="catastrophicDesc">
								ORDER BY catastrophic_desc
							</isEqual>
							<isEqual property="sortColumn" compareValue="lossDate">
								ORDER BY loss_date
							</isEqual>
							<isEqual property="sortColumn" compareValue="location">
								ORDER BY location
							</isEqual>
							<isEqual property="sortColumn" compareValue="netResAmt">
								ORDER BY net_res_amt
							</isEqual>
							<isEqual property="sortColumn" compareValue="trtyResAmt"> 
								ORDER BY trty_res_amt
							</isEqual>
							<isEqual property="sortColumn" compareValue="npTrtyResAmt">
								ORDER BY np_trty_res_amt
							</isEqual>
							<isEqual property="sortColumn" compareValue="faculResAmt"> 
								ORDER BY facul_res_amt
							</isEqual>
							<isEqual property="sortColumn" compareValue="netPdAmt">
								ORDER BY net_pd_amt
							</isEqual>
							<isEqual property="sortColumn" compareValue="trtyPdAmt"> 
								ORDER BY trty_pd_amt
							</isEqual>
							<isEqual property="sortColumn" compareValue="npTrtyPdAmt">
								ORDER BY np_trty_pd_amt
							</isEqual>
							<isEqual property="sortColumn" compareValue="faculPdAmt"> 
								ORDER BY facul_pd_amt
							</isEqual>
							<isEqual property="sortColumn" compareValue="province">
								ORDER BY province
							</isEqual>
							<isEqual property="sortColumn" compareValue="city"> 
								ORDER BY city
							</isEqual>
							<isEqual property="sortColumn" compareValue="districtDesc">
								ORDER BY district_desc
							</isEqual>
							<isEqual property="sortColumn" compareValue="blockDesc"> 
								ORDER BY block_desc
							</isEqual>
							<isNotNull property="sortColumn">
								<isEqual property="ascDescFlg" compareValue="ASC">
									ASC
								</isEqual>
								<isEqual property="ascDescFlg" compareValue="DESC">
									DESC
								</isEqual>
							</isNotNull>
						) a,
						(SELECT count(*) count_
						   FROM TABLE (gicls057_pkg.get_gicls057_table(#selection#,#catastrophicCd#,#lineCd#,#issCd#,#location#,#lossCatCd#,#provinceCd#,#cityCd#,#districtNo#,#blockNo#,#fromDate#,#toDate#))
						   ) b)
			WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<!-- for GICLS200 -->
	<parameterMap id="getUserParamsForGicls200ParamMap" class="map">
		<parameter property="userId"		jdbcType="VARCHAR"	javaType="java.lang.String"	  mode="IN"/>
		<parameter property="asOfDate"		jdbcType="VARCHAR"	javaType="java.lang.String"	  mode="OUT"/>
		<parameter property="osDateOpt"		jdbcType="NUMERIC"	javaType="java.lang.Integer"  mode="OUT"/>
		<parameter property="pdDateOpt"		jdbcType="NUMERIC"	javaType="java.lang.Integer"  mode="OUT"/>
		<parameter property="catCd"			jdbcType="NUMERIC"	javaType="java.lang.Integer"  mode="OUT"/>
		<parameter property="catDesc"		jdbcType="VARCHAR"	javaType="java.lang.String"	  mode="OUT"/>
		<parameter property="lineCd"		jdbcType="VARCHAR"	javaType="java.lang.String"	  mode="OUT"/>
		<parameter property="lineName"		jdbcType="VARCHAR"	javaType="java.lang.String"	  mode="OUT"/>
		<parameter property="issCd"			jdbcType="VARCHAR"	javaType="java.lang.String"	  mode="OUT"/>
		<parameter property="issName"		jdbcType="VARCHAR"	javaType="java.lang.String"	  mode="OUT"/>
		<parameter property="locationCd"	jdbcType="VARCHAR"	javaType="java.lang.String"	  mode="OUT"/>
		<parameter property="locationDesc"	jdbcType="VARCHAR"	javaType="java.lang.String"	  mode="OUT"/>
		<parameter property="lossCatCd"		jdbcType="VARCHAR"	javaType="java.lang.String"	  mode="OUT"/>
		<parameter property="lossCatDesc"	jdbcType="VARCHAR"	javaType="java.lang.String"	  mode="OUT"/>
		<parameter property="riCd"			jdbcType="NUMERIC"	javaType="java.lang.Integer"  mode="OUT"/>
		<parameter property="riName"		jdbcType="VARCHAR"	javaType="java.lang.String"	  mode="OUT"/>
	</parameterMap>
	<procedure id="getUserParamsForGicls200" parameterMap="getUserParamsForGicls200ParamMap">
		{ CALL GICLS200_PKG.get_def_values_for_user(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) }
	</procedure>
	
	<select id="getOsPdPerCatSessionIdNextVal" resultClass="java.lang.Integer" >
		SELECT os_pd_per_cat_session_id_s.NEXTVAL session_id
       	  FROM dual
	</select>
	
	<procedure id="deleteDataFromExtractOsPdPerCat" parameterClass="java.lang.String">
		BEGIN
			GIIS_USERS_PKG.app_user := #appUser#;
			EXTRACT_OS_PD_PER_CAT.DELETE_DATA;
		END;
	</procedure>
	
	<procedure id="resetAndExtractAllRecords" parameterClass="map">
		BEGIN
			EXTRACT_OS_PD_PER_CAT.RESET_RECORD_ID;
			EXTRACT_OS_PD_PER_CAT.EXTRACT_ALL(#sessionId#,
 	                                  		  #catCd#,
 	                                  		  #lineCd#,
 	                                  		  #branchCd#,
 	                                  		  #lossCatCd#,
 	                                  		  #locationCd#,
 	                                  		  #osDateOption#,
											  #pdDateOption#,
											  TO_DATE(#asOfDate#, 'mm-dd-yyyy'));
		END;
	</procedure>
	
	<procedure id="extractDistribution" parameterClass="map">
		BEGIN
			GIIS_USERS_PKG.app_user := #appUser#;
			EXTRACT_OS_PD_PER_CAT.EXTRACT_DISTRIBUTION(#sessionId#, TO_DATE(#asOfDate#, 'mm-dd-yyyy'));
		END;
	</procedure>
	
	<select id="checkForExtractedOsPdClmRec" parameterClass="java.lang.Integer" resultClass="java.lang.Integer">
		SELECT NVL(COUNT(*), 0)
 		  FROM gicl_os_pd_clm_extr
 		 WHERE session_id = #sessionId#
	</select>
	
	<parameterMap id="valExtOsPdClmRecBefPrintParamMap" class="map">
		<parameter property="userId"		jdbcType="VARCHAR"	javaType="java.lang.String"	  mode="IN"/>
		<parameter property="sessionId"		jdbcType="NUMERIC"	javaType="java.lang.Integer"  mode="OUT"/>
		<parameter property="extDate"		jdbcType="VARCHAR"	javaType="java.lang.String"	  mode="OUT"/>
	</parameterMap> 
	<procedure id="valExtOsPdClmRecBefPrint" parameterMap="valExtOsPdClmRecBefPrintParamMap">
		{ CALL GICLS200_PKG.validate_bef_print(?, ?, ?) } 
	</procedure>
	
	<resultMap class="java.util.HashMap" id="GICLS056CatastrophicEventResultMap" extends="BaseEntity.TableGridResultMap">
		<result column="catastrophic_cd" 	property="catCd"/>
		<result column="catastrophic_desc"	property="catDesc"/>
		<result column="line_cd" 			property="lineCd"/>
		<result column="line_name" 			property="lineName"/>
		<result column="loss_cat_cd" 		property="lossCatCd"/>
		<result column="loss_cat_des" 		property="lossCatDes"/>
		<result column="start_date" 		property="startDate"/>
		<result column="end_date" 			property="endDate"/>
		<result column="location" 			property="location"/>
		<result column="res_amt" 			property="resAmt"/>
		<result column="pd_amt" 			property="pdAmt"/>
		<result column="remarks" 			property="remarks"/>
		<result column="user_id" 			property="userId"/>
		<result column="last_update" 		property="lastUpdate"/>
		<result column="province_cd" 		property="provinceCd"/>
		<result column="province_desc" 		property="provinceDesc"/>
		<result column="city_cd" 			property="cityCd"/>
		<result column="city" 				property="city"/>
		<result column="district_no" 		property="districtNo"/>
		<result column="district_desc" 		property="districtDesc"/>
		<result column="block_no" 			property="blockNo"/>
		<result column="block_desc" 		property="blockDesc"/>
		<result column="print_sw" 			property="printSw"/>	
	</resultMap>
	
	<select id="getGICLS056CatastrophicEvent" resultMap="GICLS056CatastrophicEventResultMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.*  
		  	      FROM (SELECT * FROM TABLE(gicls056_pkg.get_catastrophic_event(#userId#))
		  	      WHERE 1=1
					<isNotEmpty prepend="AND"  property="catCd">
						catastrophic_cd = #catCd#
					</isNotEmpty>
					<isNotEmpty prepend="AND"  property="catDesc">
						UPPER(catastrophic_desc) LIKE UPPER(#catDesc#)
					</isNotEmpty>
					<isNotEmpty prepend="AND"  property="lineCd">
						UPPER(line_cd) LIKE UPPER(#lineCd#)
					</isNotEmpty>
					<isNotEmpty prepend="AND"  property="lineName">
						UPPER(line_name) LIKE UPPER(#lineName#)
					</isNotEmpty>
					<isNotEmpty prepend="AND"  property="lossCatCd">
						loss_cat_cd = #lossCatCd#
					</isNotEmpty>
					<isNotEmpty prepend="AND"  property="lossCatDes">
						UPPER(loss_cat_des) LIKE UPPER(#lossCatDes#)
					</isNotEmpty>
					<isNotEmpty prepend="AND"  property="startDate">
						start_date = TO_DATE(#startDate#, 'mm-dd-yyyy')
					</isNotEmpty>
					<isNotEmpty prepend="AND"  property="endDate">
						end_date = TO_DATE(#endDate#, 'mm-dd-yyyy')
					</isNotEmpty>
				    <isEqual property="sortColumn" compareValue="catCd catDesc">
				 		ORDER BY catastrophic_cd
					 </isEqual>
					 <isEqual property="sortColumn" compareValue="lineCd lineName">
				 		ORDER BY line_cd
					 </isEqual>
					 <isEqual property="sortColumn" compareValue="lossCatCd lossCatDes">
				 		ORDER BY loss_cat_cd
					 </isEqual>
					 <isEqual property="sortColumn" compareValue="startDate">
				 		ORDER BY start_date
					 </isEqual>
					 <isEqual property="sortColumn" compareValue="endDate">
				 		ORDER BY end_date
					 </isEqual>
					<isNotNull property="sortColumn">
				 		<isEqual property="ascDescFlg" compareValue="ASC">
				 			ASC
				 		</isEqual>
				 		<isEqual property="ascDescFlg" compareValue="DESC">
				 			DESC
				 		</isEqual>
				 	</isNotNull>
		                  ) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE(gicls056_pkg.get_catastrophic_event(#userId#))
		                  WHERE 1=1
					<isNotEmpty prepend="AND"  property="catCd">
						catastrophic_cd = #catCd#
					</isNotEmpty>
					<isNotEmpty prepend="AND"  property="catDesc">
						UPPER(catastrophic_desc) LIKE UPPER(#catDesc#)
					</isNotEmpty>
					<isNotEmpty prepend="AND"  property="lineCd">
						UPPER(line_cd) LIKE UPPER(#lineCd#)
					</isNotEmpty>
					<isNotEmpty prepend="AND"  property="lineName">
						UPPER(line_name) LIKE UPPER(#lineName#)
					</isNotEmpty>
					<isNotEmpty prepend="AND"  property="lossCatCd">
						loss_cat_cd = #lossCatCd#
					</isNotEmpty>
					<isNotEmpty prepend="AND"  property="lossCatDes">
						UPPER(loss_cat_des) LIKE UPPER(#lossCatDes#)
					</isNotEmpty>
					<isNotEmpty prepend="AND"  property="startDate">
						start_date = TO_DATE(#startDate#, 'mm-dd-yyyy')
					</isNotEmpty>
					<isNotEmpty prepend="AND"  property="endDate">
						end_date = TO_DATE(#endDate#, 'mm-dd-yyyy')
					</isNotEmpty>
		                  ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#	
	</select>
	
	<resultMap class="java.util.HashMap" id="GICLS056DetailsResultMap" extends="BaseEntity.TableGridResultMap">
		<result column="claim_id" property="claimId" />
		<result column="catastrophic_cd" property="catCd" />
		<result column="line_cd" property="lineCd" />
		<result column="subline_cd" property="sublineCd" />
		<result column="iss_cd" property="issCd" />
		<result column="clm_yy" property="clmYy" />
		<result column="clm_seq_no" property="clmSeqNo" />
		<result column="loss_cat_cd" property="lossCatCd" />
		<result column="loss_cat_des" property="lossCatDes" />
		<result column="loss_date" property="lossDate" />
		<result column="net_res_amt" property="netResAmt" />
		<result column="trty_res_amt" property="trtyResAmt" />
		<result column="np_trty_res_amt" property="npTrtyResAmt" />
		<result column="facul_res_amt" property="faculResAmt" />
		<result column="net_pd_amt" property="netPdAmt" />
		<result column="trty_pd_amt" property="trtyPdAmt" />
		<result column="np_trty_pd_amt" property="npTrtyPdAmt" />
		<result column="facul_pd_amt" property="faculPdAmt" />
		<result column="claim_no" property="claimNo" />
		<result column="loss_cat" property="lossCat" />
		<result column="policy_no" property="policyNo" />
		<result column="loss_res_amt" property="lossResAmt" />
		<result column="assd_name" property="assdName" />
		<result column="loss_pd_amt" property="lossPdAmt" />
		<result column="in_hou_adj" property="inHouAdj" />
		<result column="exp_res_amt" property="expResAmt" />
		<result column="clm_stat" property="clmStat" />
		<result column="exp_pd_amt" property="expPdAmt" />
		<result column="location" property="location" />
		<result column="tot_net_res_amt" property="totNetResAmt" />
		<result column="tot_trty_res_amt" property="totTrtyResAmt" />
		<result column="tot_np_trty_res_amt" property="totNpTrtyResAmt" />
		<result column="tot_facul_res_amt" property="totFaculResAmt" />
		<result column="tot_net_pd_amt" property="totNetPdAmt" />
		<result column="tot_trty_pd_amt" property="totTrtyPdAmt" />
		<result column="tot_np_trty_pd_amt" property="totNpTrtyPdAmt" />
		<result column="tot_facul_pd_amt" property="totFaculPdAmt" />		
	</resultMap>
	
	<select id="getGICLS056Details" resultMap="GICLS056DetailsResultMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.*  
		  	      FROM (SELECT * FROM TABLE(gicls056_pkg.get_details(#catCd#, #userId#, #districtNo#, #blockNo#))
		  	      WHERE 1 = 1
		  	      	<isNotEmpty prepend="AND" property="claimNo">
		  	      		UPPER(claim_no) LIKE UPPER(#claimNo#)
		  	      	</isNotEmpty>
		  	      	<isNotEmpty prepend="AND" property="lossCat">
		  	      		UPPER(loss_cat) LIKE UPPER(#lossCat#)
		  	      	</isNotEmpty>
		  	      	<isNotEmpty prepend="AND" property="lossDate">
		  	      		TRUNC(loss_date) = TO_DATE(#lossDate#, 'mm-dd-yyyy')
		  	      	</isNotEmpty>
					<isEqual property="sortColumn" compareValue="claimNo">
						ORDER BY claim_no
					</isEqual>
					<isEqual property="sortColumn" compareValue="lossCat">
						ORDER BY loss_cat
					</isEqual>
					<isEqual property="sortColumn" compareValue="lossDate">
						ORDER BY loss_date
					</isEqual>
					<isEqual property="sortColumn" compareValue="netResAmt trtyResAmt npTrtyResAmt faculResAmt">
						ORDER BY net_res_amt
					</isEqual>
					<isEqual property="sortColumn" compareValue="netResAmt">
						ORDER BY net_res_amt
					</isEqual>
					<isEqual property="sortColumn" compareValue="trtyResAmt">
						ORDER BY trty_res_amt
					</isEqual>
					<isEqual property="sortColumn" compareValue="npTrtyResAmt">
						ORDER BY np_trty_res_amt
					</isEqual>
					<isEqual property="sortColumn" compareValue="faculResAmt">
						ORDER BY facul_res_amt
					</isEqual>
					<isEqual property="sortColumn" compareValue="netPdAmt trtyPdAmt npTrtyPdAmt faculPdAmt">
						ORDER BY net_pd_amt
					</isEqual>
					<isEqual property="sortColumn" compareValue="netPdAmt">
						ORDER BY net_pd_amt
					</isEqual>
					<isEqual property="sortColumn" compareValue="trtyPdAmt">
						ORDER BY trty_pd_amt
					</isEqual>
					<isEqual property="sortColumn" compareValue="npTrtyPdAmt">
						ORDER BY np_trty_pd_amt
					</isEqual>
					<isEqual property="sortColumn" compareValue="faculPdAmt">
						ORDER BY facul_pd_amt
					</isEqual>
					<isNotNull property="sortColumn">
						<isEqual property="ascDescFlg" compareValue="ASC">
							ASC
						</isEqual>
						<isEqual property="ascDescFlg" compareValue="DESC">
							DESC
						</isEqual>
					</isNotNull>
		                  ) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE(gicls056_pkg.get_details(#catCd#, #userId#, #districtNo#, #blockNo#))
		                  WHERE 1 = 1
		  	      	<isNotEmpty prepend="AND" property="claimNo">
		  	      		UPPER(claim_no) LIKE UPPER(#claimNo#)
		  	      	</isNotEmpty>
		  	      	<isNotEmpty prepend="AND" property="lossCat">
		  	      		UPPER(loss_cat) LIKE UPPER(#lossCat#)
		  	      	</isNotEmpty>
		  	      	<isNotEmpty prepend="AND" property="lossDate">
		  	      		TRUNC(loss_date) = TO_DATE(#lossDate#, 'mm-dd-yyyy')
		  	      	</isNotEmpty>
		                  ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#	
	</select>
	
	<resultMap class="java.util.HashMap" id="GICLS056ClaimListResultMap" extends="BaseEntity.TableGridResultMap">
		<result column="claim_id" property="claimId" />
		<result column="claim_no" property="claimNo" />
		<result column="policy_no" property="policyNo" />
		<result column="assd_name" property="assdName" />
		<result column="loss_cat" property="lossCat" />
		<result column="dsp_loss_date" property="dspLossDate" />
		<result column="in_hou_adj" property="inHouAdj" />
		<result column="clm_stat_desc" property="clmStatDesc" />
	</resultMap>
	
	<select id="getGICLS056ClaimListFi" resultMap="GICLS056ClaimListResultMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.*  
		  	      FROM (SELECT * FROM TABLE(gicls056_pkg.get_claim_list_fi(#userId#, #lossCatCd#, #startDate#, #endDate#, #location#,
		  	      														#provinceCd#, #cityCd#, #districtNo#, #blockNo#, #searchType#))
				 WHERE 1 = 1
				<isNotEmpty prepend="AND" property="claimNo">
					claim_no LIKE UPPER(#claimNo#)
				</isNotEmpty>
				<isNotEmpty prepend="AND" property="policyNo">
					policy_no LIKE UPPER(#policyNo#)
				</isNotEmpty>
				<isNotEmpty prepend="AND" property="assdName">
					UPPER(assd_name) LIKE UPPER(#assdName#)
				</isNotEmpty>
				<isNotEmpty prepend="AND" property="lossCat">
					UPPER(loss_cat) LIKE UPPER(#lossCat#)
				</isNotEmpty>
				<isNotEmpty prepend="AND" property="dspLossDate">
					TRUNC(dsp_loss_date) = TO_DATE(#dspLossDate#, 'mm-dd-yyyy')
				</isNotEmpty>	
				<isNotEmpty prepend="AND" property="inHouAdj">
					UPPER(in_hou_adj) LIKE UPPER(#inHouAdj#)
				</isNotEmpty>
				<isNotEmpty prepend="AND" property="clmStatDesc">
					UPPER(clm_stat_desc) LIKE UPPER(#clmStatDesc#)
				</isNotEmpty>	  	      														
				<isEqual property="sortColumn" compareValue="claimNo">
					ORDER BY claim_no
				</isEqual>
				<isEqual property="sortColumn" compareValue="policyNo">
					ORDER BY policy_no
				</isEqual>
				<isEqual property="sortColumn" compareValue="assdName">
					ORDER BY assd_name
				</isEqual>
				<isEqual property="sortColumn" compareValue="lossCat">
					ORDER BY loss_cat
				</isEqual>
				<isEqual property="sortColumn" compareValue="dspLossDate">
					ORDER BY dsp_loss_date
				</isEqual>
				<isEqual property="sortColumn" compareValue="inHouAdj">
					ORDER BY in_hou_adj
				</isEqual>
				<isEqual property="sortColumn" compareValue="clmStatDesc">
					ORDER BY clm_stat_desc
				</isEqual>
				<isNotNull property="sortColumn">
					<isEqual property="ascDescFlg" compareValue="ASC">
						ASC
					</isEqual>
					<isEqual property="ascDescFlg" compareValue="DESC">
						DESC
					</isEqual>
				</isNotNull>
		                  ) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE(gicls056_pkg.get_claim_list_fi(#userId#, #lossCatCd#, #startDate#, #endDate#, #location#,
  	      														 #provinceCd#, #cityCd#, #districtNo#, #blockNo#, #searchType#))
				 		 WHERE 1 = 1
				<isNotEmpty prepend="AND" property="claimNo">
					claim_no LIKE UPPER(#claimNo#)
				</isNotEmpty>
				<isNotEmpty prepend="AND" property="policyNo">
					policy_no LIKE UPPER(#policyNo#)
				</isNotEmpty>
				<isNotEmpty prepend="AND" property="assdName">
					UPPER(assd_name) LIKE UPPER(#assdName#)
				</isNotEmpty>
				<isNotEmpty prepend="AND" property="lossCat">
					UPPER(loss_cat) LIKE UPPER(#lossCat#)
				</isNotEmpty>
				<isNotEmpty prepend="AND" property="dspLossDate">
					TRUNC(dsp_loss_date) = TO_DATE(#dspLossDate#, 'mm-dd-yyyy')
				</isNotEmpty>	
				<isNotEmpty prepend="AND" property="inHouAdj">
					UPPER(in_hou_adj) LIKE UPPER(#inHouAdj#)
				</isNotEmpty>
				<isNotEmpty prepend="AND" property="clmStatDesc">
					UPPER(clm_stat_desc) LIKE UPPER(#clmStatDesc#)
				</isNotEmpty>
		                  ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#	
	</select>
	
	<select id="getGICLS056ClaimList" resultMap="GICLS056ClaimListResultMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.*  
		  	      FROM (SELECT * FROM TABLE(gicls056_pkg.get_claim_list(#userId#, #lossCatCd#, #startDate#, #endDate#, #location#, #lineCd#, #searchType#))
		  	     WHERE 1 = 1
				<isNotEmpty prepend="AND" property="claimNo">
					claim_no LIKE UPPER(#claimNo#)
				</isNotEmpty>
				<isNotEmpty prepend="AND" property="policyNo">
					policy_no LIKE UPPER(#policyNo#)
				</isNotEmpty>
				<isNotEmpty prepend="AND" property="assdName">
					UPPER(assd_name) LIKE UPPER(#assdName#)
				</isNotEmpty>
				<isNotEmpty prepend="AND" property="lossCat">
					UPPER(loss_cat) LIKE UPPER(#lossCat#)
				</isNotEmpty>
				<isNotEmpty prepend="AND" property="dspLossDate">
					TRUNC(dsp_loss_date) = TO_DATE(#dspLossDate#, 'mm-dd-yyyy')
				</isNotEmpty>	
				<isNotEmpty prepend="AND" property="inHouAdj">
					UPPER(in_hou_adj) LIKE UPPER(#inHouAdj#)
				</isNotEmpty>
				<isNotEmpty prepend="AND" property="clmStatDesc">
					UPPER(clm_stat_desc) LIKE UPPER(#clmStatDesc#)
				</isNotEmpty>
                <isEqual property="sortColumn" compareValue="claimNo">
					ORDER BY claim_no
				</isEqual>
				<isEqual property="sortColumn" compareValue="policyNo">
					ORDER BY policy_no
				</isEqual>
				<isEqual property="sortColumn" compareValue="assdName">
					ORDER BY assd_name
				</isEqual>
				<isEqual property="sortColumn" compareValue="lossCat">
					ORDER BY loss_cat
				</isEqual>
				<isEqual property="sortColumn" compareValue="dspLossDate">
					ORDER BY dsp_loss_date
				</isEqual>
				<isEqual property="sortColumn" compareValue="inHouAdj">
					ORDER BY in_hou_adj
				</isEqual>
				<isEqual property="sortColumn" compareValue="clmStatDesc">
					ORDER BY clm_stat_desc
				</isEqual>
				<isNotNull property="sortColumn">
					<isEqual property="ascDescFlg" compareValue="ASC">
						ASC
					</isEqual>
					<isEqual property="ascDescFlg" compareValue="DESC">
						DESC
					</isEqual>
				</isNotNull>
		                  ) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE(gicls056_pkg.get_claim_list(#userId#, #lossCatCd#, #startDate#, #endDate#, #location#, #lineCd#, #searchType#))
		                  WHERE 1 = 1
				<isNotEmpty prepend="AND" property="claimNo">
					claim_no LIKE UPPER(#claimNo#)
				</isNotEmpty>
				<isNotEmpty prepend="AND" property="policyNo">
					policy_no LIKE UPPER(#policyNo#)
				</isNotEmpty>
				<isNotEmpty prepend="AND" property="assdName">
					UPPER(assd_name) LIKE UPPER(#assdName#)
				</isNotEmpty>
				<isNotEmpty prepend="AND" property="lossCat">
					UPPER(loss_cat) LIKE UPPER(#lossCat#)
				</isNotEmpty>
				<isNotEmpty prepend="AND" property="dspLossDate">
					TRUNC(dsp_loss_date) = TO_DATE(#dspLossDate#, 'mm-dd-yyyy')
				</isNotEmpty>	
				<isNotEmpty prepend="AND" property="inHouAdj">
					UPPER(in_hou_adj) LIKE UPPER(#inHouAdj#)
				</isNotEmpty>
				<isNotEmpty prepend="AND" property="clmStatDesc">
					UPPER(clm_stat_desc) LIKE UPPER(#clmStatDesc#)
				</isNotEmpty>
		                  ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#	
	</select>
	
	<procedure id="gicls056UpdateDetails" parameterClass="map">
 		BEGIN		     
 			giis_users_pkg.app_user := #userId#; 			
 			gicls056_pkg.update_details(#claimId#, #catCd#, #pAction#);
 		END;
 	</procedure>
 	
 	<typeAlias alias="GICLCatDtl" type="com.geniisys.gicl.entity.GICLCatDtl"/>
 	
 	<procedure id="saveGicls056" parameterClass="GICLCatDtl">
	    DECLARE
	    	v_rec gicl_cat_dtl%ROWTYPE;
 		BEGIN		     
 			giis_users_pkg.app_user := #userId#;
 			
 			v_rec.catastrophic_cd := #catCd#;
			v_rec.catastrophic_desc := #catDesc#;
			v_rec.line_cd := #lineCd#;
			v_rec.loss_cat_cd := #lossCatCd#;
			v_rec.start_date := #startDate#;
			v_rec.end_date := #endDate#;
			v_rec.location := #location#;
			v_rec.district_no := #districtNo#;
			v_rec.block_no := #blockNo#;
			v_rec.city_cd := #cityCd#;
			v_rec.province_cd := #provinceCd#;
			v_rec.remarks := #remarks#;
			v_rec.user_id := #userId#;
 			
 			gicls056_pkg.save_rec(v_rec);
 		END;
 	</procedure>
 	
 	<select id="gicls056ValDelete" resultClass="java.lang.String" parameterClass="java.lang.String">
 		SELECT gicls056_pkg.val_delete(#catCd#) FROM DUAL
 	</select>
	
	<delete id="gilcs056DelRec" parameterClass="java.lang.String">
		BEGIN
 			gicls056_pkg.del_rec(#catCd#);
 		END;
 	</delete>
 	
 	<update id="gicls056UpdateDetailsAll" parameterClass="map">
 		BEGIN		     
 			giis_users_pkg.app_user := #userId#; 			
 			gicls056_pkg.update_details_all(#catCd#, #userId#, #lossCatCd#, #startDate#,
 											#endDate#, #location#, #provinceCd#, #cityCd#, 
 											#districtNo#, #blockNo#, #lineCd#, #searchType#);
 		END;
 	</update>
 	
 	<update id="gicls056RemoveAll" parameterClass="map">
 		BEGIN
 			giis_users_pkg.app_user := #userId#; 			
 			gicls056_pkg.remove_all_details(#catCd#, #userId#);
 		END;
 	</update>
 	
 	<resultMap class="java.util.HashMap" id="gicls056LineLOVResultMap" extends="BaseEntity.TableGridResultMap">
		<result property="lineCd" 	column="line_cd" />
		<result property="lineName" column="line_name" />
	</resultMap>
	
	<select id="getGicls056LineLOV" resultMap="gicls056LineLOVResultMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * FROM TABLE (gicls056_PKG.get_line_lov(#moduleId#, #userId#, #findText#))          
					<isNotNull property="sortColumn">
						<isEqual property="sortColumn" compareValue="lineCd">
							ORDER BY line_cd
		              	</isEqual>
		              	<isEqual property="sortColumn" compareValue="lineName">
	              			ORDER BY line_name
		              	</isEqual>
		          	  	<isNotNull property="sortColumn">
	              			<isEqual property="ascDescFlg" compareValue="ASC">
	              				ASC
              				</isEqual>
		              		<isEqual property="ascDescFlg" compareValue="DESC">
		              			DESC
		              		</isEqual>
		              	</isNotNull>
		          	</isNotNull>) a, 
	               (SELECT count(*) count_ 
	                  FROM TABLE (gicls056_PKG.get_line_lov(#moduleId#, #userId#, #findText#)) 
                  	) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<procedure id="gicls056ValAddRec" parameterClass="map">
		CALL GICLS056_PKG.val_add_rec(#catCd#, #catDesc#)
	</procedure>
	
	<select id="gicls056GetClaimNos" resultClass="java.lang.String">
		SELECT gicls056_pkg.get_claim_nos(#catCd#, #userId#, #districtNo#, #blockNo#) FROM DUAL
	</select>
	
	<select id="gicls056GetClaimNosList" resultClass="java.lang.String">
		SELECT gicls056_pkg.get_claim_nos_list(#userId#, #lossCatCd#, #startDate#, #endDate#, #location#, #lineCd#, #searchType#) FROM DUAL
	</select>
	
	<select id="gicls056GetClaimNosListFi" resultClass="java.lang.String">
		SELECT gicls056_pkg.get_claim_nos_list_fi(#userId#, #lossCatCd#, #startDate#, #endDate#, #location#,
												  #provinceCd#, #cityCd#, #districtNo#, #blockNo#, #searchType#) FROM DUAL
	</select>
	
	<parameterMap class="map" id="gicls056GetDspAmtParamMap">
		<parameter property="catCd"		jdbcType="VARCHAR"	javaType="java.lang.String"	  mode="IN"/>
		<parameter property="userId"		jdbcType="VARCHAR"	javaType="java.lang.String"	  mode="IN"/>
		<parameter property="resAmt"	jdbcType="VARCHAR"	javaType="java.lang.String"	  mode="OUT"/>
		<parameter property="pdAmt"		jdbcType="VARCHAR"	javaType="java.lang.String"	  mode="OUT"/>
		<parameter property="exists"	jdbcType="VARCHAR"	javaType="java.lang.String"	  mode="OUT"/>
	</parameterMap>
	
	<procedure id="gicls056GetDspAmt" parameterMap="gicls056GetDspAmtParamMap">
		BEGIN
			GICLS056_PKG.check_details(?, ?, ?, ?, ?);
		END;	
	</procedure>
</sqlMap>