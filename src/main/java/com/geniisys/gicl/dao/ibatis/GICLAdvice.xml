<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd" >

<!-- Modified by reymon 04252013 for PHILFIRE-QA: 12849 -->
<sqlMap namespace="GICLAdvice">

	<cacheModel type="MEMORY" id="oneDayClient">
		<flushInterval hours="24"/>
		<property name="reference-type" value="WEAK"/>
	</cacheModel>

	<typeAlias alias="GICLAdviceClass" type="com.geniisys.gicl.entity.GICLAdvice"/>
	
	<resultMap class="GICLAdviceClass" 		id="GICLAdviceResultMap">
		<result property="adviceDate"				column="advice_date"/>
		<result property="adviceFlag"				column="advice_flag"/>
		<result property="adviceId"					column="advice_id"/>
		<result property="adviceSequenceNumber"		column="advice_seq_no"/>
		<result property="adviceYear"				column="advice_year"/>
		<result property="adviceAmount"				column="advise_amt"/>
		<result property="advForeignCurrencyAmount"	column="adv_fcurr_amt"/>
		<result property="advFlaId"					column="adv_fla_id"/>
		<result property="approvedTag"				column="apprvd_tag"/>
		<result property="batchCsrId"				column="batch_csr_id"/>	
		<result property="batchDvId"				column="batch_dv_id"/>
		<result property="claimId"					column="claim_id"/>
		<result property="convertRate"				column="convert_rate"/>
		<result property="cpiBranchCode"			column="cpi_branch_cd"/>
		<result property="cpiRecNo"					column="cpi_rec_no"/>
		<result property="currencyCode"				column="currency_cd"/>
		<result property="issueCode"				column="iss_cd"/>
		<result property="lineCode"					column="line_cd"/>
		<result property="lastUpdate"				column="last_update"/>
		<result property="netAmount"				column="net_amt"/>
		<result property="netForeignCurrencyAmount"	column="net_fcurr_amt"/>
		<result property="originalCurrencyCode"		column="orig_curr_cd"/>
		<result property="originalCurrencyRate"		column="orig_curr_rate"/>
		<result property="paidAmount"				column="paid_amt"/>
		<result property="paidForeignCurrencyAmount" column="paid_fcurr_amt"/>
		<result property="payeeRemarks"				column="payee_remarks"/>
		<result property="remarks"					column="remarks"/>
		<result property="userId"					column="user_id"/>
	</resultMap>
	
	<resultMap class="GICLAdviceClass" id="GICLAdviceTableGridResultMap">
		<result property="batchCsrId"				column="BATCH_CSR_ID"/>
		<result property="claimId"					column="CLAIM_ID"/>
		<result property="lineCode"					column="LINE_CD"/>
		<result property="issueCode"				column="ISS_CD"/>
		<result property="adviceYear"				column="ADVICE_YEAR"/>
		<result property="adviceSequenceNumber"		column="ADVICE_SEQ_NO"/>
		<result property="adviceId"					column="ADVICE_ID"/>
		<result property="adviceFlag"				column="ADVICE_FLAG"/>
		<result property="approvedTag"				column="APPRVD_TAG"/>
		<result property="adviceNo"					column="ADVICE_NO"/>
		<result property="claimNo"					column="CLAIM_NO"/>
		<result property="policyNo"					column="POLICY_NO"/>
		<result property="assdNo"					column="ASSD_NO"/>
		<result property="assuredName"				column="ASSURED_NAME"/>
		<result property="lossDate"					column="DSP_LOSS_DATE"/>
		<result property="adviceDate"				column="ADVICE_DATE"/>
		<result property="paidAmount"				column="PAID_AMT"/>
		<result property="paidForeignCurrencyAmount" column="PAID_FCURR_AMT"/>
		<result property="netAmount"				column="NET_AMT"/>
		<result property="netForeignCurrencyAmount"	column="NET_FCURR_AMT"/>
		<result property="adviceAmount"				column="ADVISE_AMT"/>
		<result property="advForeignCurrencyAmount"	column="ADV_FCURR_AMT"/>
		<result property="currencyCode"				column="CURRENCY_CD"/>
		<result property="dspCurrency" 				column="CURRENCY_DESC"/>
		<result property="convertRate"				column="CONVERT_RATE"/>
		<result property="lossCatCd"				column="LOSS_CAT_CD"/>
		<result property="dspLossCatDes"			column="DSP_LOSS_CAT_DES"/>
		<result property="clmStatCd"				column="CLM_STAT_CD"/>
		<result property="dspClmStatDesc"			column="DSP_CLM_STAT_DESC"/>
		<result property="rowNum"					column="ROWNUM_"/>
		<result property="rowCount"					column="COUNT_"/>
	</resultMap>
	
	<resultMap class="GICLAdviceClass" id="specialCSRGICLAdviceTableGridResultMap" extends="GICLAdviceTableGridResultMap">
		<result property="batchDvId" 		column="batch_dv_id"/>
		<result property="payeeClassCd" 	column="payee_class_cd"/>
		<result property="payeeCd" 			column="payee_cd"/>
		<result property="dspPayeeClass" 	column="dsp_payee_class"/>
		<result property="dspPayee" 		column="dsp_payee"/>
		<result property="dspPaidAmt" 		column="dsp_paid_amt"/>
		<result property="dspPaidFcurrAmt" 	column="dsp_paid_fcurr_amt"/>
		<result property="convRt" 			column="conv_rt"/>
		<result property="lossCurrCd" 		column="loss_curr_cd"/>
		<result property="clmLossId" 		column="clm_loss_id"/>
		<result property="generateSw" 		column="generate_sw"/>
		<result property="paidAmt"			column="paid_amt"/>
		<result property="netAmt"			column="net_amt"/>
		<result property="payeeType"		column="payee_type"/>
	</resultMap>
	
	<resultMap class="GICLAdviceClass" 		id="getAdviseListForBatchCsrApprovalMap">
		<result property="claimId"			column="CLAIM_ID"/>
		<result property="adviceId"			column="ADVICE_ID"/>
		<result property="payeeClassCd" 	column="PAYEE_CLASS_CD"/>
		<result property="payeeCd" 			column="PAYEE_CD"/>
	</resultMap>
	
	<resultMap class="GICLAdviceClass"		id="getCancelledAdviceResultMap">
		<result property="adviceId"				column="ADVICE_ID"/>
		<result property="claimId"				column="CLAIM_ID"/>
		<result property="lineCode"				column="LINE_CD"/>
		<result property="issueCode"			column="ISS_CD"/>
		<result property="adviceYear"			column="ADVICE_YEAR"/>
		<result property="adviceSequenceNumber"	column="ADVICE_SEQ_NO"/>
		<result property="adviceNo"				column="ADVICE_NO"/>
		<result property="userId"				column="USER_ID"/>
		<result property="lastUpdate"			column="LAST_UPDATE"/>
		<result property="rowNum"				column="ROWNUM_"/>
		<result property="rowCount"				column="COUNT_"/>
	</resultMap>
	
	<resultMap class="java.util.HashMap"		id="getGICLS260AdviceResultMap">
		<result property="adviceId"				column="ADVICE_ID"/>
		<result property="claimId"				column="CLAIM_ID"/>
		<result property="lineCd"				column="LINE_CD"/>
		<result property="issueCd"				column="ISS_CD"/>
		<result property="adviceYear"			column="ADVICE_YEAR"/>
		<result property="adviceSeqNo"			column="ADVICE_SEQ_NO"/>
		<result property="adviceNo"				column="ADVICE_NO"/>
		<result property="csrNo"				column="CSR_NO"/>
		<result property="userId"				column="USER_ID"/>
		<result property="lastUpdate"			column="LAST_UPDATE"/>
	</resultMap>
	
	<resultMap class="java.util.HashMap" id="GICLS032AdviceListResultMap" extends="BaseEntity.TableGridResultMap">
		<result property="claimId"		column="CLAIM_ID"/>
		<result property="adviceId"		column="ADVICE_ID"/>
		<result property="lineCd"		column="LINE_CD"/>
		<result property="issCd"		column="ISS_CD"/>
		<result property="adviceYear"	column="ADVICE_YEAR"/>
		<result property="adviceSeqNo"	column="ADVICE_SEQ_NO"/>		
		<result property="adviceFlag"	column="ADVICE_FLAG"/>
		<result property="apprvdTag"	column="APPRVD_TAG"/>
		<result property="advFlaId"		column="ADV_FLA_ID"/>
		<result property="adviceNo"		column="ADVICE_NO"/>		
		<result property="adviceDate"	column="ADVICE_DATE"/>
		<result property="paidAmt"		column="PAID_AMT"/>
		<result property="paidFcurrAmt" column="PAID_FCURR_AMT"/>
		<result property="netAmt"		column="NET_AMT"/>
		<result property="netFcurrAmt"	column="NET_FCURR_AMT"/>
		<result property="adviceAmt"	column="ADVISE_AMT"/>
		<result property="advFcurrAmt"	column="ADV_FCURR_AMT"/>
		<result property="currencyCd"	column="CURRENCY_CD"/>
		<result property="currencyDesc" column="CURRENCY_DESC"/>
		<result property="convertRate"	column="CONVERT_RATE"/>
		<result property="remarks" 		column="REMARKS"/>
		<result property="payeeRemarks"	column="PAYEE_REMARKS"/>
		<result property="batchCsrId"	column="batch_csr_id"/>
		<result property="batchDvId"	column="batch_dv_id"/>
		<result property="batchNo"		column="batch_no"/>
	</resultMap>
	
	<parameterMap class="java.util.HashMap" id="GICLS032NewFormInstanceParamMap">
		<parameter property="userId" 			javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="lineCd" 			javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="issCd" 			javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="riIssCd" 			javaType="java.lang.String" jdbcType="VARCHAR" mode="OUT"/>
		<parameter property="gpaExists" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="OUT"/>
		<parameter property="localCurrency" 	javaType="java.lang.Integer" jdbcType="NUMERIC" mode="OUT"/>
		<parameter property="separateBooking" 	javaType="java.lang.String" jdbcType="VARCHAR" mode="OUT"/>
		<parameter property="popupDir" 			javaType="java.lang.String" jdbcType="VARCHAR" mode="OUT"/>
		<parameter property="rangeTo" 			javaType="java.lang.String" jdbcType="VARCHAR" mode="OUT"/>
		<parameter property="disallowPymt" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="OUT"/>		
	</parameterMap>
	
	<parameterMap class="java.util.HashMap" id="GICLS032EnableDisableBtnsParamMap">
		<parameter property="appUser" 			javaType="java.lang.String" jdbcType="VARCHAR"/>
		<parameter property="claimId" 			javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="adviceId" 			javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
  		<parameter property="btnCancelAdv" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="OUT"/>
  		<parameter property="btnPrintCsr" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="OUT"/>
  		<parameter property="btnAcctEnt" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="OUT"/>
  		<parameter property="btnAppCsr" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="OUT"/>
  		<parameter property="btnGenAcc" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="OUT"/>
  		<parameter property="btnCsr" 			javaType="java.lang.String" jdbcType="VARCHAR" mode="OUT"/>
  		<parameter property="btnGenAdv" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="OUT"/>
  		<parameter property="btnLblPrintCsr"	javaType="java.lang.String" jdbcType="VARCHAR" mode="OUT"/>
	</parameterMap>	
		
	<resultMap class="java.util.HashMap" id="GICLAdviceGIACS017ResultMap">
		<result property="adviceId"			column="advice_id" />
		<result property="issCd" 			column="iss_cd" />
		<result property="adviceYear" 		column="advice_year" />
		<result property="lineCd" 			column="line_cd" />
		<result property="adviceSeqNo" 		column="advice_seq_no" />
		<result property="paidAmt" 			column="paid_amt" />
		<result property="dspPayee" 		column="dsp_payee" />
		<result property="dspPType" 		column="dsp_p_type" />
		<result property="payeeClassCd" 	column="payee_class_cd" />
		<result property="perilSname" 		column="peril_sname" />
		<result property="netAmt" 			column="net_amt" />
		<result property="netDisbAmt" 		column="net_disb_amt" />
		<result property="payeeCd" 			column="payee_cd" />
		<result property="claimId" 			column="claim_id" />
		<result property="clmLossId" 		column="clm_loss_id" />
		<result property="payeeType" 		column="payee_type" />
		<result property="dspAdviceNo"		column="dsp_advice_no" />
		<result property="rowNum" 			column="rownum_" />
		<result property="rowCount" 		column="count_" />
	</resultMap>
	
	<resultMap class="GICLAdviceClass" 	id="getFinalLossAdviceListMap" extends="BaseEntity.TableGridResultMap"> <!-- bonok :: 7.8.2015 :: UCPB SR 19733 -->
		<result property="adviceId"				column="ADVICE_ID"/>
		<result property="adviceNo" 			column="ADVICE_NO"/>
		<result property="lineCode" 			column="LINE_CD"/>
		<result property="issueCode" 			column="ISS_CD"/>
		<result property="adviceYear" 			column="ADVICE_YEAR"/>
		<result property="adviceSequenceNumber" column="ADVICE_SEQ_NO"/>
		<result property="currencyCode" 		column="CURRENCY_CD"/>
		<result property="dspCurrency" 			column="CURRENCY_DESC"/>
		<result property="paidAmount" 			column="PAID_AMT"/>
		<result property="netAmount" 			column="NET_AMT"/>
		<result property="adviceAmount" 		column="ADVISE_AMT"/>
		<result property="generateSw"			column="GENERATE_SW"/>
		<result property="advFlaId"				column="ADV_FLA_ID"/>
	</resultMap>
	
	<select id="getGicls043AdviceList" resultMap="GICLAdviceTableGridResultMap" parameterClass="map">
		SELECT *
			  FROM (SELECT rownum rownum_, 
			               b.count_, a.*
			          FROM (SELECT * 
			                  FROM TABLE (GICL_ADVICE_PKG.get_gicl_advise_list(#batchCsrId#, #moduleId#, #appUser#, #lineCode#, #issueCode#, #sublineCode#, #adviceYear#, #adviceSequenceNumber#, #assuredName#, #lossDate#, #adviceDate#, #dspLossCatDes#, #paidAmount#, #netAmount#, #adviceAmount#, #dspCurrency#, #convertRate#))
				            WHERE UPPER (dsp_loss_cat_des) LIKE UPPER (NVL (#dspLossCatDes#, dsp_loss_cat_des))
				            <isEqual property="sortColumn" compareValue="adviceNo">
			              		ORDER BY advice_no
				            </isEqual>
				            <isEqual property="sortColumn" compareValue="claimNo">
			              		ORDER BY claim_no
				            </isEqual>
				            <isEqual property="sortColumn" compareValue="policyNo">
			              		ORDER BY policy_no
				            </isEqual>
				            <isEqual property="sortColumn" compareValue="assuredName">
			              		ORDER BY assured_name
				            </isEqual>
				            <isEqual property="sortColumn" compareValue="adviceDate">
			              		ORDER BY advice_date
				            </isEqual>
				            <isEqual property="sortColumn" compareValue="strAdviceDate">
			              		ORDER BY advice_date
				            </isEqual>
				            <isEqual property="sortColumn" compareValue="lossDate">
			              		ORDER BY dsp_loss_date
				            </isEqual>
				            <isEqual property="sortColumn" compareValue="strLossDate">
			              		ORDER BY dsp_loss_date
				            </isEqual>
				            <isEqual property="sortColumn" compareValue="dspLossCatDes">
			              		ORDER BY dsp_loss_cat_des
				            </isEqual>
				            <isEqual property="sortColumn" compareValue="paidAmount">
			              		ORDER BY paid_amt
				            </isEqual>
				            <isEqual property="sortColumn" compareValue="netAmount">
			              		ORDER BY net_amt
				            </isEqual>
				            <isEqual property="sortColumn" compareValue="adviceAmount">
			              		ORDER BY advise_amt
				            </isEqual>
				            <isEqual property="sortColumn" compareValue="dspCurrency">
			              		ORDER BY currency_desc
				            </isEqual>
				            <isEqual property="sortColumn" compareValue="convertRate">
			              		ORDER BY convert_rate
				            </isEqual>
				            <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              	 </isNotNull>) a, 
			               (SELECT count(*) count_
			                  FROM TABLE (GICL_ADVICE_PKG.get_gicl_advise_list(#batchCsrId#, #moduleId#, #appUser#, #lineCode#, #issueCode#, #sublineCode#, #adviceYear#, #adviceSequenceNumber#, #assuredName#, #lossDate#, #adviceDate#, #dspLossCatDes#, #paidAmount#, #netAmount#, #adviceAmount#, #dspCurrency#, #convertRate#))
			                WHERE UPPER (dsp_loss_cat_des) LIKE UPPER (NVL (#dspLossCatDes#, dsp_loss_cat_des))
			                ) b) 
			 WHERE rownum_ BETWEEN #from# AND #to#		
	</select>
	
	<select id="getGicls043AdviceListForAdd" resultMap="GICLAdviceTableGridResultMap" parameterClass="map">
		SELECT *
			  FROM (SELECT rownum rownum_, 
			               b.count_, a.*
			          FROM (SELECT * 
			                  FROM TABLE (GICL_ADVICE_PKG.get_gicl_advise_list_2(#moduleId#, #appUser#, #lineCode#, #issueCode#, #sublineCode#, #adviceYear#, #adviceSequenceNumber#, #assuredName#, #lossDate#, #adviceDate#, #dspLossCatDes#, #paidAmount#, #netAmount#, #adviceAmount#, #dspCurrency#, #convertRate#))
				            WHERE UPPER (dsp_loss_cat_des) LIKE UPPER (NVL (#dspLossCatDes#, dsp_loss_cat_des))
				            <isEqual property="sortColumn" compareValue="adviceNo">
			              		ORDER BY advice_no
				            </isEqual>
				            <isEqual property="sortColumn" compareValue="claimNo">
			              		ORDER BY claim_no
				            </isEqual>
				            <isEqual property="sortColumn" compareValue="policyNo">
			              		ORDER BY policy_no
				            </isEqual>
				            <isEqual property="sortColumn" compareValue="assuredName">
			              		ORDER BY assured_name
				            </isEqual>
				            <isEqual property="sortColumn" compareValue="adviceDate">
			              		ORDER BY advice_date
				            </isEqual>
				            <isEqual property="sortColumn" compareValue="strAdviceDate">
			              		ORDER BY advice_date
				            </isEqual>
				            <isEqual property="sortColumn" compareValue="lossDate">
			              		ORDER BY dsp_loss_date
				            </isEqual>
				            <isEqual property="sortColumn" compareValue="strLossDate">
			              		ORDER BY dsp_loss_date
				            </isEqual>
				            <isEqual property="sortColumn" compareValue="dspLossCatDes">
			              		ORDER BY dsp_loss_cat_des
				            </isEqual>
				            <isEqual property="sortColumn" compareValue="paidAmount">
			              		ORDER BY paid_amt
				            </isEqual>
				            <isEqual property="sortColumn" compareValue="netAmount">
			              		ORDER BY net_amt
				            </isEqual>
				            <isEqual property="sortColumn" compareValue="adviceAmount">
			              		ORDER BY advise_amt
				            </isEqual>
				            <isEqual property="sortColumn" compareValue="dspCurrency">
			              		ORDER BY currency_desc
				            </isEqual>
				            <isEqual property="sortColumn" compareValue="convertRate">
			              		ORDER BY convert_rate
				            </isEqual>
				            <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              	 </isNotNull>) a, 
			               (SELECT count(*) count_
			                  FROM TABLE (GICL_ADVICE_PKG.get_gicl_advise_list_2(#moduleId#, #appUser#, #lineCode#, #issueCode#, #sublineCode#, #adviceYear#, #adviceSequenceNumber#, #assuredName#, #lossDate#, #adviceDate#, #dspLossCatDes#, #paidAmount#, #netAmount#, #adviceAmount#, #dspCurrency#, #convertRate#))
			                WHERE UPPER (dsp_loss_cat_des) LIKE UPPER (NVL (#dspLossCatDes#, dsp_loss_cat_des))
			                ) b) 
			 WHERE rownum_ BETWEEN #from# AND #to#		
	</select>

	<select id="getGiacs086AdviseList" resultMap="specialCSRGICLAdviceTableGridResultMap" parameterClass="map">
		SELECT *
			  FROM (SELECT rownum rownum_, 
			               b.count_, a.*
			          FROM (SELECT * 
			                  FROM TABLE (gicl_advice_pkg.get_giacs086_advise_list(#batchDvId#,#payeeClassCd#,#payeeCd#,#moduleId#,#userId#,#assuredName#,
			                  #dspClmStatDesc#,#strLossDate#, #dspLossCatDes#, #dspPayeeClass#, #dspPayee#, #dspCurrency#, #convertRate#,#lineCode#, #issueCode#, #sublineCode#, #adviceYear#, #adviceSequenceNumber#))
				              <isEqual property="sortColumn" compareValue="claimNo">
			              		ORDER BY claim_no
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="policyNo">
			              		ORDER BY policy_no
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="assuredName">
			              		ORDER BY assured_name
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="strLossDate">
			              		ORDER BY DSP_LOSS_DATE
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="dspLossCatDes">
			              		ORDER BY dsp_loss_cat_des
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="dspClmStatDesc">
			              		ORDER BY dsp_clm_stat_desc
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="dspPayee">
			              		ORDER BY dsp_payee
				              </isEqual>
				               <isEqual property="sortColumn" compareValue="adviceNo">
			              		ORDER BY advice_no
				              </isEqual>
				               <isEqual property="sortColumn" compareValue="dspPaidAmt">
			              		ORDER BY dsp_paid_amt
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="dspCurrency">
			              		ORDER BY currency_desc
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="convertRate">
			              		ORDER BY convert_rate
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="dspPayeeClass">
			              		ORDER BY dsp_payee_class
				              </isEqual>
				              <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              	  </isNotNull>) a, 
			               (SELECT count(*) count_
			                  FROM TABLE (gicl_advice_pkg.get_giacs086_advise_list(#batchDvId#,#payeeClassCd#,#payeeCd#,#moduleId#,#userId#,#assuredName#,
			                  #dspClmStatDesc#,#strLossDate#, #dspLossCatDes#, #dspPayeeClass#, #dspPayee#, #dspCurrency#, #convertRate#,#lineCode#, #issueCode#, #sublineCode#, #adviceYear#, #adviceSequenceNumber#))) b) 
			 WHERE rownum_ BETWEEN #from# AND #to#	
			  AND dsp_paid_amt LIKE NVL(#dspPaidAmt#, dsp_paid_amt)	
	</select>
	
	<select id="getGiacs086AdviseList2" resultMap="specialCSRGICLAdviceTableGridResultMap" parameterClass="map">
		SELECT *
			  FROM (SELECT rownum rownum_, 
			               b.count_, a.*
			          FROM (SELECT * 
			                  FROM TABLE (gicl_advice_pkg.get_giacs086_advise_list2(#batchDvId#,#payeeClassCd#,#payeeCd#,#moduleId#,#userId#,#claimId#,#assuredName#,
			                  #dspClmStatDesc#,#strLossDate#, #dspLossCatDes#, #dspPayeeClass#, #dspPayee#, #dspCurrency#, #convertRate#,#condition#,#lineCode#, #issueCode#, #sublineCode#, #adviceYear#, #adviceSequenceNumber#)
			                  )
			                  WHERE dsp_paid_amt LIKE NVL(#dspPaidAmt#, dsp_paid_amt)	
				              <isEqual property="sortColumn" compareValue="claimNo">
			              		ORDER BY claim_no
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="policyNo">
			              		ORDER BY policy_no
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="assuredName">
			              		ORDER BY assured_name
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="strLossDate">
			              		ORDER BY DSP_LOSS_DATE
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="dspLossCatDes">
			              		ORDER BY dsp_loss_cat_des
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="dspClmStatDesc">
			              		ORDER BY dsp_clm_stat_desc
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="dspPayee">
			              		ORDER BY dsp_payee
				              </isEqual>
				               <isEqual property="sortColumn" compareValue="adviceNo">
			              		ORDER BY advice_no
				              </isEqual>
				               <isEqual property="sortColumn" compareValue="dspPaidAmt">
			              		ORDER BY dsp_paid_amt
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="dspCurrency">
			              		ORDER BY currency_desc
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="convertRate">
			              		ORDER BY convert_rate
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="dspPayeeClass">
			              		ORDER BY dsp_payee_class
				              </isEqual>
				              <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              	  </isNotNull>) a, 
			               (SELECT count(*) count_
			                  FROM TABLE (gicl_advice_pkg.get_giacs086_advise_list2(#batchDvId#,#payeeClassCd#,#payeeCd#,#moduleId#,#userId#,#claimId#,#assuredName#,
			                  #dspClmStatDesc#,#strLossDate#, #dspLossCatDes#, #dspPayeeClass#, #dspPayee#, #dspCurrency#, #convertRate#,#condition#,#lineCode#, #issueCode#, #sublineCode#, #adviceYear#, #adviceSequenceNumber#))
			                  	
			                  ) b) 
			 WHERE rownum_ BETWEEN #from# AND #to#	
			 AND dsp_paid_amt LIKE NVL(#dspPaidAmt#, dsp_paid_amt)
			
	</select>
	
	<select id="getAdviceByAdviceId" resultMap="GICLAdviceResultMap">
		SELECT *
		  FROM GICL_ADVICE
		 WHERE advice_id = #adviceId# 
	</select>
	
	<select id="getAdviceByBatchCsrId" resultMap="GICLAdviceResultMap">
		SELECT *
		  FROM GICL_ADVICE
		 WHERE ((apprvd_tag = 'Y'
		   AND batch_csr_id IS NOT NULL)
		       OR (NVL (apprvd_tag, 'N') = 'N'
		       AND NVL (advice_flag, 'Y') = 'Y'))
		   AND check_user_per_line2 (line_cd, iss_cd, #moduleId#, #userId#) = 1
		   AND batch_csr_id = #batchCsrId# 
	</select>
	
	<select id="getGiclAdviceListByBatchCsrId" resultMap="GICLAdviceResultMap">
		SELECT *
		  FROM GICL_ADVICE
		 WHERE batch_csr_id = #batchCsrId#
		 ORDER BY advice_id, iss_cd 
	</select>
	
	<update id="updateGICLAdviceBatchCsrId"	parameterClass="map">
		UPDATE gicl_advice
		   SET batch_csr_id = #batchCsrId#
		WHERE advice_id = #adviceId#			
	</update>
	
	<update id="updateGICLAdviceApprvdTag" parameterClass="map">
		UPDATE gicl_advice
           SET apprvd_tag = #apprvdTag#
   		 WHERE batch_csr_id = #batchCsrId# 
	</update>
	
	<select id="getAdviseListForBatchCsrApproval" parameterClass="java.lang.Integer" resultMap="getAdviseListForBatchCsrApprovalMap">
		SELECT * FROM TABLE(GICL_ADVICE_PKG.get_advice_list_for_approval(#batchCsrId#))
	</select>
	
	<update id="updateGICLAdviceBatchDvId" parameterClass="map"> 
		UPDATE gicl_advice
	       SET batch_dv_id = #batchDvId#,
	           apprvd_tag = 'Y'
	     WHERE advice_id = #adviceId#
	</update>
	
	<select id="getGICLS032AdviceList" resultMap="GICLS032AdviceListResultMap">
		SELECT *
			  FROM (SELECT rownum rownum_, 
			               b.count_, a.*
			          FROM (SELECT * 
			                  FROM TABLE (gicl_advice_pkg.get_gicls032_clm_advice_list(#claimId#))
			                  <isNotNull property="sortColumn">
			                  	<isEqual property="sortColumn" compareValue="adviceNo">
			                  		ORDER BY advice_no
			                  	</isEqual>
			             		<isEqual property="sortColumn" compareValue="adviceDate">
			                  		ORDER BY advice_date
			                  	</isEqual>
			                  	<isEqual property="sortColumn" compareValue="currencyDesc">
			                  		ORDER BY currency_desc
			                  	</isEqual>
			                  	<isEqual property="sortColumn" compareValue="convertRate">
			                  		ORDER BY convert_rate
			                  	</isEqual>
			                  	<isEqual property="sortColumn" compareValue="paidAmt">
			                  		ORDER BY paid_amt
			                  	</isEqual>
			                  	<isEqual property="sortColumn" compareValue="netAmt">
			                  		ORDER BY net_amt
			                  	</isEqual>
			                  	<isEqual property="sortColumn" compareValue="adviceAmt">
			                  		ORDER BY advise_amt
			                  	</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              	  </isNotNull>) a, 
			               (SELECT count(*) count_
			                  FROM TABLE (gicl_advice_pkg.get_gicls032_clm_advice_list(#claimId#))			                  	
			                  ) b) 
			 WHERE rownum_ BETWEEN #from# AND #to#			
	</select>
	
	<procedure id="gicls032NewFormInstance" parameterMap="GICLS032NewFormInstanceParamMap">
	   BEGIN
			GICLS032_NEW_FORM_INSTANCE(?, ?, ?, ?, ?, ?, ?, ?, ?, ?);
	   END;
	</procedure>
	
	<procedure id="gicls032EnableDisableButtons" parameterMap="GICLS032EnableDisableBtnsParamMap">
	   BEGIN
	   		GIIS_USERS_PKG.app_user := ?;
			GICLS032_ENABLE_DISABLE_BTNS(?, ?, ?, ?, ?, ?, ?, ?, ?, ?);
	   END;
	</procedure>

	<procedure id="gicls032CancelAdvice" parameterClass="java.util.HashMap">
	   BEGIN
	   		GIIS_USERS_PKG.app_user := #userId#;
			GICLS032_CANCEL_ADVICE(#claimId#, #adviceId#, #functionCode#);
	   END;
	</procedure>

	<procedure id="gicls032ApproveCsr" parameterClass="java.util.HashMap">
	   BEGIN
	   		GIIS_USERS_PKG.app_user := #userId#;
			GICLS032_APPROVE_CSR(#claimId#, #adviceId#, #acUserName#, #rpUserName#);
	   END;
	</procedure>

	<select id="gicls032CheckRequestExists" resultClass="java.lang.Integer">
		SELECT gicls032_check_request_exists(#claimId#, #adviceId#, #functionCode#)
		  FROM DUAL
	</select>

	<select id="getCancelledAdviceList" resultMap="getCancelledAdviceResultMap">
		SELECT *
			  FROM (SELECT rownum rownum_, 
			               b.count_, a.*
			          FROM (SELECT * 
			                  FROM TABLE (GICL_ADVICE_PKG.get_cancelled_gicl_advice_list(#claimId#))
			                  <isNotNull property="filter">
					      		WHERE 1=1
					      		<isNotEmpty prepend="AND" property="adviceNo">
		           				  UPPER(advice_no) LIKE UPPER(#adviceNo#)
		           			    </isNotEmpty>
		           			    <isNotEmpty prepend="AND" property="userId">
		           				  UPPER(user_id) LIKE UPPER(#userId#)
		           			    </isNotEmpty>
		           			    <isNotEmpty prepend="AND" property="lastUpdate">
		           				  last_update LIKE #lastUpdate#
		           			    </isNotEmpty>
				              </isNotNull>
			                  <isEqual property="sortColumn" compareValue="adviceNo">
			              		ORDER BY advice_no
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="userId">
			              		ORDER BY user_id
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="lastUpdate">
			              		ORDER BY last_update
				              </isEqual>
			                  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              	  </isNotNull>) a, 
			               (SELECT count(*) count_
			                  FROM TABLE (GICL_ADVICE_PKG.get_cancelled_gicl_advice_list(#claimId#))			                  	
			                  <isNotNull property="filter">
					      		WHERE 1=1
					      		<isNotEmpty prepend="AND" property="adviceNo">
		           				  UPPER(advice_no) LIKE UPPER(#adviceNo#)
		           			    </isNotEmpty>
		           			    <isNotEmpty prepend="AND" property="userId">
		           				  UPPER(user_id) LIKE UPPER(#userId#)
		           			    </isNotEmpty>
		           			    <isNotEmpty prepend="AND" property="lastUpdate">
		           				  last_update LIKE #lastUpdate#
		           			    </isNotEmpty>
				              </isNotNull>) b) 
			 WHERE rownum_ BETWEEN #from# AND #to#			
	</select>
	
	<update id="gicls032UpdateAdviceRemarks" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #userId#;
			gicl_advice_pkg.update_remarks(#claimId#, #adviceId#, #remarks#);
		END;
	</update>
	
	<update id="gicls032CreateOverrideRequest" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #userId#;
			gicls032_create_override_req(#claimId#, #adviceId#, #functionCode#, #remarks#);
		END;
	</update>
	
	<update id="gicls032CheckSetResAmount" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #userId#;
			gicls032_check_set_res_amount(#claimId#, #adviceId#, #selectedClmLoss#, NULL, #userName#);
		END;
	</update>
	
	<procedure id="gicls032ValRange" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #userId#;
			gicls032_val_range(#claimId#, #adviseAmt#, #userName#, #password#, #ovrRangeUserName#);
		END;
	</procedure>	
	
	<procedure id="gicls032CheckTsi" parameterClass="java.util.HashMap">
		BEGIN		
			gicls032_check_tsi(#claimId#, #itemNo#, #perilCd#, #selectedClmLoss#);
		END;
	</procedure>
	
	<parameterMap class="java.util.HashMap" id="GICLS032GenerateAdviceProcParamMap">
		<parameter property="userId" 			javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="claimId" 			javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="netAmt" 			javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="paidAmt" 			javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="adviseAmt" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>		
		<parameter property="netFcurrAmt" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="paidFcurrAmt" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="advFcurrAmt" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="currencyCd" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="convertRate" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="origCurrCd" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="origCurrRate" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="remarks" 			javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="payeeRemarks" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="selectedClmLoss" 	javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="message" 			javaType="java.lang.String" jdbcType="VARCHAR" mode="OUT"/>
	</parameterMap>	
	
	<procedure id="gicls032GenerateAdviceProc" parameterMap="GICLS032GenerateAdviceProcParamMap">
		BEGIN		
			giis_users_pkg.app_user := ?;
			gicls032_generate_advise_proc(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);
		END;
	</procedure>	
	
	<select id="getGIACS017ClaimAdviceTableGrid" resultMap="GICLAdviceGIACS017ResultMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.*
		          FROM (SELECT * 
		                  FROM TABLE (GICL_ADVICE_PKG.get_advice_list_giacs017(#lineCd#, #issCd#, #adviceYear#, #adviceSeqNo#, #riIssCd#, #tranType#, #moduleId#, #userId#))
			            <isNotNull property="notIn">
					  		WHERE advice_id NOT IN ($notIn$)
					  	UNION
					  	SELECT * 
		                  FROM TABLE (GICL_ADVICE_PKG.get_advice_list_giacs017(#lineCd#, #issCd#, #adviceYear#, #adviceSeqNo#, #riIssCd#, #tranType#, #moduleId#, #userId#))
		                    WHERE $notIn2$
					  	</isNotNull>
					  	<isNull property="sortColumn">
					  		ORDER BY 17 ASC
					  	</isNull>
			            <isEqual property="sortColumn" compareValue="dspAdviceNo">
		              		ORDER BY 17
			            </isEqual>
			            <isEqual property="sortColumn" compareValue="dspPayee">
		              		ORDER BY 7
			            </isEqual>
			            <isEqual property="sortColumn" compareValue="paidAmt">
		              		ORDER BY 6
			            </isEqual>
			            <isNotNull property="sortColumn">
			            	<isNotEqual property="sortColumn" compareValue="addTag">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              	</isNotEqual>
		              	</isNotNull>) a, 
		               (SELECT count(*) count_ 
		                  FROM (SELECT * FROM TABLE (GICL_ADVICE_PKG.get_advice_list_giacs017(#lineCd#, #issCd#, #adviceYear#, #adviceSeqNo#, #riIssCd#, #tranType#, #moduleId#, #userId#))
			                  	<isNotNull property="notIn">
						  			WHERE advice_id NOT IN ($notIn$)
						  		UNION
							  	SELECT * 
				                  FROM TABLE (GICL_ADVICE_PKG.get_advice_list_giacs017(#lineCd#, #issCd#, #adviceYear#, #adviceSeqNo#, #riIssCd#, #tranType#, #moduleId#, #userId#))
				                    WHERE $notIn2$
						  		</isNotNull>)) b)
		WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<select id="getFinalLossAdviceList" resultMap="getFinalLossAdviceListMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.*
		          FROM (SELECT * 
		                  FROM TABLE (GICL_ADVICE_PKG.get_final_loss_advice_list(#claimId#))
			            <isEqual property="sortColumn" compareValue="adviceNo">
		              		ORDER BY advice_no
			            </isEqual>
			            <isEqual property="sortColumn" compareValue="dspCurrency">
		              		ORDER BY currency_desc
			            </isEqual>
			            <isEqual property="sortColumn" compareValue="paidAmount">
		              		ORDER BY paid_amt
			            </isEqual>
			            <isEqual property="sortColumn" compareValue="netAmount">
		              		ORDER BY net_amt
			            </isEqual>
			            <isEqual property="sortColumn" compareValue="adviceAmount">
		              		ORDER BY advise_amt
			            </isEqual>
			            <isNotNull property="sortColumn">
		              		<isEqual property="ascDescFlg" compareValue="ASC">
		              			ASC
		              		</isEqual>
		              		<isEqual property="ascDescFlg" compareValue="DESC">
		              			DESC
		              		</isEqual>
		              	</isNotNull>) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE (GICL_ADVICE_PKG.get_final_loss_advice_list(#claimId#))) b)
		<!-- WHERE rownum_ BETWEEN #from# AND #to# -->
		<!-- bonok :: 7.8.2015 :: UCPB SR 19733 -->
	</select> 
	
	<select id="checkGeneratedFla" resultClass="java.lang.String">
		SELECT GICL_ADVICE_PKG.check_generated_fla(#claimId#, #adviceId#)
		  FROM DUAL
	</select>
	
	<select id="getGICLS260Advice" resultMap="getGICLS260AdviceResultMap" parameterClass="java.util.HashMap">
		SELECT * FROM TABLE (GICL_ADVICE_PKG.get_gicls260_advice(#claimId#, #issCd#, #adviceId#, #clmLossId#, #histSeqNo#))
	</select>
	
</sqlMap>