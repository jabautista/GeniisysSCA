<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd" >

<sqlMap namespace="GIISPayTerm">
	<typeAlias alias="GIISPayTerm" type="com.geniisys.giis.entity.GIISPayTerm"/>
	
	<resultMap class="GIISPayTerm" id="GIISPayTermMap" extends="BaseEntity.TableGridResultMap">
		<result property="paytTerms" column="PAYT_TERMS"/>
		<result property="paytTermsDesc" column="PAYT_TERMS_DESC"/>
		<result property="noOfPayt" column="NO_OF_PAYT"/>
		<result property="annualSw" column="ANNUAL_SW"/>
		<result property="noOfDays" column="NO_OF_DAYS"/>
		<result property="onInceptTag" column="ON_INCEPT_TAG"/>
		<result property="remarks" column="REMARKS"/>
		<result property="userId" column="USER_ID"/>
		<result property="noPaytDays" column="NO_PAYT_DAYS"/>
		<result property="lastUpdate" column="LAST_UPDATE"/>
		<result property="rowNum" 		column="rownum_"/>
		<result property="rowCount" 	column="count_"/>
	</resultMap>
	
	<!-- Kenneth L. 04.24.2013 -->
	<resultMap class="GIISPayTerm" id="GIISPayTermLOVMap" extends="BaseEntity.TableGridResultMap">
		<result property="paytTerms" column="PAYT_TERMS"/>
		<result property="paytTermsDesc" column="PAYT_TERMS_DESC"/>
		<result property="noOfPayt" column="NO_OF_PAYT"/>
		<result property="rowNum" 		column="rownum_"/>
		<result property="rowCount" 	column="count_"/>
	</resultMap>
	
	<select id="getPaymentTerm" resultMap="GIISPayTermMap">
	 SELECT *
		  FROM (SELECT a.*, b.count_, rownum rownum_
		          FROM (SELECT *
		                  FROM TABLE (giiss018_pkg.get_pay_terms_list)
 							<isNotNull property="filter">
								WHERE 1=1
								<isNotEmpty prepend="AND"  property="paytTerms">
									UPPER(payt_terms) LIKE UPPER(#paytTerms#)
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="paytTermsDesc">
									UPPER(payt_terms_desc) LIKE UPPER(#paytTermsDesc#)
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="noOfPayt">
									no_of_payt = #noOfPayt#
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="noOfDays">
									no_of_days = #noOfDays#
								</isNotEmpty>
								<isNotEmpty prepend="AND" property="remarks">
  		     	   		  			UPPER(remarks) LIKE UPPER(#remarks#)
  		     	   		  		</isNotEmpty>
								<isNotEmpty prepend="AND"  property="annualSw">
									UPPER(annual_sw) LIKE UPPER(#annualSw#)
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="onInceptTag">
									UPPER(on_incept_tag) LIKE UPPER(#onInceptTag#)
								</isNotEmpty>
								<!-- <isNotEmpty prepend="AND"  property="userId">
									UPPER(user_id) LIKE UPPER(#userId#)
								</isNotEmpty> -->
								<isNotEmpty prepend="AND"  property="noPaytDays">
									UPPER(no_payt_days) LIKE UPPER(#noPaytDays#)
								</isNotEmpty>
								<!-- <isNotEmpty prepend="AND"  property="lastUpdate">
									UPPER(last_update) LIKE UPPER(#lastUpdate#)
								</isNotEmpty> -->
							</isNotNull>		                  
		                  <isEqual property="sortColumn" compareValue="paytTerms">
			              		ORDER BY payt_terms
			              </isEqual>
                          <isEqual property="sortColumn" compareValue="paytTermsDesc">
			              		ORDER BY payt_terms_desc
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="noOfPayt">
			              		ORDER BY no_of_payt
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="annualSw">
			              		ORDER BY annual_sw
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="noOfDays">
			              		ORDER BY no_of_days
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="onInceptTag">
			              		ORDER BY on_incept_tag
			              </isEqual>
			               <isEqual property="sortColumn" compareValue="remarks">
			              		ORDER BY remarks
			              </isEqual>			
			           <!--    <isEqual property="sortColumn" compareValue="userId">
			              		ORDER BY user_id
			              </isEqual> -->	
			              <isEqual property="sortColumn" compareValue="noPaytDays">
			              		ORDER BY no_payt_days
			              </isEqual>	
			             <!--  <isEqual property="sortColumn" compareValue="lastUpdate">
			              		ORDER BY last_update
			              </isEqual> -->		               
			              <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>
		                  ) a,
		               (SELECT count (*) count_
		                  FROM TABLE (giiss018_pkg.get_pay_terms_list)
		                  <isNotNull property="filter">
		                  WHERE 1=1
								<isNotEmpty prepend="AND"  property="paytTerms">
									UPPER(payt_terms) LIKE UPPER(#paytTerms#)
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="paytTermsDesc">
									UPPER(payt_terms_desc) LIKE UPPER(#paytTermsDesc#)
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="noOfPayt">
									no_of_payt = #noOfPayt#
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="noOfDays">
									no_of_days = #noOfDays#
								</isNotEmpty>
								<isNotEmpty prepend="AND" property="remarks">
  		     	   		  			UPPER(remarks) LIKE UPPER(#remarks#)
  		     	   		  		</isNotEmpty>
								<isNotEmpty prepend="AND"  property="annualSw">
									UPPER(annual_sw) LIKE UPPER(#annualSw#)
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="onInceptTag">
									UPPER(on_incept_tag) LIKE UPPER(#onInceptTag#)
								</isNotEmpty>
								<!-- <isNotEmpty prepend="AND"  property="userId">
									UPPER(user_id) LIKE UPPER(#userId#)
								</isNotEmpty> -->
								<isNotEmpty prepend="AND"  property="noPaytDays">
									UPPER(no_payt_days) LIKE UPPER(#noPaytDays#)
								</isNotEmpty>
								<!-- <isNotEmpty prepend="AND"  property="lastUpdate">
									UPPER(last_update) LIKE UPPER(#lastUpdate#)
								</isNotEmpty> -->
							</isNotNull>	
		                  ) b)
		 WHERE rownum_ BETWEEN #from# AND #to# 
	</select>
	
	<insert id="setPaytTermRow" parameterClass="GIISPayTerm">
  		DECLARE
  			v_payTerm   giis_payterm%ROWTYPE;
		BEGIN
		  giis_users_pkg.app_user := #appUser#;
		  	
		  v_payTerm.payt_terms := #paytTerms#;
		  v_payTerm.payt_terms_desc := #paytTermsDesc#;
		  v_payTerm.no_of_payt := #noOfPayt#;
		  v_payTerm.annual_sw := #annualSw#;
		  v_payTerm.no_of_days := #noOfDays#; 
		  v_payTerm.on_incept_tag := #onInceptTag#;
		  v_payTerm.remarks := #remarks#;
		  v_payTerm.user_id := #appUser#;
		  v_payTerm.no_payt_days := #noPaytDays#;
		  
		  giiss018_pkg.set_pay_terms_list (v_payTerm);
		END;
  	</insert>
  	
  	<delete id="deletePaytTermRow" parameterClass="GIISPayTerm">
  		BEGIN
  			giiss018_pkg.delete_pay_terms_list(#paytTerms#);
  		END;
  	</delete>
  	
  	<select id="validateDeletePaytTerm" parameterClass="java.lang.String" resultClass="java.lang.String">
  		SELECT giiss018_pkg.validate_del_paytterm(#paytTermToDelete#) FROM DUAL
  	</select>
	
	<select id="validateAddPaytTerm" parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT giiss018_pkg.validate_add_paytterm(#paytTermToAdd#) FROM DUAL
	</select>
	
	<select id="validateAddPaytTermDesc" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT giiss018_pkg.validate_add_paytermdesc(#paytTerm#, #paytTermDescToAdd#) FROM DUAL
	</select>
	
	<!-- Kenneth L 04.24.2013 -->
	<select id="getPaytermGIUTS022LOV" resultMap="GIISPayTermLOVMap">		 
		SELECT *
  		  FROM (SELECT ROWNUM rownum_, 
	               	   b.count_, 
	              	   a.* 
	          	  FROM (SELECT * FROM TABLE(GIIS_PAYTERM_PKG.get_payterm_lov_giuts022)
          	   	<isNotNull property="findText">
					WHERE (UPPER(payt_terms_desc) LIKE UPPER(#findText#) OR
								UPPER(no_of_payt) LIKE UPPER(#findText#))
				</isNotNull>
	            <isEqual property="sortColumn" compareValue="paytTermsDesc">
              		ORDER BY payt_terms_desc
	            </isEqual>
	            <isEqual property="sortColumn" compareValue="noOfPayt">
              		ORDER BY no_of_payt
	            </isEqual>
	            <isNotNull property="sortColumn">
              		<isEqual property="ascDescFlg" compareValue="ASC">
              			ASC
              		</isEqual>
              		<isEqual property="ascDescFlg" compareValue="DESC">
              			DESC
              		</isEqual>
              	</isNotNull>) a,
              (SELECT count(*) count_
	          	 FROM TABLE(GIIS_PAYTERM_PKG.get_payterm_lov_giuts022)
	          	<isNotNull property="findText">
					<isNotNull property="findText">
					WHERE (UPPER(payt_terms_desc) LIKE UPPER(#findText#) OR
								UPPER(no_of_payt) LIKE UPPER(#findText#))
				</isNotNull>
				</isNotNull>)b) 
	    	WHERE rownum_ BETWEEN #from# AND #to# 	
 	</select>
 	
</sqlMap>