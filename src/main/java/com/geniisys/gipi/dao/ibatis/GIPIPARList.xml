<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd" >

<sqlMap namespace="GIPIPAR">

	<cacheModel id="oneDayClient" type="MEMORY">
		<flushInterval hours="24" />
		<property name="reference-type" value="WEAK" />
	</cacheModel>
	
	<typeAlias alias="GIPIPARClass" type="com.geniisys.gipi.entity.GIPIPARList"/>
	
	<resultMap id="GIPIPARAssd" class="GIPIPARClass">
		<result column="PAR_ID" 			property="parId"/>
		<result column="ASSD_NO" 			property="assdNo"/>
		<result column="ASSD_NAME" 			property="assdName"/>
		<result column="LINE_CD" 			property="lineCd"/>
		<result column="LINE_NAME" 			property="lineName"/>
		<result column="ISS_CD" 			property="issCd"/>
		<result column="PAR_YY" 			property="parYy"/>
		<result column="ISSUE_YY" 			property="issueYy"/>
		<result column="QUOTE_SEQ_NO" 		property="quoteSeqNo"/>
		<result column="PAR_TYPE" 			property="parType"/>
		<result column="ASSIGN_SW" 			property="assignSw"/>
		<result column="PAR_STATUS" 		property="parStatus"/>
		<result column="REMARKS" 			property="remarks"/>
		<result column="UNDERWRITER" 		property="underwriter"/>
		<result column="QUOTE_ID" 			property="quoteId"/>
		<result column="PAR_SEQ_NO" 		property="parSeqNo"/>
		<result column="PAR_NO" 			property="parNo"/>
		<result column="PACK_PAR_ID" 		property="packParId"/>
		<result column="PACK_PAR_NO" 		property="packParNo"/>
		<result column="PAR_SEQ_NO_C"		property="parSeqNoC"/>
		<result column="DISC_EXISTS"		property="discExists"/>
		<result column="PACK_POL_FLAG" 		property="packPolFlag"/>
		<result column="POL_FLAG" 			property="polFlag"/>
		<result column="SUBLINE_CD" 		property="sublineCd"/>
		<result column="POL_SEQ_NO" 		property="polSeqNo"/>
		<result column="OP_FLAG" 			property="opFlag"/>
		<result column="ENDT_POLICY_ID"		property="endtPolicyId"/>
		<result column="ENDT_POLICY_NO"		property="endtPolicyNo"/>
		<result column="INCEPT_DATE"		property="inceptDate"/>
		<result column="EXPIRY_DATE"		property="expiryDate"/>		
		<result column="EFF_DATE"			property="effDate"/>
		<result column="ENDT_EXPIRY_DATE"	property="endtExpiryDate"/>
		<result column="SHORT_RT_PERCENT"	property="shortRtPercent"/>
		<result column="COMP_SW"			property="compSw"/>
		<result column="PROV_PREM_PCT"		property="provPremPct"/>
		<result column="PROV_PREM_TAG"		property="provPremTag"/>
		<result column="PRORATE_FLAG"		property="prorateFlag"/>
		<result column="WITH_TARIFF_SW"		property="withTariffSw"/>
		<result column="LINE_MOTOR"			property="lineMotor"/>
		<result column="LINE_FIRE"			property="lineFire"/>
		<result column="CTPL_CD"			property="ctplCd"/>
		<result column="BACK_ENDT"			property="backEndt"/>	
		<result column="ADDRESS1"			property="address1"/>
		<result column="ADDRESS2"			property="address2"/>
		<result column="ADDRESS3"			property="address3"/>
		<result column="ENDT_TAX"			property="endtTax"/>	
		<result column="RENEW_NO"			property="renewNo"/>
		<result column="DIST_NO"			property="distNo"/>		
		<result column="GIPI_WINVOICE_EXIST"			property="gipiWInvoiceExist"/>
		<result column="GIPI_WINV_TAX_EXIST"			property="gipiWInvTaxExist"/>
		<result column="BINDER_EXIST"		property="binderExist"/>	
		<result column="str_incept_date" property="strInceptDate"/>	
		<result column="str_expiry_date" property="strExpiryDate"/>
	</resultMap>
	
	<resultMap id="GIPIPARList" class="GIPIPARClass">
		<result column="PAR_ID" 			property="parId"/>
		<result column="ASSD_NO" 			property="assdNo"/>
		<result column="ASSD_NAME" 			property="assdName"/>
		<result column="LINE_CD" 			property="lineCd"/>
		<result column="ISS_CD" 			property="issCd"/>
		<result column="PAR_YY" 			property="parYy"/>
		<result column="QUOTE_SEQ_NO" 		property="quoteSeqNo"/>
		<result column="PAR_TYPE" 			property="parType"/>
		<result column="ASSIGN_SW" 			property="assignSw"/>
		<result column="STATUS" 			property="status"/>
		<result column="REMARKS" 			property="remarks"/>
		<result column="UNDERWRITER" 		property="underwriter"/>
		<result column="QUOTE_ID" 			property="quoteId"/>
		<result column="PAR_SEQ_NO" 		property="parSeqNo"/>
		<result column="PAR_NO" 			property="parNo"/>
		<result column="PACK_PAR_ID" 		property="packParId"/>
		<result column="PACK_PAR_NO" 		property="packParNo"/>
		<result column="PAR_STATUS"			property="parStatus"/>
		<result column="POL_FLAG" 			property="polFlag"/>
		<result column="SUBLINE_CD" 		property="sublineCd"/>
		<result column="POL_SEQ_NO" 		property="polSeqNo"/>
		<result column="ISSUE_YY" 			property="issueYy"/>
		<result column="OP_FLAG" 			property="opFlag"/>
		<result column="ADDRESS1"			property="address1"/>
		<result column="ADDRESS2"			property="address2"/>
		<result column="ADDRESS3"			property="address3"/>
		<result column="BANK_REF_NO"		property="bankRefNo"/>
		<result column="CN_DATE_PRINTED"	property="cnDatePrinted"/>
		<result column="ROWNUM_" 			property="rowNum" />			
		<result column="COUNT_"				property="rowCount"/>
	</resultMap>
	
	<resultMap class="GIPIPARClass" id="newParId">
		<result column="PAR_ID" 			property="parId"/>
	</resultMap>
	
	<resultMap class="GIPIParClass" id="PackItemParListResultMap">
		<result column="PAR_ID" 			property="parId"/>
		<result column="LINE_CD" 			property="lineCd"/>
		<result column="MENU_LINE_CD" 		property="menuLineCd"/>
		<result column="LINE_NAME" 			property="lineName"/>
		<result column="ISS_CD" 			property="issCd"/>
		<result column="PAR_YY" 			property="parYy"/>
		<result column="OP_FLAG" 			property="opFlag"/>
		<result column="PAR_STATUS" 		property="parStatus"/>
		<result column="QUOTE_SEQ_NO" 		property="quoteSeqNo"/>
		<result column="PAR_SEQ_NO" 		property="parSeqNo"/>
		<result column="PAR_NO" 			property="parNo"/>
		<result column="PACK_PAR_ID" 		property="packParId"/>
		<result column="SUBLINE_CD" 		property="sublineCd"/>
		<result column="SUBLINE_NAME" 		property="sublineName"/>
		<result column="REGION_CD"			property="regionCd" />
		<result column="POL_FLAG"			property="polFlag" />
		<result column="PACK_POL_FLAG"		property="packPolFlag" />
	</resultMap>
	
	<resultMap class="GIPIParClass" id="parListByPackParIdMap">
		<result column="PAR_ID" 			property="parId"/>
		<result column="LINE_CD" 			property="lineCd"/>
		<result column="ISS_CD" 			property="issCd"/>
	</resultMap>
	
	<resultMap class="GIPIParClass" id="parAssuredListMap">
		<result column="ASSD_NO"			property="assdNo"/>
		<result column="ASSD_NAME"			property="assdName"/>
		<result column="rownum_"			property="rowNum"/>
		<result column="count_"				property="rowCount"/>
	</resultMap>
	
	<resultMap class="GIPIParClass" id="parCheckStatus">
		<result column="PAR_ID"				property="parId"/>
		<result column="PAR_STATUS"			property="parStatus"/>
		<result column="PAR_TYPE" 			property="parType"/>
		<result column="IS_PACK" 			property="isPack"/> <!-- added by jeffdojello 04.24.2013 -->
	</resultMap>
	
	<select id="getNewParId" resultMap="newParId">
		SELECT PARLIST_PAR_ID_S.NEXTVAL par_id
      	          FROM SYS.DUAL
	</select>

	<resultMap id="getParAttachmentsResultMap" class="java.lang.String">
		<result column="file_name" property="fileName" />
	</resultMap>
	
	<select id="getParAttachments" resultMap="getParAttachmentsResultMap">
		SELECT *
		  FROM TABLE (gipi_wpictures_pkg.get_attachment_by_par(#parId#))
	</select>

	<procedure id="saveGIPIPAR" parameterClass="GIPIPARClass">
		DECLARE
			par					GIPI_PARLIST%ROWTYPE;
		BEGIN
			giis_users_pkg.app_user := #userId#;
			
			par.par_id			:= #parId#;
  			par.line_cd			:= #lineCd#;
			par.iss_cd			:= #issCd#;
			par.par_yy			:= #parYy#;
			par.quote_seq_no	:= #quoteSeqNo#;
			par.assd_no			:= #assdNo#;
			par.underwriter		:= #underwriter#;
			par.par_status		:= #parStatus#;
			par.par_type		:= #parType#;
			par.quote_id		:= #quoteId#;
			par.assign_sw		:= #assignSw#;
			par.remarks			:= #remarks#;
			par.address1		:= #address1#;
			par.address2		:= #address2#;
			par.address3		:= #address3#;
			Gipi_Parlist_Pkg.save_par(par);
		END;
	</procedure>
		
	<procedure id="updateAddress" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			
			UPDATE GIPI_PARLIST
			   SET address1 = #address1#, 
			       address2 = #address2#,
			       address3 = #address3#
			  WHERE par_id = #parId#;
	    END;
	</procedure>
	
	<select id="getGIPIPARDetails" resultMap="GIPIPARAssd">
		SELECT * FROM TABLE(Gipi_Parlist_Pkg.get_gipi_parlist(#parId#, #packParId#))
	</select>
		
	<select id="getGIPIPARDetailsFromParId" resultMap="GIPIPARAssd">
		SELECT * FROM TABLE(Gipi_Parlist_Pkg.get_gipi_parlist(#parId#))
	</select>
	
	<select id="getGipiParList" resultMap="GIPIPARList" parameterClass="java.util.HashMap">
		select * from table(GIPI_PARLIST_PKG.get_gipi_parlist(#lineCd#,'','GIPIS001', #keyword#, #userId#))
	</select>
	
	<!-- nica 02.04.2011 -->
	
	<select id="getGipiParListTableGrid" resultMap="GIPIPARList" parameterClass="java.util.HashMap">
	<!-- Modified by pjsantos 09/23/2016, for optimization GENQA 5678 added #sortColumn#, #ascDescFlg#, #from#, #to# -->	
		<!-- SELECT *
			  FROM (SELECT rownum rownum_ , 
			               b.count_,
			               a.* 
			          FROM (-->SELECT * 
			                  FROM TABLE (GIPI_PARLIST_PKG.get_gipi_parlist_policy(#lineCd#, #filter.issCd#, #moduleId#, 
			                  #userId#, #allUserSw#, #filter.parYy#, #filter.parSeqNo#, #filter.quoteSeqNo#, #filter.assdName#, 
			                  #filter.underwriter#, #filter.status#, #filter.bankRefNo#, #riSwitch#,
			                  #sortColumn#, #ascDescFlg#, #from#, #to#))
			                 <!--  <isEqual property="sortColumn" compareValue="parNo">
			              		ORDER BY par_no
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="assdName">
				              		ORDER BY assd_name
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="underwriter">
				              		ORDER BY underwriter
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="status">
				              		ORDER BY status
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="remarks">
				              		ORDER BY remarks
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="bankRefNo">
				              		ORDER BY bank_ref_no
				              </isEqual>
				              <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              	  </isNotNull>) a, 
			               (SELECT count(*) count_ 
			                  FROM TABLE (GIPI_PARLIST_PKG.get_gipi_parlist_policy(#lineCd#, #filter.issCd#, #moduleId#, #userId#, #allUserSw#, #filter.parYy#, #filter.parSeqNo#, #filter.quoteSeqNo#, #filter.assdName#, #filter.underwriter#, #filter.status#, #filter.bankRefNo#, #riSwitch#))) b ) 
			 WHERE rownum_ BETWEEN #from# AND #to#-->
	</select>
	
	<select id="getEndtGipiParListTableGrid" resultMap="GIPIPARList" parameterClass="java.util.HashMap">
<!-- Modified by pjsantos 09/23/2016, for optimization GENQA 5678 added #sortColumn#, #ascDescFlg#, #from#, #to# -->	
	   <!-- SELECT *
			  FROM (SELECT rownum rownum_, 
			               b.count_,  
			               a.* 
			          FROM (-->SELECT * 
			                  FROM TABLE (GIPI_PARLIST_PKG.get_gipi_parlist_endt(#lineCd#, #filter.issCd#, #moduleId#, 
			                  #userId#, #allUserSw#, #filter.parYy#, #filter.parSeqNo#, #filter.quoteSeqNo#, #filter.assdName#, 
			                  #filter.underwriter#, #filter.status#, #filter.bankRefNo#,#riSwitch#,
			                  #sortColumn#, #ascDescFlg#, #from#, #to#))
			                 <!--  <isEqual property="sortColumn" compareValue="parNo">
			              		ORDER BY par_no
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="assdName">
				              		ORDER BY assd_name
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="underwriter">
				              		ORDER BY underwriter
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="status">
				              		ORDER BY status
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="remarks">
				              		ORDER BY remarks
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="bankRefNo">
				              		ORDER BY bank_ref_no
				              </isEqual>
				              <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              	  </isNotNull>) a, 
			               (SELECT count(*) count_ 
			                  FROM TABLE (GIPI_PARLIST_PKG.get_gipi_parlist_endt(#lineCd#, #filter.issCd#, #moduleId#, #userId#, #allUserSw#, #filter.parYy#, #filter.parSeqNo#, #filter.quoteSeqNo#, #filter.assdName#, #filter.underwriter#, #filter.status#, #filter.bankRefNo#,#riSwitch#))) b) 
			 WHERE rownum_ BETWEEN #from# AND #to#-->
	</select>
	
	<select id="checkParQuote" resultClass="java.lang.String">
		SELECT GIPI_PARLIST_PKG.check_par_quote(#parId#) FROM DUAL
	</select>
	
	<select id="getEndtParList" resultMap="GIPIPARList" parameterClass="java.util.HashMap">
		SELECT * FROM TABLE(GIPI_PARLIST_PKG.get_endt_parlist(#lineCd#, '', 'GIPIS001', #keyword#, #userId#))	
	</select>
	
	<select id="getParAssuredList" resultMap="parAssuredListMap" parameterClass="java.util.HashMap">
		SELECT *
  		  FROM (SELECT rownum rownum_,b.count_,a.*
          		  FROM (SELECT * FROM TABLE(gipi_parlist_pkg.get_par_assured_list(#keyword#))
          		<isNotNull property="sortColumn">
             		<isEqual property="sortColumn" compareValue="assdNo">
	              		ORDER BY assd_no
	                </isEqual>
             		<isEqual property="sortColumn" compareValue="assdName">
	              		ORDER BY UPPER(assd_name)
	                </isEqual>
             		<isEqual property="ascDescFlg" compareValue="ASC">
             			ASC
             		</isEqual>
             		<isEqual property="ascDescFlg" compareValue="DESC">
             			DESC
             		</isEqual>
             	 </isNotNull>
          		) a,
               		   (SELECT count(*) count_ FROM TABLE(gipi_parlist_pkg.get_par_assured_list(#keyword#))) b)        
 		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<procedure id="updateStatusFromQuote" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			Gipi_Parlist_Pkg.update_status_from_quote(#quoteId#, #parStatus#);
		END;
	</procedure>
	
	<procedure id="insertPARHist" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARHIST_PKG.set_gipi_parhist(#parId#, #userId#, #entrySource#, #parstatCd#);
		END;
	</procedure>	
	
	<procedure id="deleteBillsDetails" parameterClass="java.lang.Integer">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
		    DELETE_BILL(#parId#);
  		END;
	</procedure>
	
	<delete id="deleteBills" parameterClass="java.lang.Integer">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
		    DELETE_BILL(#parId#);
  		END;
	</delete>
	
	<procedure id="setParStatusToWithPeril" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.set_status_wperil(#parId#, #packParId#);
		END;
	</procedure>
	
	<procedure id="setParStatusToWithPeril1" parameterClass="java.lang.Integer">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.set_status_wperil(#parId#);
		END;
	</procedure>
	
	<procedure id="updatePARStatus" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.update_par_status(#parId#, #parStatus#);
		END;
	</procedure>
	
	<procedure id="getParNo" parameterClass="java.lang.Integer" resultClass="java.lang.String">
		SELECT GIPI_PARLIST_PKG.get_par_no(#parId#) FROM dual
	</procedure>
	
	<procedure id="getParNo2" parameterClass="java.lang.Integer" resultClass="java.lang.String">
		SELECT GIPI_PARLIST_PKG.get_par_no_2(#policyId#) FROM dual
	</procedure>

	<!-- whofeih - 06.10.2010 -->
	<!-- <procedure id="createParListWPack" parameterClass="java.util.HashMap">
		BEGIN
			Gipi_Parlist_Pkg.create_parlist_wpack(#packQuoteId#, #lineCd#, #packParId#, #issCd#, #assdNo#, #message#);
		END;
	</procedure> -->
	
	<!-- copy par related mappings -->
	
	<parameterMap id="CopyParListMap" class="java.util.HashMap">
		<parameter property="appUser"			jdbcType="VARCHAR" 	javaType="java.lang.String"  mode="IN"/>
		<parameter property="parId"			    jdbcType="VARCHAR" 	javaType="java.lang.Integer" mode="IN"/>
		<parameter property="userId"			jdbcType="VARCHAR" 	javaType="java.lang.String"  mode="IN"/>
		<parameter property="lineCd"			jdbcType="VARCHAR" 	javaType="java.lang.String"  mode="IN"/>
		<parameter property="issCd" 			jdbcType="VARCHAR" 	javaType="java.lang.String"  mode="IN"/>
		<parameter property="newParId" 			jdbcType="VARCHAR" 	javaType="java.lang.Integer" mode="OUT"/>
		<parameter property="openFlag" 			jdbcType="VARCHAR" 	javaType="java.lang.String"  mode="OUT"/>
		<parameter property="menuLine" 			jdbcType="VARCHAR" 	javaType="java.lang.String"  mode="OUT"/>
		<parameter property="newParSeqNo" 		jdbcType="VARCHAR" 	javaType="java.lang.Integer" mode="OUT"/>
		<parameter property="parNo" 			jdbcType="VARCHAR" 	javaType="java.lang.String"  mode="OUT"/>
	</parameterMap>
	
	<parameterMap id="CopyWEndtTextMap" class="java.util.HashMap">
		<parameter property="parId"			    jdbcType="VARCHAR" 	javaType="java.lang.Integer" mode="IN"/>
		<parameter property="newParId" 			jdbcType="VARCHAR" 	javaType="java.lang.Integer" mode="IN"/>
		<parameter property="userId"			jdbcType="VARCHAR" 	javaType="java.lang.String"  mode="IN"/>
		<parameter property="endtText01" 		jdbcType="VARCHAR" 	javaType="java.lang.String"  mode="OUT"/>
		<parameter property="endtText02" 		jdbcType="VARCHAR" 	javaType="java.lang.String"  mode="OUT"/>
		<parameter property="endtText03" 		jdbcType="VARCHAR" 	javaType="java.lang.String"  mode="OUT"/>
		<parameter property="endtText04" 		jdbcType="VARCHAR" 	javaType="java.lang.String"  mode="OUT"/>
		<parameter property="endtText05" 		jdbcType="VARCHAR" 	javaType="java.lang.String"  mode="OUT"/>
		<parameter property="endtText06" 		jdbcType="VARCHAR" 	javaType="java.lang.String"  mode="OUT"/>
		<parameter property="endtText07" 		jdbcType="VARCHAR" 	javaType="java.lang.String"  mode="OUT"/>
		<parameter property="endtText08" 		jdbcType="VARCHAR" 	javaType="java.lang.String"  mode="OUT"/>
		<parameter property="endtText09" 		jdbcType="VARCHAR" 	javaType="java.lang.String"  mode="OUT"/>
		<parameter property="endtText10" 		jdbcType="VARCHAR" 	javaType="java.lang.String"  mode="OUT"/>
		<parameter property="endtText11" 		jdbcType="VARCHAR" 	javaType="java.lang.String"  mode="OUT"/>
		<parameter property="endtText12" 		jdbcType="VARCHAR" 	javaType="java.lang.String"  mode="OUT"/>
		<parameter property="endtText13" 		jdbcType="VARCHAR" 	javaType="java.lang.String"  mode="OUT"/>
		<parameter property="endtText14" 		jdbcType="VARCHAR" 	javaType="java.lang.String"  mode="OUT"/>
		<parameter property="endtText15" 		jdbcType="VARCHAR" 	javaType="java.lang.String"  mode="OUT"/>
		<parameter property="endtText16" 		jdbcType="VARCHAR" 	javaType="java.lang.String"  mode="OUT"/>
		<parameter property="endtText17" 		jdbcType="VARCHAR" 	javaType="java.lang.String"  mode="OUT"/>
	</parameterMap>
	
	<parameterMap class="map" id="validateParStatusEndtParamMap">
		<parameter property="parId"		jdbcType="INTEGER"	javaType="java.lang.Integer"	mode="IN" />
		<parameter property="endtTaxSw"	jdbcType="VARCHAR"	javaType="java.lang.String"		mode="IN" />
	</parameterMap>
	
	<parameterMap class="map" id="checkParRIMap">
		<parameter property="parId"		jdbcType="INTEGER" 	javaType="java.lang.Integer"  mode="IN"/>
		<parameter property="exist"		jdbcType="VARCHAR" 	javaType="java.lang.String"   mode="OUT"/>
	</parameterMap>
	
	<parameterMap class="map"  id="copyParToParMap">
		<parameter property="userId" 	    jdbcType="VARCHAR" javaType="java.lang.String"  mode="IN"/> <!-- Added by jeffdojello 04192013 -->
		<parameter property="parId" 		jdbcType="INTEGER" javaType="java.lang.Integer" mode="IN"/>
		<parameter property="userId" 	    jdbcType="VARCHAR" javaType="java.lang.String"  mode="IN"/>
		<parameter property="issCd" 		jdbcType="VARCHAR" javaType="java.lang.String"  mode="IN"/>
		<parameter property="varLineCd" 	jdbcType="VARCHAR" javaType="java.lang.String"  mode="IN"/>
		<parameter property="newParNo" 		jdbcType="VARCHAR" javaType="java.lang.String"  mode="OUT"/>
		<parameter property="oldParNo" 		jdbcType="VARCHAR" javaType="java.lang.String"  mode="OUT"/>
	</parameterMap>
	
	<resultMap class="GIPIPARClass" id="getPackPolicyListMap">
		<result property="parId"			column="PAR_ID"/>
		<result property="lineCd"			column="LINE_CD"/>
		<result property="lineName"			column="LINE_NAME"/>
		<result property="issCd"			column="ISS_CD"/>
		<result property="parYy"			column="PAR_YY"/>
		<result property="issueYy"			column="ISSUE_YY"/>
		<result property="parSeqNo"			column="PAR_SEQ_NO"/>
		<result property="quoteSeqNo"		column="QUOTE_SEQ_NO"/>
		<result property="remarks"			column="REMARKS"/>
		<result property="sublineCd"		column="SUBLINE_CD"/>
		<result property="sublineName"		column="SUBLINE_NAME"/>
		<result property="parNo"			column="PAR_NO"/>
		<result property="polSeqNo"			column="POL_SEQ_NO"/>
		<result property="endtPolicyNo"		column="ENDT_POLICY_NO"/>
		<result property="parType"			column="PAR_TYPE"/>
		<result property="polFlag"			column="POL_FLAG"/>
		<result property="packPolFlag"		column="PACK_POL_FLAG"/>
	</resultMap>

	<resultMap class="GIPIPARClass" id="parListLovMap">
		<result property="lineCd"			column="LINE_CD"/>
		<result property="issCd"			column="ISS_CD"/>
		<result property="parYy"			column="PAR_YY"/>
		<result property="parSeqNo"			column="PAR_SEQ_NO"/>
		<result property="rowNum"           column="ROWNUM_"/>
		<result property="rowCount"         column="COUNT_"/>
	</resultMap>
	
	<procedure id="copyParList" parameterMap="CopyParListMap">
		BEGIN
			giis_users_pkg.app_user := ?;
			GIPI_PARLIST_PKG.copy_parlist(?, ?, ?, ?, ?, ?, ?, ?, ?);
		END;
	</procedure>
	
	<procedure id="copyWPolBas" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_wpolbas(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
	
	<procedure id="copyWPolGenin" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_wpolgenin(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
	
	<procedure id="copyWOpenPolicy" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_wopen_policy(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
	
	<procedure id="copyWLimLiab" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_wlim_liab(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
	
	<procedure id="copyWPackLineSubline" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_wpack_line_subline(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
	
	<procedure id="copyWItem" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_witem(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
	
	<procedure id="copyWItmPerl" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_witmperl(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
	
	<procedure id="copyWInvoice" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_winvoice(#parId#, #newParId#, #userId#, #issCd#);
		END;
	</procedure>
	
	<procedure id="copyWInvPerl" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_winvperl(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
	
	<procedure id="copyWInstallment" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_winstallment(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
	
	<procedure id="copyWInvTax" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_winv_tax(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
	
	<procedure id="copyWPolBasDiscount" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_wpolbas_discount(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
	
	<procedure id="copyWItemDiscount" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_witem_discount(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
	
	<procedure id="copyWPerilDiscount" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_wperil_discount(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
	
	<procedure id="copyCoIns" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_co_ins(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
	
	<procedure id="copyWEndtText" parameterMap="CopyWEndtTextMap">
		{ CALL GIPI_PARLIST_PKG.copy_wendttext(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) }
	</procedure>
	
	<procedure id="copyWCommInvoices" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_wcomm_invoices(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
	
	<procedure id="copyWCommInvPerils" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_wcomm_inv_perils(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
	
	<procedure id="copyWMortgagee" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_wmortgagee(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
	
	<procedure id="copyOrigCommInvoice" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_orig_comm_invoice(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
	
	<procedure id="copyOrigCommInvPeril" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_orig_comm_inv_peril(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
	
	<procedure id="copyOrigInvoice" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_orig_invoice(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
	
	<procedure id="copyOrigInvPeril" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_orig_invperil(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
	
	<procedure id="copyOrigInvTax" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_orig_inv_tax(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
	
	<procedure id="copyOrigItmPeril" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_orig_itmperil(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
	     
	    <!-- line related copy -->
	     
	    <!-- fire -->
	<procedure id="copyWFireItm" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_wfireitm(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
	
		<!-- motorcar -->
	<procedure id="copyWVehicle" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_wvehicle(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
	
	<procedure id="copyWMcacc" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_wmcacc(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
	
		<!-- accident -->
	<procedure id="copyWAccidentItem" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_waccident_item(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
	
	<procedure id="copyWBeneficiary" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_wbeneficiary(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
	
	<procedure id="copyWGroupedItems" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_wgrouped_items(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
	
	<procedure id="copyWGrpItemsBeneficiary" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_wgrp_items_beneficiary(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
	
		<!-- marine hull -->
	<procedure id="copyWItemVes" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_witem_ves(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
	
		<!-- marine cargo -->
	<procedure id="copyWCargo" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_wcargo(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
	
	<procedure id="copyWVesAir" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_wves_air(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
	
	<procedure id="copyWVesAccumulation" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_wves_accumulation(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
	
	<procedure id="copyWOpenLiab" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_wopen_liab(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
	
	<procedure id="copyWOpenCargo" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_wopen_cargo(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
	
	<procedure id="copyWOpenPeril" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_wopen_peril(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
	
		<!-- casualty -->
	<procedure id="copyWCasualtyItem" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_wcasualty_item(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
	
	<procedure id="copyWCasualtyPersonnel" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_wcasualty_personnel(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
		<!-- execute also the following:
		     copy_wgrouped_items
		     copy_wgrp_items_beneficiary -->
	<procedure id="copyWBankSchedule" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_wbank_schedule(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
		
		<!-- engineering -->
	<procedure id="copyWEnggBasic" parameterClass="java.util.HashMap">
		BEGIN
			GIPI_PARLIST_PKG.copy_wengg_basic(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
	
	<procedure id="copyWLocation" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_wlocation(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
	
	<procedure id="copyWPrincipal" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_wprincipal(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
	
		<!-- surety -->
	<procedure id="copyWBondBasic" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_wbond_basic(#parId#, #newParId#, #userId#, #pLong#);		
		END;
	</procedure>
	
	<procedure id="copyWCoSignatory" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_wcosigntry(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
	
		<!-- aviation -->
	<procedure id="copyWAviationItem" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_waviation_item(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
	
	    <!-- line related copy -->
	    
	<procedure id="copyWPolWc" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_wpolwc(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
	
	<procedure id="copyWPolDist" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_pol_dist(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
	
	<procedure id="copyWDeductibles" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.copy_wdeductibles(#parId#, #newParId#, #userId#);		
		END;
	</procedure>
	
	<procedure id="crBillDistGetTsi" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			CR_BILL_DIST.get_tsi(#newParId#);		
		END;
	</procedure>

	<!-- end of copy par related mappings -->
	
	<!-- delete par related mappings -->
	
	<delete id="deleteWPolWc" parameterClass="java.lang.Integer">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.delete_wpolwc(#parId#);
		END;
	</delete>
	
	<delete id="deleteFireWorkfile" parameterClass="java.lang.Integer">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.delete_fire_workfile(#parId#);
		END;
	</delete>
	
	<delete id="deleteMotorcarWorkfile" parameterClass="java.lang.Integer">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.delete_motorcar_workfile(#parId#);
		END;
	</delete>
	
	<delete id="deleteAccidentWorkfile" parameterClass="java.lang.Integer">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.delete_accident_workfile(#parId#);
		END;
	</delete>
	
	<delete id="deleteCargoWorkfile" parameterClass="java.lang.Integer">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.delete_cargo_workfile(#parId#);
		END;
	</delete>
	
	<delete id="deleteHullWorkfile" parameterClass="java.lang.Integer">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.delete_hull_workfile(#parId#);
		END;
	</delete>
	
	<delete id="deleteCasualtyWorkfile" parameterClass="java.lang.Integer">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.delete_casualty_workfile(#parId#);
		END;
	</delete>
	
	<delete id="deleteEngineeringWorkfile" parameterClass="java.lang.Integer">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.delete_engineering_workfile(#parId#);
		END;
	</delete>
	
	<delete id="deleteBondsWorkfile" parameterClass="java.lang.Integer">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.delete_bonds_workfile(#parId#);
		END;
	</delete>
	
	<delete id="deleteAviationWorkfile" parameterClass="java.lang.Integer">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.delete_aviation_workfile(#parId#);
		END;
	</delete>
	
	<delete id="deleteByPackPolFlag" parameterClass="java.lang.Integer">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.delete_by_packpol_flag(#parId#);
		END;
	</delete>
	
	<delete id="deleteExpiry" parameterClass="java.lang.Integer">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.delete_expiry(#parId#);
		END;
	</delete>
	
	<delete id="deleteParDistribution" parameterClass="java.lang.Integer">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.delete_distribution(#parId#);
		END;
	</delete>
	
	<delete id="deleteOthWorkfile" parameterClass="java.lang.Integer">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.delete_oth_workfile(#parId#);
		END;
	</delete>
	
	<delete id="deleteWPolnRep" parameterClass="java.lang.Integer">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.delete_wpolnrep(#parId#);
		END;
	</delete>
	
	<delete id="deleteWPolBas" parameterClass="java.lang.Integer">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.delete_wpolbas(#parId#);
		END;
	</delete>
	
	<procedure id="deleteWorkFlowRec" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			DELETE_WORKFLOW_REC(#eventDesc#, #moduleId#, #user#, #colValue#);
		END;
	</procedure>
	
	<procedure id="setPackageMenu1" parameterClass="java.lang.Integer">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			SET_PACKAGE_MENU(#packParId#);
		END;
	</procedure>
	
	<!-- end of delete par related mappings -->
	
	<procedure id="validateParStatusEndt" parameterMap="validateParStatusEndtParamMap">
		{CALL VALIDATE_PAR_STATUS_ENDT(?, ?)}
	</procedure>
	
	<procedure id="checkRIBeforePARDeletion" parameterMap="checkParRIMap">
		{CALL CHECK_PAR_RI(?, ?)}
	</procedure>
	
	<procedure id="updateParRemarks" parameterClass="GIPIPARClass">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.update_par_remarks(#parId#, #remarks#);
		END;
	</procedure>
	
	<procedure id="updateParStatusByParId" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PARLIST_PKG.update_par_status_bill_prem(#parId#, #packParId#, #itemGrp#, #takeupSeqNo#);
		END;
	</procedure>
	
	<select id="getPackItemParList" parameterClass="map" resultMap="PackItemParListResultMap">
		SELECT * FROM TABLE(GIPI_PARLIST_PKG.get_pack_item_par_list(#packParId#, #lineCd#))
		  ORDER BY par_id
	</select>
	
	<select id="getAllPackItemParList" parameterClass="map" resultMap="PackItemParListResultMap">
		SELECT * FROM TABLE(GIPI_PARLIST_PKG.get_all_pack_item_par(#packParId#, #lineCd#))
		  ORDER BY par_id
	</select>
	
	<procedure id="insertPackParList" parameterClass="map">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			gipi_parlist_pkg.SET_GIPI_PARLIST_PACK (#packParId#, #parId#, #lineCd#, #issCd#, #parYy#, #quoteSeqNo#, #parType#,#assignSw#, #parStatus#,
     		 #assdNo#, #quoteId#, #underwriter#, #remarks#);
		END;
	</procedure>
	
	<select id="checkParlistDependency" parameterClass="java.lang.Integer" resultClass="java.lang.String">
		SELECT gipi_parlist_pkg.check_parlist_dependency(#inspNo#) FROM DUAL
	</select>
	
	<procedure id="insertQuoteToPAR">
		BEGIN
			giis_users_pkg.app_user := #underwriter#;
			GIPI_PARLIST_PKG.insert_quote_to_par(#quoteId#, #parId#, #lineCd#, #issCd#, #assdNo#, #underwriter#, #message#);
		END;  			                               
	</procedure>
	
	<select id="getPackPolicyList" resultMap="getPackPolicyListMap" parameterClass="java.lang.Integer">
		SELECT * FROM TABLE(GIPI_PARLIST_PKG.get_package_policy_list(#packParId#))
	</select>
	
	
	<procedure id="updateAssdNo" parameterClass="java.util.HashMap">
		BEGIN
			gipi_parlist_pkg.update_assd_no(#packParId#, #assdNo#);
		END;
	</procedure>
	
	<!-- added by reymon 05022013 -->
	<procedure id="updateInspNo" parameterClass="map">
		BEGIN
			gipi_parlist_pkg.update_insp_no(#parId#, #inspNo#);
		END;
	</procedure>
	
	<select id="getParlistByPackParId" resultMap="parListByPackParIdMap" parameterClass="java.lang.Integer">
		SELECT * FROM TABLE(GIPI_PARLIST_PKG.get_parlist_by_pack(#packParId#))
	</select>
	
	<procedure id="copyParToParGiuts007" parameterMap="copyParToParMap">
		BEGIN
		    giis_users_pkg.app_user := ?;   <!-- Added by jeffdojello 04192013 -->
			GIUTS007_PKG.copy_par_to_par(?, ?, ?, ?, ?, ?);
		END;
	</procedure>
	
	<select id="getParListLOV" resultMap="parListLovMap" parameterClass="map">
		<!-- SELECT * FROM TABLE(GIPI_PARLIST_PKG.get_lov_giuts007(#lineCd#, #issCd#, #parYy#)) -->
		 SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * FROM TABLE(GIUTS007_PKG.get_lov_giuts007(#lineCd#, #issCd#, #parYy#))
		                  <isNotNull property="findText">
		                  <!-- WHERE UPPER(par_seq_no) LIKE UPPER(#findText#) -->
		                  	WHERE ((UPPER(par_seq_no) LIKE UPPER(#findText#))
		                  	   OR (UPPER(line_cd) LIKE UPPER(#findText#))
		                  	   OR (UPPER(iss_cd) LIKE UPPER(#findText#))
		                  	   OR (UPPER(par_yy) LIKE UPPER(#findText#))
		                  	)	
		                  </isNotNull>
		                  <isEqual property="sortColumn" compareValue="lineCd">
			              		ORDER BY line_cd
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="issCd">
			              		ORDER BY iss_cd
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="parYy">
			              		ORDER BY par_yy
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="parSeqNo">
			              		ORDER BY par_seq_no
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>
		                  ) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE (GIUTS007_PKG.get_lov_giuts007(#lineCd#, #issCd#, #parYy#))
		                  <isNotNull property="findText">
		                  <!-- WHERE UPPER(par_seq_no) LIKE UPPER(#findText#) -->
		                  WHERE ((UPPER(par_seq_no) LIKE UPPER(#findText#))
		                  	   OR (UPPER(line_cd) LIKE UPPER(#findText#))
		                  	   OR (UPPER(iss_cd) LIKE UPPER(#findText#))
		                  	   OR (UPPER(par_yy) LIKE UPPER(#findText#))
		                  	)
		                  </isNotNull>
		                  ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<select id="parCheckStatusGiuts007" resultMap="parCheckStatus"  parameterClass="java.util.HashMap">
		SELECT * FROM TABLE(GIUTS007_PKG.get_par_status(#lineCd#,#issCd#,#parYr#,#parSeqNo#,#quoteSeqNo#)) 
	</select>
	
	<parameterMap class="map" id="insertParListGiuts008aMap">
		<parameter property="policyId" 	jdbcType="VARCHAR" 	javaType="java.lang.String"  mode="IN"/>
		<!-- <parameter property="parId" 	jdbcType="VARCHAR" 	javaType="java.lang.String"  mode="IN"/>
		<parameter property="packParId" jdbcType="VARCHAR" 	javaType="java.lang.String"  mode="IN"/> -->
		<parameter property="parIssCd" 	jdbcType="VARCHAR" 	javaType="java.lang.String"  mode="IN"/>
		<parameter property="userId" 	jdbcType="VARCHAR" 	javaType="java.lang.String"  mode="IN"/>
		<parameter property="message" 	jdbcType="VARCHAR" 	javaType="java.lang.String"  mode="OUT"/>
		<!-- <parameter property="parType" 	jdbcType="VARCHAR" 	javaType="java.lang.String"  mode="OUT"/> -->
	</parameterMap>
	
	<select id="generateParIdGiuts008a" resultClass="java.lang.Integer">
		SELECT parlist_par_id_s.nextval FROM DUAL
	</select>
	
	<procedure id="insertParListGiuts008a" parameterMap="insertParListGiuts008aMap"><!--  parameterClass="java.util.HashMap">-->
		CALL giuts008a_pkg.insert_parlist(?,?,?,?)
		<!-- CALL giuts008a_pkg.insert_parlist(#policyId#,#packParId#,#parIssCd#,#userId#,#message#,#p_par_type#) -->
	</procedure>
	
	<select id="getSharePercentageGipis085" resultClass="java.lang.String" parameterClass="java.lang.Integer">
		SELECT GET_SHARE_PERCENTAGE_GIPIS085(#parId#) FROM DUAL
	</select>
	
	<select id="whenNewFormInstGipis017B" resultClass="java.lang.Integer" parameterClass="java.lang.Integer">
		SELECT WHEN_NEWFORM_INST_GIPIS017B(#parId#) FROM DUAL
	</select>
	
<!-- GIPIS211 : shan 10.02.2013 -->
	<resultMap id="gipis211ParListMap" class="java.util.HashMap" extends="BaseEntity.TableGridResultMap">
		<result column="PAR_ID" 			property="parId"/>
		<result column="LINE_CD" 			property="lineCd"/>
		<result column="ISS_CD" 			property="issCd"/>
		<result column="PAR_YY" 			property="parYy"/>
		<result column="PAR_SEQ_NO" 		property="parSeqNo"/>
		<result column="QUOTE_SEQ_NO" 		property="quoteSeqNo"/>
		<result column="PAR_NUMBER" 		property="parNumber"/>
		<result column="PAR_STATUS" 		property="parStatus"/>
		<result column="ASSD_NO" 			property="assdNo"/>
		<result column="ASSD_NAME" 			property="assdName"/>
		<result column="INCEPT_DATE"		property="inceptDate"/>
		<result column="EXPIRY_DATE"		property="expiryDate"/>	
		<result column="UNDERWRITER" 		property="underwriter"/>
		<result column="NBT_PAR_NO" 		property="nbtParNo"/>
	</resultMap>
	
	<select id="getParListGIPIS211" resultMap="gipis211ParListMap" parameterClass="java.util.HashMap">
		SELECT * 
		  FROM (SELECT a.*, b.count_, rownum rownum_
		  		  FROM (SELECT * FROM TABLE(GIPIS211_PKG.GET_MOTORCAR_POL_PAR_LISTING(#globalParId#, #globalLineCd#, #userId#))
		  		  		<isNotNull property="filter">
		  		  			WHERE 1=1
		  		  			<isNotEmpty prepend="AND" property="parId">
		  		  				par_id = TO_NUMBER(#parId#)
		  		  			</isNotEmpty>
		  		  			<isNotEmpty prepend="AND" property="lineCd">
		  		  				UPPER(line_cd) LIKE UPPER(#lineCd#)
		  		  			</isNotEmpty>
		  		  			<isNotEmpty prepend="AND" property="issCd">
		  		  				UPPER(iss_cd) LIKE UPPER(#issCd#)
		  		  			</isNotEmpty>
		  		  			<isNotEmpty prepend="AND" property="parYy">
		  		  				par_yy = TO_NUMBER(#parYy#)
		  		  			</isNotEmpty>
		  		  			<isNotEmpty prepend="AND" property="parSeqNo">
		  		  				par_seq_no = TO_NUMBER(#parSeqNo#)
		  		  			</isNotEmpty>
		  		  			<isNotEmpty prepend="AND" property="quoteSeqNo">
		  		  				quote_seq_no = TO_NUMBER(#quoteSeqNo#)
		  		  			</isNotEmpty>
		  		  			<isNotEmpty prepend="AND" property="parStatus">
		  		  				par_status = TO_NUMBER(#parStatus#)
		  		  			</isNotEmpty>
		  		  			<isNotEmpty prepend="AND" property="assdNo">
		  		  				assdNo = #assdNo#
		  		  			</isNotEmpty>
		  		  			<isNotEmpty prepend="AND" property="assdName">
		  		  				UPPER(assd_name) LIKE UPPER(#assdName#)
		  		  			</isNotEmpty>		  		  			
		  		  			<isNotEmpty prepend="AND" property="inceptDate">
		  		  				TRUNC(incept_date) = TO_DATE(#inceptDate#, 'MM-DD-RRRR')
		  		  			</isNotEmpty> 		  			
		  		  			<isNotEmpty prepend="AND" property="expiryDate">
		  		  				TRUNC(expiry_date) = TO_DATE(#expiryDate#, 'MM-DD-RRRR')
		  		  			</isNotEmpty>
		  		  			<isNotEmpty prepend="AND" property="underwriter">
		  		  				UPPER(underwriter) LIKE UPPER(#underwriter#)
		  		  			</isNotEmpty>
		  		  			<isNotEmpty prepend="AND" property="nbtParNo">
		  		  				UPPER(nbt_par_no) LIKE UPPER(#nbtParNo#)
		  		  			</isNotEmpty>		  		  			
		  		  		</isNotNull>
		  		  		<isNotNull property="sortColumn">
		  		  			<isEqual property="sortColumn" compareValue="parNumber">
		              			ORDER BY par_number
		              		</isEqual>
		  		  			<isEqual property="sortColumn" compareValue="assdName">
		              			ORDER BY assd_name
		              		</isEqual>
		  		  			<isEqual property="sortColumn" compareValue="inceptDate">
		              			ORDER BY incept_date
		              		</isEqual>
		  		  			<isEqual property="sortColumn" compareValue="expiryDate">
		              			ORDER BY expiry_date
		              		</isEqual>
		  		  			<isEqual property="sortColumn" compareValue="underwriter">
		              			ORDER BY underwriter
		              		</isEqual>
		  		  			<isEqual property="ascDescFlg" compareValue="ASC">
		              			ASC
		              		</isEqual>
		              		<isEqual property="ascDescFlg" compareValue="DESC">
		              			DESC
		              		</isEqual>
		  		  		</isNotNull>
		  		  		) a,
		  		  		(SELECT count(*) count_ FROM TABLE(GIPIS211_PKG.GET_MOTORCAR_POL_PAR_LISTING(#globalParId#, #globalLineCd#, #userId#))
		  		  		<isNotNull property="filter">
		  		  			WHERE 1=1
		  		  			<isNotEmpty prepend="AND" property="parId">
		  		  				par_id = TO_NUMBER(#parId#)
		  		  			</isNotEmpty>
		  		  			<isNotEmpty prepend="AND" property="lineCd">
		  		  				UPPER(line_cd) LIKE UPPER(#lineCd#)
		  		  			</isNotEmpty>
		  		  			<isNotEmpty prepend="AND" property="issCd">
		  		  				UPPER(iss_cd) LIKE UPPER(#issCd#)
		  		  			</isNotEmpty>
		  		  			<isNotEmpty prepend="AND" property="parYy">
		  		  				par_yy = TO_NUMBER(#parYy#)
		  		  			</isNotEmpty>
		  		  			<isNotEmpty prepend="AND" property="parSeqNo">
		  		  				par_seq_no = TO_NUMBER(#parSeqNo#)
		  		  			</isNotEmpty>
		  		  			<isNotEmpty prepend="AND" property="quoteSeqNo">
		  		  				quote_seq_no = TO_NUMBER(#quoteSeqNo#)
		  		  			</isNotEmpty>
		  		  			<isNotEmpty prepend="AND" property="parStatus">
		  		  				par_status = TO_NUMBER(#parStatus#)
		  		  			</isNotEmpty>
		  		  			<isNotEmpty prepend="AND" property="assdNo">
		  		  				assdNo = TO_NUMBER(#assdNo#)
		  		  			</isNotEmpty>
		  		  			<isNotEmpty prepend="AND" property="assdName">
		  		  				UPPER(assd_name) LIKE UPPER(#assdName#)
		  		  			</isNotEmpty>		  		  			
		  		  			<isNotEmpty prepend="AND" property="inceptDate">
		  		  				TRUNC(incept_date) = TO_DATE(#inceptDate#, 'MM-DD-RRRR')
		  		  			</isNotEmpty> 		  			
		  		  			<isNotEmpty prepend="AND" property="expiryDate">
		  		  				TRUNC(expiry_date) = TO_DATE(#expiryDate#, 'MM-DD-RRRR')
		  		  			</isNotEmpty>
		  		  			<isNotEmpty prepend="AND" property="underwriter">
		  		  				UPPER(underwriter) LIKE UPPER(#underwriter#)
		  		  			</isNotEmpty>
		  		  			<isNotEmpty prepend="AND" property="nbtParNo">
		  		  				UPPER(nbt_par_no) LIKE UPPER(#nbtParNo#)
		  		  			</isNotEmpty>		  		  			
		  		  		</isNotNull>
		  		  		) b
		  )
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<resultMap id="gipis211ParVehiclesMap" class="java.util.HashMap" extends="BaseEntity.TableGridResultMap">
		<result column="PAR_ID" 			property="parId"/>
		<result column="ITEM_NO" 			property="itemNo"/>
		<result column="ITEM_DESC" 			property="itemDesc"/>
		<result column="PLATE_NO" 			property="plateNo"/>
		<result column="SERIAL_NO" 			property="serialNo"/>
		<result column="MOTOR_NO" 			property="motorNo"/>
		<result column="NBT_POLICY_ID" 		property="nbtPolicyId"/>
		<result column="NBT_LINE_CD" 		property="nbtLineCd"/>
		<result column="NBT_ISS_CD" 		property="nbtIssCd"/>
		<result column="NBT_PAR_YY" 		property="nbtParYy"/>
		<result column="NBT_PAR_SEQ_NO" 	property="nbtParSeqNo"/>
		<result column="NBT_QUOTE_SEQ_NO" 	property="nbtQuoteSeqNo"/>
	</resultMap>
	
	<select id="getParVehiclesGIPIS211" resultMap="gipis211ParVehiclesMap" parameterClass="java.util.HashMap">
		SELECT * 
		  FROM (SELECT a.*, b.count_, rownum rownum_
		  		  FROM (SELECT * FROM TABLE(GIPIS211_PKG.GET_MOTORCAR_VEHICLE_LISTING(#parId#, #parStatus#))
		  		  		<isNotNull property="filter">
		  		  			WHERE 1=1
		  		  			<isNotEmpty prepend="AND" property="itemNo">
		  		  				item_no = TO_NUMBER(#itemNo#)
		  		  			</isNotEmpty>
		  		  			<isNotEmpty prepend="AND" property="itemDesc">
		  		  				UPPER(item_desc) LIKE UPPER(#itemDesc#)
		  		  			</isNotEmpty>
		  		  			<isNotEmpty prepend="AND" property="plateNo">
		  		  				UPPER(plate_no) LIKE UPPER(#plateNo#)
		  		  			</isNotEmpty>
		  		  			<isNotEmpty prepend="AND" property="serialNo">
		  		  				UPPER(serial_no) LIKE UPPER(#serialNo#)
		  		  			</isNotEmpty>	
		  		  			<isNotEmpty prepend="AND" property="motorNo">
		  		  				UPPER(motor_no) LIKE UPPER(#motorNo#)
		  		  			</isNotEmpty>		  		  			
		  		  		</isNotNull>
		  		  		<isNotNull property="sortColumn">
		  		  			<isEqual property="sortColumn" compareValue="itemNo">
		              			ORDER BY item_no
		              		</isEqual>
		  		  			<isEqual property="sortColumn" compareValue="itemDesc">
		              			ORDER BY item_desc
		              		</isEqual>
		  		  			<isEqual property="sortColumn" compareValue="plateNo">
		              			ORDER BY plate_no
		              		</isEqual>
		  		  			<isEqual property="sortColumn" compareValue="serialNo">
		              			ORDER BY serial_no
		              		</isEqual>
		  		  			<isEqual property="sortColumn" compareValue="motorNo">
		              			ORDER BY motor_no
		              		</isEqual>
		  		  			<isEqual property="ascDescFlg" compareValue="ASC">
		              			ASC
		              		</isEqual>
		              		<isEqual property="ascDescFlg" compareValue="DESC">
		              			DESC
		              		</isEqual>
		  		  		</isNotNull>
		  		  		) a,
		  		  		(SELECT count(*) count_ FROM TABLE(GIPIS211_PKG.GET_MOTORCAR_VEHICLE_LISTING(#parId#, #parStatus#))
		  		  		<isNotNull property="filter">
		  		  			WHERE 1=1
		  		  			<isNotEmpty prepend="AND" property="itemNo">
		  		  				item_no = TO_NUMBER(#itemNo#)
		  		  			</isNotEmpty>
		  		  			<isNotEmpty prepend="AND" property="itemDesc">
		  		  				UPPER(item_desc) LIKE UPPER(#itemDesc#)
		  		  			</isNotEmpty>
		  		  			<isNotEmpty prepend="AND" property="plateNo">
		  		  				UPPER(plate_no) LIKE UPPER(#plateNo#)
		  		  			</isNotEmpty>
		  		  			<isNotEmpty prepend="AND" property="serialNo">
		  		  				UPPER(serial_no) LIKE UPPER(#serialNo#)
		  		  			</isNotEmpty>	
		  		  			<isNotEmpty prepend="AND" property="motorNo">
		  		  				UPPER(motor_no) LIKE UPPER(#motorNo#)
		  		  			</isNotEmpty>		  		  			
		  		  		</isNotNull>
		  		  		) b
		  )
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<resultMap id="gipis211ParVehicleItemsMap" class="java.util.HashMap" extends="BaseEntity.TableGridResultMap">
		<result column="PAR_ID" 			property="parId"/>
		<result column="PAR_NO" 			property="parNo"/>
		<result column="LINE_CD" 			property="lineCd"/>
		<result column="POLICY_ID" 			property="policyId"/>
		<result column="POLICY_NO" 			property="policyNo"/>
		<result column="ASSD_NAME" 			property="assdName"/>
		<result column="PLATE_NO" 			property="plateNo"/>
		<result column="SERIAL_NO" 			property="serialNo"/>
		<result column="MOTOR_NO" 			property="motorNo"/>
		<result column="INCEPT_DATE"		property="inceptDate"/>
		<result column="EXPIRY_DATE"		property="expiryDate"/>
		<result column="TSI"	 			property="tsi"/>
		<result column="PREM"	 			property="prem"/>
		<result column="PREM_COLLNS"		property="premCollns"/>
		<result column="CLAIMS_PD" 			property="claimsPd"/>
	</resultMap>
	
	<select id="getParVehicleItemsGIPIS211" resultMap="gipis211ParVehicleItemsMap" parameterClass="java.util.HashMap">
		SELECT * 
		  FROM (SELECT a.*, b.count_, rownum rownum_
		  		  FROM (SELECT * FROM TABLE(GIPIS211_PKG.GET_MOTORCAR_VEHICLE_ITEMS(#nbtLineCd#, #nbtPlateNo#, #nbtSerialNo#, #nbtMotorNo#))
		  		  		<isNotNull property="filter">
		  		  			WHERE 1=1
		  		  			<isNotEmpty prepend="AND" property="parNo">
		  		  				UPPER(par_no) LIKE UPPER(#parNo#)
		  		  			</isNotEmpty>
		  		  			<isNotEmpty prepend="AND" property="policyNo">
		  		  				UPPER(policy_no) LIKE UPPER(#policyNo#)
		  		  			</isNotEmpty>
		  		  			<isNotEmpty prepend="AND" property="assdName">
		  		  				UPPER(assd_name) LIKE UPPER(#assdName#)
		  		  			</isNotEmpty>	
		  		  			<isNotEmpty prepend="AND" property="plateNo">
		  		  				UPPER(plate_no) LIKE UPPER(#plateNo#)
		  		  			</isNotEmpty>
		  		  			<isNotEmpty prepend="AND" property="serialNo">
		  		  				UPPER(serial_no) LIKE UPPER(#serialNo#)
		  		  			</isNotEmpty>	
		  		  			<isNotEmpty prepend="AND" property="motorNo">
		  		  				UPPER(motor_no) LIKE UPPER(#motorNo#)
		  		  			</isNotEmpty>	
		  		  			<isNotEmpty prepend="AND" property="inceptDate">
		  		  				TRUNC(incept_date) = TO_DATE(#inceptDate#, 'MM-DD-RRRR')
		  		  			</isNotEmpty>		
		  		  			<isNotEmpty prepend="AND" property="expiryDate">
		  		  				TRUNC(expiry_date) = TO_DATE(#expiryDate#, 'MM-DD-RRRR')
		  		  			</isNotEmpty>	
		  		  			<isNotEmpty prepend="AND" property="tsi">
		  		  				tsi = #tsi#
		  		  			</isNotEmpty>	
		  		  			<isNotEmpty prepend="AND" property="prem">
		  		  				prem = #prem#
		  		  			</isNotEmpty>		
		  		  			<isNotEmpty prepend="AND" property="premCollns">
		  		  				prem_collns = #premCollns#
		  		  			</isNotEmpty>  		 
		  		  			<isNotEmpty prepend="AND" property="claimsPd">
		  		  				claims_pd = #claimsPd#
		  		  			</isNotEmpty> 			
		  		  		</isNotNull>
		  		  		<isNotNull property="sortColumn">
		  		  			<isEqual property="sortColumn" compareValue="parNo">
		              			ORDER BY par_no
		              		</isEqual>
		  		  			<isEqual property="sortColumn" compareValue="policyNo">
		              			ORDER BY policy_no
		              		</isEqual>
		  		  			<isEqual property="sortColumn" compareValue="assdName">
		              			ORDER BY assd_name
		              		</isEqual>
		  		  			<isEqual property="sortColumn" compareValue="plateNo">
		              			ORDER BY plate_no
		              		</isEqual>
		  		  			<isEqual property="sortColumn" compareValue="serialNo">
		              			ORDER BY serial_no
		              		</isEqual>
		  		  			<isEqual property="sortColumn" compareValue="motorNo">
		              			ORDER BY motor_no
		              		</isEqual>
		  		  			<isEqual property="sortColumn" compareValue="inceptDate">
		              			ORDER BY incept_date
		              		</isEqual>
		  		  			<isEqual property="sortColumn" compareValue="expiryDate">
		              			ORDER BY expiry_date
		              		</isEqual>
		  		  			<isEqual property="sortColumn" compareValue="tsi">
		              			ORDER BY tsi
		              		</isEqual>
		  		  			<isEqual property="sortColumn" compareValue="prem">
		              			ORDER BY prem
		              		</isEqual>
		  		  			<isEqual property="sortColumn" compareValue="premCollns">
		              			ORDER BY prem_collns
		              		</isEqual>
		  		  			<isEqual property="sortColumn" compareValue="claimsPd">
		              			ORDER BY claims_pd
		              		</isEqual>
		  		  			<isEqual property="ascDescFlg" compareValue="ASC">
		              			ASC
		              		</isEqual>
		              		<isEqual property="ascDescFlg" compareValue="DESC">
		              			DESC
		              		</isEqual>
		  		  		</isNotNull>
		  		  		) a,
		  		  		(SELECT count(*) count_ FROM TABLE(GIPIS211_PKG.GET_MOTORCAR_VEHICLE_ITEMS(#nbtLineCd#, #nbtPlateNo#, #nbtSerialNo#, #nbtMotorNo#))
		  		  		<isNotNull property="filter">
		  		  			WHERE 1=1
		  		  			<isNotEmpty prepend="AND" property="parNo">
		  		  				UPPER(par_no) LIKE UPPER(#parNo#)
		  		  			</isNotEmpty>
		  		  			<isNotEmpty prepend="AND" property="policyNo">
		  		  				UPPER(policy_no) LIKE UPPER(#policyNo#)
		  		  			</isNotEmpty>
		  		  			<isNotEmpty prepend="AND" property="assdName">
		  		  				UPPER(assd_name) LIKE UPPER(#assdName#)
		  		  			</isNotEmpty>	
		  		  			<isNotEmpty prepend="AND" property="plateNo">
		  		  				UPPER(plate_no) LIKE UPPER(#plateNo#)
		  		  			</isNotEmpty>
		  		  			<isNotEmpty prepend="AND" property="serialNo">
		  		  				UPPER(serial_no) LIKE UPPER(#serialNo#)
		  		  			</isNotEmpty>	
		  		  			<isNotEmpty prepend="AND" property="motorNo">
		  		  				UPPER(motor_no) LIKE UPPER(#motorNo#)
		  		  			</isNotEmpty>	
		  		  			<isNotEmpty prepend="AND" property="inceptDate">
		  		  				TRUNC(incept_date) = TO_DATE(#inceptDate#, 'MM-DD-RRRR')
		  		  			</isNotEmpty>		
		  		  			<isNotEmpty prepend="AND" property="expiryDate">
		  		  				TRUNC(expiry_date) = TO_DATE(#expiryDate#, 'MM-DD-RRRR')
		  		  			</isNotEmpty>	
		  		  			<isNotEmpty prepend="AND" property="tsi">
		  		  				tsi = #tsi#
		  		  			</isNotEmpty>	
		  		  			<isNotEmpty prepend="AND" property="prem">
		  		  				prem = #prem#
		  		  			</isNotEmpty>		
		  		  			<isNotEmpty prepend="AND" property="premCollns">
		  		  				prem_collns = #premCollns#
		  		  			</isNotEmpty>  		 
		  		  			<isNotEmpty prepend="AND" property="claimsPd">
		  		  				claims_pd = #claimsPd#
		  		  			</isNotEmpty> 			
		  		  		</isNotNull>
		  		  		) b
		  )
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>

<!-- end GIPIS211 : shan 10.02.2013 -->	

<!-- GIPIS213 : shan 10.18.2013 -->	
	<resultMap class="java.util.HashMap" id="gipis213ParlistMap" extends="BaseEntity.TableGridResultMap">
		<result property="parId"			column="PAR_ID"/>
		<result property="lineCd"			column="LINE_CD"/>
		<result property="issCd"			column="ISS_CD"/>
		<result property="parYy"			column="PAR_YY"/>
		<result property="parSeqNo"			column="PAR_SEQ_NO"/>
		<result property="parStatus"		column="PAR_STATUS"/>
		<result property="parNumber"		column="PAR_NUMBER"/>
		<result property="assdNo"			column="ASSD_NO"/>
		<result property="assdName"			column="ASSD_NAME"/>
		<result property="address"			column="ADDRESS"/>
		<result property="inceptDate"		column="INCEPT_DATE"/>
		<result property="expiryDate"		column="EXPIRY_DATE"/>
		<result property="cnDatePrinted"	column="CN_DATE_PRINTED"/>
		<result property="cnExpiryDate"		column="CN_EXPIRY_DATE"/>
		<result property="premAmt"			column="PREM_AMT"/>
		<result property="policyNo"			column="POLICY_NO"/>
		<result property="underwriter"		column="UNDERWRITER"/>
	</resultMap>

	<select id="getGipis213ParList" resultMap="gipis213ParlistMap" parameterClass="java.util.HashMap">
		SELECT *
		  FROM (SELECT a.*, b.count_, rownum rownum_
		  		  FROM  (SELECT * FROM TABLE(GIPIS213_PKG.GET_PARLIST_LISTING(#dateType#, #searchBy#, #asOfDate#, #fromDate#, #toDate#)) 
		  		  		 WHERE 1=1
		  		  		 <isNotNull property="filter">
		  		  		 	<isNotEmpty prepend="AND" property="lineCd">
		  		  		 		UPPER(line_cd) LIKE UPPER(#lineCd#)
		  		  		 	</isNotEmpty>
		  		  		 	<isNotEmpty prepend="AND" property="issCd">
		  		  		 		UPPER(iss_cd) LIKE UPPER(#issCd#)
		  		  		 	</isNotEmpty>
		  		  		 	<isNotEmpty prepend="AND" property="parYy">
		  		  		 		par_yy = #parYy#
		  		  		 	</isNotEmpty>
		  		  		 	<isNotEmpty prepend="AND" property="parSeqNo">
		  		  		 		par_seq_no = #parSeqNo#
		  		  		 	</isNotEmpty>
		  		  		 	<isNotEmpty prepend="AND" property="assdName">
		  		  		 		UPPER(assd_name) LIKE UPPER(#assdName#)
		  		  		 	</isNotEmpty>
		  		  		 	<isNotEmpty prepend="AND" property="cnDatePrinted">
		  		  		 		TRUNC(cn_date_printed) = TO_DATE(#cnDatePrinted#, 'MM-DD-RRRR')
		  		  		 	</isNotEmpty>
		  		  		 	<isNotEmpty prepend="AND" property="cnExpiryDate">
		  		  		 		TRUNC(cn_expiry_date) = TO_DATE(#cnExpiryDate#, 'MM-DD-RRRR')
		  		  		 	</isNotEmpty>
		  		  		 	<isNotEmpty prepend="AND" property="premAmt">
		  		  		 		prem_amt = #premAmt#
		  		  		 	</isNotEmpty>
		  		  		 </isNotNull>
		  		  		 <isNotNull property="sortColumn">
		  		  		 	<isEqual property="sortColumn" compareValue="parNumber"> 
		  		  		 		ORDER by par_number
		  		  		 	</isEqual>
		  		  		 	<isEqual property="sortColumn" compareValue="assdName"> 
		  		  		 		ORDER by assd_name
		  		  		 	</isEqual>
		  		  		 	<isEqual property="sortColumn" compareValue="cnDatePrinted"> 
		  		  		 		ORDER by cn_date_printed
		  		  		 	</isEqual>
		  		  		 	<isEqual property="sortColumn" compareValue="cnExpiryDate"> 
		  		  		 		ORDER by cn_expiry_date
		  		  		 	</isEqual>
		  		  		 	<isEqual property="sortColumn" compareValue="premAmt"> 
		  		  		 		ORDER by prem_amt
		  		  		 	</isEqual>
		  		  		 	<isEqual property="ascDescFlg" compareValue="ASC">
		  		  		 		ASC
		  		  		 	</isEqual>
		  		  		 	<isEqual property="ascDescFlg" compareValue="DESC">
		  		  		 		DESC
		  		  		 	</isEqual>
		  		  		 </isNotNull>
		  		  		) a,
		  		  		(SELECT count(*) count_ FROM TABLE(GIPIS213_PKG.GET_PARLIST_LISTING(#dateType#, #searchBy#, #asOfDate#, #fromDate#, #toDate#)) 
		  		  		 WHERE 1=1
		  		  		 <isNotNull property="filter">
		  		  		 	<isNotEmpty prepend="AND" property="lineCd">
		  		  		 		UPPER(line_cd) LIKE UPPER(#lineCd#)
		  		  		 	</isNotEmpty>
		  		  		 	<isNotEmpty prepend="AND" property="issCd">
		  		  		 		UPPER(iss_cd) LIKE UPPER(#issCd#)
		  		  		 	</isNotEmpty>
		  		  		 	<isNotEmpty prepend="AND" property="parYy">
		  		  		 		par_yy = #parYy#
		  		  		 	</isNotEmpty>
		  		  		 	<isNotEmpty prepend="AND" property="parSeqNo">
		  		  		 		par_seq_no = #parSeqNo#
		  		  		 	</isNotEmpty>
		  		  		 	<isNotEmpty prepend="AND" property="assdName">
		  		  		 		UPPER(assd_name) LIKE UPPER(#assdName#)
		  		  		 	</isNotEmpty>
		  		  		 	<isNotEmpty prepend="AND" property="cnDatePrinted">
		  		  		 		TRUNC(cn_date_printed) = TO_DATE(#cnDatePrinted#, 'MM-DD-RRRR')
		  		  		 	</isNotEmpty>
		  		  		 	<isNotEmpty prepend="AND" property="cnExpiryDate">
		  		  		 		TRUNC(cn_expiry_date) = TO_DATE(#cnExpiryDate#, 'MM-DD-RRRR')
		  		  		 	</isNotEmpty>
		  		  		 	<isNotEmpty prepend="AND" property="premAmt">
		  		  		 		prem_amt = #premAmt#
		  		  		 	</isNotEmpty>
		  		  		 </isNotNull>
		  		  		) b
		  )
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
<!-- end GIPIS213 : shan 10.18.2013 -->	
<!-- start GIPIS058 : edgar 02/16/2015 -->	
	<parameterMap class="map" id="checkAllowCancelMap">
		<parameter property="parId"		jdbcType="INTEGER" 	javaType="java.lang.Integer"  mode="IN"/>
		<parameter property="allowed"		jdbcType="VARCHAR" 	javaType="java.lang.String"   mode="OUT"/>
	</parameterMap>
	
	<procedure id="checkAllowCancel" parameterMap="checkAllowCancelMap">
		BEGIN
			GIPI_PARLIST_PKG.check_allow_cancellation(?, ?);
		END;
	</procedure>
<!-- end GIPIS058 : edgar 02/16/2015 -->

	<procedure id="delParAttachments" parameterClass="java.lang.Integer">
		BEGIN
			gipi_wpictures_pkg.del_par_gipi_wpictures(#parId#);
		END;
	</procedure>
	
</sqlMap>