<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd" >

<sqlMap namespace="GIPIQuote">

	<cacheModel id="oneDayClient" type="MEMORY">
		<flushInterval hours="24" />
		<property name="reference-type" value="WEAK" />
	</cacheModel>

	<typeAlias alias="GIPIQuotation" type="com.geniisys.gipi.entity.GIPIQuote"/>

	<resultMap class="com.geniisys.gipi.entity.GIPIQuote" id="GIPIQuote">
		<result column="QUOTE_ID" 				property="quoteId" 		jdbcType="NUMBER" />
		<result column="LINE_CD" 				property="lineCd" 		jdbcType="STRING" />
		<result column="SUBLINE_CD" 			property="sublineCd" 	jdbcType="VARCHAR" />
		<result column="ISS_CD" 				property="issCd" 		jdbcType="VARCHAR" />
		<result column="QUOTATION_YY" 			property="quotationYy" 	jdbcType="NUMBER" />
		<result column="QUOTATION_NO" 			property="quotationNo" 	jdbcType="NUMBER" />
		<result column="PROPOSAL_NO" 			property="proposalNo" 	jdbcType="NUMBER" />
		<result column="ASSD_NO" 				property="assdNo" 		jdbcType="NUMBER" />
		<result column="ASSD_NAME" 				property="assdName" 	jdbcType="VARCHAR" />
		<result column="TSI_AMT" 				property="tsiAmt" 		jdbcType="NUMBER" />
		<result column="PREM_AMT" 				property="premAmt" 		jdbcType="NUMBER" />
		<result column="PRINT_DT" 				property="printDt" 		jdbcType="DATE" />
		<result column="ACCEPT_DT" 				property="acceptDt" 	jdbcType="DATE" />
		<result column="POST_DT" 				property="postDt" 		jdbcType="DATE" />
		<result column="DENIED_DT" 				property="deniedDt" 	jdbcType="DATE" />
		<result column="STATUS" 				property="status" 		jdbcType="VARCHAR" />
		<result column="PRINT_TAG" 				property="printTag" 	jdbcType="VARCHAR" />
		<result column="HEADER" 				property="header" 		jdbcType="VARCHAR" />
		<result column="FOOTER" 				property="footer" 		jdbcType="VARCHAR" />
		<result column="REMARKS" 				property="remarks" 		jdbcType="VARCHAR" />
		<result column="USER_ID" 				property="userId" 		jdbcType="VARCHAR" />
		<result column="LAST_UPDATE" 			property="lastUpdate" 	jdbcType="DATE" />
		<result column="CPI_REC_NO" 			property="cpiRecNo" 	jdbcType="NUMBER" />
		<result column="CPI_BRANCH_CD" 			property="cpiBranchCd" 	jdbcType="VARCHAR" />
		<result column="QUOTATION_PRINTED_CNT" 	property="quotationPrintedCnt" jdbcType="NUMBER" />
		<result column="INCEPT_DATE" 			property="inceptDate" 	jdbcType="DATE" />
		<result column="EXPIRY_DATE" 			property="expiryDate" 	jdbcType="DATE" />
		<result column="ORIGIN" 				property="origin" 		jdbcType="VARCHAR" />
		<result column="REASON_CD" 				property="reasonCd" 	jdbcType="NUMBER" />
		<result column="ADDRESS1" 				property="address1" 	jdbcType="VARCHAR" />
		<result column="ADDRESS2"				property="address2" 	jdbcType="VARCHAR" />
		<result column="ADDRESS3" 				property="address3" 	jdbcType="VARCHAR" />
		<result column="ACCOUNT_SW" 		    property="accountOfSW" 	jdbcType="NUMBER" />
	</resultMap>

	<resultMap class="com.geniisys.gipi.entity.GIPIQuoteWithItem" id="GIPIQuoteWithItem">
		<result column="QUOTE_ID" 				property="quoteId" 		jdbcType="NUMBER" />
		<result column="LINE_CD" 				property="lineCd" 		jdbcType="STRING" />
		<result column="SUBLINE_CD" 			property="sublineCd" 	jdbcType="VARCHAR" />
		<result column="ISS_CD" 				property="issCd" 		jdbcType="VARCHAR" />
		<result column="QUOTATION_YY" 			property="quotationYy" 	jdbcType="NUMBER" />
		<result column="QUOTATION_NO" 			property="quotationNo" 	jdbcType="NUMBER" />
		<result column="PROPOSAL_NO" 			property="proposalNo" 	jdbcType="NUMBER" />
		<result column="ASSD_NO" 				property="assdNo" 		jdbcType="NUMBER" />
		<result column="ASSD_NAME" 				property="assdName" 	jdbcType="VARCHAR" />
		<result column="TSI_AMT" 				property="tsiAmt" 		jdbcType="NUMBER" />
		<result column="PREM_AMT" 				property="premAmt" 		jdbcType="NUMBER" />
		<result column="PRINT_DT" 				property="printDt" 		jdbcType="DATE" />
		<result column="ACCEPT_DT" 				property="acceptDt" 	jdbcType="DATE" />
		<result column="POST_DT" 				property="postDt" 		jdbcType="DATE" />
		<result column="DENIED_DT" 				property="deniedDt" 	jdbcType="DATE" />
		<result column="STATUS" 				property="status" 		jdbcType="VARCHAR" />
		<result column="PRINT_TAG" 				property="printTag" 	jdbcType="VARCHAR" />
		<result column="HEADER" 				property="header" 		jdbcType="VARCHAR" />
		<result column="FOOTER" 				property="footer" 		jdbcType="VARCHAR" />
		<result column="REMARKS" 				property="remarks" 		jdbcType="VARCHAR" />
		<result column="USER_ID" 				property="userId" 		jdbcType="VARCHAR" />
		<result column="LAST_UPDATE" 			property="lastUpdate" 	jdbcType="DATE" />
		<result column="CPI_REC_NO" 			property="cpiRecNo" 	jdbcType="NUMBER" />
		<result column="CPI_BRANCH_CD" 			property="cpiBranchCd" 	jdbcType="VARCHAR" />
		<result column="QUOTATION_PRINTED_CNT" 	property="quotationPrintedCnt" jdbcType="NUMBER" />
		<result column="INCEPT_DATE" 			property="inceptDate" 	jdbcType="DATE" />
		<result column="EXPIRY_DATE" 			property="expiryDate" 	jdbcType="DATE" />
		<result column="ORIGIN" 				property="origin" 		jdbcType="VARCHAR" />
		<result column="REASON_CD" 				property="reasonCd" 	jdbcType="NUMBER" />
		<result column="ADDRESS1" 				property="address1" 	jdbcType="VARCHAR" />
		<result column="ADDRESS2" 				property="address2" 	jdbcType="VARCHAR" />
		<result column="ADDRESS3" 				property="address3" 	jdbcType="VARCHAR" />
		<result column="QUOTE_ID" 				property="quoteItems" 	select="" />
	</resultMap>

	<resultMap id="GIPIQuotationListing" class="GIPIQuotation">
		<result column="QUOTE_ID" 				property="quoteId" 		jdbcType="VARCHAR" />
		<result column="QUOTE_NO" 				property="quoteNo" 		jdbcType="VARCHAR" />
		<result column="ASSD_NAME" 				property="assdName" 	jdbcType="VARCHAR" />
		<result column="ASSD_NO" 				property="assdNo" 		jdbcType="NUMBER" />
		<result column="INCEPT_DATE" 			property="inceptDate" 	jdbcType="DATE" />
		<result column="EXPIRY_DATE" 			property="expiryDate" 	jdbcType="DATE" />
		<result column="VALID_DATE" 			property="validDate" 	jdbcType="DATE" />
		<result column="USER_ID" 				property="userId" 		jdbcType="VARCHAR" />
		<result column="ASSD_NO" 				property="assdNo" 		jdbcType="VARCHAR" />
		<result column="REASON_CD" 				property="reasonCd" 	jdbcType="NUMBER" />
	</resultMap>
	
	<resultMap id="GIPIQuoteListing" class="GIPIQuotation">
		<result column="QUOTE_ID"		property="quoteId" 		jdbcType="VARCHAR" />
		<result column="QUOTE_NO" 		property="quoteNo" 		jdbcType="VARCHAR" />
		<result column="ASSD_NAME" 		property="assdName" 	jdbcType="VARCHAR" />
		<result column="ASSD_NO" 		property="assdNo" 		jdbcType="NUMBER" />
		<result column="INCEPT_DATE" 	property="inceptDate" 	jdbcType="DATE" />
		<result column="EXPIRY_DATE" 	property="expiryDate" 	jdbcType="DATE" />
		<result column="VALID_DATE" 	property="validDate" 	jdbcType="DATE" />
		<result column="ACCEPT_DT"		property="acceptDt"		jdbcType="DATE" />
		<result column="USER_ID" 		property="userId" 		jdbcType="VARCHAR" />
		<result column="ASSD_NO" 		property="assdNo" 		jdbcType="VARCHAR" />
		<result column="REASON_CD" 		property="reasonCd" 	jdbcType="NUMBER" />
		<result property="rowNum" 		column="rownum_"/>			
		<result property="rowCount"		column="count_"/>
	</resultMap>
	
	<resultMap id="GIPIQuoteListing2" class="GIPIQuotation">
		<result column="QUOTE_ID"		property="quoteId" 		jdbcType="VARCHAR" />
		<result column="QUOTE_NO" 		property="quoteNo" 		jdbcType="VARCHAR" />
		<result column="ASSD_NAME" 		property="assdName" 	jdbcType="VARCHAR" />
		<result column="ASSD_NO" 		property="assdNo" 		jdbcType="NUMBER" />
		<result column="INCEPT_DATE" 	property="inceptDate" 	jdbcType="DATE" />
		<result column="EXPIRY_DATE" 	property="expiryDate" 	jdbcType="DATE" />
		<result column="VALID_DATE" 	property="validDate" 	jdbcType="DATE" />
		<result column="ACCEPT_DT"		property="acceptDt"		jdbcType="DATE" />
		<result column="USER_ID" 		property="userId" 		jdbcType="VARCHAR" />
		<result column="ASSD_NO" 		property="assdNo" 		jdbcType="VARCHAR" />
		<result column="REASON_CD" 		property="reasonCd" 	jdbcType="NUMBER" />
		<result column="PROPOSAL_NO" 	property="proposalNo" 	jdbcType="NUMBER" />
		<result column="REMARKS"		property="remarks"		jdbcType="VARCHAR" />
		<result column="PACK_POL_FLAG"  property="packPolFlag" 	jdbcType="VARCHAR" />
		<result column="PACK_QUOTE_ID"  property="packQuoteId" 	jdbcType="VARCHAR" />
		<result column="PACK_QUOTE_NO"  property="packQuoteNo" 	jdbcType="VARCHAR" />
		<result property="rowNum" 		column="rownum_"/>			
		  <result property="rowCount"		column="count_"/>
		<result column="ISS_CD"  property="issCd" 	jdbcType="VARCHAR" />	<!-- shan 08.13.2014 -->
		<result column="PACK_QUOTE_LINE_CD"  property="packQuoteLineCd" 	jdbcType="VARCHAR" />	<!-- shan 08.13.2014 -->
		
	</resultMap>
	
	<resultMap id="generatedQuoteId" class="com.geniisys.gipi.entity.GIPIQuote">
		<result column="QUOTE_ID" 				property="quoteId" />
	</resultMap>
	
	<resultMap id="GIPIPQuoteToEdit" class="com.geniisys.gipi.entity.GIPIQuote">
	  	<result column="QUOTE_NO"				property="quoteNo" />
	  	<result column="ASSD_NAME"				property="assdName"	/>
	  	<result column="ASSD_NO"				property="assdNo" />
	  	<result column="INCEPT_DATE"			property="inceptDate" />
	  	<result column="EXPIRY_DATE"			property="expiryDate" />
	  	<result column="INCEPT_TAG"			property="inceptTag" />
	  	<result column="EXPIRY_TAG"			property="expiryTag" />
	  	<result column="NO_OF_DAYS"				property="noOfDays" />
	  	<result column="ACCEPT_DT"				property="acceptDt" />
	  	<result column="USERID"					property="userId" />
	  	<result column="LINE_CD"				property="lineCd" />
	  	<result column="MENU_LINE_CD"			property="menuLineCd" nullValue="*"/>
	  	<result column="LINE_NAME"				property="lineName"	/>
	  	<result column="SUBLINE_CD"				property="sublineCd" />
	  	<result column="SUBLINE_NAME"			property="sublineName" />
	  	<result column="ISS_CD"					property="issCd" />
	  	<result column="ISS_NAME"				property="issName" />
	  	<result column="QUOTATION_YY"			property="quotationYy" />
	  	<result column="QUOTATION_NO"			property="quotationNo" />
	  	<result column="PROPOSAL_NO"			property="proposalNo" />
	  	<result column="CRED_BRANCH"			property="credBranch" />
	  	<result column="CRED_BRANCH_NAME"		property="credBranchName" />
	  	<result column="VALID_DATE"				property="validDate" />
	  	<result column="ACCT_OF"				property="acctOf" />
	  	<result column="ACCT_OF_CD"				property="acctOfCd" />
	  	<result column="ADDRESS1"				property="address1" />
	  	<result column="ADDRESS2"				property="address2" />
	  	<result column="ADDRESS3"				property="address3" />
	  	<result column="PRORATE_FLAG"			property="prorateFlag" />
	  	<result column="HEADER"					property="header" />
	  	<result column="FOOTER"					property="footer" />
	  	<result column="REMARKS"				property="remarks" />
	  	<result column="REASON_CD"				property="reasonCd" />
	  	<result column="REASON_DESC"			property="reasonDesc" />
	  	<result column="COMP_SW"				property="compSw" />
	  	<result column="SHORT_RT_PERCENT"		property="shortRatePercent" />
	  	<result column="PREM_AMT"				property="premAmt" />
	  	<result column="ANN_PREM_AMT"			property="annPremAmt" />
	  	<result column="TSI_AMT"				property="tsiAmt" />
	  	<result column="bank_ref_no"  			property="bankRefNo"/>
	  	<result column="ACCOUNT_SW"             property="accountOfSW"/>
 	</resultMap>
 	
 	<resultMap id="QuoteListStatus" class="GIPIQuotation">
 		<result column="QUOTE_ID" 		property="quoteId" />
 		<result column="QUOTE_NO" 		property="quoteNo" />
 		<result column="ASSD_NAME" 		property="assdName" />
 		<result column="INCEPT_DATE" 	property="inceptDate" />
 		<result column="EXPIRY_DATE" 	property="expiryDate" />
 		<result column="VALID_DATE" 	property="validDate" />
 		<result column="USER_ID" 		property="userId" />
 		<result column="ASSD_NO" 		property="assdNo" />
 		<result column="ACCEPT_DT"		property="acceptDate" />
 		<result column="STATUS" 		property="status" />
 		<result column="PAR_ASSD" 		property="parAssd" />
 		<result column="REASON_DESC" 	property="reasonDesc" />
 		<result column="PAR_NO"			property="parNo" />
 		<result column="POL_NO" 		property="polNo" />
 	</resultMap>
 	
 	<!-- Rey 07.08.11 -->
 	<resultMap id="QuoteListStatusTableGrid" class="com.geniisys.gipi.entity.GIPIQuote" extends="BaseEntity.TableGridResultMap">
 		<result column="QUOTE_ID" 		property="quoteId" />
 		<result column="QUOTE_NO"       property="quoteNo" />
 		<result column="ASSD_NAME" 		property="assdName" />
 		<result column="INCEPT_DATE" 	property="inceptDate" />
 		<result column="EXPIRY_DATE" 	property="expiryDate" />
 		<result column="VALID_DATE" 	property="validDate" />
 		<result column="USER_ID" 		property="userId" />
 		<result column="ASSD_NO" 		property="assdNo" />
 		<result column="ACCEPT_DT"		property="acceptDate" />
 		<result column="STATUS" 		property="status" />
 		<result column="PAR_ASSD" 		property="parAssd" />
 		<result column="REASON_DESC" 	property="reasonDesc" />
 		<result column="PAR_NO"			property="parNo" />
 		<result column="POL_NO" 		property="polNo" />
 		<result column="PACK_POL_FLAG" 	property="packPolFlag" />
 		<result column="PACK_QUOTE_ID" 	property="packQuoteId" />
 		<result column="PACK_QUOTE_NO" 	property="packQuoteNo" />
 	</resultMap>
 	
 	<resultMap class="GIPIQuotation" id="quoteListMap">
 		<result column="QUOTE_ID" 			property="quoteId"/>
 		<result column="ISS_CD" 			property="issCd"/>
 		<result column="LINE_CD" 			property="lineCd"/>
 		<result column="SUBLINE_CD" 		property="sublineCd"/>
 		<result column="QUOTATION_YY" 		property="quotationYy"/>
 		<result column="QUOTATION_NO"   	property="quoteNo"/>
 		<result column="PROPOSAL_NO" 		property="proposalNo"/>
 		<result column="ASSD_NO" 			property="assdNo"/>
 		<result column="ASSD_NAME" 			property="assdName"/>
 		<result column="ASSD_ACTIVE_TAG"	property="assdActiveTag"/>
 		<result column="VALID_DATE"			property="validDate"/>
 	</resultMap>
	
 	<resultMap class="java.util.HashMap" id="existingQuotesListMap">
 		<result column="quotation_no" 	property="quotationNo"/>
    	<result column="quote_id" 		property="quoteId"/>
    	<result column="quotation_yy" 	property="quotationYy"/>
		<result column="quote_no" 		property="quoteNo"/>
		<result column="par_no" 		property="parNo"/>
		<result column="pol_no" 		property="polNo"/>
    	<result column="proposal_no" 	property="proposalNo"/>
		<result column="incept_date" 	property="inceptDate"/>
  		<result column="expiry_date" 	property="expiryDate"/>
		<result column="status" 		property="status"/>
    	<result column="par_id" 		property="parId"/>
    	<result column="par_yy" 		property="parYy"/>
    	<result column="par_seq_no" 	property="parSeqNo"/>
    	<result column="quote_seq_no" 	property="quoteSeqNo"/>
   	    <result column="policy_id" 		property="policyId"/>
   	    <result column="orig_policy_id" property="origPolicyId"/>
   	    <result column="subline_cd" 	property="sublineCd"/>
    	<result column="issue_yy" 		property="issueYy"/>
    	<result column="pol_seq_no" 	property="polSeqNo"/>
    	<result column="endt_iss_cd" 	property="endtIssCd"/>
    	<result column="endt_yy" 		property="endtYy"/>
    	<result column="endt_seq_no" 	property="endtSeqNo"/>
    	<result column="renew_no" 		property="renewNo"/>
    	<result column="line_cd" 		property="lineCd"/> 
    	<result column="iss_cd" 		property="issCd"/>
    	<result column="tsi_amt" 		property="tsiAmt"/>
    	<result column="assd_name" 		property="assdName"/>
    	<result column="assd_no" 		property="assdNo"/>
    	<result column="address1" 		property="address1"/> 
    	<result column="address2" 		property="address2"/> 
    	<result column="address3" 		property="address3"/>
    	<result column="address" 		property="address"/>
    	<result column="rownum_" 		property="rowNum"/>
		<result column="count_" 		property="rowCount"/>
 	</resultMap>
	
 	<resultMap class="com.geniisys.gipi.entity.GIPIQuote" id="distinctReasonCds">
 		<result column="REASON_CD" property="reasonCd" />
 	</resultMap>
	
 	<select id="getQuoteListFromIssCd" resultMap="quoteListMap">
 		SELECT * FROM TABLE(Gipi_Quote_Pkg.get_quote_list(#issCd#, #lineCd#, 'GIPIS050', #keyWord#, #userId#))
 	</select>
	
	<select id="getQuoteIdByParams" resultMap="generatedQuoteId" parameterClass="com.geniisys.gipi.entity.GIPIQuote">
		SELECT QUOTE_ID
			FROM GIPI_QUOTE
			WHERE LINE_CD = Get_Line_Code(#lineCd#)
		     AND SUBLINE_CD = Get_Subline_Code(#sublineCd#)
		     AND ISS_CD = Get_Iss_Code(#issCd#)
		     AND QUOTATION_YY = #quotationYy#
		     AND QUOTATION_NO = #quotationNo#
		     AND PROPOSAL_NO = #proposalNo#
	</select>
	
 	<select id="getQuotationDetailsByQuoteId" resultMap="GIPIPQuoteToEdit">	
		SELECT * FROM table(gipi_quote_pkg.get_gipi_quote(#quoteId#))
	</select>

	<select id="getGIPIQuotationListing" resultMap="GIPIQuotationListing">
		SELECT * FROM table(gipi_quote_pkg.get_quote_listing(#userId#, 'GIIMM015', #lineCd#))
  	</select>

    <select id="getGIPIQuoteListing" resultMap="GIPIQuoteListing" parameterClass="java.util.HashMap"> 
		SELECT *       
  		  FROM (SELECT rownum rownum_ , b.count_, a.*     
          		  FROM (SELECT * FROM table(gipi_quote_pkg.get_quote_listing(#userId#, 'GIIMM015', #lineCd#))
          		  WHERE UPPER (NVL (assd_name, '*')) LIKE
                              UPPER (NVL (#filter.assdName#,DECODE (assd_name, NULL, '*', assd_name)))
                      AND TRUNC(incept_date) = NVL(TRUNC(TO_DATE(#filter.inceptDate#, 'MM-DD-YYYY')), TRUNC(incept_date))
                      AND TRUNC(expiry_date) = NVL(TRUNC(TO_DATE(#filter.expiryDate#, 'MM-DD-YYYY')), TRUNC(expiry_date))
                      AND TRUNC(valid_date) = NVL(TRUNC(TO_DATE(#filter.validDate#, 'MM-DD-YYYY')), TRUNC(valid_date))
                      AND UPPER (user_id) LIKE UPPER (NVL (#filter.userId#, user_Id))   
                      AND quote_no LIKE NVL(#filter.quoteNo#, quote_no)     
                      AND iss_cd  LIKE NVL(#filter.issCd#, iss_cd) 
                      AND quotation_yy = NVL(#filter.quotationYy#, quotation_yy) 
                      AND quotation_no = NVL(#filter.quotationNo#, quotation_no) 
                      AND proposal_no = NVL(#filter.proposalNo#, proposal_no)  
                      AND subline_cd LIKE NVL(#filter.sublineCd#, subline_cd)                    
          		  			  <isEqual property="sortColumn" compareValue="quoteNo">
			              		    ORDER BY quote_no
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="assdName">
				              		ORDER BY assd_name
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="inceptDate">
				              		ORDER BY incept_date
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="expiryDate">
				              		ORDER BY expiry_date
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="validDate">
				              		ORDER BY  valid_date
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="userId">
				              		ORDER BY  user_id
				              </isEqual>
				              <isNotNull property="sortColumn">
			              	  <isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              	  </isEqual>
			              	  <isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              	  </isEqual>
			              	  </isNotNull>) a,
               		   (SELECT count(*) count_ FROM table(gipi_quote_pkg.get_quote_listing(#userId#, 'GIIMM015', #lineCd#)) 
               		    WHERE UPPER (NVL(assd_name, '*')) LIKE
                                    UPPER (NVL (#filter.assdName#,DECODE (assd_name, NULL, '*', assd_name)))
                             AND TRUNC(incept_date) = NVL(TRUNC(TO_DATE(#filter.inceptDate#, 'MM-DD-YYYY')), TRUNC(incept_date))
                             AND TRUNC(expiry_date) = NVL(TRUNC(TO_DATE(#filter.expiryDate#, 'MM-DD-YYYY')), TRUNC(expiry_date))
                             AND TRUNC(valid_date) = NVL(TRUNC(TO_DATE(#filter.validDate#, 'MM-DD-YYYY')), TRUNC(valid_date))
                             AND UPPER (user_id) LIKE UPPER (NVL (#filter.userId#, user_Id)) 
                             AND quote_no LIKE NVL(#filter.quoteNo#, quote_no)    
                             AND iss_cd  LIKE NVL(#filter.issCd#, iss_cd) 
  							 AND quotation_yy = NVL(#filter.quotationYy#, quotation_yy) 
                    		 AND quotation_no = NVL(#filter.quotationNo#, quotation_no) 
                      		 AND proposal_no = NVL(#filter.proposalNo#, proposal_no)
                      		 AND subline_cd LIKE NVL(#filter.sublineCd#, subline_cd) 
               		   )b)
 		 WHERE rownum_ BETWEEN #from# AND #to#
  	</select>
  	
  	<select id="getGIPIQuoteListing2" resultMap="GIPIQuoteListing2" parameterClass="java.util.HashMap"> 
	<!-- Modified by pjsantos 09/20/2016, added #filter.assdName#, #filter.inceptDate#, #sortColumn#, #ascDescFlg#, #from#, #to# for optimization purposes. -->	
		<!-- SELECT *
  		  FROM (SELECT rownum rownum_ ,b.count_, a.*     
          		  FROM (-->SELECT * FROM table(gipi_quote_pkg.get_quote_listing(#userId#, #moduleId#, #lineCd#, #filter.assdName#, #filter.inceptDate#, #filter.expiryDate#,
          		                                 								#filter.validDate#,	#filter.userId#, #filter.quoteNo#, #filter.issCd#, #filter.quotationYy#,
          		                                 								#filter.quotationNo#, #filter.proposalNo#, #filter.remarks#,#filter.sublineCd#, #sortColumn#, 
          		                                 								#ascDescFlg#, #from#, #to#))
          		 <!-- WHERE  1=1 
          		      AND   UPPER (NVL (assd_name, '*')) LIKE
                              UPPER (NVL (#filter.assdName#,DECODE (assd_name, NULL, '*', assd_name)))  
                      AND TRUNC(incept_date) = NVL(TRUNC(TO_DATE(#filter.inceptDate#, 'MM-DD-YYYY')), TRUNC(incept_date))
                      AND TRUNC(expiry_date) = NVL(TRUNC(TO_DATE(#filter.expiryDate#, 'MM-DD-YYYY')), TRUNC(expiry_date))
                      AND TRUNC(NVL(valid_date, SYSDATE)) = NVL(TRUNC(TO_DATE(#filter.validDate#, 'MM-DD-YYYY')), TRUNC(NVL(valid_date, SYSDATE)))
                      AND UPPER(user_id) LIKE UPPER(NVL (#filter.userId#, user_Id))
                      AND UPPER(quote_no) LIKE UPPER(NVL(#filter.quoteNo#, quote_no))     
                      AND UPPER(iss_cd)  LIKE UPPER(NVL(#filter.issCd#, iss_cd)) -->
                      <!-- AND quotation_yy LIKE NVL(#filter.quotationYy#, quotation_yy) --> 
                      <!-- AND TO_CHAR('%'||quotation_yy||'%') = TO_CHAR(NVL(#filter.quotationYy#, '%'||quotation_yy||'%'))
                      AND quotation_no LIKE NVL(#filter.quotationNo#, quotation_no) 
                      AND proposal_no LIKE NVL(#filter.proposalNo#, proposal_no)
                      AND NVL(UPPER(remarks), '%') LIKE NVL(UPPER(#filter.remarks#), '%')
                      AND NVL(UPPER(remarks), '*') LIKE UPPER (NVL (#filter.remarks#,DECODE (remarks, NULL, '*', remarks)))
                      AND UPPER(subline_cd) LIKE UPPER(NVL(#filter.sublineCd#, subline_cd)) 
          		  			  <isEqual property="sortColumn" compareValue="quoteNo">
			              		    ORDER BY quote_no
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="assdName">
				              		ORDER BY assd_name
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="remarks">
				              		ORDER BY remarks
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="userId">
				              		ORDER BY user_id
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="inceptDate">
				              		ORDER BY incept_date
				              </isEqual>
							  <isEqual property="sortColumn" compareValue="expiryDate">
				              		ORDER BY expiry_date
				              </isEqual>		
				              <isEqual property="sortColumn" compareValue="validDate">
				              		ORDER BY valid_date
				              </isEqual>		              
				              <isNotNull property="sortColumn">
				              	  <isEqual property="ascDescFlg" compareValue="ASC">
				              			ASC
				              	  </isEqual>
				              	  <isEqual property="ascDescFlg" compareValue="DESC">
				              			DESC
				              	  </isEqual>
			              	  </isNotNull>) a  ,
               		   (SELECT count(*) count_ FROM table(gipi_quote_pkg.get_quote_listing(#userId#, #moduleId#, #lineCd#)) 
               		    WHERE UPPER (NVL(assd_name, '*')) LIKE
                                    UPPER (NVL (#filter.assdName#,DECODE (assd_name, NULL, '*', assd_name)))
                             AND TRUNC(incept_date) = NVL(TRUNC(TO_DATE(#filter.inceptDate#, 'MM-DD-YYYY')), TRUNC(incept_date))
		                     AND TRUNC(expiry_date) = NVL(TRUNC(TO_DATE(#filter.expiryDate#, 'MM-DD-YYYY')), TRUNC(expiry_date))
		                     AND TRUNC(NVL(valid_date, SYSDATE)) = NVL(TRUNC(TO_DATE(#filter.validDate#, 'MM-DD-YYYY')), TRUNC(NVL(valid_date, SYSDATE)))
		                     AND UPPER(user_id) LIKE UPPER(NVL (#filter.userId#, user_Id))
		                     AND UPPER(quote_no) LIKE UPPER(NVL(#filter.quoteNo#, quote_no))     
		                     AND UPPER(iss_cd)  LIKE UPPER(NVL(#filter.issCd#, iss_cd)) --> 
		                     <!-- AND quotation_yy LIKE NVL(#filter.quotationYy#, quotation_yy) --> 
		                     <!--  AND TO_CHAR('%'||quotation_yy||'%') = TO_CHAR(NVL(#filter.quotationYy#, '%'||quotation_yy||'%'))
		                     AND quotation_no LIKE NVL(#filter.quotationNo#, quotation_no) 
		                     AND proposal_no LIKE NVL(#filter.proposalNo#, proposal_no)
		                     AND NVL(UPPER(remarks), '%') LIKE NVL(UPPER(#filter.remarks#), '%')
		                     AND NVL(UPPER(remarks), '*') LIKE UPPER (NVL (#filter.remarks#,DECODE (remarks, NULL, '*', remarks)))
		                     AND UPPER(subline_cd) LIKE UPPER(NVL(#filter.sublineCd#, subline_cd)) 
               		   )b)
 		 WHERE rownum_ BETWEEN #from# AND #to#-->
  	</select>
  	
  	<select id="getReassignQuoteListing" resultMap="GIPIQuoteListing2" parameterClass="java.util.HashMap"> 
		<!-- MOdified by pjsantos 10/19/2016, for optimization AND prevent column error, GENQA 5786 -->
		<!--  SELECT *
  		  FROM (SELECT rownum rownum_ , b.count_, a.*     
          		  FROM (-->SELECT * FROM table(gipi_quote_pkg.get_reassign_quote_listing(#userId#, #moduleId#, #lineCd#,
          		                               #filter.assdName#, #filter.inceptDate#, #filter.expiryDate#, #filter.validDate#,
          		                               #filter.userId#, #filter.quoteNo#, #filter.issCd#, #filter.quotationYy#,
          		                               #filter.quotationNo#, #filter.proposalNo#, #filter.remarks#, #filter.sublineCd#,
          		                               #sortColumn#, #ascDescFlg#, #from#, #to#))
          		  <!--WHERE UPPER (NVL (assd_name, '*')) LIKE
                              UPPER (NVL (#filter.assdName#,DECODE (assd_name, NULL, '*', assd_name)))
                      AND TRUNC(incept_date) = NVL(TRUNC(TO_DATE(#filter.inceptDate#, 'MM-DD-YYYY')), TRUNC(incept_date))
                      AND TRUNC(expiry_date) = NVL(TRUNC(TO_DATE(#filter.expiryDate#, 'MM-DD-YYYY')), TRUNC(expiry_date))
                      AND TRUNC(NVL(valid_date, SYSDATE)) = NVL(TRUNC(TO_DATE(#filter.validDate#, 'MM-DD-YYYY')), TRUNC(NVL(valid_date, SYSDATE)))
                      AND UPPER(user_id) LIKE UPPER(NVL (#filter.userId#, user_Id))
                      AND UPPER(quote_no) LIKE UPPER(NVL(#filter.quoteNo#, quote_no))     
                      AND UPPER(iss_cd)  LIKE UPPER(NVL(#filter.issCd#, iss_cd)) 
                      AND quotation_yy = NVL(#filter.quotationYy#, quotation_yy) 
                      AND quotation_no = NVL(#filter.quotationNo#, quotation_no) 
                      AND proposal_no = NVL(#filter.proposalNo#, proposal_no)
                      AND NVL(UPPER(remarks), '%') LIKE NVL(UPPER(#filter.remarks#), '%')
                      AND NVL(UPPER(remarks), '*') LIKE UPPER (NVL (#filter.remarks#,DECODE (remarks, NULL, '*', remarks)))
                      AND UPPER(subline_cd) LIKE UPPER(NVL(#filter.sublineCd#, subline_cd)) 
          		  			  <isEqual property="sortColumn" compareValue="quoteNo">
			              		    ORDER BY quote_no
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="assdName">
				              		ORDER BY assd_name
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="remarks">
				              		ORDER BY remarks
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="userId">
				              		ORDER BY user_id
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="inceptDate">
				              		ORDER BY incept_date
				              </isEqual>
							  <isEqual property="sortColumn" compareValue="expiryDate">
				              		ORDER BY expiry_date
				              </isEqual>		
				              <isEqual property="sortColumn" compareValue="validDate">
				              		ORDER BY valid_date
				              </isEqual>		              
				              <isNotNull property="sortColumn">
				              	  <isEqual property="ascDescFlg" compareValue="ASC">
				              			ASC
				              	  </isEqual>
				              	  <isEqual property="ascDescFlg" compareValue="DESC">
				              			DESC
				              	  </isEqual>
			              	  </isNotNull>) a,
               		   (SELECT count(*) count_ FROM table(gipi_quote_pkg.get_reassign_quote_listing(#userId#, #moduleId#, #lineCd#)) 
               		    WHERE UPPER (NVL(assd_name, '*')) LIKE
                                    UPPER (NVL (#filter.assdName#,DECODE (assd_name, NULL, '*', assd_name)))
                             AND TRUNC(incept_date) = NVL(TRUNC(TO_DATE(#filter.inceptDate#, 'MM-DD-YYYY')), TRUNC(incept_date))
                             AND TRUNC(expiry_date) = NVL(TRUNC(TO_DATE(#filter.expiryDate#, 'MM-DD-YYYY')), TRUNC(expiry_date))
                             AND TRUNC(NVL(valid_date, SYSDATE)) = NVL(TRUNC(TO_DATE(#filter.validDate#, 'MM-DD-YYYY')), TRUNC(NVL(valid_date, SYSDATE)))
                             AND UPPER(user_id) LIKE UPPER(NVL(#filter.userId#, user_Id))
                             AND UPPER(quote_no) LIKE UPPER(NVL(#filter.quoteNo#, quote_no))
                             AND UPPER(iss_cd) LIKE UPPER(NVL(#filter.issCd#, iss_cd)) 
  							 AND quotation_yy = NVL(#filter.quotationYy#, quotation_yy) 
                    		 AND quotation_no = NVL(#filter.quotationNo#, quotation_no) 
                      		 AND proposal_no = NVL(#filter.proposalNo#, proposal_no)
                      		 AND NVL(UPPER(remarks), '%') LIKE NVL(UPPER(#filter.remarks#), '%')
                      		 AND UPPER(subline_cd) LIKE UPPER(NVL(#filter.sublineCd#, subline_cd))
               		   )b)
 		 WHERE rownum_ BETWEEN #from# AND #to#-->
  	</select>

  	<select id="getReasonCds" resultMap="distinctReasonCds">
		SELECT DISTINCT reason_cd FROM gipi_quote
	</select>
  	
	<select id="getQuoteIdSequence" resultMap="generatedQuoteId">
		SELECT Quote_quote_id_s.NEXTVAL AS QUOTE_ID FROM DUAL
	</select>

<!--********************************************************************************************   
	DO NOT REMOVE the " - 1.0 " from shortRatePercent - it is used to cancel out the " + 1.0 " 
      added in the GIPIQuoteDAOImpl. this action prevents the error caused by iBatis
    modified by		: mark jm 04.11.2011
    modification	: added to_date function to date columns
-->
	<insert id="saveGIPIQuote" parameterClass="com.geniisys.gipi.entity.GIPIQuote">
		BEGIN
		    
			Gipi_Quote_Pkg.Set_Gipi_Quote( #quoteId#, #lineCd#, #sublineCd#, #issCd#, #quotationYy#,
				#quotationNo#, #proposalNo#, #assdNo#, #assdName#, #tsiAmt#,
				#premAmt#, #printDt#, TO_DATE(#acceptDt#, 'MM-DD-RRRR'), #postDt#, #deniedDt#, #status#,
				#printTag#, #header#, #footer#, #remarks#,
				#userId#, #lastUpdate#, #cpiRecNo#, #cpiBranchCd#, #quotationPrintedCnt#,
				TO_DATE(#inceptDate#, 'MM-DD-RRRR'), TO_DATE(#expiryDate#, 'MM-DD-RRRR'), #origin#, #reasonCd#, #address1#,
				#address2#, #address3#, TO_DATE(#validDate#, 'MM-DD-RRRR'), #prorateFlag#, #shortRatePercent# - 2.0, <!--added by Bonok: changed -1.0 to -2.0 to save the exact shortRatePercent-->
				#compSw#, #userId#, #inspNo#, #annPremAmt#, #annTsiAmt#,
				#withTariffSw#, #inceptTag#, #expiryTag#, #credBranch#, #acctOfCd#,
				#acctOfCdSw#, #packQuoteId#, #packPolFlag# 
				,#bankRefNo#);	<!--Gzelle 12.12.2013 SR398-->
		END;
  	</insert>
  	
  	<insert id="saveGIPIQuote2" parameterClass="com.geniisys.gipi.entity.GIPIQuote">
		BEGIN
		    giis_users_pkg.app_user := #userId#;
		    
			Gipi_Quote_Pkg.Set_Gipi_Quote_2( #quoteId#, #lineCd#, #sublineCd#, #sublineName#, #issName#, #quotationYy#, <!-- changed #issCd# to #issName#; issName is the one needed in the procedure not IssCd. Passing of values becomes confusing-->
				#quotationNo#, #proposalNo#, #assdNo#, #assdName#, #tsiAmt#,
				#premAmt#, #printDt#, TO_DATE(#acceptDt#, 'MM-DD-RRRR'), #postDt#, #deniedDt#, #status#,
				#printTag#, #header#, #footer#, #remarks#,
				#userId#, #lastUpdate#, #cpiRecNo#, #cpiBranchCd#, #quotationPrintedCnt#,
				TO_DATE(#inceptDate#, 'MM-DD-RRRR'), TO_DATE(#expiryDate#, 'MM-DD-RRRR'), #origin#, #reasonCd#, #address1#,
				#address2#, #address3#, TO_DATE(#validDate#, 'MM-DD-RRRR'), #prorateFlag#, #shortRatePercent# - 2.0, 
				#compSw#, #userId#, #inspNo#, #annPremAmt#, #annTsiAmt#,
				#withTariffSw#, #inceptTag#, #expiryTag#, #credBranch#, #acctOfCd#,
				#acctOfCdSw#, #packQuoteId#, #packPolFlag#, #accountOfSW#, #bankRefNo#);
		END;
  	</insert>
  	
  	<select id="getCopiedQuoteId" parameterClass="java.lang.Integer" resultMap="generatedQuoteId">
		SELECT Gipi_Quote_Pkg.get_copied_quote_id(#quoteId#) quote_id FROM dual
  	</select>
  	
  	<procedure id="copyQuotation" parameterClass="com.geniisys.gipi.entity.GIPIQuote">
  		BEGIN
  			Gipi_Quote_Pkg.COPY_QUOTATION(#quoteId#, #underwriter#);
  		END;
  	</procedure>
  	
  	<procedure id="duplicateQuotation" parameterClass="com.geniisys.gipi.entity.GIPIQuote">
  		BEGIN
  			Gipi_Quote_Pkg.DUPLICATE_QUOTATION(#quoteId#, #underwriter#);
  		END;
  	</procedure>
  	
  	<procedure id="deleteQuotation" parameterClass="java.lang.Integer">
  		BEGIN
  			Gipi_Quote_Pkg.DELETE_QUOTATION(#quoteId#);
  		END;
  	</procedure>
	
	<procedure id="denyQuotation" parameterClass="java.lang.Integer">
  		BEGIN
  			Gipi_Quote_Pkg.DENY_QUOTATION(#quoteId#);
  		END;
  	</procedure>
	
	<procedure id="getFilterQuoteListing" parameterClass="java.util.HashMap" resultMap="GIPIQuotationListing">
		SELECT * FROM TABLE(Gipi_Quote_Pkg.get_filtered_quote_listing(#lineCd#, #sublineCd#, #issCd#, #quoteYy#, #quoteNo#, #propSeqNo#, #assdName#, #module#, #userId#))
			
			<isEqual property="allUserSwitch" compareValue="N"> <!-- Added by Irwin march 2, 2011. Filter of all_user_switch -->
				WHERE USER_ID = UPPER(#userId#)
			</isEqual>
	</procedure>
	
	<update id="reassignQuotation" parameterClass="java.util.HashMap">
		BEGIN
			Gipi_Quote_Pkg.reassign_quotation(#userId#, #quoteId#, #remarks#);
		END;
	</update>
	
	<update id="reassignPackageQuotation" parameterClass="java.util.HashMap">
		BEGIN
			Gipi_Quote_Pkg.reassign_package_quotation(#userId#, #quoteId#, #remarks#, #packQuoteId#);
		END;
	</update>
	
	<select id="getQuoteListStatus" parameterClass="java.util.HashMap" resultMap="QuoteListStatus">
		SELECT * FROM TABLE(Gipi_Quote_Pkg.get_quote_list_status(#dateFrom#, #dateTo#, #status#, #userId#, #moduleId#, #keyword#))
	</select>
	
	<!-- Rey 07.08.11-->
	<select id="getQuoteListStatusTableGrid" parameterClass="java.util.HashMap" resultMap="QuoteListStatusTableGrid"> 
				SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * 
		                  FROM TABLE (Gipi_Quote_Pkg.get_quote_list_status2(#lineCd#,#userId#,#moduleId#,#fromDate#,#toDate#, #filter.status#,#filter.proposalNo#, #filter.quotationYy#,#filter.quotationNo#,#filter.issCd#,#filter.assdName#,#filter.quoteId#,#createUser#,#filter.sublineCd#,#inceptDate#,#expiryDate#,#filter.parAssd#,#filter.quoteNo#))
		                 WHERE UPPER(status) LIKE UPPER(NVL(#filter.status#, status))
		                      <isEqual property="sortColumn" compareValue="quoteNo">
			              		ORDER BY quote_no
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="assdName">
				              		ORDER BY assd_name
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="acceptDate">
				              		ORDER BY accept_dt
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="userId">
				              		ORDER BY user_id
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="status">
				              		ORDER BY status
				              </isEqual>
				              <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              	  </isNotNull> ) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE (Gipi_Quote_Pkg.get_quote_list_status2(#lineCd#,#userId#,#moduleId#,#fromDate#,#toDate#,#filter.status#,#filter.proposalNo#,#filter.quotationYy#,#filter.quotationNo#,#filter.issCd#,#filter.assdName#,#filter.quoteId#,#createUser#,#filter.sublineCd#,#inceptDate#,#expiryDate#,#filter.parAssd#,#filter.quoteNo#))
		                 WHERE UPPER(status) LIKE UPPER(NVL(#filter.status#, status))) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<select id="getQuotationStatusList" parameterClass="java.util.HashMap" resultMap="QuoteListStatusTableGrid"> 
		<!-- added by Marks SR570 10.24.2016 -->
		SELECT * FROM TABLE (Gipi_Quote_Pkg.get_quotation_status_list(UPPER(#lineCd#),UPPER(#filter.userId#),
							 UPPER(#userId#),#fromDate#,#toDate#,UPPER(#filter.status#),#filter.proposalNo#,
							 #filter.quotationYy#,#filter.quotationNo#,#filter.issCd#,UPPER(#assdName#),
							 #filter.quoteId#,UPPER(#filter.sublineCd#),#inceptDate#,#expiryDate#,
							 UPPER(#filter.parAssd#),#filter.quoteNo#,#filter.status#,#sortColumn#,#ascDescFlg#,#from#,#to#))
		<!-- commented out by Marks SR570 10.24.2016 -->
		<!-- SELECT *
		  FROM (SELECT rownum rownum_, 
		               COUNT(1) OVER() count_,
		               a.* 
		          FROM (SELECT * 
		                  FROM TABLE (Gipi_Quote_Pkg.get_quotation_status_list(UPPER(#lineCd#),UPPER(#filter.userId#),UPPER(#userId#),#fromDate#,#toDate#,UPPER(#filter.status#),#filter.proposalNo#,#filter.quotationYy#,#filter.quotationNo#,#filter.issCd#,UPPER(#assdName#),#filter.quoteId#,UPPER(#filter.sublineCd#),#inceptDate#,#expiryDate#,UPPER(#filter.parAssd#),#filter.quoteNo#)) added by steven 11/7/2012 -> "#userId#" UPPER() added by jeffdojello05.02.2013
		                 WHERE UPPER(status) LIKE UPPER(NVL(#filter.status#, status))
		                      <isEqual property="sortColumn" compareValue="quoteNo">
			              		ORDER BY quote_no
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="assdName">
				              		ORDER BY assd_name
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="acceptDate">
				              		ORDER BY accept_dt
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="userId">
				              		ORDER BY user_id
				              </isEqual>
				              <isEqual property="sortColumn" compareValue="status">
				              		ORDER BY status
				              </isEqual>
				              <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              	  </isNotNull> ) a)  
		 WHERE rownum_ BETWEEN #from# AND #to# -->
	</select>

	<procedure id="saveQuoteToParUpdates" parameterClass="java.util.HashMap">
		BEGIN
			Gipi_Quote_Pkg.set_quote_to_par_updates(#quoteId#, #assdNo#, #lineCd#, #issCd#);
		END;
	</procedure>
	
	<procedure id="updateStatus" parameterClass="java.util.HashMap">
	  	BEGIN
	  		Gipi_Quote_Pkg.update_status(#lineCd# ,#issCd#, #quotationYy#, #quotationNo#
						,#sublineCd#, #status#);
	  	END;
	</procedure>
	
	<procedure id="updateQuotePremAmt" parameterClass="java.util.HashMap">
	  	BEGIN
	  		Gipi_Quote_Pkg.updateQuotePremAmt(#quoteId# ,#premAmt#);
	  	END;
	</procedure>
	
	<procedure id="updateStatusReturnFromPAR" parameterClass="java.lang.Integer">
		BEGIN
			Gipi_Quote_Pkg.update_return_from_par_status(#quoteId#);
		END;
	</procedure>
	
	<procedure id="updateReason" parameterClass="java.util.HashMap">
		BEGIN
			Gipi_Quote_Pkg.update_reason_cd(#quoteId#, #reasonCd#);
		END;	
	</procedure>
	
	<!-- <select id="getExistMessage" resultClass="java.lang.String">
		SELECT SET_EXIST_MSG(#lineCd#, #assdNo#, #assdName#) FROM DUAL
	</select> -->
	
	<select id="getExistMessage" resultClass="java.lang.String">
		SELECT gipi_quote_pkg.set_exist_msg(#lineCd#, #assdNo#, #assdName#, #quoteId#) FROM DUAL
	</select>
	
	<select id="getExistingQuotesPolsListing" resultMap="existingQuotesListMap" parameterClass="java.util.HashMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * 
		                  FROM TABLE (gipi_quote_pkg.get_existing_quotes_pol_list(#lineCd#,#assdNo#,#assdName#,#vExist2#))
		                  <isEqual property="sortColumn" compareValue="quoteNo">
			              		ORDER BY quote_no
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="parNo">
			              		ORDER BY par_no
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="polNo">
			              		ORDER BY pol_no
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="tsiAmt">
			              		ORDER BY tsi_Amt
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="inceptDate">
			              		ORDER BY incept_date
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="expiryDate">
			              		ORDER BY expiry_date
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="address">
			              		ORDER BY address
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="status">
			              		ORDER BY status
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>
		                  ) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE (gipi_quote_pkg.get_existing_quotes_pol_list(#lineCd#,#assdNo#,#assdName#,#vExist2#))
		                  ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<resultMap class="java.util.HashMap" id="checkAssdNameMap">
		<result property="assdNo" column="assd_no" javaType="java.lang.String"/>
		<result property="address1" column="address1" javaType="java.lang.String"/>
		<result property="address2" column="address2" javaType="java.lang.String"/>
		<result property="address3" column="address3" javaType="java.lang.String"/>
		<result property="vExist1" column="v_exist1" javaType="java.lang.String"/>
		<result property="vExist2" column="v_exist2" javaType="java.lang.String"/>
		<result property="vCount"  column="v_count" javaType="java.lang.String"/>
	</resultMap>
	<select id="checkAssdName" parameterClass="map" resultMap="checkAssdNameMap">
		SELECT *
 		 FROM TABLE (gipi_quote_pkg.check_assd_name (#assdName#, #assdNo#))
	</select>
	
	<resultMap class="com.geniisys.gipi.entity.GIPIQuote" id="getQuotationByPackQuoteIdMap">
		<result column="QUOTE_ID" 				property="quoteId" 		/>
		<result column="LINE_CD" 				property="lineCd" 		/>
		<result column="SUBLINE_CD" 			property="sublineCd" 	 />
		<result column="ISS_CD" 				property="issCd" 		 />
		<result column="QUOTATION_YY" 			property="quotationYy" 	 />
		<result column="QUOTATION_NO" 			property="quotationNo" 	/>
		<result column="PROPOSAL_NO" 			property="proposalNo" 	/>
		<result column="line_name" 			property="lineName" 	/>
		<result column="subline_name" 			property="sublineName" 	/>
		<result column="remarks" 			property="remarks" 	/>
	</resultMap>
	
	<select id="getQuotationByPackQuoteId" resultMap="getQuotationByPackQuoteIdMap" parameterClass="map">
		SELECT * FROM TABLE(gipi_quote_pkg.get_pack_quotations(#packQuoteId#, #userId#))
	</select>

	<resultMap class="com.geniisys.gipi.entity.GIPIQuote" id="getQuotationByPackQuoteIdMap2" extends="BaseEntity.TableGridResultMap">
		<result column="QUOTE_ID" 		property="quoteId" />
		<result column="LINE_CD" 		property="lineCd" />
		<result column="SUBLINE_CD" 	property="sublineCd" />
		<result column="ISS_CD" 		property="issCd" />
		<result column="QUOTATION_YY" 	property="quotationYy" />
		<result column="QUOTATION_NO" 	property="quotationNo" />
		<result column="PROPOSAL_NO" 	property="proposalNo" />
		<result column="line_name" 		property="lineName" />
		<result column="subline_name"	property="sublineName" />
		<result column="remarks" 		property="remarks" />
	</resultMap>
	
	<select id="getQuotationByPackQuoteId2" resultMap="getQuotationByPackQuoteIdMap2">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.*  
		  	      FROM (SELECT * FROM TABLE(gipi_quote_pkg.get_pack_quotations(#packQuoteId#, #userId#))
		  	      		  <isNotNull property="filter">
							WHERE 1=1
								<isNotEmpty prepend="AND"  property="lineCd">
									UPPER(line_cd) LIKE UPPER(#lineCd#)
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="sublineCd">
									UPPER(subline_cd) LIKE UPPER(#sublineCd#)
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="issCd">
									UPPER(iss_cd) LIKE UPPER(#issCd#)
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="quotationYy">
									quotation_yy = #quotationYy#
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="quotationNo">
									quotation_no = #quotationNo#
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="proposalNo">
									proposal_no = #proposalNo#
								</isNotEmpty>
						</isNotNull>
						  <isEqual property="sortColumn" compareValue="lineCd">
			              		ORDER BY line_cd
			              </isEqual>
		                  <isEqual property="sortColumn" compareValue="sublineCd">
			              		ORDER BY subline_cd
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="issCd">
			              		ORDER BY iss_cd
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="quotationYy">
			              		ORDER BY quotation_yy
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="quotationNo">
			              		ORDER BY quotation_no
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="proposalNo">
			              		ORDER BY proposal_no
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>
		                  ) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE(gipi_quote_pkg.get_pack_quotations(#packQuoteId#, #userId#))
		                  <isNotNull property="filter">
							WHERE 1=1
								<isNotEmpty prepend="AND"  property="lineCd">
									UPPER(line_cd) LIKE UPPER(#lineCd#)
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="sublineCd">
									UPPER(subline_cd) LIKE UPPER(#sublineCd#)
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="issCd">
									UPPER(iss_cd) LIKE UPPER(#issCd#)
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="quotationYy">
									quotation_yy = #quotationYy#
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="quotationNo">
									quotation_no = #quotationNo#
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="proposalNo">
									proposal_no = #proposalNo#
								</isNotEmpty>
						</isNotNull>
		                  ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#	
	</select>	

 	<resultMap class="GIPIQuotation" id="GIPIQuoteLOVResultMap" extends="BaseEntity.TableGridResultMap">
 		<result column="QUOTE_ID" 		property="quoteId"/>
 		<result column="ISS_CD" 		property="issCd"/>
 		<result column="LINE_CD" 		property="lineCd"/>
 		<result column="SUBLINE_CD" 	property="sublineCd"/>
 		<result column="QUOTATION_YY" 	property="quotationYy"/>
 		<result column="QUOTATION_NO"   property="quotationNo"/>
 		<result column="PROPOSAL_NO" 	property="proposalNo"/>
 		<result column="QUOTE_NO"   	property="quoteNo"/>
 		<result column="ASSD_NO" 		property="assdNo"/>
 		<result column="ASSD_NAME" 			property="assdName"/>
 		<result column="ASSD_ACTIVE_TAG"	property="assdActiveTag"/>
 		<result column="VALID_DATE"			property="validDate"/>
 		<result column="INCEPT_DATE"		property="inceptDate"/>
 		<result column="EXPIRY_DATE"		property="expiryDate"/>
 	</resultMap>
 	
 	<resultMap class="GIPIQuotation" 			id="GIPIPackQuoteListMap">
 		<result column="QUOTE_ID"				property="quoteId"/>
 		<result column="QUOTE_NO"				property="quoteNo"/>
 		<result column="ASSD_NO"				property="assdNo"/>
 		<result column="ASSD_NAME"				property="assdName"/>
 		<result column="INCEPT_DATE"			property="inceptDate"/>
 		<result column="EXPIRY_DATE"			property="expiryDate"/>
 		<result column="INCEPT_TAG"				property="inceptTag"/>
 		<result column="EXPIRY_TAG"				property="expiryTag"/>
 		<result column="NO_OF_DAYS"				property="elapsedDays"/>
 		<result column="ACCEPT_DT"				property="acceptDt"/>
 		<result column="USERID"					property="underwriter"/>
 		<result column="LINE_CD"				property="lineCd"/>
 		<result column="MENU_LINE_CD"			property="menuLineCd"  nullValue="*"/>
 		<result column="LINE_NAME"				property="lineName"/>
 		<result column="SUBLINE_CD"				property="sublineCd"/>
 		<result column="SUBLINE_NAME"			property="sublineName"/>
 		<result column="ISS_CD"					property="issCd"/>
 		<result column="ISS_NAME"				property="issName"/>
 		<result column="QUOTATION_YY"			property="quotationYy"/>
 		<result column="QUOTATION_NO"			property="quotationNo"/>
 		<result column="PROPOSAL_NO"			property="proposalNo"/>
 		<result column="CRED_BRANCH"			property="credBranch"/>
 		<result column="CRED_BRANCH_NAME"		property="credBranchName"/>
 		<result column="ACCT_OF"				property="acctOf"/>
 		<result column="PRORATE_FLAG"			property="prorateFlag"/>
 		<result column="HEADER"					property="header"/>
 		<result column="FOOTER"					property="footer"/>
 		<result column="REMARKS"				property="remarks"/>
 		<result column="REASON_CD"				property="reasonCd"/>
 		<result column="REASON_DESC"			property="reasonDesc"/>
 		<result column="COMP_SW"				property="compSw"/>
 		<result column="SHORT_RT_PERCENT"		property="shortRatePercent"/>
 		<result column="ACCT_OF_CD"				property="acctOf"/>
 		<result column="PREM_AMT"				property="premAmt"/>
 		<result column="ANN_PREM_AMT"			property="annPremAmt"/>
 		<result column="TSI_AMT"				property="tsiAmt"/>
 		<result column="ACCOUNT_SW"             property="accountOfSW"/>
 	</resultMap>
 	
 	<resultMap class="GIPIQuotation" 			id="includedLinesOfPackQuoteResultMap">
 		<result column="LINE_CD"				property="lineCd"/>
 		<result column="MENU_LINE_CD"			property="menuLineCd"  nullValue="*"/>
 	</resultMap>
 		
	<select id="getGIPIQuoteLOV" resultMap="GIPIQuoteLOVResultMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * FROM TABLE (Gipi_Quote_Pkg.get_quote_list(#issCd#, #lineCd#, 'GIPIS050', #findText#, #userId#))
		                  <isEqual property="sortColumn" compareValue="quoteNo">
			              		ORDER BY quote_no
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="assdNo">
			              		ORDER BY assd_no
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="assdName">
			              		ORDER BY TRIM(assd_name)
			              </isEqual>			              
			              <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>
		                  ) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE (Gipi_Quote_Pkg.get_quote_list(#issCd#, #lineCd#, 'GIPIS050', #findText#, #userId#))) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<select id="getGipiPackQuoteList" resultMap="GIPIPackQuoteListMap">
		SELECT * FROM TABLE(GIPI_QUOTE_PKG.get_gipi_pack_quote_list(#packQuoteId#))
	</select>
	
	<select id="getPackQuoteListForCarrierInfo" resultMap="GIPIPackQuoteListMap">
		SELECT * FROM TABLE(GIPI_QUOTE_PKG.get_gipi_pack_quote_list(#packQuoteId#))
		WHERE line_cd = giisp.v('LINE_CODE_MN') <!-- remove by steven 11/8/2012 base on SR 0011201 -"line_cd = giisp.v('LINE_CODE_MH') OR " -->
	</select>
	
	<select id="getPackQuoteListForENInfo" resultMap="GIPIPackQuoteListMap">
		SELECT * FROM TABLE(GIPI_QUOTE_PKG.get_gipi_pack_quote_list(#packQuoteId#))
		WHERE line_cd = giisp.v('LINE_CODE_EN')
	</select>
	
	<select id="getIncludedLinesOfPackQuote" resultMap="includedLinesOfPackQuoteResultMap">
	 	SELECT DISTINCT line_cd, menu_line_cd FROM TABLE(GIPI_QUOTE_PKG.get_gipi_pack_quote_list(#packQuoteId#))
	</select>
	
	<procedure id="saveQuoteInspectionDetails" parameterClass="map">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			gipi_inspection_pkg.save_quote_insp_det (
				#quoteId#,
				#appUser#,
				#inspNo#,
				#itemNo#,
				#provinceCd#,
				#itemDesc#,
				#blockNo#,
				#districtNo#,
				#locRisk1#,
				#locRisk2#,
				#locRisk3#
		   );
		END;
	</procedure>
	
	<procedure id="updateQuoteAmts" parameterClass="map">
		BEGIN
			 GIPI_QUOTE_PKG.update_quote_amts(#quoteId#,#premAmt#,#annPremAmt#,#tsiAmt#,#annTsiAmt#);
		END;
	</procedure>
	
	<parameterMap class="map" id="generateQuoteBankRefNoMap">
		<parameter property="appUser"		jdbcType="VARCHAR"	javaType="java.lang.String"		mode="IN"/>
		<parameter property="quoteId"		jdbcType="INTEGER"	javaType="java.lang.Integer"	mode="IN" />
		<parameter property="acctIssCd"  	jdbcType="VARCHAR"	javaType="java.lang.String"		mode="IN"/>
		<parameter property="branchCd"  	jdbcType="VARCHAR"	javaType="java.lang.String"		mode="IN"/>
		<parameter property="bankRefNo"  	jdbcType="VARCHAR"	javaType="java.lang.String"		mode="OUT"/>
		<parameter property="vMsgAlert"  	jdbcType="VARCHAR"	javaType="java.lang.String"		mode="OUT"/>
	</parameterMap>
	
	<procedure id="generateQuoteBankRefNo" parameterMap="generateQuoteBankRefNoMap">
		BEGIN
			giis_users_pkg.app_user := ?;
			gipi_quote_pkg.generate_quote_bank_ref_no(?,?,?,?,?);
		END;
	</procedure>
	
	<parameterMap class="java.util.HashMap" id="copyQuotationParamMap">
		<parameter property="userId"		jdbcType="VARCHAR"	javaType="java.lang.String"		mode="IN"/>
		<parameter property="quoteId"		jdbcType="INTEGER"	javaType="java.lang.Integer"	mode="IN" />
		<parameter property="userId"		jdbcType="VARCHAR"	javaType="java.lang.String"		mode="IN"/>
		<parameter property="newQuoteId"	jdbcType="INTEGER"	javaType="java.lang.Integer"	mode="OUT" />
	</parameterMap>
	
	<procedure id="copyQuotation2" parameterMap="copyQuotationParamMap">
		BEGIN
			giis_users_pkg.app_user := ?;
			gipi_quote_pkg.copy_quotation_2(?,?,?);
		END;
	</procedure>
	
	<parameterMap class="java.util.HashMap" id="duplicateQuotationParamMap">
		<parameter property="userId"		jdbcType="VARCHAR"	javaType="java.lang.String"		mode="IN"/>
		<parameter property="quoteId"		jdbcType="INTEGER"	javaType="java.lang.Integer"	mode="IN" />
		<parameter property="userId"		jdbcType="VARCHAR"	javaType="java.lang.String"		mode="IN"/>
		<parameter property="newQuoteId"	jdbcType="INTEGER"	javaType="java.lang.Integer"	mode="OUT" />
	</parameterMap>
	
	<procedure id="duplicateQuotation2" parameterMap="duplicateQuotationParamMap">
		BEGIN
			giis_users_pkg.app_user := ?;
			gipi_quote_pkg.duplicate_quotation_2(?,?,?);
		END;
	</procedure>
	
	<select id="checkIfInspExists" parameterClass="java.lang.Integer" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM TABLE(GIPI_INSPECTION_PKG.get_quote_inspection_list(#assdNo#, ''))
	</select>
	
	<procedure id="deleteQuotation2" parameterClass="map">
		BEGIN
			giis_users_pkg.app_user := #userId#;
			Gipi_Quote_Pkg.DELETE_QUOTATION2(#quoteId#);
		END;
	</procedure>
</sqlMap>
