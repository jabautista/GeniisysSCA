<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd" >

<sqlMap namespace="GIPIPackQuote">
 
  <cacheModel id="oneDayClient" type="MEMORY">
		<flushInterval hours="24" />
		<property name="reference-type" value="WEAK" />
  </cacheModel>

	<typeAlias alias="GIPIPackQuoteClass" type="com.geniisys.gipi.pack.entity.GIPIPackQuote"/>
	
	<resultMap class="com.geniisys.gipi.pack.entity.GIPIPackQuote" id="GIPIPackQuote">
		<result column="PACK_QUOTE_ID" 				property="packQuoteId" 		jdbcType="NUMBER" />
		<result column="LINE_CD" 				property="lineCd" 		jdbcType="STRING" />
		<result column="SUBLINE_CD" 			property="sublineCd" 	jdbcType="VARCHAR" />
		<result column="ISS_CD" 				property="issCd" 		jdbcType="VARCHAR" />
		<result column="QUOTATION_YY" 			property="quotationYy" 	jdbcType="NUMBER" />
		<result column="QUOTATION_NO" 			property="quotationNo" 	jdbcType="NUMBER" />
		<result column="PROPOSAL_NO" 			property="proposalNo" 	jdbcType="NUMBER" />
		<result column="ASSD_NO" 				property="assdNo" 		jdbcType="NUMBER" />
		<result column="ASSD_NAME" 				property="assdName" 	jdbcType="VARCHAR" />
		<result column="TSI_AMT" 				property="tsiAmt" 		jdbcType="NUMBER" />
		<result column="PREM_AMT" 				property="premAmt" 		jdbcType="NUMBER" />
		<result column="PRINT_DT" 				property="printDt" 		jdbcType="DATE" />
		<result column="ACCEPT_DT" 				property="acceptDt" 	jdbcType="DATE" />
		<result column="POST_DT" 				property="postDt" 		jdbcType="DATE" />
		<result column="DENIED_DT" 				property="deniedDt" 	jdbcType="DATE" />
		<result column="STATUS" 				property="status" 		jdbcType="VARCHAR" />
		<result column="PRINT_TAG" 				property="printTag" 	jdbcType="VARCHAR" />
		<result column="HEADER" 				property="header" 		jdbcType="VARCHAR" />
		<result column="FOOTER" 				property="footer" 		jdbcType="VARCHAR" />
		<result column="REMARKS" 				property="remarks" 		jdbcType="VARCHAR" />
		<result column="USER_ID" 				property="userId" 		jdbcType="VARCHAR" />
		<result column="LAST_UPDATE" 			property="lastUpdate" 	jdbcType="DATE" />
		<result column="CPI_REC_NO" 			property="cpiRecNo" 	jdbcType="NUMBER" />
		<result column="CPI_BRANCH_CD" 			property="cpiBranchCd" 	jdbcType="VARCHAR" />
		<result column="QUOTATION_PRINTED_CNT" 	property="quotationPrintedCnt" jdbcType="NUMBER" />
		<result column="INCEPT_DATE" 			property="inceptDate" 	jdbcType="DATE" />
		<result column="EXPIRY_DATE" 			property="expiryDate" 	jdbcType="DATE" />
		<result column="ORIGIN" 				property="origin" 		jdbcType="VARCHAR" />
		<result column="REASON_CD" 				property="reasonCd" 	jdbcType="NUMBER" />
		<result column="ADDRESS1" 				property="address1" 	jdbcType="VARCHAR" />
		<result column="ADDRESS2"				property="address2" 	jdbcType="VARCHAR" />
		<result column="ADDRESS3" 				property="address3" 	jdbcType="VARCHAR" />
		<result column="ACCOUNT_SW" 		    property="accountOfSW" 	jdbcType="NUMBER" />
	</resultMap>
	
	<resultMap class="GIPIPackQuoteClass" id="packQuoteListMap" extends="BaseEntity.TableGridResultMap">
 		<result column="PACK_QUOTE_ID" 			property="packQuoteId"/>
 		<result column="ISS_CD" 				property="issCd"/>
 		<result column="LINE_CD" 				property="lineCd"/>
 		<result column="SUBLINE_CD" 			property="sublineCd"/>
 		<result column="QUOTATION_YY" 			property="quotationYy"/>
 		<result column="QUOTATION_NO" 			property="quotationNo"/>
 		<result column="PROPOSAL_NO" 			property="proposalNo"/>
 		<result column="ASSD_NO" 				property="assdNo"/>
 		<result column="ASSD_NAME" 				property="assdName"/>
 		<result column="ASSURED" 				property="assured"/>
 		<result column="ASSD_ACTIVE_TAG" 		property="assdActiveTag"/>
 		<result column="VALID_DATE" 			property="validDate"/>
 		<result column="QUOTE_NO" 				property="quoteNo"/>
 	</resultMap>
 	
 	<resultMap id="GIPIPPackQuoteDetMap" class="GIPIPackQuoteClass">
 		<result column="pack_quote_id"			property="packQuoteId"/>
	  	<result column="QUOTE_NO"				property="quoteNo" />
	  	<result column="ASSD_NAME"				property="assdName"	/>
	  	<result column="ASSD_NO"				property="assdNo" />
	  	<result column="INCEPT_DATE"			property="inceptDate" />
	  	<result column="EXPIRY_DATE"			property="expiryDate" />
	  	<result column="NO_OF_DAYS"				property="noOfDays" />
	  	<result column="ACCEPT_DT"				property="acceptDt" />
	  	<result column="USER_ID"				property="userId" />
	  	<result column="LINE_CD"				property="lineCd" />
	  	<result column="LINE_NAME"				property="lineName"	/>
	  	<result column="SUBLINE_CD"				property="sublineCd" />
	  	<result column="SUBLINE_NAME"			property="sublineName" />
	  	<result column="ISS_CD"					property="issCd" />
	  	<result column="ISS_NAME"				property="issName" />
	  	<result column="QUOTATION_YY"			property="quotationYy" />
	  	<result column="QUOTATION_NO"			property="quotationNo" />
	  	<result column="PROPOSAL_NO"			property="proposalNo" />
	  	<result column="CRED_BRANCH"			property="credBranch" />
	  	<result column="CRED_BRANCH_NAME"		property="credBranchName" />
	  	<result column="VALID_DATE"				property="validDate" />
	  	<result column="ACCT_OF"				property="acctOf" />
	  	<result column="ACCT_OF_CD"				property="acctOfCd" />
	  	<result column="ADDRESS1"				property="address1" />
	  	<result column="ADDRESS2"				property="address2" />
	  	<result column="ADDRESS3"				property="address3" />
	  	<result column="PRORATE_FLAG"			property="prorateFlag" />
	  	<result column="HEADER"					property="header" />
	  	<result column="FOOTER"					property="footer" />
	  	<result column="REMARKS"				property="remarks" />
	  	<result column="REASON_CD"				property="reasonCd" />
	  	<result column="REASON_DESC"			property="reasonDesc" />
	  	<result column="COMP_SW"				property="compSw" />
	  	<result column="SHORT_RT_PERCENT"		property="shortRatePercent" />
	  	<result column="PREM_AMT"				property="premAmt" />
	  	<result column="ANN_PREM_AMT"			property="annPremAmt" />
	  	<result column="TSI_AMT"				property="tsiAmt" />
	  	<result column="BANK_REF_NO" property="bankRefNo"/>
	  	<result column="ACCOUNT_SW"             property="accountOfSW"/>
 	</resultMap>
	
	
	<select id="getPackQuoteListFromIssCd" resultMap="packQuoteListMap" parameterClass="map">
 		SELECT * FROM TABLE(Gipi_Pack_Quote_Pkg.get_pack_quote_list(#lineCd#,#issCd#, 'GIPIS050A', #keyWord#, #userId#))
 	</select>
 	
 	<select id="getGIPIPackQuoteLOV" resultMap="packQuoteListMap" >
 		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * FROM TABLE (Gipi_Pack_Quote_Pkg.get_pack_quote_list(#lineCd#,#issCd#, 'GIPIS050A', #findText#, #userId#))
		                  <isEqual property="sortColumn" compareValue="quoteNo">
			              		ORDER BY quote_no
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="assdNo">
			              		ORDER BY assd_no
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="assdName">
			              		ORDER BY TRIM(assd_name)
			              </isEqual>			              
			              <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>
		                  ) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE (Gipi_Pack_Quote_Pkg.get_pack_quote_list(#lineCd#,#issCd#, 'GIPIS050A', #findText#, #userId#))) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
 	</select>

	<update id="updateGipiPackQuote" parameterClass="java.lang.Integer">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIPI_PACK_QUOTE_PKG.update_gipi_pack_quote(#quoteId#);
		END;
	</update>
	
	<procedure id="processPackQuoteToPar" parameterClass="map">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			gipi_pack_quote_pkg.process_packquote_to_par (
										     #packQuoteId#,
										      #packParId#,
										      #lineCd#,
										      #issCd#,
										      #assdNo#,
										      #appUser#
										   );
		END;
	</procedure>
	
	<procedure id="returnPackParToquotation" parameterClass="map">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			pack_quote_to_par.return_to_quote (
										     #packQuoteId#,
										      #packParId#
										   );
		END;	
	</procedure>
	
	<resultMap class="GIPIPackQuoteClass" id="gipiPackQuotationListingMap">
		<result property="packQuoteId" column="pack_quote_id"/>
		<result property="quoteNo" column="quote_no"/>
		<result property="assdName" column="assd_name"/>
		<result property="assdNo" column="assd_no"/>
		<result property="inceptDate" column="incept_date"/>
		<result property="expiryDate" column="expiry_date"/>
		<result property="validDate" column="valid_date"/>
		<result property="userId" column="user_id"/>
		<result property="acceptDt" column="accept_dt"/>
		<result property="issCd" column="iss_cd"/>
		<result property="quotationNo" column="quotation_no"/>
		<result property="quotationYy" column="quotation_yy"/>
		<result property="proposalNo" column="proposal_no"/>
		<result property="sublineCd" column="subline_cd"/>
		<result property="rowNum" 		column="rownum_"/>
		<result property="rowCount" 	column="count_"/>
		<result property="gipiQuotesList" column="{packQuoteId=pack_quote_id}" select="getIncludedLinesOfPackQuote"/>
	</resultMap>
	
	<select id="getPackQuotationListing" resultMap="gipiPackQuotationListingMap">
		SELECT *
		  FROM (SELECT ROWNUM rownum_, b.count_, a.*
		          FROM (SELECT COUNT (*) count_
		                  FROM (SELECT *
		                          FROM TABLE
		                                  (gipi_pack_quote_pkg.get_pack_quotation_listing
		                                                                 (#appUser#,
		                                                                  'GIIMM001A',
		                                                                   #lineCd#
		                                                                 )
		                                  )
										 WHERE UPPER (NVL (assd_name, '*')) LIKE
					                              UPPER (NVL (#filter.assdName#,DECODE (assd_name, NULL, '*', assd_name)))
					                      AND TRUNC(incept_date) = NVL(TRUNC(TO_DATE(#filter.inceptDate#, 'MM-DD-YYYY')), TRUNC(incept_date))
					                      AND TRUNC(expiry_date) = NVL(TRUNC(TO_DATE(#filter.expiryDate#, 'MM-DD-YYYY')), TRUNC(expiry_date))
					                      AND TRUNC(valid_date) = NVL(TRUNC(TO_DATE(#filter.validDate#, 'MM-DD-YYYY')), TRUNC(valid_date))
					                      AND UPPER (user_id) LIKE UPPER (NVL (#filter.userId#, user_Id))   
					                      AND quote_no LIKE NVL(#filter.quoteNo#, quote_no)     
					                      AND iss_cd  LIKE NVL(#filter.issCd#, iss_cd) 
					                      AND quotation_yy = NVL(#filter.quotationYy#, quotation_yy) 
					                      AND quotation_no = NVL(#filter.quotationNo#, quotation_no) 
					                      AND proposal_no = NVL(#filter.proposalNo#, proposal_no)  
					                      AND subline_cd LIKE NVL(#filter.sublineCd#, subline_cd) 		                                  
		                                  )) b,
		               (SELECT *
		                  FROM TABLE
		                          (gipi_pack_quote_pkg.get_pack_quotation_listing
		                                                                 (#appUser#,
		                                                                  'GIIMM001A',
		                                                                  #lineCd#
		                                                                 )
		                          )
		                          WHERE UPPER (NVL (assd_name, '*')) LIKE
			                              UPPER (NVL (#filter.assdName#,DECODE (assd_name, NULL, '*', assd_name)))
			                      AND TRUNC(incept_date) = NVL(TRUNC(TO_DATE(#filter.inceptDate#, 'MM-DD-YYYY')), TRUNC(incept_date))
			                      AND TRUNC(expiry_date) = NVL(TRUNC(TO_DATE(#filter.expiryDate#, 'MM-DD-YYYY')), TRUNC(expiry_date))
			                      AND TRUNC(valid_date) = NVL(TRUNC(TO_DATE(#filter.validDate#, 'MM-DD-YYYY')), TRUNC(valid_date))
			                      AND UPPER (user_id) LIKE UPPER (NVL (#filter.userId#, user_Id))   
			                      AND quote_no LIKE NVL(#filter.quoteNo#, quote_no)     
			                      AND iss_cd  LIKE NVL(#filter.issCd#, iss_cd) 
			                      AND quotation_yy = NVL(#filter.quotationYy#, quotation_yy) 
			                      AND quotation_no = NVL(#filter.quotationNo#, quotation_no) 
			                      AND proposal_no = NVL(#filter.proposalNo#, proposal_no)  
			                      AND subline_cd LIKE NVL(#filter.sublineCd#, subline_cd) 
			                      <isEqual property="sortColumn" compareValue="quoteNo">
			              		    ORDER BY quote_no
					              </isEqual>
					              <isEqual property="sortColumn" compareValue="assdName">
					              		ORDER BY assd_name
					              </isEqual>
					              <isEqual property="sortColumn" compareValue="inceptDate">
					              		ORDER BY incept_date
					              </isEqual>
					              <isEqual property="sortColumn" compareValue="expiryDate">
					              		ORDER BY expiry_date
					              </isEqual>
					              <isEqual property="sortColumn" compareValue="validDate">
					              		ORDER BY  valid_date
					              </isEqual>
					              <isEqual property="sortColumn" compareValue="userId">
					              		ORDER BY  user_id
					              </isEqual>
					              <isNotNull property="sortColumn">
				              	  <isEqual property="ascDescFlg" compareValue="ASC">
				              			ASC
				              	  </isEqual>
				              	  <isEqual property="ascDescFlg" compareValue="DESC">
				              			DESC
				              	  </isEqual>
				              	  </isNotNull>            
		                          ) a)
		                          WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<select id="getGIPIPacKQuoteDetails" resultMap="GIPIPPackQuoteDetMap">
		SELECT * FROM TABLE (gipi_pack_quote_pkg.get_gipi_pack_quote (#packQuoteId#))
	</select>
	
	<select id="getNewPackQuoteId" resultClass="Integer">
		SELECT pack_quote_id_s.nextval FROM sys.dual
	</select>
	
<!--********************************************************************************************   
	DO NOT REMOVE the " - 1.0 " from shortRatePercent - it is used to cancel out the " + 1.0 " 
      added in the GIPIQuoteDAOImpl. this action prevents the error caused by iBatis
     changed -1.0 to -2.0 to save the exact shortRatePercent (same in GIPIQUOTE)
-->
	<procedure id="saveGIPIPackQuote" parameterClass="GIPIPackQuoteClass">
		DECLARE
			 pack_quote   gipi_pack_quote%ROWTYPE;
		BEGIN
			giis_users_pkg.app_user := #userId#;
			
			pack_quote.pack_quote_id := #packQuoteId#;
			pack_quote.line_cd := #lineCd#;
            pack_quote.subline_cd := #sublineCd#;
            pack_quote.iss_cd := #issCd#;
            pack_quote.quotation_yy := #quotationYy#;
            pack_quote.quotation_no := #quotationNo#;
            pack_quote.proposal_no := #proposalNo#;
            pack_quote.assd_no := #assdNo#; 
            pack_quote.assd_name := #assdName#;
            pack_quote.tsi_amt := #tsiAmt#;
            pack_quote.prem_amt := #premAmt#;
            pack_quote.print_Dt := #printDt#;
            pack_quote.post_dt := #postDt#;
            pack_quote.denied_dt := #deniedDt#;
            pack_quote.status := #status#;
			pack_quote.print_tag := #printTag#;
			pack_quote.header:= #header#;
			pack_quote.footer:=#footer#;
			pack_quote.remarks:=#remarks#;
            pack_quote.accept_dt:= TO_DATE(#acceptDt#, 'MM-DD-RRRR');
			pack_quote.user_id:= #userId#; 
			pack_quote.last_update:= #lastUpdate#; 
			pack_quote.cpi_Rec_No:=#cpiRecNo#;
			pack_quote.cpi_branch_Cd:=#cpiBranchCd#;
			pack_quote.quotation_Printed_Cnt:=#quotationPrintedCnt#;
			pack_quote.incept_date:= TO_DATE(#inceptDate#, 'MM-DD-RRRR');
			pack_quote.expiry_date := TO_DATE(#expiryDate#, 'MM-DD-RRRR'); 
			pack_quote.origin:=#origin#;
			pack_quote.reason_cd:= #reasonCd#;
			pack_quote.address1:= #address1#;
			pack_quote.address2:=#address2#; 
			pack_quote.address3:= #address3#; 
			pack_quote.valid_date:= TO_DATE(#validDate#, 'MM-DD-RRRR');
			pack_quote.prorate_flag := #prorateFlag#;
			pack_quote.short_rt_percent := #shortRatePercent# - 2.0;
			pack_quote.comp_sw:= #compSw#; 
			pack_quote.underwriter:= #underwriter#; 
			pack_quote.insp_No:= #inspNo#; 
			pack_quote.ann_prem_amt:= #annPremAmt#;
			pack_quote.ann_tsi_amt:= #annTsiAmt#;
			pack_quote.with_tariff_sw:= #withTariffSw#; 
			pack_quote.incept_tag:= #inceptTag#;
			pack_quote.expiry_tag := #expiryTag#; 
			pack_quote.cred_branch:= #credBranch#; 
			pack_quote.acct_of_cd:= #acctOfCd#;
			pack_quote.acct_of_cd_sw:= #acctOfCdSw#;
			pack_quote.account_sw := #accountOfSW#;
            
            gipi_pack_quote_pkg.save_gipi_pack_quotation(pack_quote);
		END;
	</procedure> 
	
	<procedure id="deletePackQuotation" parameterClass="map">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			gipi_pack_quote_pkg.del_gipi_pack_quotation(#packQuoteId# );
		END;	
	</procedure>
	
	<procedure id="denyPackQuotation" parameterClass="map">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			gipi_pack_quote_pkg.deny_gipi_pack_quotation(#packQuoteId#,#reasonCd#);
		END;
	</procedure>
	
	<parameterMap class="map" id="copyPackQuotationMap">
		<parameter property="userId"		jdbcType="VARCHAR"		javaType="java.lang.String"		mode="IN"/>
		<parameter property="packQuoteId"	jdbcType="VARCHAR"		javaType="java.lang.String"		mode="IN"/>
		<parameter property="quoteNo"		jdbcType="VARCHAR"		javaType="java.lang.String"		mode="OUT"/>
		<parameter property="userId"		jdbcType="VARCHAR"		javaType="java.lang.String"		mode="IN"/>
	</parameterMap>
	<parameterMap class="map" id="duplicatePackQuotationMap">
		<parameter property="userId"		jdbcType="VARCHAR"		javaType="java.lang.String"		mode="IN"/>
		<parameter property="packQuoteId"	jdbcType="VARCHAR"		javaType="java.lang.String"		mode="IN"/>
		<parameter property="quoteNo"		jdbcType="VARCHAR"		javaType="java.lang.String"		mode="OUT"/>
		<parameter property="userId"		jdbcType="VARCHAR"		javaType="java.lang.String"		mode="IN"/>
	</parameterMap>
	
	<procedure id="copyPackQuotation" parameterMap="copyPackQuotationMap" >
		BEGIN
			giis_users_pkg.app_user := ?;
			gipi_pack_quote_pkg.copy_gipi_pack_quotation(?,?,?);
		END;
	</procedure>
	
	<procedure id="duplicatePackQuotation" parameterMap="duplicatePackQuotationMap">
		BEGIN
			giis_users_pkg.app_user := ?;
			gipi_pack_quote_pkg.duplicate_gipi_pack_quote(?,?,?);
		END;
	</procedure>
	
	<parameterMap class="map" id="generatePackBankRefNoMap">
		<parameter property="appUser"		jdbcType="VARCHAR"		javaType="java.lang.String"		mode="IN"/>
		<parameter property="packQuoteId"	jdbcType="INTEGER"	javaType="java.lang.Integer"	mode="IN" />
		<parameter property="acctIssCd"  	jdbcType="VARCHAR"	javaType="java.lang.String"		mode="IN"/>
		<parameter property="branchCd"  	jdbcType="VARCHAR"	javaType="java.lang.String"		mode="IN"/>
		<parameter property="bankRefNo"  	jdbcType="VARCHAR"	javaType="java.lang.String"		mode="OUT"/>
		<parameter property="vMsgAlert"  	jdbcType="VARCHAR"	javaType="java.lang.String"		mode="OUT"/>
	</parameterMap>
	
	<procedure id="generatePackBankRefNo" parameterMap="generatePackBankRefNoMap">
		BEGIN
			giis_users_pkg.app_user := ?;
			gipi_pack_quote_pkg.generate_pack_bank_ref_no(?,?,?,?,?);
		END;
	</procedure>
	
	<resultMap class="java.util.HashMap" id="existingPackQuotationMap">
		<result property="packQuoteId" column="pack_quote_id"/>
		<result property="lineCd" column="line_cd"/>
		<result property="issCd" column="iss_cd"/>
		<result property="tsiAmt" column="tsi_amt"/>
		<result property="assdName" column="assd_name"/>
		<result property="address" column="address"/>
		<result property="status" column="status"/>
		<result property="quoteNo" column="quote_No"/>
		<result property="parNo" column="par_No"/>
		<result property="polNo" column="pol_No"/>
		<result property="inceptDate" column="incept_Date"/>
		<result property="expiryDate" column="expiry_Date"/>
		<result property="rowNum" 		column="rownum_"/>
		<result property="rowCount" 	column="count_"/>
	</resultMap>
	
	<select id="getExistMessagePack" resultClass="java.lang.String">
		SELECT SET_EXIST_MSG_pack(#lineCd#, #assdNo#) FROM DUAL
	</select>
	
 	<select id="getExistingPackQuotations" parameterClass="map" resultMap="existingPackQuotationMap">
 		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * 
		                  FROM TABLE (gipi_pack_quote_pkg.get_existing_pack_quotations(#lineCd#,#assdNo#))
		                  <isEqual property="sortColumn" compareValue="quoteNo">
			              		ORDER BY quote_no
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="parNo">
			              		ORDER BY par_no
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="polNo">
			              		ORDER BY pol_no
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="tsiAmt">
			              		ORDER BY tsi_Amt
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="inceptDate">
			              		ORDER BY incept_date
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="expiryDate">
			              		ORDER BY expiry_date
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="address">
			              		ORDER BY address
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="status">
			              		ORDER BY status
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>
		                  ) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE (gipi_pack_quote_pkg.get_existing_pack_quotations(#lineCd#,#assdNo#))
		                  ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
 	</select>
 	
 	<select id="checkOra2010Sw" resultClass="java.lang.String">
		SELECT gipi_pack_quote_pkg.get_ora2010_sw FROM DUAL
	</select>

<!--Gzelle 12.17.2013-->
	<resultMap id="bankRefNoListingTGMap" class="com.geniisys.gipi.entity.GIPIRefNoHist" extends="BaseEntity.TableGridResultMap">
		<result column="acct_iss_cd" 		property="acctIssCd" />
		<result column="branch_cd" 			property="branchCd" />
		<result column="ref_no" 			property="refNo" />
		<result column="mod_no" 			property="modNo" />
	</resultMap>
	
	<select id="getBankRefNoListingForPackTG" resultMap="bankRefNoListingTGMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * FROM TABLE (gipi_ref_no_hist_pkg.get_bank_ref_no_list_for_pack(#nbtAcctIssCd#, #nbtBranchCd#, #keyword#))		                 
		                	<isNotNull property="findText">
		                		WHERE UPPER(acct_iss_cd) LIKE UPPER(#findText#)		
		                			OR UPPER(branch_cd) LIKE UPPER(#findText#)
		                			OR UPPER(ref_no) LIKE UPPER(#findText#)
		                			OR UPPER(mod_no) LIKE UPPER(#findText#)
			             	</isNotNull>		             
			              	<isEqual property="sortColumn" compareValue="acctIssCd">
			              		ORDER BY acct_iss_cd
			              	</isEqual>		
			              	<isEqual property="sortColumn" compareValue="branchCd">
			              		ORDER BY branch_cd
			              	</isEqual>
			              	<isEqual property="sortColumn" compareValue="refNo">
			              		ORDER BY ref_no
			              	</isEqual>
			              	<isEqual property="sortColumn" compareValue="modNo">
			              		ORDER BY mod_no
			              	</isEqual>		              		                      
			          	  	<isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              	</isNotNull>
		                  ) a, 
		               (SELECT count (*) count_ 
		                  FROM TABLE(gipi_ref_no_hist_pkg.get_bank_ref_no_list_for_pack(#nbtAcctIssCd#, #nbtBranchCd#, #keyword#))		                 
		                	<isNotNull property="findText">
		                		WHERE UPPER(acct_iss_cd) LIKE UPPER(#findText#)		
		                			OR UPPER(branch_cd) LIKE UPPER(#findText#)
		                			OR UPPER(ref_no) LIKE UPPER(#findText#)
		                			OR UPPER(mod_no) LIKE UPPER(#findText#)
			             	</isNotNull>		
			             	) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>	
	
	<resultMap class="java.lang.String" id="getPackQuoteAttachmentsResultMap">
		<result property="fileName" column="FILE_NAME" />
	</resultMap>
	
	<select id="getPackQuoteAttachments" resultMap="getPackQuoteAttachmentsResultMap">
		SELECT *
		  FROM TABLE(gipi_pack_quote_pkg.get_pack_quote_pic(#packQuoteId#))
	</select>
	
</sqlMap>

