<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="GIISPayees">
	<cacheModel type="MEMORY" id="oneDayClient">
		<flushInterval hours="24"/>
		<property name="reference-type" value="WEAK"/>
	</cacheModel>
	
	<typeAlias alias="GIISPayeesClass" type="com.geniisys.common.entity.GIISPayees"/>
	
	<resultMap class="GIISPayeesClass" id="GiisPayeesResultMap">
    	<result column="payee_no"                   property="payeeNo" />
        <result column="payee_class_cd"             property="payeeClassCd" />
        <result column="payee_last_name"            property="payeeLastName" />
        <result column="mail_addr1"                 property="mailAddr1" />
        <result column="tin"                        property="tin" />
        <result column="allow_tag"                  property="allowTag" />
        <result column="payee_first_name"           property="payeeFirstName" />
        <result column="payee_middle_name"          property="payeeMiddleName" />
        <result column="mail_addr2"                 property="mailAddr2" />
        <result column="mail_addr3"                 property="mailAddr3" />
        <result column="contact_pers"               property="contactPersons" />
        <result column="designation"                property="designation" />
        <result column="phone_no"                   property="phoneNo" />
        <result column="user_id"                    property="userId" />
        <result column="last_update"                property="lastUpdate" />
        <result column="remarks"                    property="remarks" />
        <result column="cpi_rec_no"                 property="cpiRecNo" />
        <result column="cpi_branch_cd"              property="cpiBranchCd" />
        <result column="fax_no"                     property="faxNo" />
        <result column="cp_no"                      property="cpNo" />
        <result column="sun_no"                     property="sunNo" />
        <result column="smart_no"                   property="smartNo" />
        <result column="globe_no"                   property="globeNo" />
        <result column="ref_payee_cd"               property="refPayeeCd" />
        <result column="master_payee_no"            property="masterPayeeNo" />
        <result column="bank_cd"                    property="bankCd" />
        <result column="bank_branch"                property="bankBranch" />
        <result column="bank_acct_type"             property="bankAcctType" />
        <result column="bank_acct_name"     		property="bankAcctName" />
        <result column="bank_acct_no"       		property="bankAcctNo" />
        <result column="dsp_payee_name"             property="nbtPayeeName" />
	</resultMap>
	
	<resultMap class="GIISPayeesClass" id="GiisPayeesGridResultMap" extends="GiisPayeesResultMap">
		<result column="rownum_" 					property="rowNum" />
		<result column="count_"						property="rowCount"/>
	</resultMap>
	
	<resultMap class="GIISPayeesClass" id="PayeesListingMap">
		<result column="payee_class_cd" 	property="payeeClassCd"/>
		<result column="payee_no" 			property="payeeNo"/>
		<result column="payee_first_name" 	property="payeeFirstName"/>
		<result column="payee_middle_name" 	property="payeeMiddleName"/>
		<result column="payee_last_name" 	property="payeeLastName"/>
	</resultMap>
	
	<resultMap id="PayeesListingMap2" class="java.util.HashMap" extends="PayeesListingMap">
  		<result column="rownum_" 			property="rowNum" />
		<result column="count_"				property="rowCount"/>
  	</resultMap>
	
	<resultMap id="getPayeesByAdjusterMap" class="java.util.HashMap">
  		<result column="payee_no" 			property="id" />			
	  	<result column="nbt_payee_name"		property="desc"	/>	
  		<result column="rownum_" 			property="rowNum" />
		<result column="count_"				property="rowCount"/>
  	</resultMap>
  	
  	<resultMap id="getPayeesByAdjusterMap2" class="java.util.HashMap">
  		<result column="priv_adj_cd" 		property="id" />			
	  	<result column="payee_name"			property="desc"	/>	
  		<result column="rownum_" 			property="rowNum" />
		<result column="count_"				property="rowCount"/>
  	</resultMap>
  	
  	<resultMap id="getLossExpPayeeAdjusterMap" class="java.util.HashMap">
  		<result column="priv_adj_cd" 		property="privAdjCd" />			
	  	<result column="adj_company_cd"		property="adjCompanyCd"/>
	  	<result column="adj_co_name"	    property="adjCoName"/>
	  	<result column="payee_name"			property="payeeName"/>	
  		<result column="rownum_" 			property="rowNum" />
		<result column="count_"				property="rowCount"/>
  	</resultMap>
  	
  	<resultMap class="GIISPayeesClass" 		id="giisPayeesListTGMap">
		<result column="PAYEE_CLASS_CD" 	property="payeeClassCd"/>
		<result column="PAYEE_NO" 			property="payeeNo"/>
		<result column="PAYEE_FIRST_NAME" 	property="payeeFirstName"/>
		<result column="PAYEE_MIDDLE_NAME" 	property="payeeMiddleName"/>
		<result column="PAYEE_LAST_NAME" 	property="payeeLastName"/>
		<result column="NBT_PAYEE_NAME" 	property="nbtPayeeName"/>
		<result column="DESIGNATION" 		property="designation"/>
		<result column="MAIL_ADDR" 			property="mailAddress"/>
		<result column="PHONE_NO" 			property="phoneNo"/>
		<result column="CONTACT_PERS" 		property="contactPersons"/>
		<result column="ROWNUM_" 			property="rowNum" />
		<result column="COUNT_"				property="rowCount"/>
	</resultMap>
	
	<resultMap  class="GIISPayeesClass"	    id="getLossExpPayeeMortgageesMap">
		<result column="PAYEE_CLASS_CD" 	property="payeeClassCd"/>
		<result column="PAYEE_NO" 			property="payeeNo"/>
		<result column="PAYEE_LAST_NAME" 	property="payeeLastName"/>
	</resultMap>
	
	<resultMap id="getPayeeNamePayeeNoLov" class="java.util.HashMap">
  		<result column="payee_no" 			property="id" />			
	  	<result column="payee_name"			property="desc"	/>	
  		<result column="rownum_" 			property="rowNum" />
		<result column="count_"				property="rowCount"/>
  	</resultMap>
	
	<select id="getPayeesInputVatListing" resultMap="PayeesListingMap" parameterClass="java.util.HashMap">
		SELECT * FROM TABLE(GIIS_PAYEES_PKG.get_payees_list(#payeeClassCd#, #payeeName#))
	</select>
	
	<resultMap id="PayeeClassListingMap1" class="com.geniisys.common.entity.GIISPayeeClass" extends="BaseEntity.TableGridResultMap">
		<result column="class_desc" 		property="classDesc"/>
		<result column="payee_class_cd" 	property="payeeClassCd"/>
	</resultMap>
	
	<resultMap id="GiisPayeeClassMap" 		class="com.geniisys.common.entity.GIISPayeeClass">
		<result column="class_desc" 		property="classDesc"/>
		<result column="payee_class_cd" 	property="payeeClassCd"/>
	</resultMap>
	
	<resultMap id="AgentLOVResultMap" class="GIISPayeesClass" extends="BaseEntity.TableGridResultMap">
		<result column="payee_no" 			property="payeeNo"/>
		<result column="nbt_payee_name" 	property="nbtPayeeName"/>
	</resultMap>
	
	<select id="getGIISPayeeClassLOV" resultMap="PayeeClassListingMap1">
  		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * 
		                  FROM TABLE (giis_payees_pkg.get_all_payees)	              
			              WHERE UPPER (NVL (class_desc, '*')) LIKE
			                              UPPER (NVL (#findText#,DECODE (class_desc, NULL, '*', class_desc)))
		                  <isNotNull property="sortColumn">
			          	  	  <isEqual property="sortColumn" compareValue="classDesc">
				              		ORDER BY class_desc
				              </isEqual>
		              		  <isEqual property="ascDescFlg" compareValue="ASC">
		              			 ASC
		              		  </isEqual>
		              		  <isEqual property="ascDescFlg" compareValue="DESC">
		              			 DESC
		              		  </isEqual>
			              </isNotNull>
		                  ) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE (giis_payees_pkg.get_all_payees)) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#	
	</select>
	
	<select id="getGIISPayeeClass2LOV" resultMap="PayeeClassListingMap1">
  		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * 
		                  FROM TABLE (giis_payees_pkg.get_all_payees)	              
			              <isNotNull property="findText">
		                  WHERE (UPPER(class_desc) LIKE UPPER(#findText#) OR UPPER(payee_class_cd) LIKE UPPER(#findText#))
		             	  </isNotNull>
			          	  <isNotNull property="sortColumn">
			          	  	  <isEqual property="sortColumn" compareValue="classDesc">
				              		ORDER BY class_desc
				              </isEqual>
			                  <isEqual property="sortColumn" compareValue="payeeClassCd">
				              		ORDER BY TO_NUMBER(payee_class_cd)
				              </isEqual>	
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>
		                  ) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE (giis_payees_pkg.get_all_payees) 
		                  <isNotNull property="findText">
		                  WHERE (UPPER(class_desc) LIKE UPPER(#findText#) OR UPPER(payee_class_cd) LIKE UPPER(#findText#))
		             	  </isNotNull>
		                  )b) 
		 WHERE rownum_ BETWEEN #from# AND #to#	
	</select>	
	
	<select id="getGIISPayeeClassLOV2" resultMap="PayeeClassListingMap1">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * 
		                  FROM TABLE (giis_payees_pkg.get_payee_class)	              
			              WHERE UPPER (NVL (class_desc, '*')) LIKE
			                              UPPER (NVL (#findText#,DECODE (class_desc, NULL, '*', class_desc)))
			              <isEqual property="sortColumn" compareValue="classDesc">
			             	ORDER BY class_desc
			          	</isEqual>   
			          	<isNotNull property="sortColumn">
			              	<isEqual property="ascDescFlg" compareValue="ASC">
			              		ASC
			              	</isEqual>
			              	<isEqual property="ascDescFlg" compareValue="DESC">
			              		DESC
			              	</isEqual>
			            </isNotNull>                  
		                  ) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE (giis_payees_pkg.get_payee_class)) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#		
	</select>
	
	<select id="getGIISPayeeClassLOV3" resultMap="PayeeClassListingMap1">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * 
		                  FROM TABLE (giis_payees_pkg.get_payee_class)	
		                  WHERE 1=1              
			              <isNotNull prepend="AND" property="findText">
		                  	 (UPPER(class_desc) LIKE UPPER(#findText#) OR UPPER(payee_class_cd) LIKE UPPER(#findText#))
		             	  </isNotNull>
		             	  <isNull prepend="AND" property="findText">
		                  	 (UPPER(class_desc) LIKE UPPER(#searchString#) OR UPPER(payee_class_cd) LIKE UPPER(#searchString#))
		             	  </isNull>
			              <isEqual property="sortColumn" compareValue="payeeClassCd">
			             	ORDER BY TO_NUMBER(payee_class_cd)
			          	  </isEqual>   
			          	  <isEqual property="sortColumn" compareValue="classDesc">
			             	ORDER BY class_desc
			          	  </isEqual>   
			          	  <isNotNull property="sortColumn">
			              	<isEqual property="ascDescFlg" compareValue="ASC">
			              		ASC
			              	</isEqual>
			              	<isEqual property="ascDescFlg" compareValue="DESC">
			              		DESC
			              	</isEqual>
			              </isNotNull>                  
		                  ) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE (giis_payees_pkg.get_payee_class)
		                  WHERE 1=1    
		                  <isNotNull prepend="AND" property="findText">
		                  	(UPPER(class_desc) LIKE UPPER(#findText#) OR UPPER(payee_class_cd) LIKE UPPER(#findText#))
		             	  </isNotNull>
		             	  <isNull prepend="AND" property="findText">
		                  	 (UPPER(class_desc) LIKE UPPER(#searchString#) OR UPPER(payee_class_cd) LIKE UPPER(#searchString#))
		             	  </isNull>
		             	  ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#		
	</select>
	
	<resultMap class="java.util.HashMap" id="getGiisPayeesLOVByClassCdItemNoMap"  extends="BaseEntity.TableGridResultMap">
		<result column="payee_name" property="payeeName"/>
		<result column="payee_no" property="payeeNo"/>
		<result column="address" property="address"/>
	</resultMap>
	
	<select id="getGiisPayeesLOVByClassCdItemNo" resultMap="getGiisPayeesLOVByClassCdItemNoMap">
		<!--replaced payee_last_name by payee_name since payee_last_name is always null by MAC 07/18/2013-->
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * 
		                  FROM TABLE (giis_payees_pkg.get_payees_by_item_no_class_cd(#payeeClassCd#, #claimId#,#itemNo#))	              
			              WHERE UPPER (NVL (payee_name, '*')) LIKE
			                              UPPER (NVL (#findText#,DECODE (payee_name, NULL, '*', payee_name)))
                        <isNotNull property="notIn">
		                 AND payee_no NOT IN ($notIn$)					               
		           		</isNotNull>
		           		<isEqual property="sortColumn" compareValue="address">
			             	ORDER BY address
			          	</isEqual>  
			          	<isEqual property="sortColumn" compareValue="payeeLastName">
			            	ORDER BY payee_name
			          	</isEqual>
			          	<isNotNull property="sortColumn">
			              	<isEqual property="ascDescFlg" compareValue="ASC">
			              		ASC
			              	</isEqual>
			              	<isEqual property="ascDescFlg" compareValue="DESC">
			              		DESC
			              	</isEqual>
			            </isNotNull>   
		                  ) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE (giis_payees_pkg.get_payees_by_item_no_class_cd(#payeeClassCd#, #claimId#,#itemNo#))) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#	
	</select>
	
	<resultMap class="java.util.HashMap" id="payeeNamesMap" extends="BaseEntity.TableGridResultMap">
		<result column="payee_last_name" property="payeeLastName"/>
		<result column="address" property="address"/>
		<result column="attention" property="attention" />
	</resultMap>
	
	<select id="getGIISPayeeLOVDetails" resultMap="payeeNamesMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * 
		                  FROM TABLE (giis_payees_pkg.get_payee_names_by_class_desc(#sendToCd#))	              
			            <isNotNull property="findText">
			                WHERE UPPER (NVL (payee_last_name, '*')) LIKE
			                              UPPER (NVL (#findText#,DECODE (payee_last_name, NULL, '*', payee_last_name)))
			                   OR UPPER(address) LIKE UPPER(#findText#)
			                   OR UPPER(attention) LIKE UPPER(#findText#)
			            </isNotNull>
		                <isNotNull property="sortColumn">
			              	<isEqual property="sortColumn" compareValue="address">
				             	ORDER BY address
				          	</isEqual>  
				          	<isEqual property="sortColumn" compareValue="payeeLastName">
				            	ORDER BY payee_last_name
				          	</isEqual>
				          	<isEqual property="sortColumn" compareValue="attention">
				            	ORDER BY attention
				          	</isEqual>
			              	<isEqual property="ascDescFlg" compareValue="ASC">
			              		ASC
			              	</isEqual>
			              	<isEqual property="ascDescFlg" compareValue="DESC">
			              		DESC
			              	</isEqual>
			            </isNotNull>
		                  ) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE (giis_payees_pkg.get_payee_names_by_class_desc(#sendToCd#))
		                <isNotNull property="findText">
			                WHERE UPPER (NVL (payee_last_name, '*')) LIKE
				                              UPPER (NVL (#findText#,DECODE (payee_last_name, NULL, '*', payee_last_name)))
				               OR UPPER(address) LIKE UPPER(#findText#)
				               OR UPPER(attention) LIKE UPPER(#findText#)
			            </isNotNull>
		                ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#	
	</select>
<!--Gzelle 02.20.2013  -->	
	<select id="getPayeesByAdjLOV" resultMap="getPayeesByAdjusterMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * FROM TABLE (giis_payees_pkg.get_payee_by_adj_lov(#desc#))
		          		 <isNotNull property="findText">
		                  WHERE (UPPER(payee_no) LIKE UPPER(#findText#) OR UPPER(nbt_payee_name) LIKE UPPER(#findText#))
		             	  </isNotNull>       
			          	  <isEqual property="sortColumn" compareValue="id">
			              		ORDER BY payee_no
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="desc">
			              		ORDER BY nbt_payee_name
			              </isEqual>
			          	  <isNotNull property="sortColumn">
		              		<isEqual property="ascDescFlg" compareValue="ASC">
		              			ASC
		              		</isEqual>
		              		<isEqual property="ascDescFlg" compareValue="DESC">
		              			DESC
		              		</isEqual>
			              </isNotNull>
		                  ) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE(giis_payees_pkg.get_payee_by_adj_lov(#desc#))
		                  <isNotNull property="findText">
		                  WHERE (UPPER(payee_no) LIKE UPPER(#findText#) OR UPPER(nbt_payee_name) LIKE UPPER(#findText#))
		             	  </isNotNull>       
		                  ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
<!--end-->

	<select id="getPayeesByAdjusterLOV" resultMap="getPayeesByAdjusterMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * FROM TABLE (giis_payees_pkg.get_payee_by_adjuster_listing)
		          		  <isNotNull property="findText">
		                  WHERE (UPPER(payee_no) LIKE UPPER(#findText#) OR UPPER(nbt_payee_name) LIKE UPPER(#findText#))
		             	  </isNotNull>        
			          	  <isEqual property="sortColumn" compareValue="id">
			              		ORDER BY payee_no
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="desc">
			              		ORDER BY nbt_payee_name
			              </isEqual>
			          	  <isNotNull property="sortColumn">
		              		<isEqual property="ascDescFlg" compareValue="ASC">
		              			ASC
		              		</isEqual>
		              		<isEqual property="ascDescFlg" compareValue="DESC">
		              			DESC
		              		</isEqual>
			              </isNotNull>
		                  ) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE(giis_payees_pkg.get_payee_by_adjuster_listing)
		                  <isNotNull property="findText">
		                  WHERE (UPPER(payee_no) LIKE UPPER(#findText#) OR UPPER(nbt_payee_name) LIKE UPPER(#findText#))
		             	  </isNotNull>
		                  ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<select id="getPayeesByAdjuster2LOV" resultMap="getPayeesByAdjusterMap2">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * FROM TABLE (giis_payees_pkg.get_payee_by_adjuster_listing2(#adjCompanyCd#, #claimId#))        
			          	  <isNotNull property="findText">
		                  WHERE (UPPER(priv_adj_cd) LIKE UPPER(#findText#) OR UPPER(payee_name) LIKE UPPER(#findText#))
		             	  </isNotNull>
			          	  <isEqual property="sortColumn" compareValue="id">
			              		ORDER BY priv_adj_cd
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="desc">
			              		ORDER BY payee_name
			              </isEqual>
			          	  <isNotNull property="sortColumn">
		              		<isEqual property="ascDescFlg" compareValue="ASC">
		              			ASC
		              		</isEqual>
		              		<isEqual property="ascDescFlg" compareValue="DESC">
		              			DESC
		              		</isEqual>
			              </isNotNull>
		                  ) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE(giis_payees_pkg.get_payee_by_adjuster_listing2(#adjCompanyCd#, #claimId#))
		                  <isNotNull property="findText">
		                  WHERE (UPPER(priv_adj_cd) LIKE UPPER(#findText#) OR UPPER(payee_name) LIKE UPPER(#findText#))
		             	  </isNotNull>
		                  ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<resultMap class="java.util.HashMap" id="getTpClaimantLOVMap"  extends="BaseEntity.TableGridResultMap">
		<result column="payee_last_name" property="payeeLastName"/>
	</resultMap>
	
	<select id="getTpClaimantLOV" resultMap="getTpClaimantLOVMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * FROM TABLE(giis_payees_pkg.get_tpclaimant_lov(#claimId#,#signatory#))
		         				 WHERE UPPER (NVL (payee_last_name, '*')) LIKE
			                           UPPER (NVL (#findText#,DECODE (payee_last_name, NULL, '*', payee_last_name)))) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE(giis_payees_pkg.get_tpclaimant_lov(#claimId#,#signatory#))) b)
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<select id="getGiisPayeeList" resultMap="giisPayeesListTGMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * FROM TABLE(GIIS_PAYEES_PKG.get_giis_payees_list(#payeeClassCd#, #findText#))
		          	 <isEqual property="sortColumn" compareValue="payeeNo">
			             	ORDER BY payee_no
		          	</isEqual>
		          	<isEqual property="sortColumn" compareValue="designation">
			             	ORDER BY designation
		          	</isEqual>      
		          	<isEqual property="sortColumn" compareValue="nbtPayeeName">
			             	ORDER BY nbt_payee_name
		          	</isEqual>   
		          	<isEqual property="sortColumn" compareValue="mailAddress">
			             	ORDER BY MAIL_ADDR
		          	</isEqual>   
		          	<isEqual property="sortColumn" compareValue="phoneNo">
			             	ORDER BY phone_no
		          	</isEqual>   
		          	<isEqual property="sortColumn" compareValue="contactPersons">
			             	ORDER BY contact_pers
		          	</isEqual>   
		          	<isNotNull property="sortColumn">
		              	<isEqual property="ascDescFlg" compareValue="ASC">
		              		ASC
		              	</isEqual>
		              	<isEqual property="ascDescFlg" compareValue="DESC">
		              		DESC
		              	</isEqual>
		            </isNotNull>   
		          ) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE (GIIS_PAYEES_PKG.get_giis_payees_list(#payeeClassCd#, #findText#))) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<select id="getGiisPayeeListForGICLS259" resultMap="giisPayeesListTGMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * FROM TABLE(GIIS_PAYEES_PKG.get_gicls259_giis_payees_list(#payeeClassCd#, #findText#))
		          	WHERE 1=1
		          	 <isNull prepend="AND" property="findText">
                  	 		(UPPER(nbt_payee_name) LIKE UPPER(#searchString#) OR UPPER(payee_no) LIKE UPPER(#searchString#))
             	     </isNull>
		          	 <isEqual property="sortColumn" compareValue="payeeNo">
			             	ORDER BY payee_no
		          	</isEqual>
		          	<isEqual property="sortColumn" compareValue="nbtPayeeName">
			             	ORDER BY nbt_payee_name
		          	</isEqual>   
		          	<isNotNull property="sortColumn">
		              	<isEqual property="ascDescFlg" compareValue="ASC">
		              		ASC
		              	</isEqual>
		              	<isEqual property="ascDescFlg" compareValue="DESC">
		              		DESC
		              	</isEqual>
		            </isNotNull>   
		          ) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE (GIIS_PAYEES_PKG.get_gicls259_giis_payees_list(#payeeClassCd#, #findText#))
		                  WHERE 1=1
			          	 <isNull prepend="AND" property="findText">
	                  	 		(UPPER(nbt_payee_name) LIKE UPPER(#searchString#) OR UPPER(payee_no) LIKE UPPER(#searchString#))
	             	     </isNull>
		                  ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<select id="getSurveyAgentLOV" resultMap="AgentLOVResultMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * FROM TABLE(GIIS_PAYEES_PKG.get_survey_list)
		          	<isNotNull property="findText">
		                 WHERE UPPER(nbt_payee_name) LIKE UPPER(#findText#)<!-- added by reymon 02192013 -->
		          	</isNotNull>
				<isEqual property="sortColumn" compareValue="payeeNo">
			      	ORDER BY payee_no
				</isEqual>
				<isEqual property="sortColumn" compareValue="nbtPayeeName">
			      	ORDER BY nbt_payee_name
				</isEqual>
				<isNotNull property="sortColumn">
					<isEqual property="ascDescFlg" compareValue="ASC">
              			ASC
              		</isEqual>
              		<isEqual property="ascDescFlg" compareValue="DESC">
              			DESC
              		</isEqual>
				</isNotNull>
		          		) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE (GIIS_PAYEES_PKG.get_survey_list)
		            <isNotNull property="findText">
		                 WHERE UPPER(nbt_payee_name) LIKE UPPER(#findText#)<!-- added by reymon 02192013 -->
		          	</isNotNull> )b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<select id="getSettlingAgentLOV" resultMap="AgentLOVResultMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * FROM TABLE(GIIS_PAYEES_PKG.get_settling_list)
		          	<isNotNull property="findText">
		                 WHERE UPPER(nbt_payee_name) LIKE UPPER(#findText#)<!-- added by reymon 02192013 -->
		          	</isNotNull>
				<isEqual property="sortColumn" compareValue="payeeNo">
			      	ORDER BY payee_no
				</isEqual>
				<isEqual property="sortColumn" compareValue="nbtPayeeName">
			      	ORDER BY nbt_payee_name
				</isEqual>
				<isNotNull property="sortColumn">
					<isEqual property="ascDescFlg" compareValue="ASC">
              			ASC
              		</isEqual>
              		<isEqual property="ascDescFlg" compareValue="DESC">
              			DESC
              		</isEqual>
				</isNotNull>	          
		          ) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE (GIIS_PAYEES_PKG.get_settling_list)
		            <isNotNull property="findText">
		                 WHERE UPPER(nbt_payee_name) LIKE UPPER(#findText#)<!-- added by reymon 02192013 -->
		          	</isNotNull> )b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<select id="getLossExpPayeesList" resultMap="giisPayeesListTGMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * FROM TABLE(GIIS_PAYEES_PKG.get_loss_exp_payees_list(#payeeClassCd#, #assdNo#, #claimId#, #itemNo#, #perilCd#, #payeeType#, #findText#))
		          <isEqual property="sortColumn" compareValue="payeeNo">
			      	ORDER BY payee_no
				  </isEqual>
				  <isEqual property="sortColumn" compareValue="nbtPayeeName">
			      	ORDER BY nbt_payee_name
				  </isEqual>
				  <isNotNull property="sortColumn">
					<isEqual property="ascDescFlg" compareValue="ASC">
              			ASC
              		</isEqual>
              		<isEqual property="ascDescFlg" compareValue="DESC">
              			DESC
              		</isEqual>
				  </isNotNull>
		          ) a, 
	              (SELECT count(*) count_ 
	                 FROM TABLE (GIIS_PAYEES_PKG.get_loss_exp_payees_list(#payeeClassCd#, #assdNo#, #claimId#, #itemNo#, #perilCd#, #payeeType#, #findText#))) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<select id="getAllLossExpPayeesList" resultMap="giisPayeesListTGMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * FROM TABLE(GIIS_PAYEES_PKG.get_all_loss_exp_payees_list(#payeeClassCd#, #assdNo#, #claimId#, #itemNo#, #perilCd#, #payeeType#, #findText#))
		          <isEqual property="sortColumn" compareValue="payeeNo">
			      	ORDER BY payee_no
				  </isEqual>
				  <isEqual property="sortColumn" compareValue="nbtPayeeName">
			      	ORDER BY nbt_payee_name
				  </isEqual>
				  <isNotNull property="sortColumn">
					<isEqual property="ascDescFlg" compareValue="ASC">
              			ASC
              		</isEqual>
              		<isEqual property="ascDescFlg" compareValue="DESC">
              			DESC
              		</isEqual>
				  </isNotNull>
		          ) a, 
	              (SELECT count(*) count_ 
	                 FROM TABLE (GIIS_PAYEES_PKG.get_all_loss_exp_payees_list(#payeeClassCd#, #assdNo#, #claimId#, #itemNo#, #perilCd#, #payeeType#, #findText#))) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<select id="getLossExpPayeeMortgList" resultMap="giisPayeesListTGMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * FROM TABLE(GIIS_PAYEES_PKG.get_loss_exp_mortg_list(#payeeClassCd#, #claimId#, #itemNo#, #perilCd#, #payeeType#))
		                <isNotNull property="findText">
		                  WHERE UPPER(payee_last_name) LIKE UPPER(#findText#)
		             	</isNotNull>) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE (GIIS_PAYEES_PKG.get_loss_exp_mortg_list(#payeeClassCd#, #claimId#, #itemNo#, #perilCd#, #payeeType#))
		                <isNotNull property="findText">
		                  WHERE UPPER(payee_last_name) LIKE UPPER(#findText#)
		             	</isNotNull>) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<select id="getLossExpPayeeAdjList" resultMap="getLossExpPayeeAdjusterMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		         FROM (SELECT * FROM TABLE(GIIS_PAYEES_PKG.get_loss_exp_adjuster_list(#payeeClassCd#, #claimId#, #itemNo#, #perilCd#, #payeeType#, #findText#))
		        <isEqual property="sortColumn" compareValue="adjCompanyCd">
			      	ORDER BY adj_company_cd
				</isEqual>
				<isEqual property="sortColumn" compareValue="adjCoName">
			      	ORDER BY adj_co_name
				</isEqual>
				<isNotNull property="sortColumn">
					<isEqual property="ascDescFlg" compareValue="ASC">
              			ASC
              		</isEqual>
              		<isEqual property="ascDescFlg" compareValue="DESC">
              			DESC
              		</isEqual>
				</isNotNull>
		         
		         ) a, 
               (SELECT count(*) count_ 
                  FROM TABLE (GIIS_PAYEES_PKG.get_loss_exp_adjuster_list(#payeeClassCd#, #claimId#, #itemNo#, #perilCd#, #payeeType#, #findText#))) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<select id="getAllLossExpPayeeAdjList" resultMap="getLossExpPayeeAdjusterMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		         FROM (SELECT * FROM TABLE(GIIS_PAYEES_PKG.get_all_loss_exp_adjuster_list(#payeeClassCd#, #claimId#, #itemNo#, #perilCd#, #payeeType#, #findText#))
		        <isEqual property="sortColumn" compareValue="adjCompanyCd">
			      	ORDER BY adj_company_cd
				</isEqual>
				<isEqual property="sortColumn" compareValue="adjCoName">
			      	ORDER BY adj_co_name
				</isEqual>
				<isNotNull property="sortColumn">
					<isEqual property="ascDescFlg" compareValue="ASC">
              			ASC
              		</isEqual>
              		<isEqual property="ascDescFlg" compareValue="DESC">
              			DESC
              		</isEqual>
				</isNotNull>
		         
		         ) a, 
               (SELECT count(*) count_ 
                  FROM TABLE (GIIS_PAYEES_PKG.get_all_loss_exp_adjuster_list(#payeeClassCd#, #claimId#, #itemNo#, #perilCd#, #payeeType#, #findText#))) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<select id="getLossExpPayeeMortgagees" resultMap="getLossExpPayeeMortgageesMap">
		SELECT * FROM TABLE(GIIS_PAYEES_PKG.get_loss_exp_mortg_list(#payeeClassCd#, #claimId#, #itemNo#, #perilCd#, #payeeType#))
	</select>
	
	<select id="getPayeeClassDesc" resultClass="java.lang.String">
		SELECT class_desc FROM GIIS_PAYEE_CLASS
		 WHERE payee_class_cd = #payeeClassCd#
	</select>
	
	<resultMap class="java.util.HashMap" id="mcEvalPayeesMap">
		<result property="classDesc" column="class_desc" />
		<result property="payeeClassCd" column="payee_class_cd"/>
		<result column="rownum_" 	property="rowNum" />
		<result column="count_"		property="rowCount"/>
	</resultMap>
	
	<select id="getMcEvalCompanyTypeListLOV" resultMap="mcEvalPayeesMap" parameterClass="map">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * 
		                  FROM TABLE (giis_payee_class_pkg.get_replace_company_type_list(#findText#))
		                  <isEqual property="sortColumn" compareValue="classDesc">
			              		ORDER BY classDesc
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>
		                  ) a, 
			               (SELECT count(*) count_ 
			                  FROM TABLE (giis_payee_class_pkg.get_replace_company_type_list(#findText#))
			             
		                  ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<resultMap class="java.util.HashMap" id="lawyerResultMap">
		<result column="lawyer_cd" 			property="lawyerCd" 	/>
		<result column="lawyer_class_cd" 	property="lawyerClassCd" />
		<result column="lawyer_name" 		property="lawyerName" />
		<result column="rownum_" 			property="rowNum" />
		<result column="count_"				property="rowCount"/>
	</resultMap>
	
	<select id="getLawyerLOV" resultMap="lawyerResultMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * 
		                  FROM TABLE (giis_payees_pkg.get_lawyer_list(#lawyerName#))
		               	<isNotNull property="findText">
				         WHERE (UPPER(lawyer_cd) LIKE UPPER(#findText#) 
				         	 OR UPPER(lawyer_class_cd) LIKE UPPER(#findText#)
				         	 OR UPPER(lawyer_name) LIKE UPPER(#findText#) 
				         	 ) 
				         </isNotNull>         
			          	  <isNotNull property="sortColumn">
				          	  <isEqual property="sortColumn" compareValue="lawyerCd">
				              		ORDER BY lawyer_cd
				              </isEqual>
			                  <isEqual property="sortColumn" compareValue="lawyerClassCd">
				              		ORDER BY lawyer_class_cd
				              </isEqual>	
				              <isEqual property="sortColumn" compareValue="lawyerName">
				              		ORDER BY lawyer_name
				              </isEqual>	 
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>
		                  ) a, 
			               (SELECT count(*) count_ 
			                  FROM TABLE (giis_payees_pkg.get_lawyer_list(#lawyerName#)) 
			             <isNotNull property="findText">
				         WHERE (UPPER(lawyer_cd) LIKE UPPER(#findText#) 
				         	 OR UPPER(lawyer_class_cd) LIKE UPPER(#findText#)
				         	 OR UPPER(lawyer_name) LIKE UPPER(#findText#) 
				         	 )
				         </isNotNull>
		                  ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<select id="getGiisPayeesLOV" resultMap="GiisPayeesGridResultMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * 
		                  FROM TABLE (giis_payees_pkg.get_giis_payee_list(#payeeClassCd#))
		                 WHERE payee_no NOT IN(SELECT item.payor_cd 
												  FROM (SELECT rownum rownum_2, 
												               a2.*  
												         FROM (SELECT * 
										                         FROM TABLE(gicl_recovery_payor_pkg.get_gicl_recovery_payor(#claimId#, #recoveryId#))
										                        <isNotNull property="itemFilter">
										                         WHERE 1=1
										               				<isNotEmpty prepend="AND"  property="payorClassCd">
										               					payor_class_cd NOT LIKE #payorClassCd#
										               				</isNotEmpty>
										               				<isNotEmpty prepend="AND"  property="classDesc">
										               					UPPER(class_desc) NOT LIKE UPPER(#classDesc#)
										               				</isNotEmpty>
										               				<isNotEmpty prepend="AND"  property="payorCd">
										               					payor_cd NOT LIKE #payorCd#
										               				</isNotEmpty>
										               				<isNotEmpty prepend="AND"  property="payorName">
										               					UPPER(payor_name) NOT LIKE UPPER(#payorName#)
										               				</isNotEmpty> 
										                    	</isNotNull>
										                        <isEqual property="itemSortColumn" compareValue="payorClassCd classDesc">
													            	ORDER BY payor_class_cd
													            	<isNotNull property="itemSortColumn">
														            	<isEqual property="itemAscDescFlg" compareValue="ASC">
														              		ASC
														              	</isEqual>
														              	<isEqual property="itemAscDescFlg" compareValue="DESC">
														              		DESC
														              	</isEqual>
														            </isNotNull>, class_desc
													          	</isEqual>
													          	<isEqual property="itemSortColumn" compareValue="payorCd payorName">
													            	ORDER BY payor_cd
													            	<isNotNull property="itemSortColumn">
														            	<isEqual property="itemAscDescFlg" compareValue="ASC">
														              		ASC
														              	</isEqual>
														              	<isEqual property="itemAscDescFlg" compareValue="DESC">
														              		DESC
														              	</isEqual>
														            </isNotNull>, payor_name
													          	</isEqual>
													          	<isEqual property="itemSortColumn" compareValue="recoveredAmt">
													            	ORDER BY recovered_amt
													          	</isEqual>
													           	<isNotNull property="itemSortColumn">
													              	<isEqual property="itemAscDescFlg" compareValue="ASC">
													              		ASC
													              	</isEqual>
													              	<isEqual property="itemAscDescFlg" compareValue="DESC">
													              		DESC
													              	</isEqual>
													            </isNotNull> 
										                         ) a2
										                ) item
										         <isNull property="itemFilter">
										         WHERE rownum_2 NOT BETWEEN #itemFrom# AND #itemTo#
										           AND payor_class_cd = #payeeClassCd#) 
										         </isNull>       
										         <isNotNull property="itemFilter">
										         WHERE payor_class_cd = #payeeClassCd#
										         UNION ALL
										            SELECT item2.payor_cd  
													  FROM (SELECT rownum rownum_3,  
													               a3.*  
													         FROM (SELECT * 
											                         FROM TABLE(gicl_recovery_payor_pkg.get_gicl_recovery_payor(#claimId#, #recoveryId#))
											                        <isNotNull property="itemFilter">
																	 WHERE 1=1
											               				<isNotEmpty prepend="AND"  property="payorClassCd">
											               					payor_class_cd LIKE #payorClassCd#
											               				</isNotEmpty>
											               				<isNotEmpty prepend="AND"  property="classDesc">
											               					UPPER(class_desc) LIKE UPPER(#classDesc#)
											               				</isNotEmpty>
											               				<isNotEmpty prepend="AND"  property="payorCd">
											               					payor_cd LIKE #payorCd#
											               				</isNotEmpty>
											               				<isNotEmpty prepend="AND"  property="payorName">
											               					UPPER(payor_name) LIKE UPPER(#payorName#)
											               				</isNotEmpty> 
											                    	</isNotNull>
											                        <isEqual property="itemSortColumn" compareValue="payorClassCd classDesc">
														            	ORDER BY payor_class_cd
														            	<isNotNull property="itemSortColumn">
															            	<isEqual property="itemAscDescFlg" compareValue="ASC">
															              		ASC
															              	</isEqual>
															              	<isEqual property="itemAscDescFlg" compareValue="DESC">
															              		DESC
															              	</isEqual>
															            </isNotNull>, class_desc
														          	</isEqual>
														          	<isEqual property="itemSortColumn" compareValue="payorCd payorName">
														            	ORDER BY payor_cd
														            	<isNotNull property="itemSortColumn">
															            	<isEqual property="itemAscDescFlg" compareValue="ASC">
															              		ASC
															              	</isEqual>
															              	<isEqual property="itemAscDescFlg" compareValue="DESC">
															              		DESC
															              	</isEqual>
															            </isNotNull>, payor_name
														          	</isEqual>
														          	<isEqual property="itemSortColumn" compareValue="recoveredAmt">
														            	ORDER BY recovered_amt
														          	</isEqual>
														           	<isNotNull property="itemSortColumn">
														              	<isEqual property="itemAscDescFlg" compareValue="ASC">
														              		ASC
														              	</isEqual>
														              	<isEqual property="itemAscDescFlg" compareValue="DESC">
														              		DESC
														              	</isEqual>
														            </isNotNull> 
											                         ) a3
											                   ) item2
											         WHERE rownum_3 NOT BETWEEN #itemFrom# AND #itemTo#)
										         </isNotNull>
		                 <isNotNull property="notIn">
		                    AND payee_no NOT IN ($notIn$)					               
		           		 </isNotNull>     
			             <isNotNull property="findText">
				         	AND (UPPER(payee_no) LIKE UPPER(#findText#) OR UPPER(dsp_payee_name) LIKE UPPER(#findText#))
				         </isNotNull>      
			          	  <isNotNull property="sortColumn">
				          	  <isEqual property="sortColumn" compareValue="payeeNo">
				              		ORDER BY payee_no
				              </isEqual>
			                  <isEqual property="sortColumn" compareValue="nbtPayeeName">
				              		ORDER BY dsp_payee_name
				              </isEqual>	
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>
		                  ) a, 
			               (SELECT count(*) count_ 
			                  FROM TABLE (giis_payees_pkg.get_giis_payee_list(#payeeClassCd#))
			                 WHERE payee_no NOT IN(SELECT item.payor_cd 
												     FROM (SELECT rownum rownum_2, 
												               a2.*  
												         FROM (SELECT * 
										                         FROM TABLE(gicl_recovery_payor_pkg.get_gicl_recovery_payor(#claimId#, #recoveryId#))
										                        <isNotNull property="itemFilter">
										                         WHERE 1=1
										               				<isNotEmpty prepend="AND"  property="payorClassCd">
										               					payor_class_cd NOT LIKE #payorClassCd#
										               				</isNotEmpty>
										               				<isNotEmpty prepend="AND"  property="classDesc">
										               					UPPER(class_desc) NOT LIKE UPPER(#classDesc#)
										               				</isNotEmpty>
										               				<isNotEmpty prepend="AND"  property="payorCd">
										               					payor_cd NOT LIKE #payorCd#
										               				</isNotEmpty>
										               				<isNotEmpty prepend="AND"  property="payorName">
										               					UPPER(payor_name) NOT LIKE UPPER(#payorName#)
										               				</isNotEmpty> 
										                    	</isNotNull>
										                        <isEqual property="itemSortColumn" compareValue="payorClassCd classDesc">
													            	ORDER BY payor_class_cd
													            	<isNotNull property="itemSortColumn">
														            	<isEqual property="itemAscDescFlg" compareValue="ASC">
														              		ASC
														              	</isEqual>
														              	<isEqual property="itemAscDescFlg" compareValue="DESC">
														              		DESC
														              	</isEqual>
														            </isNotNull>, class_desc
													          	</isEqual>
													          	<isEqual property="itemSortColumn" compareValue="payorCd payorName">
													            	ORDER BY payor_cd
													            	<isNotNull property="itemSortColumn">
														            	<isEqual property="itemAscDescFlg" compareValue="ASC">
														              		ASC
														              	</isEqual>
														              	<isEqual property="itemAscDescFlg" compareValue="DESC">
														              		DESC
														              	</isEqual>
														            </isNotNull>, payor_name
													          	</isEqual>
													          	<isEqual property="itemSortColumn" compareValue="recoveredAmt">
													            	ORDER BY recovered_amt
													          	</isEqual>
													           	<isNotNull property="itemSortColumn">
													              	<isEqual property="itemAscDescFlg" compareValue="ASC">
													              		ASC
													              	</isEqual>
													              	<isEqual property="itemAscDescFlg" compareValue="DESC">
													              		DESC
													              	</isEqual>
													            </isNotNull> 
										                         ) a2
										                ) item
										         <isNull property="itemFilter">
										         WHERE rownum_2 NOT BETWEEN #itemFrom# AND #itemTo#
										           AND payor_class_cd = #payeeClassCd#) 
										         </isNull>       
										         <isNotNull property="itemFilter">
										         WHERE payor_class_cd = #payeeClassCd# 
										         UNION ALL
										            SELECT item2.payor_cd  
													  FROM (SELECT rownum rownum_3,  
													               a3.*  
													         FROM (SELECT * 
											                         FROM TABLE(gicl_recovery_payor_pkg.get_gicl_recovery_payor(#claimId#, #recoveryId#))
											                        <isNotNull property="itemFilter">
																	 WHERE 1=1
											               				<isNotEmpty prepend="AND"  property="payorClassCd">
											               					payor_class_cd LIKE #payorClassCd#
											               				</isNotEmpty>
											               				<isNotEmpty prepend="AND"  property="classDesc">
											               					UPPER(class_desc) LIKE UPPER(#classDesc#)
											               				</isNotEmpty>
											               				<isNotEmpty prepend="AND"  property="payorCd">
											               					payor_cd LIKE #payorCd#
											               				</isNotEmpty>
											               				<isNotEmpty prepend="AND"  property="payorName">
											               					UPPER(payor_name) LIKE UPPER(#payorName#)
											               				</isNotEmpty> 
											                    	</isNotNull>
											                        <isEqual property="itemSortColumn" compareValue="payorClassCd classDesc">
														            	ORDER BY payor_class_cd
														            	<isNotNull property="itemSortColumn">
															            	<isEqual property="itemAscDescFlg" compareValue="ASC">
															              		ASC
															              	</isEqual>
															              	<isEqual property="itemAscDescFlg" compareValue="DESC">
															              		DESC
															              	</isEqual>
															            </isNotNull>, class_desc
														          	</isEqual>
														          	<isEqual property="itemSortColumn" compareValue="payorCd payorName">
														            	ORDER BY payor_cd
														            	<isNotNull property="itemSortColumn">
															            	<isEqual property="itemAscDescFlg" compareValue="ASC">
															              		ASC
															              	</isEqual>
															              	<isEqual property="itemAscDescFlg" compareValue="DESC">
															              		DESC
															              	</isEqual>
															            </isNotNull>, payor_name
														          	</isEqual>
														          	<isEqual property="itemSortColumn" compareValue="recoveredAmt">
														            	ORDER BY recovered_amt
														          	</isEqual>
														           	<isNotNull property="itemSortColumn">
														              	<isEqual property="itemAscDescFlg" compareValue="ASC">
														              		ASC
														              	</isEqual>
														              	<isEqual property="itemAscDescFlg" compareValue="DESC">
														              		DESC
														              	</isEqual>
														            </isNotNull> 
											                         ) a3
											                   ) item2
											         WHERE rownum_3 NOT BETWEEN #itemFrom# AND #itemTo#)
										         </isNotNull>
			             <isNotNull property="notIn">
		                    AND payee_no NOT IN ($notIn$)					               
		           		 </isNotNull>     
			             <isNotNull property="findText">
				         	AND (UPPER(payee_no) LIKE UPPER(#findText#) OR UPPER(dsp_payee_name) LIKE UPPER(#findText#))
				         </isNotNull>
		                  ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>	
	
	<select id="getPayeeFullName" parameterClass="map" resultClass="String">
		SELECT  giis_payees_pkg.get_payee_whole_name(#payeeClassCd#, #payeeNo#) FROM DUAL
	</select>
	
	<select id="getPayeesLOV" resultMap="giisPayeesListTGMap" >
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * 
		                  FROM TABLE (GIIS_PAYEES_PKG.get_giis_payee_list2(#payeeClassCd#))
		                 <isNotNull property="findText">
				         WHERE (UPPER(payee_no) LIKE UPPER(#findText#) 
				         	 OR UPPER(payee_first_name) LIKE UPPER(#findText#)
				         	 OR UPPER(payee_middle_name) LIKE UPPER(#findText#) 
				         	 OR UPPER(payee_last_name) LIKE UPPER(#findText#)
				         	 )
				         </isNotNull>          
			          	  <isNotNull property="sortColumn">
				          	  <isEqual property="sortColumn" compareValue="payeeNo">
				              		ORDER BY payee_no
				              </isEqual>
			                  <isEqual property="sortColumn" compareValue="payeeFirstName">
				              		ORDER BY payee_first_name
				              </isEqual>	
				              <isEqual property="sortColumn" compareValue="payeeMiddleName">
				              		ORDER BY payee_middle_name
				              </isEqual>	
				              <isEqual property="sortColumn" compareValue="payeeLastName">
				              		ORDER BY payee_last_name
				              </isEqual>	
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>
		                  ) a, 
			               (SELECT count(*) count_ 
			                  FROM TABLE (GIIS_PAYEES_PKG.get_giis_payee_list2(#payeeClassCd#)) 
			             <isNotNull property="findText">
				         WHERE (UPPER(payee_no) LIKE UPPER(#findText#) 
				         	 OR UPPER(payee_first_name) LIKE UPPER(#findText#)
				         	 OR UPPER(payee_middle_name) LIKE UPPER(#findText#) 
				         	 OR UPPER(payee_last_name) LIKE UPPER(#findText#)
				         	 )
				         </isNotNull>
		                  ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<select id="getMotshopLOV" resultMap="AgentLOVResultMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * FROM TABLE(GIIS_PAYEES_PKG.get_motshop_list(#findText#))
		          <isNotNull property="payeeName">
		          	WHERE UPPER(nbt_payee_name) LIKE UPPER(#payeeName#)
		          </isNotNull>
				<isEqual property="sortColumn" compareValue="payeeNo">
			      	ORDER BY payee_no
				</isEqual>
				<isEqual property="sortColumn" compareValue="nbtPayeeName">
			      	ORDER BY nbt_payee_name
				</isEqual>
				<isNotNull property="sortColumn">
					<isEqual property="ascDescFlg" compareValue="ASC">
              			ASC
              		</isEqual>
              		<isEqual property="ascDescFlg" compareValue="DESC">
              			DESC
              		</isEqual>
				</isNotNull>
				) a, 
               (SELECT count(*) count_ 
                  FROM TABLE (GIIS_PAYEES_PKG.get_motshop_list(#findText#))
                  <isNotNull property="payeeName">
		          	WHERE UPPER(nbt_payee_name) LIKE UPPER(#payeeName#)
		          </isNotNull>
               ) b)
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<select id="getPayeesByClassLOV" resultMap="getPayeeNamePayeeNoLov">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * FROM TABLE (giis_payees_pkg.fetch_payee_name_lov(#payeeClassCd#))
		          		 <isNotNull property="findText">
		                  WHERE (
		                  	   UPPER(payee_no) LIKE UPPER(#findText#) 
		                  	OR UPPER(TRIM(payee_name)) LIKE UPPER(#findText#)
		                  )
		             	  </isNotNull>      
			          	  <isEqual property="sortColumn" compareValue="id">
			              		ORDER BY payee_no
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="desc">
			              		ORDER BY payee_name
			              </isEqual>
			          	  <isNotNull property="sortColumn">
		              		<isEqual property="ascDescFlg" compareValue="ASC">
		              			ASC
		              		</isEqual>
		              		<isEqual property="ascDescFlg" compareValue="DESC">
		              			DESC
		              		</isEqual>
			              </isNotNull>
		                  ) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE(giis_payees_pkg.fetch_payee_name_lov(#payeeClassCd#))
		                  <isNotNull property="findText">
		                    WHERE (
		                  	   UPPER(payee_no) LIKE UPPER(#findText#) 
		                  	OR UPPER(payee_name) LIKE UPPER(#findText#)
		                  )
		             	  </isNotNull>      
		                  ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<!-- Added by Joms 07.09.2013 -->
	<resultMap class="com.geniisys.common.entity.GIISPayees" id="companyLOVMap" extends="BaseEntity.TableGridResultMap">
		<result column="payee_no"                   property="payeeNo" />
		<result column="payee_last_name"            property="payeeLastName" />
	</resultMap>
	
	<resultMap class="java.util.HashMap" id="employeeLOVMap">
		<result column="ref_payee_cd"		property="refPayeeCd" />
		<result column="emp_name"	        property="empName" />
	</resultMap>
	
	<select id="fetchCompanyLOV" resultMap="companyLOVMap" parameterClass="java.util.HashMap">
		SELECT * 
		  FROM (SELECT a.*, b.count_, rownum rownum_
		          FROM (SELECT * FROM TABLE (GIACS480_PKG.GET_COMPANY_LOV)
		          		<isNotNull property="findText">
		          			WHERE UPPER(payee_no) LIKE UPPER(NVL(#findText# || '%', payee_no))
		          			   OR UPPER(payee_last_name) LIKE UPPER(NVL(#findText# || '%', payee_last_name))
		          		</isNotNull>
		          		<isNotNull property="sortColumn">
		          			<isEqual property="sortColumn" compareValue="payeeNo">
		          				ORDER BY payee_no
		          			</isEqual>
		          			<isEqual property="sortColumn" compareValue="payeeLastName">
		          				ORDER BY payee_last_name
		          			</isEqual>
		          			<isEqual property="ascDescFlg" compareValue="ASC">
		          				ASC
		          			</isEqual>
		          			<isEqual property="ascDescFlg" compareValue="DESC">
		          				DESC
		          			</isEqual>
		          		</isNotNull>
		          		) a,
		          		(SELECT count(*) count_ FROM TABLE (GIACS480_PKG.GET_COMPANY_LOV)
		          		 <isNotNull property="findText">
		          			WHERE UPPER(payee_no) LIKE UPPER(NVL(#findText# || '%', payee_no))
		          			   OR UPPER(payee_last_name) LIKE UPPER(NVL(#findText# || '%', payee_last_name))
		          		 </isNotNull>
		          		) b		  
		  )
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<select id="fetchEmployeeLOV" resultMap="employeeLOVMap" parameterClass="java.util.HashMap">
		SELECT * 
		  FROM (SELECT a.*, b.count_, rownum rownum_
		          FROM (SELECT * FROM TABLE (GIACS480_PKG.GET_EMPLOYEE_LOV(#companyCd#))
		          		<isNotNull property="findText">
		          			WHERE UPPER(ref_payee_cd) LIKE UPPER(NVL(#findText# || '%', ref_payee_cd))
		          			   OR UPPER(emp_name) LIKE UPPER(NVL(#findText# || '%', emp_name))
		          		</isNotNull>
		          		<isNotNull property="sortColumn">
		          			<isEqual property="sortColumn" compareValue="refPayeeCd">
		          				ORDER BY ref_payee_cd
		          			</isEqual>
		          			<isEqual property="sortColumn" compareValue="empName">
		          				ORDER BY emp_name
		          			</isEqual>
		          			<isEqual property="ascDescFlg" compareValue="ASC">
		          				ASC
		          			</isEqual>
		          			<isEqual property="ascDescFlg" compareValue="DESC">
		          				DESC
		          			</isEqual>
		          		</isNotNull>
		          		) a,
		          		(SELECT count(*) count_ FROM TABLE (GIACS480_PKG.GET_EMPLOYEE_LOV(#companyCd#))
		          		 <isNotNull property="findText">
		          			WHERE UPPER(ref_payee_cd) LIKE UPPER(NVL(#findText# || '%', ref_payee_cd))
		          			   OR UPPER(emp_name) LIKE UPPER(NVL(#findText# || '%', emp_name))
		          		 </isNotNull>
		          		) b		  
		  )
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<resultMap class="java.util.HashMap" id="giacs110PayeeMap">
		<result property="classDesc" 	column="class_desc"/>
		<result property="payeeClassCd" column="payee_class_cd"/>
		<result property="rowNum"		column="rownum_"/>
		<result property="rowCount"		column="count_"/>
	</resultMap>
	
	<select id="getPayeeGiacs110LOV" resultMap="giacs110PayeeMap">		
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT payee_class_cd, class_desc FROM TABLE(giacs110_pkg.get_payee_cd_giacs110_lov)
		          		  <isNotNull property="findText">
				         		WHERE (UPPER(payee_class_cd) LIKE UPPER(#findText#) 
				         	 	   OR UPPER(class_desc) LIKE UPPER(#findText#)
				         	   )
				          </isNotNull>
		          		  <isEqual property="sortColumn" compareValue="payeeClassCd">
			              		ORDER BY payee_class_cd
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="classDesc">
			              		ORDER BY class_desc
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>
		                  ) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE (giacs110_pkg.get_payee_cd_giacs110_lov)
		                  <isNotNull property="findText">
				         		WHERE (UPPER(payee_class_cd) LIKE UPPER(#findText#) 
				         	 	   OR UPPER(class_desc) LIKE UPPER(#findText#)
				         	   )
				          </isNotNull>
				          ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
 	</select>
 	
 	<resultMap class="java.util.HashMap" id="giacs240PayeeMap">
 		<result property="payeeNo" 		column="PAYEE_NO"/>
		<result property="payeeClassCd" column="PAYEE_CLASS_CD"/>
		<result property="classDesc" 	column="CLASS_DESC"/>
		<result property="payeeName" 	column="PAYEE_NAME"/>
		<result property="rowNum"		column="ROWNUM_"/>
		<result property="rowCount"		column="COUNT_"/>
	</resultMap>
	
	<select id="getPayeeGiacs240LOV" resultMap="giacs240PayeeMap">
	<!-- added by MarkS 12.12.2016 SR5862 optimization -->		
		SELECT * FROM TABLE(giacs240_pkg.get_payee_lov(#payeeClassCd#,
												       #findText#,
												       #sortColumn#,
												       #ascDescFlg#,
												       #from#,
												       #to#,
												       #searchString#))
		 <!-- commented by MarkS 12.12.2016 SR5862 optimization -->
		 <!-- SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * FROM TABLE(giacs240_pkg.get_payee_lov(#payeeClassCd#))
		          		  <isNotNull property="findText">
				         		WHERE (PAYEE_NO LIKE #findText# 
				         	 	   OR UPPER(PAYEE_NAME) LIKE UPPER(#findText#)
				         	   )
				          </isNotNull>
				          <isNull property="findText">
								WHERE (PAYEE_NO LIKE NVL(#searchString#, PAYEE_NO)
								   OR UPPER(PAYEE_NAME) LIKE UPPER(NVL(#searchString#, PAYEE_NAME)))
						  </isNull>
		          		  <isEqual property="sortColumn" compareValue="payeeNo">
			              		ORDER BY PAYEE_NO
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="payeeName">
			              		ORDER BY PAYEE_NAME
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>
		                  ) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE (giacs240_pkg.get_payee_lov(#payeeClassCd#))
		                  <isNotNull property="findText">
				         		WHERE (PAYEE_NO LIKE #findText# 
				         	 	   OR UPPER(PAYEE_NAME) LIKE UPPER(#findText#)
				         	   )
				          </isNotNull>
				           <isNull property="findText">
								WHERE (PAYEE_NO LIKE NVL(#searchString#, PAYEE_NO)
								   OR UPPER(PAYEE_NAME) LIKE UPPER(NVL(#searchString#, PAYEE_NAME)))
						  </isNull>
				          ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to# -->
		 
 	</select>
 	
 	<resultMap id="getGICLS253MotorshopMap" class="java.util.HashMap">
  		<result column="payee_no" 			property="payeeNo" />			
	  	<result column="payee_name"			property="payeeName"/>	
  		<result column="rownum_" 			property="rowNum" />
		<result column="count_"				property="rowCount"/>
  	</resultMap>
 	
 	<select id="getGICLS253MotorshopLOV" resultMap="getGICLS253MotorshopMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * FROM TABLE(gicls253_pkg.gicls253_motorshop_lov)
		          <isNotNull property="findText">
				   	WHERE (payee_no LIKE #findText# 
				  		OR UPPER(payee_name) LIKE UPPER(#findText#)
				  		)
				  </isNotNull>
		          <isNotNull property="payeeName">
		          	WHERE UPPER(payee_name) LIKE UPPER(#payeeName#)
		          	   OR payee_no LIKE #payeeName# 
		          </isNotNull>
				<isEqual property="sortColumn" compareValue="payeeNo">
			      	ORDER BY payee_no
				</isEqual>
				<isEqual property="sortColumn" compareValue="nbtPayeeName">
			      	ORDER BY nbt_payee_name
				</isEqual>
				<isNotNull property="sortColumn">
					<isEqual property="ascDescFlg" compareValue="ASC">
              			ASC
              		</isEqual>
              		<isEqual property="ascDescFlg" compareValue="DESC">
              			DESC
              		</isEqual>
				</isNotNull>
				) a, 
               (SELECT count(*) count_ 
                  FROM TABLE (gicls253_pkg.gicls253_motorshop_lov)
                  <isNotNull property="findText">
				   	WHERE (payee_no LIKE #findText# 
				  		OR UPPER(payee_name) LIKE UPPER(#findText#)
				  		)
				  </isNotNull>
                  <isNotNull property="payeeName">
		          	WHERE UPPER(payee_name) LIKE UPPER(#payeeName#)
		          	   OR payee_no LIKE #payeeName# 
		          </isNotNull>
               ) b)
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<select id="getGicls210PayeeNoLOV" resultMap="PayeesListingMap2">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * FROM TABLE(giis_payees_pkg.get_gicls210_payee_lov)
		          <isNotNull property="findText">
		          	WHERE UPPER(payee_last_name) LIKE UPPER(#findText#)
		          	   OR TO_CHAR(payee_no) LIKE #findText#
		          </isNotNull>
		          <isNull property="findText">
		          	WHERE UPPER(payee_last_name) LIKE UPPER(NVL(#filterText#, '%'))
		          	   OR TO_CHAR(payee_no) LIKE NVL(#filterText#, '%')
		          </isNull>
				<isEqual property="sortColumn" compareValue="payeeNo">
			      	ORDER BY payee_no
				</isEqual>
				<isEqual property="sortColumn" compareValue="payeeLastName">
			      	ORDER BY payee_last_name
				</isEqual>
				<isNotNull property="sortColumn">
					<isEqual property="ascDescFlg" compareValue="ASC">
              			ASC
              		</isEqual>
              		<isEqual property="ascDescFlg" compareValue="DESC">
              			DESC
              		</isEqual>
				</isNotNull>
				) a, 
               (SELECT count(*) count_ 
                  FROM TABLE (giis_payees_pkg.get_gicls210_payee_lov)
                  <isNotNull property="findText">
		          	WHERE UPPER(payee_last_name) LIKE UPPER(#findText#)
		          	   OR TO_CHAR(payee_no) LIKE #findText#
		          </isNotNull>
		          <isNull property="findText">
		          	WHERE UPPER(payee_last_name) LIKE UPPER(NVL(#filterText#, '%'))
		          	   OR TO_CHAR(payee_no) LIKE NVL(#filterText#, '%')
		          </isNull>
               ) b)
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<select id="showGiacs480CompanyLov" resultMap="companyLOVMap" parameterClass="map">
		SELECT *
		  FROM (SELECT rownum rownum_, 
					   b.count_, 
					   a.* 
				  FROM (SELECT * 
						  FROM TABLE (giacs480_pkg.get_company_lov(#findText#))
						  <isEqual property="sortColumn" compareValue="payeeNo">
								ORDER BY payee_no
						  </isEqual>
						  <isEqual property="sortColumn" compareValue="payeeLastName">
								ORDER BY payee_last_name
						  </isEqual>
						  <isNotNull property="sortColumn">
								<isEqual property="ascDescFlg" compareValue="ASC">
									ASC
								</isEqual>
								<isEqual property="ascDescFlg" compareValue="DESC">
									DESC
								</isEqual>
						  </isNotNull>
						  ) a, 
					   (SELECT count(*) count_ 
						  FROM TABLE (giacs480_pkg.get_company_lov(#findText#))) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<select id="showGiacs480EmployeeLov" resultMap="employeeLOVMap" parameterClass="map">
		SELECT *
		  FROM (SELECT rownum rownum_, 
					   b.count_, 
					   a.* 
				  FROM (SELECT * 
						  FROM TABLE (giacs480_pkg.get_employee_lov(#companyCd#, #findText#))
						  <isEqual property="sortColumn" compareValue="refPayeeCd">
								ORDER BY ref_payee_cd
						  </isEqual>
						  <isEqual property="sortColumn" compareValue="empName">
								ORDER BY emp_name
						  </isEqual>
						  <isNotNull property="sortColumn">
								<isEqual property="ascDescFlg" compareValue="ASC">
									ASC
								</isEqual>
								<isEqual property="ascDescFlg" compareValue="DESC">
									DESC
								</isEqual>
						  </isNotNull>
						  ) a, 
					   (SELECT count(*) count_ 
						  FROM TABLE (giacs480_pkg.get_employee_lov(#companyCd#, #findText#))) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
</sqlMap>