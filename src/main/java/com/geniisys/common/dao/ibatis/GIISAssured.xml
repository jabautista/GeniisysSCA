<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd" >

<sqlMap namespace="GIISAssured">

	<cacheModel id="oneDayClient" type="MEMORY">
		<flushInterval hours="24" />
		<property name="reference-type" value="WEAK" />
	</cacheModel>

	<typeAlias alias="GIISAssured" type="com.geniisys.common.entity.GIISAssured" />

	<resultMap id="GIISAssuredMap" class="GIISAssured">
		<result column="ASSD_NO"		property="assdNo" 		jdbcType="NUMBER" />
		<result column="ASSD_NAME" 		property="assdName" 	jdbcType="VARCHAR" />
		<!-- <result column="BIRTHDATE"  	property="birthdate" /> -->
		<result column="MAIL_ADDR1"		property="mailAddress1" jdbcType="VARCHAR" />
		<result column="MAIL_ADDR2" 	property="mailAddress2" jdbcType="VARCHAR" />
		<result column="MAIL_ADDR3" 	property="mailAddress3" jdbcType="VARCHAR" />
		<result column="CORP_TAG" 		property="corporateTag" jdbcType="VARCHAR" />
		<result column="USER_ID"		property="userId"		jdbcType="VARCHAR" />
		<result column="ACTIVE_TAG"		property="activeTag" />		
	</resultMap>
	
	<resultMap id="GIISAssuredAjaxLOVMap" class="GIISAssured">
		<result column="ASSD_NO"		property="assdNo" 		jdbcType="NUMBER" />
		<result column="ASSD_NAME" 		property="assdName" 	jdbcType="VARCHAR" />
		<result column="BIRTHDATE"  	property="birthdate" /> 
		<result column="MAIL_ADDR1"		property="mailAddress1" jdbcType="VARCHAR" />
		<result column="MAIL_ADDR2" 	property="mailAddress2" jdbcType="VARCHAR" />
		<result column="MAIL_ADDR3" 	property="mailAddress3" jdbcType="VARCHAR" />
		<result column="CORP_TAG" 		property="corporateTag" jdbcType="VARCHAR" />
		<result column="USER_ID"		property="userId"		jdbcType="VARCHAR" />
		<result column="ACTIVE_TAG"		property="activeTag" />
		<result column="industry_nm" 	property="industryNm"/>
		<result column="industry_cd" 	property="industryCd"/>
	</resultMap>
	
	<resultMap id="GIISAssuredTableGridMap" class="java.util.HashMap">
		<result column="ASSD_NO"		property="assdNo" 		jdbcType="NUMBER" />
		<result column="ASSD_NO"		property="strAssdNo" 	jdbcType="VARCHAR" />
		<result column="ASSD_NAME" 		property="assdName" 	jdbcType="VARCHAR" />
		<result column="BIRTHDATE"  	property="birthdate" /> 
		<result column="MAIL_ADDR1"		property="mailAddress1" jdbcType="VARCHAR" />
		<result column="MAIL_ADDR2" 	property="mailAddress2" jdbcType="VARCHAR" />
		<result column="MAIL_ADDR3" 	property="mailAddress3" jdbcType="VARCHAR" />
		<result column="CORP_TAG"		property="corporateTag" jdbcType="VARCHAR" />
		<result column="USER_ID"		property="userId"		jdbcType="VARCHAR" />
		<result column="ACTIVE_TAG"		property="activeTag" />
		<result column="industry_nm" 	property="industryNm"/>
		<result column="industry_cd" 	property="industryCd"/>
		 <result column="rownum_"		property="rowNum"/>
		<result column="count_"			property="rowCount"/> 
		<result column="INTM_NAME"        property="intmName"/>
		<result column="INTM_NO"        property="intmNo"/>
	</resultMap>
	
	<resultMap id="GIISAcctOfMap" class="GIISAssured">
		<result column="ASSD_NO"		property="assdNo" 		jdbcType="NUMBER" />
		<result column="ASSD_NAME" 		property="assdName" 	jdbcType="VARCHAR" />
		<result column="ACTIVE_TAG" 	property="activeTag"	jdbcType="VARCHAR" />
		<result column="MAIL_ADDR1"		property="mailAddress1" jdbcType="VARCHAR" />
		<result column="MAIL_ADDR2" 	property="mailAddress2" jdbcType="VARCHAR" />
		<result column="MAIL_ADDR3" 	property="mailAddress3" jdbcType="VARCHAR" />
	</resultMap>
	
	<resultMap id="GIISAssuredLovMap" class="GIISAssured">
		<result column="ASSD_NO"		property="assdNo" 		jdbcType="NUMBER" />
		<result column="ASSD_NAME" 		property="assdName" 	jdbcType="VARCHAR" />
	</resultMap>
	
	<resultMap id="GIISAssuredDetailsMap" class="GIISAssured">
		<result column="ASSD_NO"		property="assdNo" />
		<result column="ASSD_NAME" 		property="assdName" />
		<result column="GOVT_TAG" 		property="govtTag" />
		<result column="TRAN_DATE" 		property="transactionDate" />
		<result column="DESIGNATION" 	property="designation" />
		<result column="GSIS_NO" 		property="gsisNo" />
		<result column="MAIL_ADDR1" 	property="mailAddress1" />
		<result column="MAIL_ADDR2"		property="mailAddress2" />
		<result column="MAIL_ADDR3" 	property="mailAddress3" />
		<result column="BILL_ADDR1" 	property="billingAddress1" />
		<result column="BILL_ADDR2" 	property="billingAddress2" />
		<result column="BILL_ADDR3" 	property="billingAddress3" />
		<result column="CONTACT_PERS" 	property="contactPersons" />
		<result column="PHONE_NO" 		property="phoneNo" />
		<result column="INDUSTRY_CD" 	property="industryCd" />
		<result column="INDUSTRY_NM" 	property="industryNm" />
		<result column="OFFICE_TYPE" 	property="officeType" />
		<result column="GOVT_TYPE" 		property="govtType" />
		<result column="REFERENCE_NO" 	property="referenceNo" />
		<result column="CORPORATE_TAG" 	property="corporateTag" />
		<result column="INSTITUTIONAL_TAG" property="institutionalTag" />
		<result column="FIRST_NAME" 	property="firstName" />
		<result column="LAST_NAME" 		property="lastName" />
		<result column="MIDDLE_INITIAL" property="middleInitial" />
		<result column="SUFFIX" 		property="suffix" />
		<result column="USER_ID" 		property="userId" />
		<result column="LAST_UPDATE" 	property="lastUpdate" />
		<result column="REMARKS" 		property="remarks" />
		<result column="PARENT_ASSD_NO" property="parentAssuredNo" />
		<result column="PARENT_ASSD_NAME" property="parentAssuredName" />
		<result column="ASSD_NAME2" 	property="assuredName2" />
		<result column="ASSD_TIN" 		property="assuredTIN" />
		<result column="CP_NO" 			property="cpNo" />
		<result column="SUN_NO" 		property="sunNo" />
		<result column="GLOBE_NO" 		property="globeNo" />
		<result column="SMART_NO" 		property="smartNo" />
		<result column="CONTROL_TYPE_CD" property="controlTypeCd" />
		<result column="ZIP_CD" 		property="zipCode" />
		<result column="VAT_TAG" 		property="vatTag" />
		<result column="ACTIVE_TAG" 	property="activeTag" />
		<result column="NO_TIN_REASON" 	property="noTINReason" />
		<result column="EMAIL_ADDRESS" 		property="emailAddress" />
		<result column="BIRTH_DATE" 		property="birthDate" />
		<result column="BIRTH_YEAR" 	property="birthYear" />
		<result column="BIRTH_MONTH" 	property="birthMonth" />
	</resultMap>

	<resultMap id="GIISAssuredIntmMap" class="com.geniisys.common.entity.GIISIntermediary">
		<result column="LINE_CD" 		property="refIntmCd" />
		<result column="INTM_NO" 		property="intmNo" />
		<result column="INTM_NAME" 		property="intmName" />
	</resultMap>
	
	<resultMap id="GIISAssuredGroupMap" class="com.geniisys.common.entity.GIISGroup">
		<result column="GROUP_CD" 		property="groupCd" />
		<result column="GROUP_DESC" 	property="groupDesc" />
		<result column="REMARKS" 		property="remarks" />
		<result column="USER_ID" 		property="userId" />
		<result column="LAST_UPDATE" 	property="lastUpdate" />
	</resultMap>
	
	<resultMap id="GIISAssuredIndInfoMap" class="com.geniisys.common.entity.GIISAssuredIndividualInformation">
		<result column="ASSD_NO" 		property="assdNo" />
		<result column="BIRTHDATE" 		property="birthdate" />
		<result column="SEX" 			property="sex" />
		<result column="STATUS" 		property="status" />
		<result column="SPOUSE_NAME" 	property="spouseName" />
		<result column="CITIZENSHIP" 	property="citizenship" />
		<result column="EMAIL_ADDR" 	property="emailAddress" />
		<result column="HOME_OWN" 		property="homeOwnership" />
		<result column="HOME_YY" 		property="yearsOfStay" />
		<result column="MORT_NAME" 		property="mortName" />
		<result column="RENT_AMT" 		property="rentAmt" />
		<result column="EDUC_ATTAINMENT" property="educationalAttainment" />
		<result column="NO_OF_CAR" 		property="noOfCars" />
		<result column="EMPLOYMENT" 	property="employment" />
		<result column="BUS_NATURE" 	property="natureOfBusiness" />
		<result column="OTH_NATURE" 	property="othNature" />
		<result column="COMPANY_NAME" 	property="companyName" />
		<result column="COMPANY_ADDRESS1" property="companyAddress" />
		<result column="POSITION" 		property="position" />
		<result column="GR_ANN_INCOME" 	property="grossAnnualIncome" />
	</resultMap>
	
	<resultMap id="GIISSameAssuredListMap" class="GIISAssured">
		<result column="ASSD_NAME"		property="assdName" />
		<result column="ASSD_NO"		property="assdNo" />
		<result column="MAIL_ADDR1"		property="mailAddress1" />
		<result column="MAIL_ADDR2"		property="mailAddress2" />
		<result column="MAIL_ADDR3"		property="mailAddress3" />
		<result column="BILL_ADDR1"		property="billingAddress1" />
		<result column="BILL_ADDR2"		property="billingAddress2" />
		<result column="BILL_ADDR3"		property="billingAddress3" />
		<result column="CONTACT_PERS"	property="contactPersons" />
		<result column="PHONE_NO"		property="phoneNo" />
		<result column="FIRST_NAME"		property="firstName" />
		<result column="LAST_NAME"		property="lastName" />
		<result column="MIDDLE_INITIAL" property="middleInitial" />
	</resultMap>
	
	<resultMap id="GIISAssuredLOVResultMap" class="GIISAssured" extends="BaseEntity.TableGridResultMap">
		<result column="ASSD_NO"		property="assdNo" 		jdbcType="NUMBER" />
		<result column="ASSD_NAME" 		property="assdName" 	jdbcType="VARCHAR" />
		<result column="BIRTHDATE"  	property="birthdate" /> 
		<result column="MAIL_ADDR1"		property="mailAddress1" jdbcType="VARCHAR" />
		<result column="MAIL_ADDR2" 	property="mailAddress2" jdbcType="VARCHAR" />
		<result column="MAIL_ADDR3" 	property="mailAddress3" jdbcType="VARCHAR" />
		<result column="CORP_TAG" 		property="corporateTag" jdbcType="VARCHAR" />
		<result column="USER_ID"		property="userId"		jdbcType="VARCHAR" />
		<result column="ACTIVE_TAG"		property="activeTag" />
		<result column="industry_nm" 	property="industryNm"/>
		<result column="industry_cd" 	property="industryCd"/>
	</resultMap>

	<parameterMap class="map" id="getAssdMailingAddressMap">
		<parameter property="assdNo" 		jdbcType="VARCHAR"	javaType="java.lang.String"		mode="IN"/>
		<parameter property="address1" 		jdbcType="VARCHAR"	javaType="java.lang.String"		mode="OUT"/>
		<parameter property="address2" 		jdbcType="VARCHAR"	javaType="java.lang.String"		mode="OUT"/>
		<parameter property="address3" 		jdbcType="VARCHAR"	javaType="java.lang.String"		mode="OUT"/>
	</parameterMap>
	
	<parameterMap class="map"  id="checkAssdMobileNoMap">
		<parameter property="cellNo" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="msg" jdbcType="VARCHAR" javaType="java.lang.String" mode="OUT"/>
		<parameter property="network" jdbcType="VARCHAR" javaType="java.lang.String" mode="OUT"/>
	</parameterMap>
	
	<resultMap id="GIISAssuredLovMap2" class="GIISAssured">
		<result property="assdNo" 			column="ASSD_NO"	jdbcType="NUMBER" />
		<result property="assdName" 		column="ASSD_NAME"	jdbcType="VARCHAR" />
		<result property="rowNum"			column="ROWNUM_"/>
		<result property="rowCount"			column="COUNT_"/>
	</resultMap>
	
	<parameterMap class="map"  id="validateAssdNoMap">
		<parameter property="assdNo" 		jdbcType="NUMBER"  javaType="java.lang.Integer" mode="IN"/>
		<parameter property="assdName" 		jdbcType="VARCHAR" javaType="java.lang.String"  mode="OUT"/>
	</parameterMap>

	<select id="getGIISAssuredByAssdNo" resultMap="GIISAssuredMap">
		SELECT assd_no, assd_name, mail_addr1, mail_addr2, mail_addr3, '' corp_tag, active_tag, user_id
		  FROM GIIS_ASSURED
		 WHERE assd_no = #assdNo#
 	</select>

	<procedure id="getGiisAssuredDetails" parameterClass="java.lang.Integer" resultMap="GIISAssuredDetailsMap">
		select * from table(GIIS_ASSURED_PKG.get_giis_assured_details(#assdNo#))
	</procedure>

	<procedure id="getAssuredLovList" resultMap="GIISAssuredLovMap">
		SELECT * FROM TABLE(Giis_Assured_Pkg.get_assd_lov_list())
	</procedure>

	<select id="getAssuredList" resultMap="GIISAssuredAjaxLOVMap">
		SELECT * FROM TABLE(Giis_Assured_Pkg.get_assured_names_list(#keyword#))
  	</select>
  	
  	<procedure id="getAssuredTableGrid" resultMap="GIISAssuredTableGridMap">
    <!-- Modified by pjsantos 09/16/2016, added parameters #intmName#,#intmNo#, #strAssdNo# #sortColumn#, #ascDescFlg#, #from#, #to# for optimization purposes GENQA 5667. -->
    <!--SELECT * 
  		  FROM (SELECT rownum rownum_, 
  		               b.count_, 
  		               a.*
  		          FROM (-->SELECT *
  		                  FROM TABLE(Giis_Assured_Pkg.get_assured_names_list_tg2(#assdNo#, #corporateTag#, #assdName#, #mailAddress1#, #activeTag#,							            
							            #intmName#,
							            #intmNo#,
							            #strAssdNo#,
							            #sortColumn#, 
							            #ascDescFlg#,
							            #from#,
							            #to#))
  		                  <!--	   WHERE UPPER(NVL(intm_name, 'x')) LIKE UPPER(NVL(#intmName#, NVL(intm_name, 'x'))) 
  		                  <isNotNull property="strAssdNo">
  		                  		AND TRUNC(assd_no) = TRUNC(#strAssdNo#)
  		                  </isNotNull>	
  		                  <isNotNull property="intmNo">
  		                  		AND intm_no = #intmNo#
  		                  </isNotNull>	                  	
  		                  <isEqual property="sortColumn" compareValue="corporateTag">
  		                  		ORDER BY corp_tag
  		                  </isEqual>
  		                   <isEqual property="sortColumn" compareValue="strAssdNo">
  		                  		ORDER BY assd_no
  		                  </isEqual>
  		                  <isEqual property="sortColumn" compareValue="assdName">
  		                  		ORDER BY assd_name
  		                  </isEqual>
  		                  <isEqual property="sortColumn" compareValue="mailAddress1">
  		                  		ORDER BY mail_addr1
  		                  </isEqual>
  		                  <isEqual property="sortColumn" compareValue="activeTag">
  		                  		ORDER BY active_tag
  		                  </isEqual>
  		                 <isEqual property="sortColumn" compareValue="intmNo">
  		                  		ORDER BY intm_no
  		                  		<isEqual property="ascDescFlg" compareValue="ASC">
  		                  			ASC
  		                  		</isEqual>
  		                  		<isEqual property="ascDescFlg" compareValue="DESC">
  		                  			DESC
  		                  		</isEqual>  		                   
  		                  </isEqual>  		                  
  		                      <isNotNull property="sortColumn">
  		                  		<isEqual property="ascDescFlg" compareValue="ASC">
  		                  			ASC
  		                  		</isEqual>
  		                  		<isEqual property="ascDescFlg" compareValue="DESC">
  		                  			DESC
  		                  		</isEqual>
  		                  </isNotNull>) a  ,
  		               (SELECT count(*) count_
  		                  FROM TABLE(Giis_Assured_Pkg.get_assured_names_list_tg2(#assdNo#, #corporateTag#, #assdName#, #mailAddress1#, #activeTag#))
  		                 WHERE UPPER(NVL(intm_name, 'x')) LIKE UPPER(NVL(#intmName#, NVL(intm_name, 'x')))
  		                 <isNotNull property="strAssdNo">
  		                  		AND TRUNC(assd_no) = TRUNC(#strAssdNo#)
  		                  </isNotNull>
  		                  <isNotNull property="intmNo">
  		                  		AND intm_no = #intmNo#
  		                  </isNotNull>	
  		                 )b)
  		 WHERE rownum_ BETWEEN #from# AND #to#-->
  	</procedure>

	<select id="getAcctOfList" resultMap="GIISAcctOfMap" parameterClass="java.util.HashMap">
		SELECT * FROM TABLE(Giis_Assured_Pkg.get_in_account_of_list(#assdNo#, #keyword#))
  	</select>

	<resultMap class="java.util.HashMap" id="GIISAcctOfMap2" extends="BaseEntity.TableGridResultMap">
		<result column="ASSD_NO"		property="assdNo" 		jdbcType="NUMBER" />
		<result column="ASSD_NAME" 		property="assdName" 	jdbcType="VARCHAR" />
		<result column="ACTIVE_TAG" 	property="activeTag"	jdbcType="VARCHAR" />
		<result column="birth_date"		property="birthDate" 	jdbcType="VARCHAR" />
		<result column="MAIL_ADDR"		property="mailAddress"  jdbcType="VARCHAR" />
		<result column="MAIL_ADDR1"		property="mailAddress1" jdbcType="VARCHAR" />
		<result column="MAIL_ADDR2" 	property="mailAddress2" jdbcType="VARCHAR" />
		<result column="MAIL_ADDR3" 	property="mailAddress3" jdbcType="VARCHAR" />
	</resultMap>

	<select id="getAcctOfList2" resultMap="GIISAcctOfMap2">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT mail_addr1||mail_addr2||mail_addr3 mail_addr, '-' birth_date, c.* FROM TABLE(Giis_Assured_Pkg.get_in_account_of_list(#assdNo#, #inAccountOf#)) c		                 
		                  	<isNull property="findText">
				                 WHERE TO_CHAR(assd_name) LIKE #search#			                      		
			             	</isNull>          	
		                	<isNotNull property="findText">
		                		WHERE UPPER(assd_name) LIKE UPPER(#findText#)		
		                			OR UPPER(mail_addr1||mail_addr2||mail_addr3) LIKE UPPER(#findText#)
			             	</isNotNull>		             
			              	<isEqual property="sortColumn" compareValue="assdName">
			              		ORDER BY assd_name
			              	</isEqual>		
			              	<isEqual property="sortColumn" compareValue="birthDate">
			              		ORDER BY birth_date
			              	</isEqual>
			              	<isEqual property="sortColumn" compareValue="mailAddress">
			              		ORDER BY mail_addr
			              	</isEqual>			              		                      
			          	  	<isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              	</isNotNull>
		                  ) a, 
		               (SELECT count (*) count_ 
		                  FROM TABLE(Giis_Assured_Pkg.get_in_account_of_list(#assdNo#, #inAccountOf#))		                 
		                  	<isNull property="findText">
				                 WHERE TO_CHAR(assd_name) LIKE #search#			                      		
			             	</isNull>          	
		                	<isNotNull property="findText">
		                		WHERE UPPER(assd_name) LIKE UPPER(#findText#)		
		                			OR UPPER(mail_addr1||mail_addr2||mail_addr3) LIKE UPPER(#findText#)
			             	</isNotNull>		
			             	) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>

	<procedure id="saveAssured" parameterClass="GIISAssured">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			
			GIIS_ASSURED_PKG.set_giis_assured(
		  		#assdNo#,
			 	#assdName#,	
		 	 	#govtTag#,
			 	#transactionDate#,
			 	#designation#,
			 	#gsisNo#,
			 	#mailAddress1#,
			 	#mailAddress2#,
			 	#mailAddress3#,
		 	 	#billingAddress1#,
			 	#billingAddress2#,
			 	#billingAddress3#,
			 	#contactPersons#,
			 	#phoneNo#,
			 	#industryCd#,
			 	#officeType#,
			 	#govtType#,
			 	#referenceNo#,
			 	#corporateTag#,
			 	#institutionalTag#,
			 	#firstName#,
			 	#lastName#,
			 	#middleInitial#,
			 	#suffix#,
			 	#userId#,
			 	#remarks#,
			 	#parentAssuredNo#,
		 	 	#parentAssuredName#,
			 	#assuredName2#,
			 	#assuredTIN#,
			 	#cpNo#,
			 	#sunNo#,
			 	#globeNo#,
			 	#smartNo#,
			 	#controlTypeCd#,
			 	#zipCode#,
			 	#vatTag#,	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 
		 	 	#activeTag#,
		 	 	#noTINReason#,
		 	 	#birthDate#,
		 	 	#birthMonth#,
		 	 	#birthYear#,
		 	 	#emailAddress#
		 	 	);
		END;
	</procedure>

	<select id="getAssuredNoSequence" resultClass="java.lang.Integer">
		SELECT assd_no_seq.nextval FROM DUAL
	</select>

	<procedure id="saveGIISAssuredIntm" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIIS_ASSURED_INTM_PKG.set_giis_assured_intm(#assdNo#, #lineCd#, #intmNo#);
			COMMIT;
		END;
	</procedure>
	
	<procedure id="deleteGIISAssdIntm" parameterClass="java.lang.Integer">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIIS_ASSURED_INTM_PKG.del_giis_assured_intm_all(#assdNo#);
			COMMIT;
		END;
	</procedure>
	
	<procedure id="getGIISAssuredIntm" parameterClass="java.lang.Integer" resultMap="GIISAssuredIntmMap">
		select line_cd, intm_no, intm_name from table(GIIS_ASSURED_INTM_PKG.get_giis_assured_intm(#assdNo#))
	</procedure>
	
	<procedure id="saveGIISAssuredGroup" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIIS_ASSURED_GROUP_PKG.set_giis_assured_group(#assdNo#, #groupCd#, #remarks#);
			COMMIT;
		END;
	</procedure>
	
	<select id="getGIISAssuredGroup" parameterClass="java.lang.Integer" resultMap="GIISAssuredGroupMap">
		select GROUP_CD, GROUP_DESC, REMARKS, USER_ID, TO_CHAR(LAST_UPDATE, 'MM-DD-YYYY HH:MI:SS AM') LAST_UPDATE from table(GIIS_ASSURED_GROUP_PKG.get_giis_assured_group(#assdNo#))
	</select>
	
	<procedure id="deleteGIISAssdGroup" parameterClass="java.lang.Integer">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIIS_ASSURED_GROUP_PKG.del_giis_assured_group_all(#assdNo#);
			COMMIT;
		END;
	</procedure>
	
	<procedure id="saveGIISAssuredIndInfo" parameterClass="com.geniisys.common.entity.GIISAssuredIndividualInformation">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIIS_ASSD_IND_INFO_PKG.set_giis_assd_ind_info(
				#assdNo#,
	 			#birthdate#,
 	 			#sex#,
	 			#status#,
	 			#spouseAssdNo#,
				#spouseName#,
	 			#citizenship#,
	 			#mailAddress1#,
	 			#mailAddress2#,
 	 			#mailAddress3#,
	 			#phoneNo#,
	 			#homeFax#,
	 			#officeFax#,
	 			#pagerNo#,
	 			#cpNo#,
	 			#emailAddress#,
	 			#homeOwnership#,
	 			#yearsOfStay#,
	 			#homeMm#,
	 			#mortName#,
	 			#rentAmt#,
	 			#educationalAttainment#,
	 			#noOfCars#,
	 			#employment#,
	 			#natureOfBusiness#,
	 			#othNature#,
	 			#companyName#,
 	 			#companyAddress#,
	 			#position#,
	 			#grossAnnualIncome#);
			COMMIT;
		END;
	</procedure>
	
	<select id="getGIISAssuredIndividualInfo" resultMap="GIISAssuredIndInfoMap" parameterClass="java.lang.Integer">
		select * from table(GIIS_ASSD_IND_INFO_PKG.get_giis_assd_ind_info(#assdNo#))
	</select>
	
	<select id="checkAssuredDependencies" parameterClass="java.lang.Integer" resultClass="java.lang.String">
		SELECT GIIS_ASSURED_PKG.check_assured_dependencies(#assdNo#) FROM DUAL
	</select>
	
	<select id="checkRefCd" parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT GIIS_ASSURED_PKG.check_if_ref_no_exist(#refCd#) FROM DUAL
	</select>
	
	<select id="checkRefCd2" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT GIIS_ASSURED_PKG.check_if_ref_no_exist2(#refCd#,#assdNo#) FROM DUAL
	</select>
	
	<delete id="deleteAssured" parameterClass="java.lang.Integer">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			GIIS_ASSURED_PKG.delete_giis_assured(#assdNo#);
		END;
	</delete>
	
	<procedure id="getAssdMailingAddress" parameterMap="getAssdMailingAddressMap">
		CALL GIIS_ASSURED_PKG.get_assd_mailing_address(?, ?, ?, ?)
	</procedure>
	
	<select id="getSameAssuredNameList" resultMap="GIISSameAssuredListMap" parameterClass="java.lang.String">
		SELECT * FROM TABLE(GIIS_ASSURED_PKG.get_same_assured_name_list(#assdName#))
	</select>
	
	<procedure id="checkAssdMobileNo"  parameterMap="checkAssdMobileNoMap">
		CALL check_mobile_no(?, ?, ?)
	</procedure>
	
	<select id="getFirstRecord" resultClass="java.lang.Integer">
		SELECT assd_no 
		  FROM giis_assured
		WHERE ROWNUM = 1
		ORDER BY assd_no
	</select>
	
	<resultMap class="GIISAssured" id="getInitialAssdNoMap" >
		<result column="ASSD_NO"		property="assdNo" 		jdbcType="NUMBER" />
		<result column="ASSD_NAME" 		property="assdName" 	jdbcType="VARCHAR" />
	</resultMap>
	<select id="getInitialAssdNo" resultMap="getInitialAssdNoMap">
		SELECT assd_no, assd_name
		  FROM giis_assured
		 WHERE ROWNUM = 1
	</select>
	
	<select id="getGIISAssuredLOVTG" resultMap="GIISAssuredLOVResultMap">
	    SELECT * FROM TABLE (giis_assured_pkg.get_assured_names_list(#findText#, #sortColumn#, #ascDescFlg#, #from#, #to#))				  
	</select>
	
	<select id="getPrintExpReportAssuredLOV"	resultMap="GIISAssuredLovMap2" parameterClass="java.util.HashMap">  	
  		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (select assd_no, assd_name from table(giis_assured_pkg.get_giis_assured)
		          		  <isNotNull property="findText">
		          		  		WHERE (assd_no LIKE #findText#
		          		  		       OR UPPER(assd_name) LIKE UPPER(#findText#)
		          		  		      ) 
		          		  </isNotNull>
		          		  <isEqual property="sortColumn" compareValue="assdNo">
			              		ORDER BY assd_no
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="assdName">
			              		ORDER BY assd_name
			              </isEqual> 
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>
		                  ) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE (giis_assured_pkg.get_giis_assured)
		                  <isNotNull property="findText">
		          		  		WHERE (assd_no LIKE #findText#
		          		  		       OR UPPER(assd_name) LIKE UPPER(#findText#)
		          		  		      ) 
		          		  </isNotNull>
		          		  ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
  	</select>
  	
  	<select id="getGiacs180AssdLOV"	resultMap="GIISAssuredLovMap2" parameterClass="java.util.HashMap">  	
  		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (select assd_no, assd_name from table(giis_assured_pkg.get_giis_assured)
		          		  <isNotNull property="findText">
		          		  		WHERE assd_no LIKE #findText#
		          		  		   OR UPPER(assd_name) LIKE UPPER(#findText#)
		          		  </isNotNull>
		          		  <isNull property="findText">
		          		  		<isNotNull property="filterText">
		          		  			WHERE assd_no LIKE #filterText#
		          		  		   	   OR UPPER(assd_name) LIKE UPPER(#filterText#)
		          		  		</isNotNull>
		          		  </isNull>
		          		  <isEqual property="sortColumn" compareValue="assdNo">
			              		ORDER BY assd_no
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="assdName">
			              		ORDER BY assd_name
			              </isEqual> 
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>
		                  ) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE (giis_assured_pkg.get_giis_assured)
		                  <isNotNull property="findText">
		          		  		WHERE assd_no LIKE #findText#
		          		  		   OR UPPER(assd_name) LIKE UPPER(#findText#)
		          		  </isNotNull>
		          		  <isNull property="findText">
		          		  		<isNotNull property="filterText">
		          		  			WHERE assd_no LIKE #filterText#
		          		  		   	   OR UPPER(assd_name) LIKE UPPER(#filterText#)
		          		  		</isNotNull>
		          		  </isNull>
		          		  ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
  	</select>
  	
  	<select id="getGiacs180AssdLOV2"	resultMap="GIISAssuredLovMap2" parameterClass="java.util.HashMap">  	
  		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (select assd_no, assd_name from table(giacs180_pkg.get_giis_assured(#userId#))
		          		  <isNotNull property="findText">
		          		  		WHERE assd_no LIKE #findText#
		          		  		   OR UPPER(assd_name) LIKE UPPER(#findText#)
		          		  </isNotNull>
		          		  <isNull property="findText">
		          		  		<isNotNull property="filterText">
		          		  			WHERE assd_no LIKE #filterText#
		          		  		   	   OR UPPER(assd_name) LIKE UPPER(#filterText#)
		          		  		</isNotNull>
		          		  </isNull>
		          		  <isEqual property="sortColumn" compareValue="assdNo">
			              		ORDER BY assd_no
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="assdName">
			              		ORDER BY assd_name
			              </isEqual> 
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>
		                  ) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE (giacs180_pkg.get_giis_assured(#userId#))
		                  <isNotNull property="findText">
		          		  		WHERE assd_no LIKE #findText#
		          		  		   OR UPPER(assd_name) LIKE UPPER(#findText#)
		          		  </isNotNull>
		          		  <isNull property="findText">
		          		  		<isNotNull property="filterText">
		          		  			WHERE assd_no LIKE #filterText#
		          		  		   	   OR UPPER(assd_name) LIKE UPPER(#filterText#)
		          		  		</isNotNull>
		          		  </isNull>
		          		  ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
  	</select>
  	
  	<select id="validateAssdNoGiexs006" resultMap="GIISAssuredLovMap" parameterClass="java.util.HashMap">
  		SELECT * FROM TABLE(giis_assured_pkg.validate_assd_no_giexs006(#assdNo#))
  	</select>
	
	<select id="getAllAssdLOV" resultMap="GIISAssuredLovMap2" parameterClass="java.util.HashMap">  	
  		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (select * from table(GIIS_ASSURED_PKG.get_all_assd_list(#findText#))
		          		  <isEqual property="sortColumn" compareValue="assdNo">
			              		ORDER BY assd_no
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="assdName">
			              		ORDER BY assd_name
			              </isEqual> 
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>
		                  ) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE (GIIS_ASSURED_PKG.get_all_assd_list(#findText#))) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
  	</select>
  	
  	<procedure id="validateAssdNo" parameterMap="validateAssdNoMap">
		CALL GIIS_ASSURED_PKG.validate_assd_no(?, ?)
	</procedure>
	
	<select id="checkAssuredExistGiiss006b2" parameterClass="map" resultClass="String">
		SELECT giis_assured_pkg.check_assured_exist_giiss006b2(#assdName#,#lastName#,#firstName#,#middleInitial#, #assdNo#) FROM DUAL
	</select>
	
	<select id="checkAssuredExistGiiss006b" parameterClass="map" resultClass="String">
		SELECT giis_assured_pkg.check_assured_exist_giiss006b(#assdName#,#lastName#,#firstName#,#middleInitial#,#mailAddr1#,#mailAddr2#,#mailAddr3#,#assdNo#) FROM DUAL
	</select>
	
	<select id="getPostQueryGiiss006b" resultClass="String" parameterClass="Integer">
		SELECT giis_assured_pkg.giiss066b_post_query(#assdNo#) FROM DUAL
	</select>

	<resultMap id="GIISSameAssuredListTGMap" class="GIISAssured">
		<result column="ASSD_NAME"		property="assdName" />
		<result column="ASSD_NO"		property="assdNo" />
		<result column="MAIL_ADDR1"		property="mailAddress1" />
		<result column="MAIL_ADDR2"		property="mailAddress2" />
		<result column="MAIL_ADDR3"		property="mailAddress3" />
		<result column="BILL_ADDR1"		property="billingAddress1" />
		<result column="BILL_ADDR2"		property="billingAddress2" />
		<result column="BILL_ADDR3"		property="billingAddress3" />
		<result column="CONTACT_PERS"	property="contactPersons" />
		<result column="PHONE_NO"		property="phoneNo" />
		<result column="FIRST_NAME"		property="firstName" />
		<result column="LAST_NAME"		property="lastName" />
		<result column="MIDDLE_INITIAL" property="middleInitial" />
		<result column="rownum_"		property="rowNum"/>
		<result column="count_"			property="rowCount"/>
	</resultMap>
		
	<select id="getGiiss006bExistingAssdTg" resultMap="GIISSameAssuredListTGMap" parameterClass="map">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * 
		                  FROM TABLE (GIIS_ASSURED_PKG.get_giiss006b_exsiting_assd_tg(#assdName#,#lastName#,#firstName#,#middleInitial#,#assdNo#))
		                  <isEqual property="sortColumn" compareValue="clmYy">
			              		ORDER BY clm_yy
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>
		                  ) a, 
			               (SELECT count(*) count_ 
			                  FROM TABLE (GIIS_ASSURED_PKG.get_giiss006b_exsiting_assd_tg(#assdName#,#lastName#,#firstName#,#middleInitial#,#assdNo#))
		                  ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#	
	</select>
	
	<procedure id="deleteGiisAssured" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			DELETE FROM giis_assured  
         	 WHERE assd_no = #assdNo#;
		END;
	</procedure>
	
	<procedure id="deleteGiisAssuredIntm" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			DELETE FROM GIIS_ASSURED_INTM
         	 WHERE assd_no = #assdNo#;
		END;
	</procedure>
	
	<procedure id="deleteGiisAssdIndInfo" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #appUser#;
			DELETE FROM giis_assd_ind_info
         	 WHERE assd_no = #assdNo#;
		END;
	</procedure>
	
	<procedure id="valDeleteGroupInfo" parameterClass="java.util.HashMap">
		BEGIN
			GIISS006B_VAL_DEL_GROUP_INFO(#assdNo#, #groupCd#);
		END;
	</procedure>
	
	<procedure id="copyIndividualInfo" parameterClass="java.util.HashMap">
		BEGIN
			GIIS_ASSD_IND_INFO_PKG.copy_individual_info(#assdNo#, #emailAddr#, #birthDate#, #birthMonth#, #birthYear#);
		END;
	</procedure>
	
	<procedure id="copyGIISAssured" parameterClass="java.util.HashMap">
		BEGIN
			GIIS_ASSD_IND_INFO_PKG.copy_assured_info(#assdNo#, #emailAddr#, #birthday#);
		END;
	</procedure>
	
	<!-- added by kenneth L. for Print Premium Deposit 06.25.2013 -->
	<select id="getGIACS147AssuredLov" resultMap="GIISAssuredLovMap2">
		SELECT *
  		  FROM (SELECT ROWNUM rownum_, 
	               	   b.count_, 
	              	   a.* 
	          	  FROM (SELECT * FROM TABLE(GIACS147_PKG.get_assd_lov)
	          	
	          	  
	          	  <isNull property="findText">
					WHERE assd_no LIKE upper(NVL(#search#, assd_no))
					</isNull>
					<isNotNull property="findText">
					WHERE assd_no LIKE upper(#findText#)
					</isNotNull>
					
	            <isEqual property="sortColumn" compareValue="assdNo">
              		ORDER BY assd_no
	            </isEqual>
	            <isEqual property="sortColumn" compareValue="assdName">
              		ORDER BY assd_name
	            </isEqual>
	            <isNotNull property="sortColumn">
              		<isEqual property="ascDescFlg" compareValue="ASC">
              			ASC
              		</isEqual>
              		<isEqual property="ascDescFlg" compareValue="DESC">
              			DESC
              		</isEqual>
              	</isNotNull>) a,
              (SELECT count(*) count_
	          	 FROM TABLE(GIACS147_PKG.get_assd_lov)
	          	<isNull property="findText">
					WHERE assd_no LIKE upper(NVL(#search#, assd_no))
					</isNull>
					<isNotNull property="findText">
					WHERE assd_no LIKE upper(#findText#)
					</isNotNull>
				)b) 
	    	WHERE rownum_ BETWEEN #from# AND #to# 	
	</select>
	
	<!-- added by kenneth L. for Print Premium Deposit 06.25.2013 -->
	<select id="getGiacs286AssdLov" resultMap="GIISAssuredLovMap2">
		SELECT *
  		  FROM (SELECT ROWNUM rownum_, 
	               	   b.count_, 
	              	   a.* 
	          	  FROM (SELECT * FROM TABLE(giis_assured_pkg.get_giacs286_assd_lov)
	          	  <isNull property="findText">
					WHERE assd_no LIKE upper(NVL(#search#, assd_no)) OR assd_name LIKE upper(NVL(#search#, assd_name))
				 </isNull>
				 <isNotNull property="findText">
					WHERE assd_no LIKE upper(#findText#) OR assd_name LIKE upper(#findText#)
				 </isNotNull>
	            <isEqual property="sortColumn" compareValue="assdNo">
              		ORDER BY assd_no
	            </isEqual>
	            <isEqual property="sortColumn" compareValue="assdName">
              		ORDER BY assd_name
	            </isEqual>
	            <isNotNull property="sortColumn">
              		<isEqual property="ascDescFlg" compareValue="ASC">
              			ASC
              		</isEqual>
              		<isEqual property="ascDescFlg" compareValue="DESC">
              			DESC
              		</isEqual>
              	</isNotNull>) a,
              (SELECT count(*) count_
	          	 FROM TABLE(giis_assured_pkg.get_giacs286_assd_lov)
	          	 <isNull property="findText">
					WHERE assd_no LIKE upper(NVL(#search#, assd_no)) OR assd_name LIKE upper(NVL(#search#, assd_name))
				 </isNull>
				 <isNotNull property="findText">
					WHERE assd_no LIKE upper(#findText#) OR assd_name LIKE upper(#findText#)
				 </isNotNull>
				)b) 
	    	WHERE rownum_ BETWEEN #from# AND #to# 	
	</select>
	
	<!-- jomsdiago 07.19.2013 for GICLS220 -->
	<select id="getGICLS220AssuredLOV" resultMap="GIISAssuredLovMap2" parameterClass="java.util.HashMap">
		SELECT * 
		  FROM (SELECT a.*, b.count_, rownum rownum_
		          FROM (SELECT * FROM TABLE (GICLS220_PKG.get_gicls220_assd_lov)
		          		<isNotNull property="findText">
		          			WHERE UPPER(assd_no) LIKE UPPER(NVL(#findText# || '%', assd_no))
		          			   OR UPPER(assd_name) LIKE UPPER(NVL(#findText# || '%', assd_name))
		          		</isNotNull>
		          		<isNotNull property="sortColumn">
		          			<isEqual property="sortColumn" compareValue="assdNo">
		          				ORDER BY assd_no
		          			</isEqual>
		          			<isEqual property="sortColumn" compareValue="assdName">
		          				ORDER BY assd_name
		          			</isEqual>
		          			<isEqual property="ascDescFlg" compareValue="ASC">
		          				ASC
		          			</isEqual>
		          			<isEqual property="ascDescFlg" compareValue="DESC">
		          				DESC
		          			</isEqual>
		          		</isNotNull>
		          		) a,
		          		(SELECT count(*) count_ FROM TABLE (GICLS220_PKG.get_gicls220_assd_lov)
		          		 <isNotNull property="findText">
		          			WHERE UPPER(assd_no) LIKE UPPER(NVL(#findText# || '%', assd_no))
		          			   OR UPPER(assd_name) LIKE UPPER(NVL(#findText# || '%', assd_name))
		          		 </isNotNull>
		          		) b		  
		  )
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>

<!-- Gzelle 08.05.2013 -->
	<resultMap class="java.util.HashMap" id="reportedClaimsAssdLOVResultMap" extends="BaseEntity.TableGridResultMap">
		<result column="assured_no"				property="assuredNo" />
		<result column="assured_name"			property="assuredName" />
	</resultMap>
	
	<select id="getReportedClmAssuredLOV" resultMap="reportedClaimsAssdLOVResultMap" parameterClass="java.util.HashMap">		 
		SELECT *
  		  FROM (SELECT ROWNUM rownum_, b.count_, a.*
  		  		  FROM (SELECT * FROM TABLE(gicls540_pkg.get_rep_clm_assured_lov)
						<isNull property="findText">
						 WHERE upper(assured_no) LIKE upper(NVL(#search#, assured_no))
						</isNull>
						<isNotNull property="findText">
						 WHERE upper(assured_no) LIKE upper(#findText#)
						    OR upper(assured_name) LIKE upper(#findText#)
						</isNotNull>
	            	<isEqual property="sortColumn" compareValue="assuredNo">
              			ORDER BY assured_no
	            	</isEqual>
	            	<isEqual property="sortColumn" compareValue="assuredName">
              			ORDER BY assured_name
	            	</isEqual>
	            	<isNotNull property="sortColumn">
              			<isEqual property="ascDescFlg" compareValue="ASC">
              				ASC
              			</isEqual>
              			<isEqual property="ascDescFlg" compareValue="DESC">
              				DESC
              			</isEqual>
              		</isNotNull>) a,
              (SELECT count(*) count_
	          	 FROM TABLE(gicls540_pkg.get_rep_clm_assured_lov)
				 <isNull property="findText">
				WHERE upper(assured_no) LIKE upper(NVL(#search#, assured_no))
				 </isNull>
				 <isNotNull property="findText">
				WHERE upper(assured_no) LIKE upper(#findText#)
				   OR upper(assured_name) LIKE upper(#findText#)
				 </isNotNull>
				)b) 
	    	WHERE rownum_ BETWEEN #from# AND #to# 	
 	</select>	
 <!--End-->	
 
 <!-- added by : Kenneth L. 08.27.2013 GIPIS170 -->
	<select id="getGipis170AssdLov" resultMap="GIISAssuredLovMap2">		
		SELECT *
  		  FROM (SELECT ROWNUM rownum_, 
	               	   b.count_, 
	              	   a.* 
	          	  FROM (SELECT * FROM TABLE(GIIS_ASSURED_PKG.GET_GIACS286_ASSD_LOV)
	          	 WHERE 1=1
	          	 	<isNull prepend="AND" property="findText">
						upper(assd_name) LIKE upper(#search# || '%')
					</isNull>
					<isNotNull prepend="AND" property="findText">
						upper(assd_name) LIKE upper(#findText# || '%')
					</isNotNull>
		            <isEqual property="sortColumn" compareValue="assdNo">
	              		ORDER BY assd_no
		            </isEqual>
		            <isEqual property="sortColumn" compareValue="assdName">
	              		ORDER BY assd_name
		            </isEqual>
		            <isNotNull property="sortColumn">
	              		<isEqual property="ascDescFlg" compareValue="ASC">
	              			ASC
	              		</isEqual>
	              		<isEqual property="ascDescFlg" compareValue="DESC">
	              			DESC
	              		</isEqual>
	              	</isNotNull>) a,
               (SELECT count(*) count_
	          	  FROM TABLE(GIIS_ASSURED_PKG.GET_GIACS286_ASSD_LOV)
	          	 WHERE 1=1
	            	<isNull prepend="AND" property="findText">
						upper(assd_name) LIKE upper(#search# || '%')
					</isNull>
					<isNotNull prepend="AND" property="findText">
						upper(assd_name) LIKE upper(#findText# || '%')
					</isNotNull>)b) 
		 WHERE rownum_ BETWEEN #from# AND #to# 	
 	</select>	
 
 	<resultMap id="getGIISS022AssuredLOVMap" class="java.util.HashMap" extends="BaseEntity.TableGridResultMap">
		<result column="ASSD_NO"			property="assdNo" 		jdbcType="NUMBER" />
		<result column="ASSD_NAME" 			property="assdName" 	jdbcType="VARCHAR" />
		<result column="MAIL_ADDR1"			property="mailAddress1" jdbcType="VARCHAR" />
		<result column="MAIL_ADDR2" 		property="mailAddress2" jdbcType="VARCHAR" />
		<result column="MAIL_ADDR3" 		property="mailAddress3" jdbcType="VARCHAR" />
		<result column="CORP_TAG" 			property="corporateTag" jdbcType="VARCHAR" />
		<result column="USER_ID"			property="userId"		jdbcType="VARCHAR" />
		<result column="ACTIVE_TAG"			property="activeTag" />
		<result column="CONTROL_TYPE_CD"	property="controlTypeCd" />
	</resultMap>

	<select id="getGIISS022AssuredLOV" resultMap="getGIISS022AssuredLOVMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * 
		                  FROM TABLE (Giis_Assured_Pkg.get_giiss022_assured_lov(#findText#))
		                  <isEqual property="sortColumn" compareValue="assdName">
			              		ORDER BY assd_name
			              </isEqual>
			              <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>
		                  ) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE (Giis_Assured_Pkg.get_giiss022_assured_lov(#findText#))) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
 	
 	<resultMap class="java.util.HashMap" id="assuredIntmListResultMap" extends="BaseEntity.TableGridResultMap">
 		<result property="lineCd" column="line_cd"/>
 		<result property="intmNo" column="intm_no"/>
 		<result property="intmName" column="intm_name"/>
 	</resultMap>
 	
 	<select id="getAssuredIntmList" resultMap="assuredIntmListResultMap">
 		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * 
		                  FROM TABLE (Giis_Assured_Pkg.get_giiss006_intm_list(#assdNo#, #lineCd#, #intmNo#, #intmName#))
		                  <isEqual property="sortColumn" compareValue="lineCd">
			              		ORDER BY line_cd
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="intmNo">
			              		ORDER BY intm_no
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="intmName">
			              		ORDER BY intm_name
			              </isEqual>
			              <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>
		                  ) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE (Giis_Assured_Pkg.get_giiss006_intm_list(#assdNo#, #lineCd#, #intmNo#, #intmName#))) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
 	</select>
 	
 	<!-- benjo 09.07.2016 SR-5604 -->
 	<select id="checkDfltIntm" parameterClass="map" resultClass="String">
		SELECT giis_assured_pkg.check_default_intm(#assdNo#, #moduleId#, #userId#) FROM DUAL
	</select>
</sqlMap>