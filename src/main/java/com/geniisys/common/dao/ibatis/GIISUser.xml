<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd" >

<sqlMap namespace="GIISUser">

  	<cacheModel id="oneDayClient" type="MEMORY">
    	<flushInterval hours="24"/>
    	<property name="reference-type" value="WEAK"/>
  	</cacheModel>
  
  	<typeAlias alias="GIISUser" type="com.geniisys.common.entity.GIISUser"/>
  
  	<resultMap id="GIISUserMap" class="GIISUser">
	  	<result column="USER_ID" 			property="userId" 			jdbcType="VARCHAR" />
	  	<result column="USER_GRP"			property="userGrp"			jdbcType="NUMBER" />
	  	<result column="GRP_ISS_CD"			property="issCd"			jdbcType="VARCHAR" />
	  	<result column="USER_NAME"			property="username"			jdbcType="VARCHAR" />
	  	<result column="USER_LEVEL"			property="userLevel"		jdbcType="NUMBER" />
	  	<result column="ACCTG_SW"			property="acctgSw"			jdbcType="VACHAR"/>
	  	<result column="CLAIM_SW"			property="claimSw" 			jdbcType="VARCHAR" />
	  	<result column="DIST_SW"			property="distSw"			jdbcType="VARCHAR" />
	  	<result column="EXP_SW"				property="expSw"			jdbcType="VARCHAR" />
	  	<result column="INQ_SW"				property="inqSw"			jdbcType="VARCHAR" />
	  	<result column="MIS_SW"				property="misSw"			jdbcType="VARCHAR" />
	  	<result column="POL_SW"				property="polSw"			jdbcType="VARCHAR" />
	  	<result column="RMD_SW"				property="rmdSw"			jdbcType="VARCHAR" />
	  	<result column="RI_SW"				property="riSw"				jdbcType="VARCHAR" /> 
	  	<result column="COMM_UPDATE_TAG"	property="commUpdateTag" 	jdbcType="VARCHAR" />
	  	<result column="MGR_SW"				property="mgrSw"			jdbcType="VARCHAR" />
	  	<result column="MKTNG_SW"			property="mktngSw"			jdbcType="VARCHAR"/>
	  	<result column="ALL_USER_SW"		property="allUserSw"   		jdbcType="VARCHAR" />
	  	<result column="REMARKS"			property="remarks"			jdbcType="VARCHAR" />
	  	<result column="LAST_USER_ID"		property="lastUserId"		jdbcType="VARCHAR" />
	  	<result column="LAST_UPDATE"		property="lastUpdate"		jdbcType="VARCHAR" />
	  	<result column="ACTIVE_FLAG"		property="activeFlag" 		jdbcType="VARCHAR"/>
	  	<result column="CHANGE_PASS_SW"		property="changePasswordSw" jdbcType="VARCHAR" />
	  	<result column="WORKFLOW_TAG"		property="workflowTag"		jdbcType="VARCHAR" />
	  	<result column="EMAIL_ADDRESS"		property="emailAdd"			jdbcType="VARCHAR" />
	  	<result column="PASSWORD"			property="password"			jdbcType="VARCHAR" />
	  	<result column="LAST_PASSWORD_RESET"				property="lastPasswordReset" />
	  	<result column="DAYS_BEFORE_PASSWORD_EXPIRES"		property="daysBeforePasswordExpires" />
	  	<result column="LAST_LOGIN"			property="lastLogin" />
	  	<result column="TEMP_ACCESS_TAG"	property="tempAccessTag" />
	  	<result column="SALT"				property="salt" />
		<result column="UNCHANGED_PW"		property="unchangedPw" />
		<result column="RESET_PW_DURATION"	property="resetPwDuration" />
		<result column="INVALID_LOGIN_TRIES"	property="invalidLoginTries" />
  	</resultMap>
  
  	<resultMap id="UserMap" class="GIISUser">
  		<result column="USER_ID" 			property="userId" 			jdbcType="VARCHAR" />
	  	<result column="USER_GRP"			property="userGrp"			jdbcType="NUMBER" />
	  	<result column="USER_NAME"			property="username"			jdbcType="VARCHAR" />
  	</resultMap>

  	<resultMap id="UserMap2" class="GIISUser" extends="BaseEntity.TableGridResultMap">
  		<result column="USER_ID" 			property="userId" 			jdbcType="VARCHAR" />
	  	<result column="USER_GRP"			property="userGrp"			jdbcType="NUMBER" />
	  	<result column="USER_NAME"			property="username"			jdbcType="VARCHAR" />
  	</resultMap>
  	
  	<resultMap id="PasswordMap" class="GIISUser">
  		<result column="USER_ID" 			property="userId"/>
  		<result column="PASSWORD" 			property="password" />
  	</resultMap>

  	<resultMap id="PasswordAndEmailResultMap" class="GIISUser">
  		<result column="USER_ID" 			property="userId"/>
  		<result column="USER_NAME" 			property="username"/>
  		<result column="PASSWORD" 			property="password" />
  		<result column="EMAIL_ADDRESS" 		property="emailAdd"/>
  	</resultMap>
  	  	
  	<resultMap id="GIISUserListMap" class="GIISUser">
	  	<result column="USER_ID" 			property="userId" 			jdbcType="VARCHAR" />
	  	<result column="USER_GRP"			property="userGrp"			jdbcType="NUMBER" />
	  	<result column="USER_GRP_DESC"		property="userGrpDesc"		jdbcType="NUMBER" />
	  	<result column="USER_NAME"			property="username"			jdbcType="VARCHAR" />
	  	<result column="USER_LEVEL"			property="userLevel"		jdbcType="NUMBER" />
	  	<result column="ACCTG_SW"			property="acctgSw"			jdbcType="VACHAR"/>
	  	<result column="CLAIM_SW"			property="claimSw" 			jdbcType="VARCHAR" />
	  	<result column="DIST_SW"			property="distSw"			jdbcType="VARCHAR" />
	  	<result column="EXP_SW"				property="expSw"			jdbcType="VARCHAR" />
	  	<result column="INQ_SW"				property="inqSw"			jdbcType="VARCHAR" />
	  	<result column="MIS_SW"				property="misSw"			jdbcType="VARCHAR" />
	  	<result column="POL_SW"				property="polSw"			jdbcType="VARCHAR" />
	  	<result column="RMD_SW"				property="rmdSw"			jdbcType="VARCHAR" />
	  	<result column="RI_SW"				property="riSw"				jdbcType="VARCHAR" /> 
	  	<result column="COMM_UPDATE_TAG"	property="commUpdateTag" 	jdbcType="VARCHAR" />
	  	<result column="MGR_SW"				property="mgrSw"			jdbcType="VARCHAR" />
	  	<result column="MKTNG_SW"			property="mktngSw"			jdbcType="VARCHAR"/>
	  	<result column="ALL_USER_SW"		property="allUserSw"   		jdbcType="VARCHAR" />
	  	<result column="REMARKS"			property="remarks"			jdbcType="VARCHAR" />
	  	<result column="LAST_USER_ID"		property="lastUserId"		jdbcType="VARCHAR" />
	  	<result column="LAST_UPDATE"		property="lastUpdate"		jdbcType="VARCHAR" />
	  	<result column="ACTIVE_FLAG"		property="activeFlag" 		jdbcType="VARCHAR"/>
	  	<result column="CHANGE_PASS_SW"		property="changePasswordSw" jdbcType="VARCHAR" />
	  	<result column="WORKFLOW_TAG"		property="workflowTag"		jdbcType="VARCHAR" />
	  	<result column="EMAIL_ADDRESS"		property="emailAdd"			jdbcType="VARCHAR" />
	  	<result column="PASS"				property="password"			jdbcType="VARCHAR" />
	  	<result column="ISS_CD"				property="issCd"			jdbcType="VARCHAR" />
	  	<result column="ISS_NAME"			property="issName"			jdbcType="VARCHAR" />
  	</resultMap>
  	
  	<parameterMap class="map" id="verifyUserMap">
  		<parameter property="appUser"		jdbcType="VARCHAR"	javaType="java.lang.String"		mode="IN" />
		<parameter property="username"		jdbcType="VARCHAR"	javaType="java.lang.String"		mode="IN" />
		<parameter property="password"		jdbcType="VARCHAR"	javaType="java.lang.String"		mode="IN" />
		<parameter property="databaseName"	jdbcType="VARCHAR"	javaType="java.lang.String"		mode="IN" />
		<parameter property="instOverdue"	jdbcType="VARCHAR"	javaType="java.lang.String"		mode="INOUT" />
		<parameter property="overideCalled"	jdbcType="VARCHAR"	javaType="java.lang.String"		mode="OUT" />
		<parameter property="overide"		jdbcType="VARCHAR"	javaType="java.lang.String"		mode="OUT" />
		<parameter property="overideOk"		jdbcType="VARCHAR"	javaType="java.lang.String"		mode="INOUT" />
		<parameter property="overdueOveride" jdbcType="VARCHAR"	javaType="java.lang.String"		mode="OUT" />
		<parameter property="collAmtTag"	jdbcType="VARCHAR"	javaType="java.lang.String"		mode="OUT" />
		<parameter property="msgAlert"		jdbcType="VARCHAR"	javaType="java.lang.String"		mode="OUT" />
	</parameterMap>
	
	<parameterMap class="map" id="checkUserStatMap">
  		<parameter property="functionCd"	jdbcType="VARCHAR"	javaType="java.lang.String"		mode="IN" />
		<parameter property="moduleId"		jdbcType="NUMERIC"	javaType="java.lang.Integer"	mode="IN" />
		<parameter property="userId"		jdbcType="VARCHAR"	javaType="java.lang.String"		mode="IN" />
		<parameter property="allUserSw"		jdbcType="VARCHAR"	javaType="java.lang.String"		mode="OUT" />
		<parameter property="validTag"		jdbcType="VARCHAR"	javaType="java.lang.String"		mode="OUT" />
	</parameterMap>
	
	<procedure id="checkUserStat" parameterMap="checkUserStatMap">
		{ CALL GIIS_USERS_PKG.check_user_stat(?, ?, ?, ?, ?) }
	</procedure>
	
	<parameterMap class="map" id="verifyUserMap2">
		<parameter property="username"		jdbcType="VARCHAR"	javaType="java.lang.String"		mode="IN" />
		<parameter property="password"		jdbcType="VARCHAR"	javaType="java.lang.String"		mode="IN" />
		<parameter property="dbstring"		jdbcType="VARCHAR"	javaType="java.lang.String"		mode="IN" />
		<parameter property="message"		jdbcType="VARCHAR"	javaType="java.lang.String"		mode="OUT" />
	</parameterMap>
	
	<resultMap id="GIISUserUnderwriterResultMap" class="GIISUser" extends="BaseEntity.TableGridResultMap">
  		<result column="USER_ID" 			property="userId" 			jdbcType="VARCHAR" />
	  	<result column="USER_GRP"			property="userGrp"			jdbcType="NUMBER" />
	  	<result column="USER_NAME"			property="username"			jdbcType="VARCHAR" />
  	</resultMap>
  
  	<resultMap class="GIISUser" id="UserEmailMap" extends="GIISUserUnderwriterResultMap">
  		<result column="EMAIL_ADDRESS"		property="emailAdd"			jdbcType="VARCHAR" />
  	</resultMap>
  	
  	<resultMap id="GIISUserProcessorMap" class="java.util.HashMap">
  		<result column="USER_ID" 			property="userId" />			
	  	<result column="USER_NAME"			property="userName"	/>	
  		<result column="rownum_" 			property="rowNum" />
		<result column="count_"				property="rowCount"/>
  	</resultMap>
  	
  	<!-- Mae 10.18.2012 -->
  	<resultMap id="GIISUserListingMap" class="GIISUser">
  		<result column="USER_ID" 			property="userId" 			jdbcType="VARCHAR" />
  		<result column="USER_NAME"			property="username"			jdbcType="VARCHAR" />
  		<result column="rownum_" 			property="rowNum"/>
		<result column="count_"				property="rowCount"/>
  	</resultMap>
  	<!-- Mae 10.18.2012 -->
  	
  	<resultMap id="GIISUserListingLovMap" class="GIISUser">
  		<result column="USER_ID" 			property="userId" 			jdbcType="VARCHAR" />
  		<result column="USER_NAME"			property="username"			jdbcType="VARCHAR" />
  		<result column="USER_GRP"			property="userGrp"			jdbcType="VARCHAR" />
  		<result column="rownum_" 			property="rowNum"/>
		<result column="count_"				property="rowCount"/>
  	</resultMap>
  	
  	<parameterMap class="map"  id="validateUserGIEXS001Map">
		<parameter property="userId" 		jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="lineCd" 		jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="issCd" 			jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="msg" 			jdbcType="VARCHAR" javaType="java.lang.String" mode="OUT"/>
	</parameterMap>
  
  	<select id="getGIISUser" resultMap="GIISUserMap">
  		SELECT 	a.USER_ID,
  				a.USER_GRP,
				b.GRP_ISS_CD,
  				a.USER_NAME,
  				a.USER_LEVEL,
  				a.ACCTG_SW,
  				a.CLAIM_SW,
  				a.DIST_SW,
  				a.EXP_SW,
  				a.INQ_SW,
  				a.MIS_SW,
  				a.POL_SW,
  				a.RMD_SW,
  				a.RI_SW,
  				a.COMM_UPDATE_TAG,
  				a.MGR_SW,
  				a.MKTNG_SW,
  				a.ALL_USER_SW,
  				a.REMARKS,
  				a.LAST_USER_ID,
  				a.LAST_UPDATE,
  				a.ACTIVE_FLAG,
  				a.CHANGE_PASS_SW,
  				a.WORKFLOW_TAG,
  				a.EMAIL_ADDRESS,
  				a.PASSWORD,
  				a.LAST_PASSWORD_RESET,
  				NVL(ROUND(TRUNC(sysdate)-TRUNC(a.LAST_PASSWORD_RESET)), 0) DAYS_BEFORE_PASSWORD_EXPIRES,
  				a.LAST_LOGIN,
  				a.TEMP_ACCESS_TAG,
  				a.claim_Sw,
  				a.salt,
  				a.invalid_login_tries,
  				NVL(a.unchanged_pw, 'N') unchanged_pw,
  				24 * (TO_DATE (TO_CHAR (SYSDATE, 'YYYY-MM-DD hh24:mi'), 'YYYY-MM-DD hh24:mi')
          			- TO_DATE (TO_CHAR (a.last_password_reset, 'YYYY-MM-DD hh24:mi'), 'YYYY-MM-DD hh24:mi')) reset_pw_duration
  		FROM	GIIS_USERS a,
				GIIS_USER_GRP_HDR b
  		WHERE	UPPER(a.USER_ID)=UPPER(#userId#)
		  AND   a.USER_GRP = b.USER_GRP
  	</select>
  
  	<select id="getGiisUserAllList" resultMap="UserMap">
  		SELECT * FROM TABLE(GIIS_USERS_PKG.get_giis_user_all_list)
 	</select>
 	
 	<select id="getUserPassword" parameterClass="java.util.HashMap" resultMap="PasswordMap">
 		SELECT USER_ID, PASSWORD 
 		  FROM GIIS_USERS
 		 WHERE UPPER(USER_ID) = UPPER(#userId#)
 		   AND EMAIL_ADDRESS = #emailAddress#
 		   <!-- TABLE(GIIS_USERS_PKG.get_giis_user_password()); -->
 	</select>

	<!-- benjo 02.01.2016 GENQA-SR-4941 -->
    <select id="forgotPassValidateUser" resultClass="java.lang.String">
		SELECT giis_users_pkg.validate_username(#userId#) FROM DUAL
	</select>
	
 	<select id="getPasswordAndEmail" resultMap="PasswordAndEmailResultMap">
 		SELECT USER_ID, USER_NAME, PASSWORD, EMAIL_ADDRESS
 		  FROM GIIS_USERS
 		 WHERE UPPER(USER_ID) = UPPER(#userId#)
 	</select>
 	
 	<update id="updateActiveFlag" parameterClass="java.util.HashMap">
 		BEGIN
 			giis_users_pkg.app_user := #lastUserId#;
 			 			 		
	 		UPDATE GIIS_USERS
	 		   SET ACTIVE_FLAG = #activeFlag#
	 		 WHERE UPPER(USER_ID) = UPPER(#userId#);
	 	END;
 	</update>
 	
 	<update id="updatePassword" parameterClass="java.util.HashMap">
 		BEGIN
 			giis_users_pkg.app_user := #lastUserId#;
 			
	 		UPDATE GIIS_USERS
	 		   SET PASSWORD = #password#,
	 		   	   SALT = #salt#,
	 		       LAST_PASSWORD_RESET = sysdate,
	 		       UNCHANGED_PW = 'N'
	 		 WHERE UPPER(USER_ID) = UPPER(#userId#);
	 	END;
	</update>
	
	<procedure id="updateLastLogin" parameterClass="java.lang.String">
		BEGIN
			giis_users_pkg.app_user := #userId#;
			
			UPDATE GIIS_USERS
			   SET LAST_LOGIN = sysdate
			 WHERE UPPER(USER_ID) = UPPER(#userId#);
        END;
	</procedure>
  
  	<update id="deactivateInactiveUsers" parameterClass="java.lang.Integer">
  		BEGIN
  			giis_users_pkg.app_user := #lastUserId#;
  			
		  	UPDATE GIIS_USERS
		   	   SET ACTIVE_FLAG = 'N'
		     WHERE ROUND(sysdate-LAST_LOGIN) >= #noOfDays#;
		END;
  	</update>

	<select id="getGiisUsersList" parameterClass="java.util.HashMap" resultMap="GIISUserListMap">
		select * 
		  from table(giis_users_pkg.get_giis_users(#keyword#, 
												   #activeFlag#, 
												   #commUpdateTag#, 
												   #allUserSw#, 
												   #managerSw#,
												   #marketingSw#, 
												   #misSw#,
												   #workflowTag#))
	</select>
	
	<select id="getCommUpdateTag" parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT comm_update_tag
		 FROM giis_users
		 WHERE user_id = NVL(#user#, USER)
	</select>
	
	<delete id="deleteGiisUser" parameterClass="java.lang.String">
		BEGIN
			giis_users_pkg.app_user := #lastUserId#;
			
			GIIS_USERS_PKG.del_giis_users(#userId#);
		END;
	</delete>
	
	<procedure id="saveGIISUser" parameterClass="GIISUser">
		BEGIN
			giis_users_pkg.app_user := #lastUserId#;
			
			GIIS_USERS_PKG.set_giis_users(#userId#,                
    									  #userGrp#,  
    									  #username#,  
									      #userLevel#,  
									      #acctgSw#,  
									      #claimSw#,  
									      #distSw#,  
									      #expSw#,  
									      #inqSw#,  
									      #misSw#,  
									      #polSw#,  
								  	      #rmdSw#,  
									      #riSw#,  
									      #commUpdateTag#,  
									      #mgrSw#,  
									      #mktngSw#,  
									      #allUserSw#,  
									      #remarks#,  
									      #lastUserId#,  
									      #lastUpdate#,  
									      #activeFlag#,  
									      #changePasswordSw#,  
									      #workflowTag#,  
									      #emailAdd#,  
									      #password#,
									      #lastPasswordReset#,  
									      null);
		END;
	</procedure>
	
	<select id="giacValidateUser" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT GIAC_VALIDATE_USER(#userId#, #functionCd#, #moduleId#) FROM DUAL
	</select>
	
	<!-- Tonio Aug 2, 2010 -->
	<select id="checkUserAccess" parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT Check_User_Access(#module#) FROM DUAL
	</select>
	<!-- END Tonio Aug 2, 2010 -->
	
	<select id="getGroupIssCd" resultClass="java.lang.String">
		SELECT GIIS_USERS_PKG.get_grp_iss_cd(#userId#) FROM DUAL
	</select>
	
	<procedure id="userOveride"  parameterMap="verifyUserMap">
		BEGIN
			giis_users_pkg.app_user := ?;
			
			overide_user_func (?, ?, ?, ?, ?, ?, ?, ?, ?, ?);
		END;
	</procedure>
	
	<select id="checkIfUserAllowedForEdit" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT CHECK_IF_USER_ALLOWED_FOR_EDIT(#moduleName#, #userId#) FROM DUAL
	</select>
	
	<procedure id="verifyUser" parameterMap="verifyUserMap2">
		{CALL VERIFY_USER_OVERIDE (?, ?, ?, ?)}
	</procedure>

	<select id="getUserGrp" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		SELECT user_grp FROM giis_users WHERE UPPER(user_id) = UPPER(#userId#)
	</select>
	
	<procedure id="resetPassword" parameterClass="java.util.HashMap">
		BEGIN
			giis_users_pkg.app_user := #lastUserId#;
			
			giis_users_pkg.reset_password(#userId#, #password#, #lastUserId#, #salt#);
		END;
	</procedure>
	
	<select id="getUnderwriterForReassignQuote" resultMap="UserMap" parameterClass="map">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * 
		                  FROM TABLE (GIIS_USERS_PKG.get_underwriters(#keyword#))
		                  <isEqual property="sortColumn" compareValue="userId">
			              		ORDER BY user_id
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="userGrp">
			              		ORDER BY user_grp
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="username">
			              	ORDER BY user_name
			              </isEqual>
			              <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>
		                  ) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE (GIIS_USERS_PKG.get_underwriters(#keyword#))) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>

	<select id="getUnderwriterForReassignQuoteLOV" resultMap="UserMap2" parameterClass="map">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * 
		                  FROM TABLE (GIIS_USERS_PKG.get_underwriters(UPPER(#keyword#)))
		                 WHERE check_user_access2('GIIMM001', user_id) = 1
		                   AND check_user_per_iss_cd2(#lineCd#, #issCd#, 'GIIMM013', user_id) = 1	<!-- shan 08.13.2014 -->
		                   <isNotNull property="notIn"> 	<!-- shan 08.20.2014 -->
		                      AND user_id NOT IN $notIn$
		                   </isNotNull>
		                  <isEqual property="sortColumn" compareValue="userId">
			              		ORDER BY user_id
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="userGrp">
			              		ORDER BY user_grp
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="username">
			              	ORDER BY user_name
			              </isEqual>
			              <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>
		                  ) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE (GIIS_USERS_PKG.get_underwriters(UPPER(#keyword#)))
		                 WHERE check_user_access2('GIIMM001', user_id) = 1
		                   AND check_user_per_iss_cd2(#lineCd#, #issCd#, 'GIIMM013', user_id) = 1	 <!-- shan 08.13.2014 -->
		                   <isNotNull property="notIn"> 	<!-- shan 08.20.2014 -->
		                      AND user_id NOT IN $notIn$
		                   </isNotNull>
		                ) b)
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<select id="checkUserAccess2" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT Check_User_Access2(#module#, #userId#) FROM DUAL
	</select>
	
	<select id="getUserLevel"  resultClass="java.lang.Integer">
		SELECT giis_users_pkg.get_user_level(#userId#) FROM DUAL
	</select>
	
	<select id="getWorkflowUserList" resultMap="UserEmailMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * 
		                  FROM TABLE (GIIS_USERS_PKG.get_workflow_user_list(#eventCd#, #eventType#, #appUser#, #tranId#, #eventModCd#, #eventColCd#, #createSw#))
		                  <isNotNull property="recipient">
		                  	WHERE user_id NOT IN ('$recipient$')
		                  </isNotNull>              
			          	  <isNotNull property="sortColumn">
			              	<isEqual property="ascDescFlg" compareValue="ASC">
			              		ASC
			              	</isEqual>
			              	<isEqual property="ascDescFlg" compareValue="DESC">
			              		DESC
			              	</isEqual>
			              </isNotNull>
		                  ) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE (GIIS_USERS_PKG.get_workflow_user_list(#eventCd#, #eventType#, #appUser#, #tranId#, #eventModCd#, #eventColCd#, #createSw#))
		                  <isNotNull property="recipient">
		                  	WHERE user_id NOT IN ('$recipient$')
		                  </isNotNull>
		                  )b)		                   
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<select id="getUserListLOV" resultMap="GIISUserProcessorMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * FROM TABLE(giis_users_pkg.get_user_by_iss_cd(#lineCd#, #polIssCd#, #moduleId#))              
			          	  <isNotNull property="findText">
		                  WHERE (UPPER(user_id) LIKE UPPER(#findText#) OR UPPER(user_name) LIKE UPPER(#findText#))
		             	  </isNotNull>
			          	  <isNotNull property="sortColumn">
			          	  	  <isEqual property="sortColumn" compareValue="userId">
				              		ORDER BY user_id
				              </isEqual>
			                  <isEqual property="sortColumn" compareValue="userName">
				              		ORDER BY user_name
				              </isEqual>	
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>
		                  ) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE(giis_users_pkg.get_user_by_iss_cd(#lineCd#, #polIssCd#, #moduleId#))
		                  <isNotNull property="findText">
		                  WHERE (UPPER(user_id) LIKE UPPER(#findText#) OR UPPER(user_name) LIKE UPPER(#findText#))
		             	  </isNotNull>
		                  ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<procedure id="validateUserGIEXS001"  parameterMap="validateUserGIEXS001Map">
		CALL giis_users_pkg.validate_user(?, ?, ?, ?)
	</procedure>
	
	<select id="validateIfActiveUser" parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT giis_users_pkg.validate_if_active_user(#userId#) FROM DUAL
	</select>
	
	<select id="checkUserPerLine"  resultClass="java.lang.String">
		SELECT giuts007_pkg.get_line_cd_per_line(#lineCd#,#issCd#,#moduleName#,#userId#) FROM DUAL
	</select>
	
	<select id="checkIssCdExPerUser"  resultClass="java.lang.String">
		SELECT giuts007_pkg.check_isscdex_per_user(#lineCd#,#issCd#,#moduleName#,#userId#) FROM DUAL
	</select>
	
	<resultMap id="UserMapTg" class="GIISUser">
  		<result column="USER_ID" 			property="userId" 			jdbcType="VARCHAR" />
	  	<result column="USER_GRP"			property="userGrp"			jdbcType="NUMBER" />
	  	<result column="USER_NAME"			property="username"			jdbcType="VARCHAR" />
	  	<result column="rownum_" 			property="rowNum" />
		<result column="count_"				property="rowCount"/>
  	</resultMap>
	
	<select id="getGiisUserAllListTGLov" resultMap="UserMapTg" parameterClass="map">
  		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * 
		                  FROM TABLE (GIIS_USERS_PKG.get_giis_user_all_list)
		                  <isNotNull property="findText">
			              		WHERE UPPER(user_id) LIKE UPPER(#findText#)
			              		   OR UPPER(user_name) LIKE UPPER(#findText#)
			              </isNotNull>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="sortColumn" compareValue="userId">
				              		ORDER BY user_id
				              	</isEqual>
				              	<isEqual property="sortColumn" compareValue="username">
				              		ORDER BY user_name
				              	</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>
		                  ) a, 
			               (SELECT count(*) count_ 
			                  FROM TABLE (GIIS_USERS_PKG.get_giis_user_all_list)
			                  <isNotNull property="findText">
				              		WHERE UPPER(user_id) LIKE UPPER(#findText#)
				              		   OR UPPER(user_name) LIKE UPPER(#findText#)
				              </isNotNull>
		                  ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#	
 	</select>
	
	<!-- Mae 10.18.2012 -->
  	<select id="getGiiss207UserLOV" resultMap="GIISUserListingMap" parameterClass="java.util.HashMap">
  		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * 
		                  FROM TABLE (GIISS207_PKG.get_giis_users(#userId#,#userIdFrom#))
		                  <isNull property="findText">
		                  	WHERE user_id LIKE upper(NVL(#search#, user_id))
						   		OR UPPER(user_name) LIKE UPPER(NVL(#search#, user_name))
						  </isNull>
			          	  <isNotNull property="findText">
		                  	WHERE (UPPER(user_id) LIKE UPPER(#findText#) 
		                  	 	OR UPPER(user_name) LIKE UPPER(#findText#))
		             	  </isNotNull>
		                  <isEqual property="sortColumn" compareValue="userId">
			              		ORDER BY user_id
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="username">
			              		ORDER BY user_name
			              </isEqual>
			              <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">	
			              			DESC
			              		</isEqual>
			              </isNotNull>
			            ) a,
		                (SELECT count(*) count_ 
		                   FROM TABLE (GIISS207_PKG.get_giis_users(#userId#,#userIdFrom#))
		                  <isNull property="findText">
		                  	WHERE user_id LIKE upper(NVL(#search#, user_id))
						   		OR UPPER(user_name) LIKE UPPER(NVL(#search#, user_name))
						  </isNull>
			          	  <isNotNull property="findText">
		                  	WHERE (UPPER(user_id) LIKE UPPER(#findText#) 
		                  	 	OR UPPER(user_name) LIKE UPPER(#findText#))
		             	  </isNotNull>                   
		                ) b)
		 WHERE rownum_ BETWEEN #from# AND #to#
  	</select>
  	
  	<select id="getUserListingLOV" resultMap="GIISUserListingMap" parameterClass="java.util.HashMap">
  	    SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * 
		                  FROM TABLE (GIISS207_PKG.get_giis_users(#userId#,#userIdFrom#))
		                  <isNotNull property="findText">
		                  		WHERE 1=1
		                  		<isNotEmpty prepend="AND" property="findText">
		                  			UPPER(user_id) LIKE UPPER(#findText#)<!--  OR
		                  			UPPER(user_name) LIKE UPPER(#findText#) -->
		                  		</isNotEmpty>
		                  </isNotNull>
		                  <isEqual property="sortColumn" compareValue="userId">
			              		ORDER BY user_id
			              </isEqual>
<!-- 			              <isEqual property="sortColumn" compareValue="issName">
			              		ORDER BY user_name
			              </isEqual> -->
			              <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>
			            ) a,
		                (SELECT count(*) count_ 
		                   FROM TABLE (GIISS207_PKG.get_giis_users(#userId#,#userIdFrom#))
		                  <isNotNull property="findText">
		                  		WHERE 1=1
		                  		<isNotEmpty prepend="AND" property="findText">
		                  			UPPER(user_id) LIKE UPPER(#findText#) <!-- OR
		                  			UPPER(user_name) LIKE UPPER(#findText#) -->
		                  		</isNotEmpty>
		                  </isNotNull>		                   
		                ) b )
		 WHERE rownum_ BETWEEN #from# AND #to#
  	</select>
  	
  	<!-- <select id="getAllUserListing" resultMap="GIISUserListingMap" parameterClass="java.util.HashMap">
        SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * 
		                  FROM TABLE (GIISS207_PKG.get_all_giis_users)
		                  <isNotNull property="filter">
		                  		WHERE 1=1
		                  		<isNotEmpty prepend="AND" property="userId">
		                  			UPPER(user_id) LIKE UPPER(#userId#)
		                  		</isNotEmpty>
		                  		<isNotEmpty prepend="AND" property="username">
		                  			UPPER(user_name) LIKE UPPER(#username#)
		                  		</isNotEmpty>
		                  </isNotNull>		                  
		                  <isEqual property="sortColumn" compareValue="userId">
			              		ORDER BY user_id
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="username">
			              		ORDER BY user_name
			              </isEqual>
			              <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>
			            ) a,
		                (SELECT count(*) count_ 
		                   FROM TABLE (GIISS207_PKG.get_all_giis_users)
		                  <isNotNull property="filter">
		                  		WHERE 1=1
		                  		<isNotEmpty prepend="AND" property="userId">
		                  			UPPER(user_id) LIKE UPPER(#userId#)
		                  		</isNotEmpty>
		                  		<isNotEmpty prepend="AND" property="username">
		                  			UPPER(user_name) LIKE UPPER(#username#)
		                  		</isNotEmpty>
		                  </isNotNull>		                   
		                ) b)
		 WHERE rownum_ BETWEEN #from# AND #to#		                
  	</select> -->
  	<!-- Mae 10.18.2012 -->

<!-- Gzelle 08.27.2013 -->
	<resultMap class="java.util.HashMap" id="batchPostingUserLOVResultMap" extends="BaseEntity.TableGridResultMap">
		<result column="user_id"				property="userId" />
		<result column="user_name"			property="userName" />
	</resultMap>

	<select id="getUserForBatchPostingLOV" resultMap="batchPostingUserLOVResultMap" parameterClass="java.util.HashMap">		 
		SELECT *
  		  FROM (SELECT ROWNUM rownum_, b.count_, a.*
  		  		  FROM (SELECT * FROM TABLE(gipis207_pkg.get_user_list_batch_posting)
						<isNull property="findText">
						 WHERE upper(user_id) LIKE upper(NVL(#search#, user_id))
						</isNull>
						<isNotNull property="findText">
						 WHERE upper(user_id) LIKE upper(#findText#)
						    OR upper(user_name) LIKE upper(#findText#)
						</isNotNull>
	            	<isEqual property="sortColumn" compareValue="userId">
              			ORDER BY user_id
	            	</isEqual>
	            	<isEqual property="sortColumn" compareValue="userName">
              			ORDER BY user_name
	            	</isEqual>
	            	<isNotNull property="sortColumn">
              			<isEqual property="ascDescFlg" compareValue="ASC">
              				ASC
              			</isEqual>
              			<isEqual property="ascDescFlg" compareValue="DESC">
              				DESC
              			</isEqual>
              		</isNotNull>) a,
              (SELECT count(*) count_
	          	 FROM TABLE(gipis207_pkg.get_user_list_batch_posting)
				 <isNull property="findText">
				WHERE upper(user_id) LIKE upper(NVL(#search#, user_id))
				 </isNull>
				 <isNotNull property="findText">
				WHERE upper(user_id) LIKE upper(#findText#)
				   OR upper(user_name) LIKE upper(#findText#)
				 </isNotNull>
				)b) 
	    	WHERE rownum_ BETWEEN #from# AND #to# 	
 	</select>
<!--END--> 	
	 	
 	<!-- added by : Kenneth L. 08.23.2013 GIPIS170 -->
	<select id="getGipis170UserLov" resultMap="GIISUserListingMap">		
		SELECT *
  		  FROM (SELECT ROWNUM rownum_, 
	               	   b.count_, 
	              	   a.* 
	          	  FROM (SELECT * FROM TABLE(GIPIS170_PKG.GET_GIPIS170_POSTING_USER_LOV)
	          	 WHERE 1=1
	          	 	<isNull prepend="AND" property="findText">
						upper(user_id) LIKE upper(#search# || '%')
					</isNull>
					<isNotNull prepend="AND" property="findText">
						upper(user_id) LIKE upper(#findText# || '%')
					</isNotNull>
		            <isEqual property="sortColumn" compareValue="userId">
	              		ORDER BY user_id
		            </isEqual>
		            <isEqual property="sortColumn" compareValue="username">
	              		ORDER BY user_name
		            </isEqual>
		            <isNotNull property="sortColumn">
	              		<isEqual property="ascDescFlg" compareValue="ASC">
	              			ASC
	              		</isEqual>
	              		<isEqual property="ascDescFlg" compareValue="DESC">
	              			DESC
	              		</isEqual>
	              	</isNotNull>) a,
               (SELECT count(*) count_
	          	  FROM TABLE(GIPIS170_PKG.GET_GIPIS170_POSTING_USER_LOV)
	          	 WHERE 1=1
	            	<isNull prepend="AND" property="findText">
						upper(user_id) LIKE upper(#search# || '%')
					</isNull>
					<isNotNull prepend="AND" property="findText">
						upper(user_id) LIKE upper(#findText# || '%')
					</isNotNull>)b) 
		 WHERE rownum_ BETWEEN #from# AND #to# 	
 	</select>	

	<!-- added by : Kenneth L. 08.06.2013 :for giexs008 -->
	<select id="getGiexs008UserLov" resultMap="GIISUserListingLovMap" parameterClass="java.util.HashMap">		
		SELECT *
  		  FROM (SELECT ROWNUM rownum_, 
	               	   b.count_, 
	              	   a.* 
	          	  FROM (SELECT * FROM TABLE(giexs008_pkg.get_user_lov(#policyId#,#lineCd#,#issCd#,#statusTag#,#userId#,#toPage#))	<!-- Gzelle 06252015 SR3935 -->
          	   	 <isNull property="findText">
					WHERE user_id LIKE upper(NVL(#search#, user_id)) OR user_name LIKE upper(NVL(#search#, user_name))
				 </isNull>
				 <isNotNull property="findText">
					WHERE user_id LIKE upper(#findText#) OR user_name LIKE upper(#findText#)
				 </isNotNull>
	            <isEqual property="sortColumn" compareValue="userId">
              		ORDER BY user_id
	            </isEqual>
	            <isEqual property="sortColumn" compareValue="username"> <!-- Kenneth L. 05.07.2014  -->
              		ORDER BY user_name
	            </isEqual>
	             <isEqual property="sortColumn" compareValue="userGrp">
              		ORDER BY user_grp
	            </isEqual>
	            <isNotNull property="sortColumn">
              		<isEqual property="ascDescFlg" compareValue="ASC">
              			ASC
              		</isEqual>
              		<isEqual property="ascDescFlg" compareValue="DESC">
              			DESC
              		</isEqual>
              	</isNotNull>) a,
              (SELECT count(*) count_
	          	 FROM TABLE(giexs008_pkg.get_user_lov(#policyId#,#lineCd#,#issCd#,#statusTag#,#userId#,#toPage#))	<!-- Gzelle 06252015 SR3935 -->
	            <isNull property="findText">
					WHERE user_id LIKE upper(NVL(#search#, user_id)) OR user_name LIKE upper(NVL(#search#, user_name))
				</isNull>
				<isNotNull property="findText">
					WHERE user_id LIKE upper(#findText#) OR user_name LIKE upper(#findText#)
				</isNotNull>)b) 
	    	WHERE rownum_ BETWEEN #from# AND #to# 	
 	</select>	
 	
	<update id="savePwHist" parameterClass="java.util.HashMap">
 		BEGIN
	 		giis_users_pkg.save_pw_hist (#userId#, #salt#, #password#);
	 	END;
 	</update>

 	<resultMap id="pwHistResultMap" class="java.util.HashMap">
 		<result column="SALT"		property="salt" />
 		<result column="PASSWORD"	property="password" />
 	</resultMap>

 	<select id="getPwHist" resultMap="pwHistResultMap">
 		SELECT * FROM TABLE (giis_users_pkg.get_pw_hist (#userId#))
 	</select>
 	
 	<update id="updateInvalidLoginTries">
 		UPDATE giis_users
 		   SET invalid_login_tries = #invalidLoginTries#
 		 WHERE user_id = #userId#
 	</update>
</sqlMap>
