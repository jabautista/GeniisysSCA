<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd" >

<sqlMap namespace="GIACDeferred">
	<cacheModel type="MEMORY" id="oneDayClient">
		<flushInterval hours="24" />
		<property name="reference-type" value="WEAK"/>
	</cacheModel>
	
	<resultMap class="java.util.HashMap" id="gdGrossMap" extends="BaseEntity.TableGridResultMap">
		<result property="year" 				column="year"/>
		<result property="mM" 					column="mM"/>
		<result property="procedureDesc" 		column="procedure_desc"/>
		<result property="numeratorFactor" 		column="numerator_factor"/>
		<result property="denominatorFactor" 	column="denominator_factor"/>
		<result property="issCd"	 			column="iss_cd"/>
		<result property="lineCd" 				column="line_cd"/>
		<result property="premAmt" 				column="prem_amt"/>
		<result property="defPremAmt" 			column="def_prem_amt"/>
		<result property="prevDefPremAmt" 		column="prev_def_prem_amt"/>
		<result property="defPremAmtDiff" 		column="def_prem_amt_diff"/>
		<result property="userId" 				column="user_id"/>
		<result property="lastUpdate" 			column="last_update"/>
		<result property="lineName"				column="line_name"/>
		<result property="issName" 				column="iss_name"/>
		<result property="policyNo"				column="policy_no"/>
		<result property="effDate" 				column="eff_date"/>
		<result property="expiryDate" 			column="expiry_date"/>
		<result property="compSw" 				column="comp_sw"/> <!-- mikel 02.26.2016 GENQA 5288 -->
	</resultMap>
	
	<resultMap class="java.util.HashMap" id="gdRiCededMap" extends="BaseEntity.TableGridResultMap">
		<result property="year" 				column="year"/>
		<result property="mM" 					column="mM"/>
		<result property="procedureDesc" 		column="procedure_desc"/>
		<result property="numeratorFactor" 		column="numerator_factor"/>
		<result property="denominatorFactor" 	column="denominator_factor"/>
		<result property="issCd"	 			column="iss_cd"/>
		<result property="lineCd" 				column="line_cd"/>
		<result property="shareType" 			column="share_type"/>
		<result property="distPrem" 			column="dist_prem"/>
		<result property="defDistPrem" 			column="def_dist_prem"/>
		<result property="prevDefDistPrem" 		column="prev_def_dist_prem"/>
		<result property="defDistPremDiff" 		column="def_dist_prem_diff"/>
		<result property="userId" 				column="user_id"/>
		<result property="lastUpdate" 			column="last_update"/>
		<result property="shrType" 				column="shr_type"/>
		<result property="lineName"				column="line_name"/>
		<result property="issName" 				column="iss_name"/>
		<result property="policyNo"				column="policy_no"/>
		<result property="effDate" 				column="eff_date"/>
		<result property="expiryDate" 			column="expiry_date"/>
		<result property="compSw" 				column="comp_sw"/> <!-- mikel 02.26.2016 GENQA 5288 -->
	</resultMap>

	<resultMap class="java.util.HashMap" id="gdIncMap" extends="BaseEntity.TableGridResultMap">
		<result property="year" 				column="year"/>
		<result property="mM" 					column="mM"/>
		<result property="procedureDesc" 		column="procedure_desc"/>
		<result property="numeratorFactor" 		column="numerator_factor"/>
		<result property="denominatorFactor" 	column="denominator_factor"/>
		<result property="issCd"	 			column="iss_cd"/>
		<result property="lineCd" 				column="line_cd"/>
		<result property="shareType" 			column="share_type"/>
		<result property="commIncome" 			column="comm_income"/>
		<result property="defCommIncome" 		column="def_comm_income"/>
		<result property="prevDefCommIncome" 	column="prev_def_comm_income"/>
		<result property="defCommIncomeDiff" 	column="def_comm_income_diff"/>
		<result property="userId" 				column="user_id"/>
		<result property="lastUpdate" 			column="last_update"/>
		<result property="shrType" 				column="shr_type"/>		
		<result property="lineName"				column="line_name"/>
		<result property="issName" 				column="iss_name"/>
		<result property="policyNo"				column="policy_no"/>
		<result property="effDate" 				column="eff_date"/>
		<result property="expiryDate" 			column="expiry_date"/>
		<result property="compSw" 				column="comp_sw"/> <!-- mikel 02.26.2016 GENQA 5288 -->
	</resultMap>

	<resultMap class="java.util.HashMap" id="gdExpMap" extends="BaseEntity.TableGridResultMap">
		<result property="year" 				column="year"/>
		<result property="mM" 					column="mM"/>
		<result property="procedureDesc" 		column="procedure_desc"/>
		<result property="numeratorFactor" 		column="numerator_factor"/>
		<result property="denominatorFactor" 	column="denominator_factor"/>
		<result property="issCd"	 			column="iss_cd"/>
		<result property="lineCd" 				column="line_cd"/>
		<result property="commExpense" 			column="comm_expense"/>
		<result property="defCommExpense" 		column="def_comm_expense"/>
		<result property="prevDefCommExpense" 	column="prev_def_comm_expense"/>
		<result property="defCommExpenseDiff" 	column="def_comm_expense_diff"/>
		<result property="userId" 				column="user_id"/>
		<result property="lastUpdate" 			column="last_update"/>
		<result property="lineName"				column="line_name"/>
		<result property="issName" 				column="iss_name"/>
		<result property="policyNo"				column="policy_no"/>
		<result property="effDate" 				column="eff_date"/>
		<result property="expiryDate" 			column="expiry_date"/>
		<result property="compSw" 				column="comp_sw"/> <!-- mikel 02.26.2016 GENQA 5288 -->
	</resultMap>
	
	<resultMap class="java.util.HashMap" id="gdNetPremMap" extends="BaseEntity.TableGridResultMap">
		<result property="year" 				column="year"/>
		<result property="mM" 					column="mM"/>
		<result property="procedureDesc" 		column="procedure_desc"/>
		<result property="numeratorFactor" 		column="numerator_factor"/>
		<result property="denominatorFactor" 	column="denominator_factor"/>
		<result property="issCd"	 			column="iss_cd"/>
		<result property="lineCd" 				column="line_cd"/>
		<result property="grossPrem" 			column="gross_prem"/>
		<result property="totalRiCeded" 		column="total_ri_ceded"/>
		<result property="netPrem" 				column="net_prem"/>
		<result property="userId" 				column="user_id"/>
		<result property="lastUpdate" 			column="last_update"/>
	</resultMap>	

	<resultMap class="java.util.HashMap" id="extractHistMap" extends="BaseEntity.TableGridResultMap">
		<result property="year" 				column="year"/>
		<result property="mM" 					column="mM"/>
		<result property="userId" 				column="user_id"/>
		<result property="lastExtract" 			column="last_extract"/>
		<result property="procedureDesc" 		column="procedure_desc"/>
		<result property="genUser"				column="gen_user"/>
		<result property="genDate"				column="gen_date"/>
		<result property="genTag"				column="gen_tag"/>
	</resultMap>
	
	<parameterMap class="java.util.HashMap" id="cancelAcctEntriesParameterMap">
		<parameter property="appUser"		jdbcType="VARCHAR"	javaType="java.lang.String" 	mode="IN"/>
		<parameter property="year"			jdbcType="INTEGER"	javaType="java.lang.Integer" 	mode="IN"/>
		<parameter property="mM"			jdbcType="INTEGER" 	javaType="java.lang.Integer" 	mode="IN"/>
		<parameter property="procedureId"	jdbcType="INTEGER" 	javaType="java.lang.Integer"	mode="IN"/>
		<parameter property="message"		jdbcType="VARCHAR"	javaType="java.lang.String"		mode="OUT"/>
	</parameterMap>

	<parameterMap class="java.util.HashMap" id="reversePostedTransMap">
		<parameter property="year"			jdbcType="INTEGER"	javaType="java.lang.Integer" 	mode="IN"/>
		<parameter property="mM"			jdbcType="INTEGER" 	javaType="java.lang.Integer" 	mode="IN"/>
		<parameter property="tranDate"		jdbcType="VARCHAR" 	javaType="java.lang.String"		mode="IN"/>
		<parameter property="userId" 		jdbcType="VARCHAR"	javaType="java.lang.String"		mode="IN"/>
		<parameter property="status"		jdbcType="VARCHAR"	javaType="java.lang.String"		mode="OUT"/>
	</parameterMap>
	
	<parameterMap class="java.util.HashMap" id="genAcctEntriesMap">
		<parameter property="year"			jdbcType="INTEGER"	javaType="java.lang.Integer" 	mode="IN"/>
		<parameter property="mM"			jdbcType="INTEGER" 	javaType="java.lang.Integer" 	mode="IN"/>
		<parameter property="tranDate"		jdbcType="VARCHAR" 	javaType="java.lang.String"		mode="IN"/>
		<parameter property="userId" 		jdbcType="VARCHAR"	javaType="java.lang.String"		mode="IN"/>		
		<parameter property="procedureId"	jdbcType="INTEGER" 	javaType="java.lang.Integer"	mode="IN"/>		
		<parameter property="moduleId" 		jdbcType="VARCHAR" 	javaType="java.lang.String"		mode="IN"/>			
		<parameter property="status"		jdbcType="VARCHAR"	javaType="java.lang.String"		mode="OUT"/>
	</parameterMap>
	
	<parameterMap class="java.util.HashMap" id="setGenTagMap">
		<parameter property="appUser"		jdbcType="VARCHAR"	javaType="java.lang.String" 	mode="IN"/>
		<parameter property="year"			jdbcType="INTEGER"	javaType="java.lang.Integer" 	mode="IN"/>
		<parameter property="mM"			jdbcType="INTEGER" 	javaType="java.lang.Integer" 	mode="IN"/>
		<parameter property="procedureId"	jdbcType="INTEGER" 	javaType="java.lang.Integer"	mode="IN"/>
		<parameter property="userId"		jdbcType="VARCHAR"	javaType="java.lang.String" 	mode="IN"/>
		<parameter property="message"		jdbcType="VARCHAR"	javaType="java.lang.String"		mode="OUT"/>
	</parameterMap>	

	<resultMap class="java.util.HashMap" id="acctEntriesResultMap" extends="BaseEntity.TableGridResultMap">
		<result property="glAcctCode"		column="gl_acct_code"/>
		<result property="slCode"			column="sl_cd"/>
		<result property="debitAmt"			column="debit_amt"/>
		<result property="creditAmt"		column="credit_amt"/>
		<result property="debitAmtTotal" 	column="debit_amt_total"/>
		<result property="creditAmtTotal" 	column="credit_amt_total"/>
		<result property="glAcctName"		column="gl_acct_name"/>
		<result property="slName"			column="sl_name"/>
		<result property="remarks"			column="remarks"/>
		<result property="userId" 			column="user_id"/>
		<result property="lastUpdate" 		column="last_update"/>
		<result property="tranDate"			column="tran_date"/>
		<result property="yearGen" 			column="year_gen"/>
		<result property="mmGen"			column="mm_gen"/>
	</resultMap>
	
	<resultMap class="java.util.HashMap" id="branchListResultMap" extends="BaseEntity.TableGridResultMap">
		<result property="includeTag"		column="include_tag"/>
		<result property="branchCd"			column="branch_cd"/>
		<result property="branchName"		column="branch_name"/>
	</resultMap>

	<select id="checkIss" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT giacs044_pkg.check_iss(#appUser#) FROM DUAL
	</select>
		
	<select id="checkIfDataExists" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT giacs044_pkg.check_data_extracted(#year#, #mM#, #procedureId#) FROM DUAL
	</select>
	
	<select id="checkGenTag" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT giacs044_pkg.check_gen_tag(#year#, #mM#, #procedureId#) FROM DUAL
	</select>
	
	<select id="checkStatus" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT giacs044_pkg.check_status(#year#, #mM#) FROM DUAL
	</select>
	
	<procedure id="setTranFlag" parameterClass="java.util.HashMap">
  		BEGIN
  			giis_users_pkg.app_user := #appUser#;
  			giacs044_pkg.set_tran_flag(#year#,#mM#);
  		END;
  	</procedure>

	<parameterMap class="java.util.HashMap" id="extractMethodMap">
		<parameter property="appUser"		jdbcType="VARCHAR"	javaType="java.lang.String" 	mode="IN"/>
		<parameter property="year"			jdbcType="INTEGER"	javaType="java.lang.Integer" 	mode="IN"/>
		<parameter property="mM"			jdbcType="INTEGER"	javaType="java.lang.Integer"	mode="IN"/>
		<parameter property="procedureId"	jdbcType="INTEGER"	javaType="java.lang.Integer"	mode="IN"/>
		<parameter property="msg"			jdbcType="VARCHAR"	javaType="java.lang.String"		mode="OUT"/>
	</parameterMap>	
  	
  	<procedure id="extractMethod" parameterMap="extractMethodMap">
  		BEGIN
  			giis_users_pkg.app_user := ?;
  			giacs044_pkg.call_deferred_procedures(?,?,?,?);
  		END;
  	</procedure>
  	
	<select id="getGdGross" resultMap="gdGrossMap">
	    SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT *
		                  FROM TABLE(giacs044_pkg.get_gd_gross(#year#, #mM#, #procedureId#, #userId#))
						  <isNotNull property="filter">
		                  	WHERE 1=1
							<isNotEmpty prepend="AND"  property="issCd">
								UPPER(iss_cd) LIKE UPPER(#issCd#)
							</isNotEmpty>
							<isNotEmpty prepend="AND"  property="lineCd">
								UPPER(line_cd) LIKE UPPER(#lineCd#)
							</isNotEmpty>
							<isNotEmpty prepend="AND"  property="premAmt">
								prem_amt = #premAmt#
							</isNotEmpty>
							<isNotEmpty prepend="AND"  property="defPremAmt">
								def_prem_amt = #defPremAmt#
							</isNotEmpty>
							<isNotEmpty prepend="AND"  property="prevDefPremAmt">
								prev_def_prem_amt = #prevDefPremAmt#
							</isNotEmpty>
							<isNotEmpty prepend="AND"  property="defPremAmtDiff">
								def_prev_amt_diff = #defPremAmtDiff#
							</isNotEmpty>
							<isNotEmpty prepend="AND"  property="userId">
								user_id = #userId#
							</isNotEmpty>
							<isNotEmpty prepend="AND"  property="lastUpdate">
								UPPER(last_update) = TO_CHAR(#lastUpdate#, 'MM-DD-YYYY')
							</isNotEmpty>
		                  </isNotNull>
			              <isEqual property="sortColumn" compareValue="issCd">
			              		ORDER BY iss_cd
			              </isEqual>
			          	  <isEqual property="sortColumn" compareValue="lineCd">
			              		ORDER BY line_cd
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="premAmt">
			              		ORDER BY prem_amt
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="defPremAmt">
			              		ORDER BY def_prem_amt
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="prevDefPremAmt">
			              		ORDER BY prev_def_prem_amt
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="defPremAmtDiff">
			              		ORDER BY def_prem_amt_diff
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="userId">
			              		ORDER BY user_id
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="lastUpdate">
			              		ORDER BY last_update
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>		                  
							) a,
						(SELECT count(*) count_ 
							FROM TABLE(giacs044_pkg.get_gd_gross(#year#, #mM#, #procedureId#, #userId#))
						  	<isNotNull property="filter">
		                  	 WHERE 1=1
								<isNotEmpty prepend="AND"  property="issCd">
									UPPER(iss_cd) LIKE UPPER(#issCd#)
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="lineCd">
									UPPER(line_cd) LIKE UPPER(#lineCd#)
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="premAmt">
									prem_amt = #premAmt#
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="defPremAmt">
									def_prem_amt = #defPremAmt#
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="prevDefPremAmt">
									prev_def_prem_amt = #prevDefPremAmt#
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="defPremAmtDiff">
									def_prev_amt_diff = #defPremAmtDiff#
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="userId">
									user_id = #userId#
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="lastUpdate">
									UPPER(last_update) = TO_CHAR(#lastUpdate#, 'MM-DD-YYYY')
								</isNotEmpty>
			                </isNotNull>							
			                ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>	  	

	<select id="getGdRiCeded" resultMap="gdRiCededMap">
	    SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT *
		                  FROM TABLE(giacs044_pkg.get_gd_ri_ceded(#year#, #mM#, #procedureId#, #userId#))
						  <isNotNull property="filter">
		                  	WHERE 1=1
							<isNotEmpty prepend="AND"  property="issCd">
								UPPER(iss_cd) LIKE UPPER(#issCd#)
							</isNotEmpty>
							<isNotEmpty prepend="AND"  property="lineCd">
								UPPER(line_cd) LIKE UPPER(#lineCd#)
							</isNotEmpty>
							<isNotEmpty prepend="AND"  property="shareType">
								UPPER(share_type) LIKE UPPER(#shareType#)
							</isNotEmpty>
							<isNotEmpty prepend="AND"  property="distPrem">
								dist_prem = #distPrem#
							</isNotEmpty>
							<isNotEmpty prepend="AND"  property="defDistPrem">
								def_dist_prem = #defDistPrem#
							</isNotEmpty>
							<isNotEmpty prepend="AND"  property="prevDefDistPrem">
								prev_def_dist_prem = #prevDefDistPrem#
							</isNotEmpty>
							<isNotEmpty prepend="AND"  property="defDistPremDiff">
								def_dist_prem_diff = #defDistPremDiff#
							</isNotEmpty>
							<isNotEmpty prepend="AND"  property="userId">
								user_id = #userId#
							</isNotEmpty>
							<isNotEmpty prepend="AND"  property="lastUpdate">
								UPPER(last_update) = TO_CHAR(#lastUpdate#, 'MM-DD-YYYY')
							</isNotEmpty>
		                  </isNotNull>
			              <isEqual property="sortColumn" compareValue="issCd">
			              		ORDER BY iss_cd
			              </isEqual>
			          	  <isEqual property="sortColumn" compareValue="lineCd">
			              		ORDER BY line_cd
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="shareType">
			              		ORDER BY share_type
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="distPrem">
			              		ORDER BY dist_prem
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="defDistPrem">
			              		ORDER BY def_dist_prem
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="prevDefDistPrem">
			              		ORDER BY prev_def_dist_prem
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="defDistPremDiff">
			              		ORDER BY def_dist_prem_diff
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="userId">
			              		ORDER BY user_id
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="lastUpdate">
			              		ORDER BY last_update
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>		                  
							) a,
						(SELECT count(*) count_ 
							FROM TABLE(giacs044_pkg.get_gd_ri_ceded(#year#, #mM#, #procedureId#, #userId#))
						  	<isNotNull property="filter">
		                  	 WHERE 1=1
								<isNotEmpty prepend="AND"  property="issCd">
									UPPER(iss_cd) LIKE UPPER(#issCd#)
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="lineCd">
									UPPER(line_cd) LIKE UPPER(#lineCd#)
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="shareType">
									UPPER(share_type) LIKE UPPER(#shareType#)
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="distPrem">
									dist_prem = #distPrem#
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="defDistPrem">
									def_dist_prem = #defDistPrem#
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="prevDefDistPrem">
									prev_def_dist_prem = #prevDefDistPrem#
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="defDistPremDiff">
									def_dist_prem_diff = #defDistPremDiff#
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="userId">
									user_id = #userId#
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="lastUpdate">
									UPPER(last_update) = TO_CHAR(#lastUpdate#, 'MM-DD-YYYY')
								</isNotEmpty>
			                </isNotNull>							
			                ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>	  
	
	<select id="getGdInc" resultMap="gdIncMap">
	    SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT *
		                  FROM TABLE(giacs044_pkg.get_gd_inc(#year#, #mM#, #procedureId#, #userId#))
						  <isNotNull property="filter">
		                  	WHERE 1=1
							<isNotEmpty prepend="AND"  property="issCd">
								UPPER(iss_cd) LIKE UPPER(#issCd#)
							</isNotEmpty>
							<isNotEmpty prepend="AND"  property="lineCd">
								UPPER(line_cd) LIKE UPPER(#lineCd#)
							</isNotEmpty>
							<isNotEmpty prepend="AND"  property="shareType">
								UPPER(share_type) LIKE UPPER(#shareType#)
							</isNotEmpty>
							<isNotEmpty prepend="AND"  property="commIncome">
								comm_income = #commIncome#
							</isNotEmpty>
							<isNotEmpty prepend="AND"  property="defCommIncome">
								def_comm_income = #defCommIncome#
							</isNotEmpty>
							<isNotEmpty prepend="AND"  property="prevDefCommIncome">
								prev_def_comm_income = #prevDefCommIncome#
							</isNotEmpty>
							<isNotEmpty prepend="AND"  property="defCommIncomeDiff">
								def_comm_income_diff = #defCommIncomeDiff#
							</isNotEmpty>
							<isNotEmpty prepend="AND"  property="userId">
								user_id = #userId#
							</isNotEmpty>
							<isNotEmpty prepend="AND"  property="lastUpdate">
								UPPER(last_update) = TO_CHAR(#lastUpdate#, 'MM-DD-YYYY')
							</isNotEmpty>
		                  </isNotNull>
			              <isEqual property="sortColumn" compareValue="issCd">
			              		ORDER BY iss_cd
			              </isEqual>
			          	  <isEqual property="sortColumn" compareValue="lineCd">
			              		ORDER BY line_cd
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="shareType">
			              		ORDER BY share_type
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="commIncome">
			              		ORDER BY comm_income
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="defCommIncome">
			              		ORDER BY def_comm_income
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="prevDefCommIncome">
			              		ORDER BY prev_def_comm_income
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="defCommIncomeDiff">
			              		ORDER BY def_comm_income_diff
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="userId">
			              		ORDER BY user_id
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="lastUpdate">
			              		ORDER BY last_update
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>		                  
							) a,
						(SELECT count(*) count_ 
							FROM TABLE(giacs044_pkg.get_gd_inc(#year#, #mM#, #procedureId#, #userId#))
						  	<isNotNull property="filter">
		                  	 WHERE 1=1
								<isNotEmpty prepend="AND"  property="issCd">
									UPPER(iss_cd) LIKE UPPER(#issCd#)
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="lineCd">
									UPPER(line_cd) LIKE UPPER(#lineCd#)
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="shareType">
									UPPER(share_type) LIKE UPPER(#shareType#)
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="commIncome">
									comm_income = #commIncome#
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="defCommIncome">
									def_comm_income = #defCommIncome#
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="prevDefCommIncome">
									prev_def_comm_income = #prevDefCommIncome#
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="defCommIncomeDiff">
									def_comm_income_diff = #defCommIncomeDiff#
								</isNotEmpty>			
								<isNotEmpty prepend="AND"  property="userId">
									user_id = #userId#
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="lastUpdate">
									UPPER(last_update) = TO_CHAR(#lastUpdate#, 'MM-DD-YYYY')
								</isNotEmpty>
			                </isNotNull>							
			                ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>	

	<select id="getGdExp" resultMap="gdExpMap">
	    SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT *
		                  FROM TABLE(giacs044_pkg.get_gd_exp(#year#, #mM#, #procedureId#, #userId#))
						  <isNotNull property="filter">
		                  	WHERE 1=1
							<isNotEmpty prepend="AND"  property="issCd">
								UPPER(iss_cd) LIKE UPPER(#issCd#)
							</isNotEmpty>
							<isNotEmpty prepend="AND"  property="lineCd">
								UPPER(line_cd) LIKE UPPER(#lineCd#)
							</isNotEmpty>
							<isNotEmpty prepend="AND"  property="commExpense">
								comm_expense = #commExpense#
							</isNotEmpty>
							<isNotEmpty prepend="AND"  property="defCommExpense">
								def_comm_expense = #defCommExpense#
							</isNotEmpty>
							<isNotEmpty prepend="AND"  property="prevDefCommExpense">
								prev_def_comm_expense = #prevDefCommExpense#
							</isNotEmpty>
							<isNotEmpty prepend="AND"  property="defCommExpenseDiff">
								def_comm_expense_diff = #defCommExpenseDiff#
							</isNotEmpty>
							<isNotEmpty prepend="AND"  property="userId">
								user_id = #userId#
							</isNotEmpty>
							<isNotEmpty prepend="AND"  property="lastUpdate">
								UPPER(last_update) = TO_CHAR(#lastUpdate#, 'MM-DD-YYYY')
							</isNotEmpty>
		                  </isNotNull>
			              <isEqual property="sortColumn" compareValue="issCd">
			              		ORDER BY iss_cd
			              </isEqual>
			          	  <isEqual property="sortColumn" compareValue="lineCd">
			              		ORDER BY line_cd
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="shareType">
			              		ORDER BY share_type
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="commExpense">
			              		ORDER BY comm_expense
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="defCommExpense">
			              		ORDER BY def_comm_expense
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="prevDefCommExpense">
			              		ORDER BY prev_def_comm_expense
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="defCommExpenseDiff">
			              		ORDER BY def_comm_expense_diff
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="userId">
			              		ORDER BY user_id
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="lastUpdate">
			              		ORDER BY last_update
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>		                  
							) a,
						(SELECT count(*) count_ 
							FROM TABLE(giacs044_pkg.get_gd_exp(#year#, #mM#, #procedureId#, #userId#))
						  	<isNotNull property="filter">
		                  	 WHERE 1=1
								<isNotEmpty prepend="AND"  property="issCd">
									UPPER(iss_cd) LIKE UPPER(#issCd#)
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="lineCd">
									UPPER(line_cd) LIKE UPPER(#lineCd#)
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="commExpense">
									comm_expense = #commExpense#
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="defCommExpense">
									def_comm_expense = #defCommExpense#
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="prevDefCommExpense">
									prev_def_comm_expense = #prevDefCommExpense#
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="defCommExpenseDiff">
									def_comm_expense_diff = #defCommExpenseDiff#
								</isNotEmpty>			
								<isNotEmpty prepend="AND"  property="userId">
									user_id = #userId#
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="lastUpdate">
									UPPER(last_update) = TO_CHAR(#lastUpdate#, 'MM-DD-YYYY')
								</isNotEmpty>
			                </isNotNull>							
			                ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>	

	<select id="getGdNetPrem" resultMap="gdNetPremMap">
	    SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT *
		                  FROM TABLE(giacs044_pkg.get_gd_net_prem(#year#, #mM#, #procedureId#, #userId#))
						  <isNotNull property="filter">
		                  	WHERE 1=1
							<isNotEmpty prepend="AND"  property="issCd">
								UPPER(iss_cd) LIKE UPPER(#issCd#)
							</isNotEmpty>
							<isNotEmpty prepend="AND"  property="lineCd">
								UPPER(line_cd) LIKE UPPER(#lineCd#)
							</isNotEmpty>
							<isNotEmpty prepend="AND"  property="grossPrem">
								gross_prem = #grossPrem#
							</isNotEmpty>
							<isNotEmpty prepend="AND"  property="totalRiCeded">
								total_ri_ceded = #totalRiCeded#
							</isNotEmpty>
							<isNotEmpty prepend="AND"  property="netPrem">
								net_prem = #netPrem#
							</isNotEmpty>
							<isNotEmpty prepend="AND"  property="userId">
								user_id = #userId#
							</isNotEmpty>
							<isNotEmpty prepend="AND"  property="lastUpdate">
								UPPER(last_update) = TO_CHAR(#lastUpdate#, 'MM-DD-YYYY')
							</isNotEmpty>
		                  </isNotNull>
			              <isEqual property="sortColumn" compareValue="issCd">
			              		ORDER BY iss_cd
			              </isEqual>
			          	  <isEqual property="sortColumn" compareValue="lineCd">
			              		ORDER BY line_cd
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="grossPrem">
			              		ORDER BY gross_prem
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="totalRiCeded">
			              		ORDER BY total_ri_ceded
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="netPrem">
			              		ORDER BY net_prem
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="userId">
			              		ORDER BY user_id
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="lastUpdate">
			              		ORDER BY last_update
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>		                  
							) a,
						(SELECT count(*) count_ 
							FROM TABLE(giacs044_pkg.get_gd_net_prem(#year#, #mM#, #procedureId#, #userId#))
						  	<isNotNull property="filter">
		                  	 WHERE 1=1
								<isNotEmpty prepend="AND"  property="issCd">
									UPPER(iss_cd) LIKE UPPER(#issCd#)
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="lineCd">
									UPPER(line_cd) LIKE UPPER(#lineCd#)
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="grossPrem">
									gross_prem = #grossPrem#
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="totalRiCeded">
									total_ri_ceded = #totalRiCeded#
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="netPrem">
									net_prem = #netPrem#
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="userId">
									user_id = #userId#
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="lastUpdate">
									UPPER(last_update) = TO_CHAR(#lastUpdate#, 'MM-DD-YYYY')
								</isNotEmpty>
			                </isNotNull>							
			                ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>

	<select id="getGdRetrocede" resultMap="gdRiCededMap">
	    SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT *
		                  FROM TABLE(giacs044_pkg.get_gd_retrocede(#year#, #mM#, #procedureId#, #userId#))
						  <isNotNull property="filter">
		                  	WHERE 1=1
							<isNotEmpty prepend="AND"  property="issCd">
								UPPER(iss_cd) LIKE UPPER(#issCd#)
							</isNotEmpty>
							<isNotEmpty prepend="AND"  property="lineCd">
								UPPER(line_cd) LIKE UPPER(#lineCd#)
							</isNotEmpty>
							<isNotEmpty prepend="AND"  property="shareType">
								UPPER(share_type) LIKE UPPER(#shareType#)
							</isNotEmpty>
							<isNotEmpty prepend="AND"  property="distPrem">
								dist_prem = #distPrem#
							</isNotEmpty>
							<isNotEmpty prepend="AND"  property="defDistPrem">
								def_dist_prem = #defDistPrem#
							</isNotEmpty>
							<isNotEmpty prepend="AND"  property="prevDefDistPrem">
								prev_def_dist_prem = #prevDefDistPrem#
							</isNotEmpty>
							<isNotEmpty prepend="AND"  property="defDistPremDiff">
								def_dist_prem_diff = #defDistPremDiff#
							</isNotEmpty>
							<isNotEmpty prepend="AND"  property="userId">
								user_id = #userId#
							</isNotEmpty>
							<isNotEmpty prepend="AND"  property="lastUpdate">
								UPPER(last_update) = TO_CHAR(#lastUpdate#, 'MM-DD-YYYY')
							</isNotEmpty>
		                  </isNotNull>
			              <isEqual property="sortColumn" compareValue="issCd">
			              		ORDER BY iss_cd
			              </isEqual>
			          	  <isEqual property="sortColumn" compareValue="lineCd">
			              		ORDER BY line_cd
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="shareType">
			              		ORDER BY share_type
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="distPrem">
			              		ORDER BY dist_prem
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="defDistPrem">
			              		ORDER BY def_dist_prem
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="prevDefDistPrem">
			              		ORDER BY prev_def_dist_prem
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="defDistPremDiff">
			              		ORDER BY def_dist_prem_diff
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="userId">
			              		ORDER BY user_id
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="lastUpdate">
			              		ORDER BY last_update
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>		                  
							) a,
						(SELECT count(*) count_ 
							FROM TABLE(giacs044_pkg.get_gd_retrocede(#year#, #mM#, #procedureId#, #userId#))
						  	<isNotNull property="filter">
		                  	 WHERE 1=1
								<isNotEmpty prepend="AND"  property="issCd">
									UPPER(iss_cd) LIKE UPPER(#issCd#)
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="lineCd">
									UPPER(line_cd) LIKE UPPER(#lineCd#)
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="shareType">
									UPPER(share_type) LIKE UPPER(#shareType#)
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="distPrem">
									dist_prem = #distPrem#
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="defDistPrem">
									def_dist_prem = #defDistPrem#
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="prevDefDistPrem">
									prev_def_dist_prem = #prevDefDistPrem#
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="defDistPremDiff">
									def_dist_prem_diff = #defDistPremDiff#
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="userId">
									user_id = #userId#
								</isNotEmpty>
								<isNotEmpty prepend="AND"  property="lastUpdate">
									UPPER(last_update) = TO_CHAR(#lastUpdate#, 'MM-DD-YYYY')
								</isNotEmpty>
			                </isNotNull>							
			                ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<select id="getExtractHistory" resultMap="extractHistMap">
	    SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT *
		                  FROM TABLE(giacs044_pkg.get_extract_hist(#fundCd#))
			              <isEqual property="sortColumn" compareValue="year">
			              		ORDER BY year
			              </isEqual>
			          	  <isEqual property="sortColumn" compareValue="mM">
			              		ORDER BY mm
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="userId">
			              		ORDER BY user_id
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="lastExtract">
			              		ORDER BY TO_DATE(last_extract,'MM-DD-YYYY')
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="procedureDesc">
			              		ORDER BY procedure_desc
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="genUser">
			              		ORDER BY gen_user
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="genDate">
			              		ORDER BY gen_date
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="genTag">
			              		ORDER BY gen_tag
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>		                  
							) a,
						(SELECT count(*) count_ 
							FROM TABLE(giacs044_pkg.get_extract_hist(#fundCd#))
			                ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<select id="getGdGrossDtl" resultMap="gdGrossMap">
	    SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT *
		                  FROM TABLE(giacs044_pkg.get_gd_gross_dtl(#year#, #mM#, #procedureId#, #issCd#, #lineCd#))
			              <isEqual property="sortColumn" compareValue="mM">
			              		ORDER BY mm
			              </isEqual>
			          	  <isEqual property="sortColumn" compareValue="year">
			              		ORDER BY year
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="policyNo">
			              		ORDER BY policy_no
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="effDate">
			              		ORDER BY eff_date
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="expiryDate">
			              		ORDER BY expiry_date
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="numeratorFactor denominatorFactor">
			              		ORDER BY numerator_factor
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="premAmt">
			              		ORDER BY prem_amt
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="defPremAmt">
			              		ORDER BY def_prem_amt
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>		                  
							) a,
						(SELECT count(*) count_ 
							FROM TABLE(giacs044_pkg.get_gd_gross_dtl(#year#, #mM#, #procedureId#, #issCd#, #lineCd#))
			                ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<select id="getGdRiCededDtl" resultMap="gdRiCededMap">
	    SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT *
		                  FROM TABLE(giacs044_pkg.get_gd_ri_ceded_dtl(#year#, #mM#, #procedureId#, #issCd#, #lineCd#, #shareType#))
			              <isEqual property="sortColumn" compareValue="mM">
			              		ORDER BY mm
			              </isEqual>
			          	  <isEqual property="sortColumn" compareValue="year">
			              		ORDER BY year
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="policyNo">
			              		ORDER BY policy_no
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="effDate">
			              		ORDER BY eff_date
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="expiryDate">
			              		ORDER BY expiry_date
			              </isEqual>			              
			              <isEqual property="sortColumn" compareValue="numeratorFactor denominatorFactor">
			              		ORDER BY numerator_factor
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="shareType">
			              		ORDER BY share_type
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="distPrem">
			              		ORDER BY dist_prem
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="defDistPrem">
			              		ORDER BY def_dist_prem
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>		                  
							) a,
						(SELECT count(*) count_ 
							FROM TABLE(giacs044_pkg.get_gd_ri_ceded_dtl(#year#, #mM#, #procedureId#, #issCd#, #lineCd#, #shareType#))
			                ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>

	<select id="getGdIncDtl" resultMap="gdIncMap">
	    SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT *
		                  FROM TABLE(giacs044_pkg.get_gd_inc_dtl(#year#, #mM#, #procedureId#, #issCd#, #lineCd#, #shareType#))
			              <isEqual property="sortColumn" compareValue="mM">
			              		ORDER BY mm
			              </isEqual>
			          	  <isEqual property="sortColumn" compareValue="year">
			              		ORDER BY year
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="policyNo">
			              		ORDER BY policy_no
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="effDate">
			              		ORDER BY eff_date
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="expiryDate">
			              		ORDER BY expiry_date
			              </isEqual>			              
			              <isEqual property="sortColumn" compareValue="numeratorFactor denominatorFactor">
			              		ORDER BY numerator_factor
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="shareType">
			              		ORDER BY share_type
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="commIncome">
			              		ORDER BY comm_income
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="defCommIncome">
			              		ORDER BY def_comm_income
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>		                  
							) a,
						(SELECT count(*) count_ 
							FROM TABLE(giacs044_pkg.get_gd_inc_dtl(#year#, #mM#, #procedureId#, #issCd#, #lineCd#, #shareType#))
			                ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<select id="getGdExpDtl" resultMap="gdExpMap">
	    SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT *
		                  FROM TABLE(giacs044_pkg.get_gd_exp_dtl(#year#, #mM#, #procedureId#, #issCd#, #lineCd#))
			              <isEqual property="sortColumn" compareValue="mM">
			              		ORDER BY mm
			              </isEqual>
			          	  <isEqual property="sortColumn" compareValue="year">
			              		ORDER BY year
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="policyNo">
			              		ORDER BY policy_no
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="effDate">
			              		ORDER BY eff_date
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="expiryDate">
			              		ORDER BY expiry_date
			              </isEqual>			              
			              <isEqual property="sortColumn" compareValue="numeratorFactor denominatorFactor">
			              		ORDER BY numerator_factor
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="commExpense">
			              		ORDER BY comm_expense
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="defCommExpense">
			              		ORDER BY def_comm_expense
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>		                  
							) a,
						(SELECT count(*) count_ 
							FROM TABLE(giacs044_pkg.get_gd_exp_dtl(#year#, #mM#, #procedureId#, #issCd#, #lineCd#))
			                ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>			
	
	<select id="getGdRetrocedeDtl" resultMap="gdRiCededMap">
	    SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT *
		                  FROM TABLE(giacs044_pkg.get_gd_retrocede_dtl(#year#, #mM#, #procedureId#, #issCd#, #lineCd#, #shareType#))
			              <isEqual property="sortColumn" compareValue="mM">
			              		ORDER BY mm
			              </isEqual>
			          	  <isEqual property="sortColumn" compareValue="year">
			              		ORDER BY year
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="policyNo">
			              		ORDER BY policy_no
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="effDate">
			              		ORDER BY eff_date
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="expiryDate">
			              		ORDER BY expiry_date
			              </isEqual>	
			              <isEqual property="sortColumn" compareValue="numeratorFactor denominatorFactor">
			              		ORDER BY numerator_factor
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="shareType">
			              		ORDER BY share_type
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="distPrem">
			              		ORDER BY dist_prem
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="defDistPrem">
			              		ORDER BY def_dist_prem
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>		                  
							) a,
						(SELECT count(*) count_ 
							FROM TABLE(giacs044_pkg.get_gd_retrocede_dtl(#year#, #mM#, #procedureId#, #issCd#, #lineCd#, #shareType#))
			                ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>

	<select id="checkIfComputed" parameterClass="java.util.HashMap" resultClass="java.lang.String">
  		SELECT giacs044_pkg.check_last_compute(#year#, #mM#, #procedureId#) FROM DUAL
  	</select>
	
  	<procedure id="callComputeProcedures" parameterClass="java.util.HashMap">
  		BEGIN
  			giis_users_pkg.app_user := #appUser#;
  			giacs044_pkg.call_deferred_compute(#year#, #mM#, #procedureId#);
  		END;
  	</procedure>

	<procedure id="computeMethod" parameterClass="java.util.HashMap">
  		BEGIN
  			giis_users_pkg.app_user := #appUser#;
  			giacs044_pkg.compute_amounts(#year#, #mM#, #procedureId#);
  		END;
  	</procedure>
  	
  	<procedure id="cancelAcctEntries" parameterMap="cancelAcctEntriesParameterMap">
  		BEGIN
  			giis_users_pkg.app_user := ?;
  			giacs044_pkg.cancel_acct_entries(?,?,?,?);
  		END;
  	</procedure>
  	
  	<procedure id="reversePostedTrans" parameterMap="reversePostedTransMap">
  		BEGIN
  			giacs044_pkg.reverse_posted_trans(?,?,?,?,?);
  		END;
  	</procedure>
  	
  	<procedure id="genAcctEntriesGross" parameterMap="genAcctEntriesMap">
  		BEGIN
  			giacs044_pkg.gen_acct_entries_gross(?,?,?,?,?,?,?);
  		END;
  	</procedure>  
 
   	<procedure id="genAcctEntriesRiPrem" parameterMap="genAcctEntriesMap">
  		BEGIN
  			giacs044_pkg.gen_acct_entries_ri_prem(?,?,?,?,?,?,?);
  		END;
  	</procedure>   	

  	<procedure id="genAcctEntriesCommInc" parameterMap="genAcctEntriesMap">
  		BEGIN
  			giacs044_pkg.gen_acct_entries_comm_inc(?,?,?,?,?,?,?);
  		END;
  	</procedure>    	
  	
  	<procedure id="genAcctEntriesCommExp" parameterMap="genAcctEntriesMap">
  		BEGIN
  			giacs044_pkg.gen_acct_entries_comm_exp(?,?,?,?,?,?,?);
  		END;
  	</procedure>    
  	
    <procedure id="setGenTag" parameterMap="setGenTagMap">
  		BEGIN
  			giis_users_pkg.app_user := ?;
  			giacs044_pkg.set_gen_tag(?,?,?,?,?);
  		END;
  	</procedure>
  	
  	<select id="getDeferredAcctEntries" resultMap="acctEntriesResultMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * 
		                  FROM TABLE (giacs044_pkg.get_acct_entries(#year#, #mM#, #procedureId#, #table#))
			              <isEqual property="sortColumn" compareValue="glAcctCode">
			              		ORDER BY gl_acct_code
			              </isEqual>
			          	  <isEqual property="sortColumn" compareValue="slCode">
			              		ORDER BY sl_cd
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="debitAmt">
			              		ORDER BY debit_amt
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="creditAmt">
			              		ORDER BY credit_amt
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>
		                  ) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE(giacs044_pkg.get_acct_entries(#year#, #mM#, #procedureId#, #table#))
		                  ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<select id="getDeferredGLSummary" resultMap="acctEntriesResultMap">
		SELECT *
		  FROM (SELECT rownum rownum_, 
		               b.count_, 
		               a.* 
		          FROM (SELECT * 
		                  FROM TABLE (giacs044_pkg.get_gl_summary(#year#, #mM#, #procedureId#, #table#))
			              <isEqual property="sortColumn" compareValue="glAcctCode">
			              		ORDER BY gl_acct_code
			              </isEqual>
			          	  <isEqual property="sortColumn" compareValue="slCode">
			              		ORDER BY sl_cd
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="debitAmt">
			              		ORDER BY debit_amt
			              </isEqual>
			              <isEqual property="sortColumn" compareValue="creditAmt">
			              		ORDER BY credit_amt
			              </isEqual>
			          	  <isNotNull property="sortColumn">
			              		<isEqual property="ascDescFlg" compareValue="ASC">
			              			ASC
			              		</isEqual>
			              		<isEqual property="ascDescFlg" compareValue="DESC">
			              			DESC
			              		</isEqual>
			              </isNotNull>
		                  ) a, 
		               (SELECT count(*) count_ 
		                  FROM TABLE(giacs044_pkg.get_gl_summary(#year#, #mM#, #procedureId#, #table#))
		                  ) b) 
		 WHERE rownum_ BETWEEN #from# AND #to#
	</select>
	
	<select id="getBranchList" resultMap="branchListResultMap">
		SELECT *
		  FROM (SELECT rownum rownum_,
					   b.count_,
					   a.*
				  FROM (SELECT *
				          FROM TABLE(giacs044_pkg.get_branch_list(#year#, #mM#, #userId#))			          
				    	  <isEqual property="sortColumn" compareValue="branchCd">
				    	   		ORDER BY branch_cd
				    	  </isEqual>
				    	  <isEqual property="sortColumn" compareValue="branchName"> 
				    	   		ORDER BY branch_name
				    	  </isEqual>
				    	  <isNotNull property="sortColumn">
				    	  		<isEqual property="ascDescFlg" compareValue="ASC">
				    	  			ASC
				    	  		</isEqual>
				    	  		<isEqual property="ascDescFlg" compareValue="DESC">
				    	  			DESC
				    	  		</isEqual>
				    	  </isNotNull>
				    	) a,
				  (SELECT count(*) count_
				     FROM TABLE(giacs044_pkg.get_branch_list(#year#, #mM#, #userId#))
			      ) b)
	     WHERE rownum_ BETWEEN #from# AND #to# 
	</select>
  	
</sqlMap>